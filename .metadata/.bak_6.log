!SESSION 2023-12-21 09:52:19.460 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=17.0.7
java.vendor=Eclipse Adoptium
BootLoader constants: OS=macosx, ARCH=aarch64, WS=cocoa, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.committers.product -keyring /Users/lallu/.eclipse_keyring
Command-line arguments:  -os macosx -ws cocoa -arch aarch64 -product org.eclipse.epp.package.committers.product -keyring /Users/lallu/.eclipse_keyring

This is a continuation of log file /Users/lallu/eclipse-workspace/.metadata/.bak_5.log
Created Time: 2023-12-21 18:05:01.384

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-12-21 18:05:01.384
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-12-21 18:05:01.384
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-12-21 18:05:01.423
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.features;

import java.io.IOException;
import java.math.BigDecimal;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.locators.LocationLocators;
import com.locators.MenuScreenLocators;

import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.openqa.selenium.remote.DesiredCapabilities;
import com.locators.SignInLocators;

import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.remote.MobileCapabilityType;
import java.util.*;

/**
 * @Class_Name MenuApi
 * @Description Contains code to execute the test scripts for Menu, sub menu &
 *              Item quantity screen.
 * @author Lalith Kishore Ravi
 */

public class CategoryGroups extends BaseClass {

	static CommonMethods commonMethods = new CommonMethods();

	static String storeNamesMenu;

	static String optStringActive;

	static JSONObject optJSONObjectActive;

	static String optStringSubMenuName;

	static String optStringSubMenuIsSoldout;

	static String givenStoreCode = "999";

	static String sizeName;

	static String price;

	static int parseIntActive;

	static MenuScreenLocators menuScreenLocators = new MenuScreenLocators();

	static LocationLocators locationLocators = new LocationLocators();

	static SignInLocators signInLocators = new SignInLocators();

	static HolidayHours holidayHours = new HolidayHours();

	static ArrayList<String> subMenuTrue = new ArrayList<>();

	static ArrayList<String> soldOut = new ArrayList<>();

	static ArrayList<String> priceParam = new ArrayList<>();

	static ArrayList<String> sizeParam = new ArrayList<>();

	static ArrayList<String> subMenuPrice = new ArrayList<>();

	static ArrayList<String> hierarchyTypes = new ArrayList<>();

	static int subMenuTrueSize;

	static int optJSONArraySubMenuItemsLength;

	static String hierarchyType;

	static String hierarchyName;

	static String hierarchyId;

	static String hierarchyType1;

	static String hierarchyName1;

	static String hierarchyId1;

	static String hierarchyType2;

	static String hierarchyName2;

	static String hierarchyId2;

	static String hierarchyType3;

	static String hierarchyName3;

	static String hierarchyId3;

	static String hierarchyType4;

	static String hierarchyName4;

	static String hierarchyId4;

	static String hierarchyType5;

	static String hierarchyName5;

	static String hierarchyId5;

	static String optStringAlcohol;

	static JSONArray optJSONArrayPrices;

	static JSONArray optJSONArrayOptionGroups;

	static JSONArray optJSONArrayPizzaGroups;

	static long optJSONArrayOptionGroupsObjectMax;

	static String optStringWholeGroupName;

	static String optStringLeftGroupName;

	static String optStringRightGroupName;

	static String optStringAllowDoublingPizza;

	/**
	 * @Class_Name MenuApi
	 * @Method_Name menuApi
	 * @Description Contains code to execute the test scripts for Menu, sub menu &
	 *              Item quantity screen
	 * @return void
	 * @author Lalith Kishore Ravi
	 */
	@Test
	public static void menuApi() throws InterruptedException, GeneralSecurityException, IOException {

		DesiredCapabilities cap = new DesiredCapabilities();
		cap.setCapability(MobileCapabilityType.DEVICE_NAME, "Samsung");
		cap.setCapability("platformName", "Android");
		cap.setCapability(MobileCapabilityType.PLATFORM_VERSION, "16");
		cap.setCapability(MobileCapabilityType.UDID, "emulator-5554");
		cap.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
		cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 300);
		cap.setCapability("appPackage", "com.paytronix.nexgenfl");
		cap.setCapability("appActivity", "com.paytronix.nexgenfl.MainActivity");

		driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		BaseClass bc = new BaseClass();
		List<String> positiveSignInDatas = bc.signInPositiveData();
		String positiveEmailId = positiveSignInDatas.get(2);
		String positivePassword = positiveSignInDatas.get(5);

		FlutterFinder find = new FlutterFinder(driver);

		Thread.sleep(10000);

		FlutterElement landingLoginbutton = find.byValueKey(signInLocators.LANDING_LOGIN_BUTTON_VKL);
		commonMethods.checkAndClickTheElement(landingLoginbutton);

		FlutterElement loginScreenEmailTextField = find.byValueKey(signInLocators.LOGINSCREEN_EMAILFIELD_VKL);
		commonMethods.checkAndSendTheValue(loginScreenEmailTextField, positiveEmailId);

		// To enter the Valid password credentials //
		FlutterElement loginScreenPasswordField = find.byValueKey(signInLocators.LOGINSCREEN_PASSWORD_VKL);
		commonMethods.checkAndSendTheValue(loginScreenPasswordField, positivePassword);

		FlutterElement loginButtonEnable = find
				.byValueKey((signInLocators.LOGINSCREEN_LOGINWITHEMAIL_BUTTON_ENABLEDVKL));
		commonMethods.checkAndClickTheElement(loginButtonEnable);

		Thread.sleep(6000);

		find.byValueKey("signin_biometry_bottomsheet_close_button").click();

		find.byValueKey("bottombar_web_order").click();

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Lalith Kishore Ravi").assignDevice(deviceName)
				.assignCategory("Menu, Submenu & Item quantity");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/"
				+ givenStoreCode + "/menu/tier?";
		// Construct the query parameters
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");
		paramsMenu.put("include_combo", "false");
		paramsMenu.put("merchant_id", "60019");
		paramsMenu.put("provider", "px");
		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameters
		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");
		// Retrieving the response body using getBody() method
		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

//		ObjectMapper mapper =  new ObjectMapper();
//		mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
//		mapper.setVisibility(VisibilityChecker.Std.defaultInstance().withFieldVisibility(JsonAutoDetect.Visibility.ANY));
//
//		
//		ModifiersResponseModel readValue = mapper.readValue(responseMenu.body().asString(), ModifiersResponseModel.class);
//		
//		if (readValue != null && readValue.getHierarchy() != null) {
//			List<Content> contents =readValue.getHierarchy().stream()
//	                .filter(group -> "group".equalsIgnoreCase(group.getType()) && group.getContents() != null)
//	                .flatMap(group -> group.getContents().stream())
//	                .collect(Collectors.toList());
//			contents.forEach(t -> System.out.println("Stream "+t.getName()+" "+t.getId()));
//		}
//		
//		List<String> categoryID = new ArrayList<String>();
//		if(readValue.getHierarchy() != null && readValue.getHierarchy().size() > 0) {
//			readValue.getHierarchy().forEach(t -> {if(t.getType() != null && t.getType().equalsIgnoreCase("group")){
//				categoryID.forEach(e -> System.out.println("Stream "+e.getName()+" "+t.getId()));
//			}});
//		}

		JSONArray optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		int menuLength = optJSONArrayMenu.length();

		ExtentTest nextGenMenuScreen001 = test.createNode("nextGenMenuScreen_001");

		if (menuLength != 0) {

			FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

			String menuScreenTitleTextVk = menuScreenTitleVk.getText();

			System.out.println(" Title of the menu screen is : " + menuScreenTitleTextVk);

			nextGenMenuScreen001.info(MarkupHelper
					.createLabel(" Title of the menu screen is : " + menuScreenTitleTextVk, ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" Menu screen is : " + menuScreenTitleTextVk);

			FlutterElement menuScreenStoreNameVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_NAME_VK);

			String menuScreenStoreNameTextVk = menuScreenStoreNameVk.getText();

			System.out.println(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk);

			nextGenMenuScreen001.info(MarkupHelper
					.createLabel(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk, ExtentColor.CYAN));

			FlutterElement menuScreenStoreAddressVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ADDRESS_VK);

			String menuScreenStoreAddressTextVk = menuScreenStoreAddressVk.getText();

			System.out.println(" Store address text in the menu screen is : " + menuScreenStoreAddressTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Store address text in the menu screen is : " + menuScreenStoreAddressTextVk, ExtentColor.CYAN));

			FlutterElement menuScreenStoreZipcodeVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ZIPCODE_VK);

			String menuScreenStoreZipcodeTextVk = menuScreenStoreZipcodeVk.getText();

			System.out.println(" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk, ExtentColor.CYAN));

			FlutterElement storeDetailsButtonVk = find.byValueKey(menuScreenLocators.STORE_DETAILS_BUTTON_VK);

			String storeDetailsButtonTextVk = storeDetailsButtonVk.getText();

			System.out.println(" Details button text is : " + storeDetailsButtonTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(" Details button text is : " + storeDetailsButtonTextVk,
					ExtentColor.CYAN));

			storeDetailsButtonVk.click();

			FlutterElement storeInfoScreenTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);

			String storeInfoScreenTitleTextVk = storeInfoScreenTitleVk.getText();

			boolean storeInfoScreenTitleTextContainsVk = storeInfoScreenTitleTextVk.toLowerCase().contains("store");

			Assert.assertEquals(storeInfoScreenTitleTextContainsVk, true,
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			System.out.println(
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk,
					ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			holidayHours.holidayHours();

			FlutterElement storeInfoScreenBackNavigationVk = find
					.byValueKey(locationLocators.STOREINFO_SCREEN_BACKNAVIGATION_VKL);

			storeInfoScreenBackNavigationVk.click();

			FlutterElement menuScreenTitle1Vk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

			String menuScreenTitle1TextVk = menuScreenTitle1Vk.getText();

			boolean menuScreenTitle1TextContainsVk = menuScreenTitle1TextVk.toLowerCase().contains("menu");

			Assert.assertEquals(menuScreenTitle1TextContainsVk, true,
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			System.out.println(
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk,
					ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			JSONArray hierarchy = jObjectMenu.optJSONArray("hierarchy");

			for (int a = 0; a < hierarchy.length(); a++) {

				JSONObject hierarchyObject = hierarchy.optJSONObject(a);

				hierarchyType = hierarchyObject.optString("type");

				if (hierarchyType.contains("group")) {

					hierarchyName = hierarchyObject.optString("name");

					System.out.println(hierarchyName);

					hierarchyId = hierarchyObject.optString("id");

					System.out.println(hierarchyId);

					find.byValueKey("").click();

					if (!hierarchyObject.optJSONArray("contents").isEmpty()) {

						JSONArray hierarchyContents1 = hierarchyObject.optJSONArray("contents");

						for (int b = 0; b < hierarchyContents1.length(); b++) {

							JSONObject hierarchyObject1 = hierarchyContents1.optJSONObject(b);

							hierarchyType1 = hierarchyObject1.optString("type");

							if (hierarchyType1.contains("group")) {

								hierarchyName1 = hierarchyObject1.optString("name");

								System.out.println(hierarchyName1);

								hierarchyId1 = hierarchyObject1.optString("id");

								System.out.println(hierarchyId1);

								find.byValueKey("").click();

								if (!hierarchyObject1.optJSONArray("contents").isEmpty()) {

									JSONArray hierarchyContents2 = hierarchyObject1.optJSONArray("contents");

									for (int c = 0; c < hierarchyContents2.length(); c++) {

										JSONObject hierarchyObject2 = hierarchyContents2.optJSONObject(c);

										hierarchyType2 = hierarchyObject2.optString("type");

										if (hierarchyType2.contains("group")) {

											hierarchyName2 = hierarchyObject2.optString("name");

											System.out.println(hierarchyName2);

											hierarchyId2 = hierarchyObject2.optString("id");

											System.out.println(hierarchyId2);

											find.byValueKey("").click();

											if (!hierarchyObject2.optJSONArray("contents").isEmpty()) {

												JSONArray hierarchyContents3 = hierarchyObject2
														.optJSONArray("contents");

												for (int d = 0; d < hierarchyContents3.length(); d++) {

													JSONObject hierarchyObject3 = hierarchyContents3.optJSONObject(d);

													hierarchyType3 = hierarchyObject3.optString("type");

													if (hierarchyType3.contains("group")) {

														hierarchyName3 = hierarchyObject3.optString("name");

														System.out.println(hierarchyName3);

														hierarchyId3 = hierarchyObject3.optString("id");

														System.out.println(hierarchyId3);

														find.byValueKey("").click();

														if (!hierarchyObject3.optJSONArray("contents").isEmpty()) {

															JSONArray hierarchyContents4 = hierarchyObject3
																	.optJSONArray("contents");

															for (int e = 0; e < hierarchyContents4.length(); e++) {

																JSONObject hierarchyObject4 = hierarchyContents4
																		.optJSONObject(e);

																hierarchyType4 = hierarchyObject4.optString("type");

																if (hierarchyType4.contains("group")) {

																	hierarchyName4 = hierarchyObject4.optString("name");

																	System.out.println(hierarchyName4);

																	hierarchyId4 = hierarchyObject4.optString("id");

																	System.out.println(hierarchyId4);

																	find.byValueKey("").click();

																	if (!hierarchyObject4.optJSONArray("contents")
																			.isEmpty()) {

																		JSONArray hierarchyContents5 = hierarchyObject4
																				.optJSONArray("contents");

																		for (int f = 0; f < hierarchyContents5
																				.length(); f++) {
																			JSONObject hierarchyObject5 = hierarchyContents5
																					.optJSONObject(f);

																			hierarchyType5 = hierarchyObject5
																					.optString("type");

																			if (hierarchyType5.contains("group")) {

																				hierarchyName5 = hierarchyObject5
																						.optString("name");

																				System.out.println(hierarchyName5);

																				hierarchyId5 = hierarchyObject5
																						.optString("id");

																				System.out.println(hierarchyId5);

																				find.byValueKey("").click();

																			} else if (hierarchyType5
																					.contains("category")) {
																				if (!hierarchyObject5.optString("id")
																						.isEmpty()) {

																					hierarchyId5 = hierarchyObject5
																							.optString("id");

																					System.out.println(hierarchyId5);

																				} else {
																					hierarchyId5 = "";

																					System.out.println(hierarchyId5);
																				}
																			}
																		}
																	} else {
																		System.out.println(
																				" There is no contents to show ");
																	}

																} else if (hierarchyType4.contains("category")) {
																	if (!hierarchyObject4.optString("id").isEmpty()) {

																		hierarchyId4 = hierarchyObject4.optString("id");

																		System.out.println(hierarchyId4);

																	} else {
																		hierarchyId4 = "";

																		System.out.println(hierarchyId4);
																	}

																}
															}

														} else {
															System.out.println(" There is no item to show ");
														}

													} else if (hierarchyType3.contains("category")) {

														if (!hierarchyObject3.optString("id").isEmpty()) {

															hierarchyId3 = hierarchyObject3.optString("id");

															System.out.println(hierarchyId3);

														} else {
															hierarchyId3 = "";

															System.out.println(hierarchyId3);
														}
													}
												}
											} else {
												System.out.println("There is no item to show");
											}

										} else if (hierarchyType2.contains("category")) {

											if (!hierarchyObject2.optString("id").isEmpty()) {

												hierarchyId2 = hierarchyObject2.optString("id");

												System.out.println(hierarchyId2);

											} else {
												hierarchyId2 = "";

												System.out.println(hierarchyId2);
											}

										}
									}

								} else {
									System.out.println(" There is no item to show ");
								}

							} else if (hierarchyType1.contains("category")) {

								if (!hierarchyObject1.optString("id").isEmpty()) {

									hierarchyId1 = hierarchyObject1.optString("id");

									System.out.println(hierarchyId1);

								} else {
									hierarchyId1 = "";

									System.out.println(hierarchyId1);
								}

							}

						}
					} else {
						System.out.println(" There is no item to show ");
					}

				} else if (hierarchyType.contains("category")) {

					if (!hierarchyObject.optString("id").isEmpty()) {

						hierarchyId = hierarchyObject.optString("id");

						System.out.println(hierarchyId);

					} else {
						hierarchyId = "";

						System.out.println(hierarchyId);
					}

				}

				hierarchyTypes.add(hierarchyType1);
				hierarchyTypes.add(hierarchyType2);
				hierarchyTypes.add(hierarchyType3);
				hierarchyTypes.add(hierarchyType4);
				hierarchyTypes.add(hierarchyType5);
			}
			for (int i = 0; i < menuLength; i++) {

				if (menuLength > 0) {

					if (hierarchyTypes.get(i).equalsIgnoreCase("guest")) {

					}

					else if (hierarchyTypes.get(i).equalsIgnoreCase("category")) {

						JSONObject optJSONObjectMenu = optJSONArrayMenu.optJSONObject(i);

						String canOrderMenu = optJSONObjectMenu.optString("can_order");

						if (canOrderMenu == "true") {

							storeNamesMenu = optJSONObjectMenu.optString("name");

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(3000);

							int maxScrollAttempts3 = 5;

							if (menuLength < 4) {

								By targetElementLocator3 = By.xpath(
										"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
												+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
								// Set maximum number of scroll attempts
								// Loop to attempt finding the element and scrolling
								for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
									try {
										// Try to find the element
										WebElement element = driver.findElement(targetElementLocator3);
										if (element.isDisplayed()) {
											// Element found and displayed, perform actions
											System.out.println(
													" successfully found the store in the Menu screen of the index : "
															+ i + " is " + storeNamesMenu);

											break;
										}
									} catch (Exception e) {
										System.out.println(" Store not found in the : " + j1
												+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
												+ maxScrollAttempts3);
									}

								}
							}

							if (menuLength >= 4) {

								if (i == 4) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);
												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 8) {

								if (i == 8) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);
									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 12) {

								if (i == 12) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");

									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 16) {

								if (i == 16) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 20) {

								if (i == 20) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 24) {

								if (i == 24) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 28) {

								if (i == 28) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);
									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 32) {

								if (i == 32) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}

							Thread.sleep(3000);
							// Define your XPath locator for the target element

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(3000);

							FlutterElement menuScreenVk = find.byValueKey("menu_screen_menu_list_" + i);

							String menuScreenTextVk = menuScreenVk.getText();

							if (menuScreenTextVk.length() > 21) {

								String menuScreenTextSubStringVk = menuScreenTextVk.substring(0, 21);

								System.out.println(menuScreenTextSubStringVk);

								System.out.println(storeNamesMenu);

								boolean menuScreenTextSubStringContainsVk = storeNamesMenu
										.contains(menuScreenTextSubStringVk);

								Assert.assertEquals(menuScreenTextSubStringContainsVk, true,
										" Validated that the index : " + i + " name in the API menu & the " + i
												+ " name in the menu are same ");

							} else {

								Assert.assertEquals(storeNamesMenu, menuScreenTextVk, " Validated that the index : " + i
										+ " name in the API menu & the " + i + " name in the menu are same ");

							}

							System.out.println(" Validated that the index : " + i + " name in the API menu & the " + i
									+ " name in the menu are same ");

							nextGenMenuScreen001.info(MarkupHelper.createLabel(" Validated that the index : " + i
									+ " name in the API menu & the " + i + " name in the menu are same ",
									ExtentColor.CYAN));

							menuScreenVk.click();

						}

						else {

							System.out.println(
									" The store name which is listed in API but not listed in the menu screen is : "
											+ storeNamesMenu);
						}

						ExtentTest nextGenSubMenuScreen001 = test.createNode("nextGenSubMenuScreen_001");

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(3000);

						FlutterElement subMenuScreenTitleVk = find
								.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_TITLE_VK);

						String subMenuScreenTitleTextVk = subMenuScreenTitleVk.getText();

						System.out.println(" The title of the sub menu screen " + subMenuScreenTitleTextVk);

						nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
								" The title of the sub menu screen " + subMenuScreenTitleTextVk, ExtentColor.CYAN));

						nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Sub menu screen " + subMenuScreenTitleTextVk);

						if (subMenuScreenTitleTextVk.length() > 22) {

							String subMenuScreenTitleTextSubStringVk = subMenuScreenTitleTextVk.substring(0, 21);

							boolean subMenuScreenTitleTextSubStringContainsVk = storeNamesMenu
									.contains(subMenuScreenTitleTextSubStringVk);

							Assert.assertEquals(subMenuScreenTitleTextSubStringContainsVk, true,
									" Validated that the menu item name & sub menu header is same ");

						}

						else {

							Assert.assertEquals(storeNamesMenu, subMenuScreenTitleTextVk,
									" Validated that the menu item name & sub menu header is same ");
						}

						System.out.println(" Validated that the menu item name & sub menu header is same ");

						nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
								" Validated that the menu item name & sub menu header is same ", ExtentColor.CYAN));

						commonMethods.switchContext("NATIVE_APP");

						Thread.sleep(3000);

						JSONArray optJSONArraySubMenuItems = optJSONObjectMenu.optJSONArray("items");

						int optJSONArraySubMenuItemsLength = optJSONArraySubMenuItems.length();

						System.out.println(" Items length : " + optJSONArraySubMenuItemsLength);

						if (optJSONArraySubMenuItemsLength > 0) {

							subMenuTrue.clear();

							soldOut.clear();

							for (int j = 0; j < optJSONArraySubMenuItemsLength; j++) {

								optJSONObjectActive = optJSONArraySubMenuItems.optJSONObject(j);

								optStringActive = optJSONObjectActive.optString("active");

								parseIntActive = Integer.parseInt(optStringActive);

								optStringSubMenuName = optJSONObjectActive.optString("name");

								optStringAlcohol = optJSONObjectActive.optString("alcohol");

								optStringSubMenuIsSoldout = optJSONObjectActive.optString("is_sold_out");

								if (canOrderMenu == "true" && parseIntActive == 1) {

									soldOut.add(optStringSubMenuIsSoldout);

									subMenuTrue.add(optStringSubMenuName);

									subMenuTrueSize = subMenuTrue.size();

									optJSONArrayPrices = optJSONObjectActive.optJSONArray("prices");

									optJSONArrayOptionGroups = optJSONObjectActive.optJSONArray("option_groups");

									optJSONArrayPizzaGroups = optJSONObjectActive.optJSONArray("pizza_groups");

								}
								if (subMenuTrueSize > 0) {

									for (int n = 0; n < subMenuTrueSize; n++) {

										if (canOrderMenu == "true" && parseIntActive == 1) {

											int maxScrollAttempts3 = 5;

											if (subMenuTrueSize >= 5) {

												if (n == 5) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 10) {

												if (n == 10) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 15) {

												if (n == 15) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 20) {

												if (n == 20) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 25) {

												if (n == 25) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
											if (subMenuTrueSize >= 30) {

												if (n == 30) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
											if (subMenuTrueSize >= 35) {

												if (n == 35) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
										}

										commonMethods.switchContext("FLUTTER");

										Thread.sleep(3000);

										System.out.println(" sub menu true size : " + subMenuTrueSize);

										FlutterElement subMenuScreenItemVk = find
												.byValueKey("sub_menu_item_" + n + "_name");

										String subMenuScreenItemTextVk = subMenuScreenItemVk.getText();

										System.out.println(subMenuScreenItemTextVk);

										Assert.assertEquals(subMenuTrue.get(n), subMenuScreenItemTextVk,
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										System.out.println(
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ",
												ExtentColor.CYAN));

										nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										JSONObject optJSONObjectPrice = optJSONArraySubMenuItems.optJSONObject(n);

										JSONArray subMenuPoints = optJSONObjectPrice.optJSONArray("prices");

										int subMenuPointsLength = subMenuPoints.length();

										System.out.println(" sub menu length of index : " + subMenuPointsLength);

										sizeParam.clear();

										priceParam.clear();

										for (int p = 0; p < subMenuPointsLength; p++) {

											JSONObject subMenuPointsObject = subMenuPoints.optJSONObject(p);

											String sizeName = subMenuPointsObject.optString("name");

											String price = subMenuPointsObject.optString("price");

											sizeParam.add(sizeName);

											priceParam.add(price);

										}

										subMenuPrice.clear();

										for (int k = 0; k < subMenuPointsLength; k++) {

											if (subMenuPointsLength == 0) {

												if (sizeParam.get(k).length() == 0) {

													System.out.println(" The price is null in the index : " + n);

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" The price is null in the index : " + n,
															ExtentColor.CYAN));

												} else {

													System.out.println(" The price is null in the index : " + n);

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" The price is null in the index : " + n,
															ExtentColor.CYAN));
												}
											}

											else {

												FlutterElement subMenuScreenItemSizeVk = find
														.byValueKey("sub_menu_item_" + n + "_size_" + k);

												String subMenuScreenItemSizeTextVk = subMenuScreenItemSizeVk.getText();

												System.out.println(" The item size and price in the index : " + k
														+ " is : " + subMenuScreenItemSizeTextVk);

												nextGenSubMenuScreen001
														.info(MarkupHelper.createLabel(
																" The item size and price in the index : " + k
																		+ " is : " + subMenuScreenItemSizeTextVk,
																ExtentColor.CYAN));

												if (sizeParam.get(k).length() == 0) {

													BigDecimal originalBigDecimal = new BigDecimal(priceParam.get(k));

													// Round the BigDecimal to the specified number of decimal places
													BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
															BigDecimal.ROUND_HALF_UP);

													String priceParamInt = roundedBigDecimal.toString();

													String sizePrize = "" + priceParamInt;

													System.out.println(" size prize : " + sizePrize);

													System.out.println(" item size : " + subMenuScreenItemSizeTextVk);

													boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
															.contains(sizePrize);

													Assert.assertEquals(subMenuScreenItemSizeTextContainsVk, true,
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													System.out
															.println(" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ",
															ExtentColor.CYAN));
												} else {

													BigDecimal originalBigDecimal = new BigDecimal(priceParam.get(k));

													// Round the BigDecimal to the specified number of decimal places
													BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
															BigDecimal.ROUND_HALF_UP);

													String priceParamInt = roundedBigDecimal.toString();

													String sizePrize = sizeParam.get(k) + " - " + priceParamInt;

													System.out.println(" size prize : " + sizePrize);

													System.out.println(" item size : " + subMenuScreenItemSizeTextVk);

													boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
															.contains(sizePrize);

													Assert.assertEquals(subMenuScreenItemSizeTextContainsVk, true,
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													System.out
															.println(" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ",
															ExtentColor.CYAN));
												}

												FlutterElement subMenuScreenItemPriceVk = find
														.byValueKey("sub_menu_item_" + n + "_size_" + k);

												String subMenuScreenItemPriceTextVk = subMenuScreenItemPriceVk
														.getText();

												System.out.println(" The item price in the index : " + n + " is : "
														+ subMenuScreenItemPriceTextVk);

												nextGenSubMenuScreen001
														.info(MarkupHelper.createLabel(
																" The item price in the index : " + n + " is : "
																		+ subMenuScreenItemPriceTextVk,
																ExtentColor.CYAN));

												subMenuPrice.add(subMenuScreenItemPriceTextVk);
											}
										}

										ExtentTest nextGenItemQuantityScreen001 = test
												.createNode("nextGenItemQuantityScreen_001");

										if (soldOut.get(n) == "false") {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

											subMenuScreenItemVk.click();

											if (optStringAlcohol.equalsIgnoreCase("true")) {

												FlutterElement alcoholWarningTitleVk = find
														.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);

												String alcoholWarningTitleTextVk = alcoholWarningTitleVk.getText();

												System.out.println(" The alcohol warning pop-up title is : "
														+ alcoholWarningTitleTextVk);

												nextGenItemQuantityScreen001.info(MarkupHelper
														.createLabel(" The alcohol warning pop-up title is : "
																+ alcoholWarningTitleTextVk, ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver), " Alcohol warning pop-up screenshot ");

												FlutterElement alcoholWarningDescriptionVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);

												String alcoholWarningDescriptionTextVk = alcoholWarningDescriptionVk
														.getText();

												System.out.println(" The alcohol warning pop-up description is : "
														+ alcoholWarningDescriptionTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning pop-up description is : "
																		+ alcoholWarningDescriptionTextVk,
																ExtentColor.CYAN));

												FlutterElement alcoholWarningIUnderstandVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);

												String alcoholWarningIUnderstandTextVk = alcoholWarningIUnderstandVk
														.getText();

												System.out.println(" The alcohol warning pop-up description is : "
														+ alcoholWarningIUnderstandTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning pop-up button text is : "
																		+ alcoholWarningIUnderstandTextVk,
																ExtentColor.CYAN));

												alcoholWarningIUnderstandVk.click();

												FlutterElement alcoholWarningFooterButtonVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_FOOTER_BUTTON_VK);

												String alcoholWarningFooterButtonTextVk = alcoholWarningFooterButtonVk
														.getText();

												System.out.println(" The alcohol warning footer button text is : "
														+ alcoholWarningFooterButtonTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning footer button text is : "
																		+ alcoholWarningFooterButtonTextVk,
																ExtentColor.CYAN));

												alcoholWarningFooterButtonVk.click();

												FlutterElement alcoholWarningTitleVk1 = find
														.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);

												String alcoholWarningTitleTextVk1 = alcoholWarningTitleVk1.getText();

												Assert.assertEquals(alcoholWarningTitleTextVk,
														alcoholWarningTitleTextVk1,
														" Validated that the automatic alcohol pop-up title and the title after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up title in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the title after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up title in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the title after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.",
														ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver),
														" Alcohol warning pop-up screenshot after tapping footer button ");

												FlutterElement alcoholWarningDescription1Vk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);

												String alcoholWarningDescriptionText1Vk = alcoholWarningDescription1Vk
														.getText();

												Assert.assertEquals(alcoholWarningDescriptionTextVk,
														alcoholWarningDescriptionText1Vk,
														" Validated that the automatic alcohol pop-up description and the description after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up description in automatic alcohol pop-up is : "
																+ alcoholWarningDescriptionTextVk
																+ " and the description after tapping the footer button is : "
																+ alcoholWarningDescriptionText1Vk + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up description in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the description after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.",
														ExtentColor.CYAN));

												FlutterElement alcoholWarningIUnderstand1Vk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);

												String alcoholWarningIUnderstandText1Vk = alcoholWarningIUnderstand1Vk
														.getText();

												Assert.assertEquals(alcoholWarningIUnderstandTextVk,
														alcoholWarningIUnderstandText1Vk,
														" Validated that the automatic alcohol pop-up button text and the button text after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up button text in automatic alcohol pop-up is : "
																+ alcoholWarningIUnderstandTextVk
																+ " and the button text after tapping the footer button is : "
																+ alcoholWarningIUnderstandText1Vk + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up button text in automatic alcohol pop-up is : "
																+ alcoholWarningIUnderstandTextVk
																+ " and the button text after tapping the footer button is : "
																+ alcoholWarningIUnderstandText1Vk + " is same.",
														ExtentColor.CYAN));

												alcoholWarningIUnderstand1Vk.click();
											}

											else {

												System.out.println(
														" There is no alcohol warning and there continuing the item quantity selection ");

											}

											FlutterElement itemQuantityScreenTitleVk = find
													.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

											String itemQuantityScreenTitleTextVk = itemQuantityScreenTitleVk.getText();

											System.out.println(" Title of the item quantity screen is : "
													+ itemQuantityScreenTitleTextVk);

											nextGenItemQuantityScreen001.info(
													MarkupHelper.createLabel(" Title of the item quantity screen is : "
															+ itemQuantityScreenTitleTextVk, ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver), " Title of the item quantity screen is : "
															+ itemQuantityScreenTitleTextVk);

											if (subMenuTrue.get(n).length() > 22) {

												String itemQuantityScreenTitleTextSubStringVk = itemQuantityScreenTitleTextVk
														.substring(0, 15);

												Assert.assertEquals(
														subMenuTrue.get(n)
																.contains(itemQuantityScreenTitleTextSubStringVk),
														true,
														" Validated that the sub menu item name & item quantity title screen is same ");
											}

											else {

												Assert.assertEquals(subMenuTrue.get(n), itemQuantityScreenTitleTextVk,
														" Validated that the sub menu item name & item quantity title screen is same ");
											}

											System.out.println(
													" Validated that the sub menu item name & item quantity title screen is same ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the sub menu item name & item quantity title screen is same ",
													ExtentColor.CYAN));

											FlutterElement itemQuantityScreenDescriptionVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_DESCRIPTION_VK);

											String itemQuantityScreenDescriptionTextVk = itemQuantityScreenDescriptionVk
													.getText();

											System.out.println(" Description of the item quantity screen is : "
													+ itemQuantityScreenDescriptionTextVk);

											nextGenItemQuantityScreen001
													.info(MarkupHelper.createLabel(
															" Description of the item quantity screen is : "
																	+ itemQuantityScreenDescriptionTextVk,
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(3000);

											TouchAction touch = new TouchAction(driver);

											touch.press(PointOption.point(700, 2800))
													.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
													.moveTo(PointOption.point(700, 900)).release().perform();

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

//								FlutterElement itemQuantityScreenItemSizeVk = find
//										.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_PRICE_VK);
//
//								String itemQuantityScreenItemSizeTextVk = itemQuantityScreenItemSizeVk.getText();
//
//								if (itemQuantityScreenItemSizeTextVk.length() == 0) {
//
//									System.out.println(
//											" The item price is not displayed as well as not provided from the API ");
//
//								}
//
//								else {
//
//									StringBuilder stringBuilder = new StringBuilder();
//
//									for (String element : subMenuPrice) {
//										stringBuilder.append(element).append(", ");
//									}
//
//									if (stringBuilder.length() > 2) {
//										stringBuilder.setLength(stringBuilder.length() - 2);
//									}
//
//									String itemPrice = stringBuilder.toString();
//
//									System.out.println(itemQuantityScreenItemSizeTextVk);
//
//									System.out.println(itemPrice);
//
//									Assert.assertEquals(itemPrice, itemQuantityScreenItemSizeTextVk,
//											" Validated that the price and size in submenu & item quantity screen are same ");
//
//									System.out.println(
//											" The item quantity size and price in the item quantity screen is : "
//													+ itemQuantityScreenItemSizeTextVk);
//
//									nextGenItemQuantityScreen001.info(MarkupHelper
//											.createLabel(" The item quantity size in the item quantity screen is : "
//													+ itemQuantityScreenItemSizeTextVk, ExtentColor.CYAN));
//
//								}

											FlutterElement itemQuantityScreenItemQuantityCountVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountTextVk = itemQuantityScreenItemQuantityCountVk
													.getText();

											int itemQuantityScreenItemQuantityCountIntVk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountTextVk);

											System.out.println(" The quantity count in the item quantity screen is : "
													+ itemQuantityScreenItemQuantityCountTextVk);

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" The quantity count in the item quantity screen is : "
															+ itemQuantityScreenItemQuantityCountTextVk,
													ExtentColor.CYAN));

											FlutterElement itemQuantityScreenIncrementIconVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_INCREMENT_ICON_VK);

											itemQuantityScreenIncrementIconVk.click();

											Thread.sleep(3000);

											FlutterElement itemQuantityScreenItemQuantityCount1Vk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountText1Vk = itemQuantityScreenItemQuantityCount1Vk
													.getText();

											int itemQuantityScreenItemQuantityCountInt1Vk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountText1Vk);

											Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt1Vk,
													itemQuantityScreenItemQuantityCountIntVk,
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											System.out.println(
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											FlutterElement itemQuantityScreenDecrementIconVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_DECREMENT_ICON_VK);

											itemQuantityScreenDecrementIconVk.click();

											Thread.sleep(3000);

											FlutterElement itemQuantityScreenItemQuantityCount2Vk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountText2Vk = itemQuantityScreenItemQuantityCount2Vk
													.getText();

											int itemQuantityScreenItemQuantityCountInt2Vk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountText2Vk);

											Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt2Vk,
													itemQuantityScreenItemQuantityCountInt1Vk,
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

											System.out.println(
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

//											if (optJSONArrayPrices.length() != 0) {
//
//												FlutterElement optionGroupNameVk = find
//														.byValueKey(subMenuTrue.get(n) + "_size");
//
//												String optionGroupNameTextVk = optionGroupNameVk.getText();
//
//												optionGroupNameVk.click();
//
//												int optJSONArrayPricesLength = optJSONArrayPrices.length();
//
//												for (int d = 0; d < optJSONArrayPricesLength; d++) {
//
//													JSONObject optJSONObjectPricesList = optJSONArrayPrices
//															.optJSONObject(i);
//
//													String optStringSizeName = optJSONObjectPricesList
//															.optString("name");
//
//													String optStringSizePrice = optJSONObjectPricesList
//															.optString("price");
//
//													FlutterElement optStringSizeNameUI = find
//															.byValueKey(subMenuTrue.get(n) + "_" + optionGroupNameTextVk
//																	+ "_" + optStringSizeName);
//
//													String optStringSizeNameTextUI = optStringSizeNameUI.getText();
//
//													Assert.assertEquals(optStringSizeName, optStringSizeNameTextUI,
//															"Validated that the option name from API is : "
//																	+ optStringSizeName
//																	+ " and the option name in UI is : "
//																	+ optStringSizeNameTextUI + " is same ");
//
//													System.out.println("Validated that the option name from API is : "
//															+ optStringSizeName + " and the option name in UI is : "
//															+ optStringSizeNameTextUI + " is same ");
//
//													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
//															"Validated that the option name from API is : "
//																	+ optStringSizeName
//																	+ " and the option name in UI is : "
//																	+ optStringSizeNameTextUI + " is same ",
//															ExtentColor.CYAN));
//
//													nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
//															takeScreenshot(driver), "Optional group name : "
//																	+ optionGroupNameTextVk + " Screenshot ");
//
//													FlutterElement optStringSizePriceUI = find
//															.byValueKey(subMenuTrue.get(n) + "_" + optionGroupNameTextVk
//																	+ "_" + optStringSizeName);
//
//													String optStringSizePriceTextUI = optStringSizePriceUI.getText();
//
//													Assert.assertEquals(optStringSizePrice, optStringSizePriceTextUI,
//															"Validated that the option price from API is : "
//																	+ optStringSizePrice
//																	+ " and the option price in UI is : "
//																	+ optStringSizePriceTextUI + " is same ");
//
//													System.out.println("Validated that the option price from API is : "
//															+ optStringSizePrice + " and the option price in UI is : "
//															+ optStringSizePriceTextUI + " is same ");
//
//													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
//															"Validated that the option price from API is : "
//																	+ optStringSizePrice
//																	+ " and the option price in UI is : "
//																	+ optStringSizePriceTextUI + " is same ",
//															ExtentColor.CYAN));
//
//												}
//											} else {
//
//												System.out.println(
//														" The size is null and moving to the next option group ");
//											}

											if (optJSONArrayPizzaGroups.length() != 0) {

												int optJSONArrayPizzaGroupsLength = optJSONArrayPizzaGroups.length();

												for (int g = 0; g < optJSONArrayPizzaGroupsLength; g++) {

													JSONObject optJSONObjectPizzaGroup = optJSONArrayPizzaGroups
															.optJSONObject(n);

													optStringWholeGroupName = optJSONObjectPizzaGroup
															.optString("whole_group_name");

													optStringLeftGroupName = optJSONObjectPizzaGroup
															.optString("left_group_name");

													optStringRightGroupName = optJSONObjectPizzaGroup
															.optString("right_group_name");

													optStringAllowDoublingPizza = optJSONObjectPizzaGroup
															.optString("allow_doubling");

												}

												if (optJSONArrayOptionGroups.length() != 0) {

													int optJSONArrayOptionGroupsLength = optJSONArrayOptionGroups
															.length();

													for (int e = 0; e < optJSONArrayOptionGroupsLength; e++) {

														JSONObject optJSONArrayOptionGroupsObject = optJSONArrayOptionGroups
																.optJSONObject(e);

														String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																.optString("name");

														String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																.optString("multiselect");

														long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																.getLong("min");

														String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																.optString("quantities");

														if (optJSONArrayOptionGroupsObject.getLong("max") != 0) {

															optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																	.getLong("max");

														} else {

															optJSONArrayOptionGroupsObjectMax = 0;
														}

														if (optStringWholeGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)) {

															FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																	.byValueKey(subMenuTrue.get(n) + "_"
																			+ );

															String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																	.getText();

															Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																	optJSONArrayOptionGroupsObjectNameTextUI,
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															System.out.println(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ",
																	ExtentColor.CYAN));

															nextGenItemQuantityScreen001
																	.addScreenCaptureFromBase64String(
																			takeScreenshot(driver),
																			"Optional group name : "
																					+ optJSONArrayOptionGroupsObjectNameTextUI
																					+ " Screenshot ");

															optJSONArrayOptionGroupsObjectNameUI.click();

															JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																	.optJSONArray("options");

															if (optJSONArrayOptions.length() != 0) {

																int optJSONArrayOptionsLength = optJSONArrayOptions
																		.length();

																for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																	JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																			.optJSONObject(f);

																	String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																			.optString("name");

																	String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																			.optString("price");

																	String optStringIsDisabled = optJSONArrayOptionsObject
																			.optString("is_disabled");

																	if (optStringIsDisabled.equalsIgnoreCase("false")) {

																		FlutterElement optionGroupObjectNameVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectName);

																		String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																				.getText();

																		Assert.assertEquals(optionGroupObjectNameTextVk,
																				optJSONArrayOptionsObjectName,
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group name from API is : "
																								+ optionGroupObjectNameTextVk
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionsObjectName
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		FlutterElement optionGroupObjectPriceVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectPrice);

																		String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																				.getText();

																		Assert.assertEquals(
																				optionGroupObjectPriceTextVk,
																				optJSONArrayOptionsObjectPrice,
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group price from API is : "
																								+ optionGroupObjectPriceTextVk
																								+ " and the option group price in UI is : "
																								+ optJSONArrayOptionsObjectPrice
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has increment decrement button ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has increment decrement button ",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the optional field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the optional field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has checkbox ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has checkbox ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}

																		else if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection optional field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}
																	} else {

																		System.out.println(" The option : "
																				+ optJSONArrayOptionsObjectName
																				+ "is disabled and won't be displayed");

																	}
																}}}

														} else if (optStringLeftGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)){

															
															
														}
														else if (optStringRightGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)) {

															
															
														} 
														else (optStringWholeGroupName || optStringLeftGroupName || optStringRightGroupName
																!= optJSONArrayOptionGroupsObjectName) {

															FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																	.byValueKey(subMenuTrue.get(n) + "_"
																			+ optJSONArrayOptionGroupsObjectName);

															String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																	.getText();

															Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																	optJSONArrayOptionGroupsObjectNameTextUI,
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															System.out.println(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ",
																	ExtentColor.CYAN));

															nextGenItemQuantityScreen001
																	.addScreenCaptureFromBase64String(
																			takeScreenshot(driver),
																			"Optional group name : "
																					+ optJSONArrayOptionGroupsObjectNameTextUI
																					+ " Screenshot ");

															optJSONArrayOptionGroupsObjectNameUI.click();

															JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																	.optJSONArray("options");

															if (optJSONArrayOptions.length() != 0) {

																int optJSONArrayOptionsLength = optJSONArrayOptions
																		.length();

																for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																	JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																			.optJSONObject(f);

																	String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																			.optString("name");

																	String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																			.optString("price");

																	String optStringIsDisabled = optJSONArrayOptionsObject
																			.optString("is_disabled");

																	if (optStringIsDisabled.equalsIgnoreCase("false")) {

																		FlutterElement optionGroupObjectNameVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectName);

																		String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																				.getText();

																		Assert.assertEquals(optionGroupObjectNameTextVk,
																				optJSONArrayOptionsObjectName,
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group name from API is : "
																								+ optionGroupObjectNameTextVk
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionsObjectName
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		FlutterElement optionGroupObjectPriceVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectPrice);

																		String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																				.getText();

																		Assert.assertEquals(
																				optionGroupObjectPriceTextVk,
																				optJSONArrayOptionsObjectPrice,
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group price from API is : "
																								+ optionGroupObjectPriceTextVk
																								+ " and the option group price in UI is : "
																								+ optJSONArrayOptionsObjectPrice
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has increment decrement button ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has increment decrement button ",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the optional field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the optional field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has checkbox ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has checkbox ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}

																		else if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection optional field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}
																	} else {

																		System.out.println(" The option : "
																				+ optJSONArrayOptionsObjectName
																				+ "is disabled and won't be displayed");

																	}
																}
															}

														}

													}
												} else {

													System.out.println(" The option groups array is null ");
												}

											}

											else {

												if (optJSONArrayOptionGroups.length() != 0) {

													int optJSONArrayOptionGroupsLength = optJSONArrayOptionGroups
															.length();

													for (int e = 0; e < optJSONArrayOptionGroupsLength; e++) {

														JSONObject optJSONArrayOptionGroupsObject = optJSONArrayOptionGroups
																.optJSONObject(e);

														String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																.optString("name");

														String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																.optString("multiselect");

														long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																.getLong("min");

														String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																.optString("quantities");

														if (optJSONArrayOptionGroupsObject.getLong("max") != 0) {

															optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																	.getLong("max");

														} else {

															optJSONArrayOptionGroupsObjectMax = 0;
														}

														FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																.byValueKey(subMenuTrue.get(n) + "_"
																		+ optJSONArrayOptionGroupsObjectName);

														String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																.getText();

														Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																optJSONArrayOptionGroupsObjectNameTextUI,
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ");

														System.out.println(
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ");

														nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ",
																ExtentColor.CYAN));

														nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
																takeScreenshot(driver),
																"Optional group name : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " Screenshot ");

														optJSONArrayOptionGroupsObjectNameUI.click();

														JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																.optJSONArray("options");

														if (optJSONArrayOptions.length() != 0) {

															int optJSONArrayOptionsLength = optJSONArrayOptions
																	.length();

															for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																		.optJSONObject(f);

																String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																		.optString("name");

																String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																		.optString("price");

																String optStringIsDisabled = optJSONArrayOptionsObject
																		.optString("is_disabled");

																if (optStringIsDisabled.equalsIgnoreCase("false")) {

																	FlutterElement optionGroupObjectNameVk = find
																			.byValueKey(subMenuTrue.get(n) + "_"
																					+ optJSONArrayOptionGroupsObjectName
																					+ "_"
																					+ optJSONArrayOptionsObjectName);

																	String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																			.getText();

																	Assert.assertEquals(optionGroupObjectNameTextVk,
																			optJSONArrayOptionsObjectName,
																			"Validated that the option group name from API is : "
																					+ optionGroupObjectNameTextVk
																					+ " and the option group name in UI is : "
																					+ optJSONArrayOptionsObjectName
																					+ "in the index : " + f
																					+ " is same ");

																	System.out.println(
																			"Validated that the option group name from API is : "
																					+ optionGroupObjectNameTextVk
																					+ " and the option group name in UI is : "
																					+ optJSONArrayOptionsObjectName
																					+ "in the index : " + f
																					+ " is same ");

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					"Validated that the option group name from API is : "
																							+ optionGroupObjectNameTextVk
																							+ " and the option group name in UI is : "
																							+ optJSONArrayOptionsObjectName
																							+ "in the index : " + f
																							+ " is same ",
																					ExtentColor.CYAN));

																	FlutterElement optionGroupObjectPriceVk = find
																			.byValueKey(subMenuTrue.get(n) + "_"
																					+ optJSONArrayOptionGroupsObjectName
																					+ "_"
																					+ optJSONArrayOptionsObjectPrice);

																	String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																			.getText();

																	Assert.assertEquals(optionGroupObjectPriceTextVk,
																			optJSONArrayOptionsObjectPrice,
																			"Validated that the option group price from API is : "
																					+ optionGroupObjectPriceTextVk
																					+ " and the option group price in UI is : "
																					+ optJSONArrayOptionsObjectPrice
																					+ "in the index : " + f
																					+ " is same ");

																	System.out.println(
																			"Validated that the option group price from API is : "
																					+ optionGroupObjectPriceTextVk
																					+ " and the option group price in UI is : "
																					+ optJSONArrayOptionsObjectPrice
																					+ "in the index : " + f
																					+ " is same ");

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					"Validated that the option group price from API is : "
																							+ optionGroupObjectPriceTextVk
																							+ " and the option group price in UI is : "
																							+ optJSONArrayOptionsObjectPrice
																							+ "in the index : " + f
																							+ " is same ",
																					ExtentColor.CYAN));

																	if (optJSONArrayOptionGroupsObjectMin == 0
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																			&& optJSONArrayOptionGroupsObjectMax == 0) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is single selection optional field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field has increment decrement button ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field has increment decrement button ",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the optional field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the optional field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the optional field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the optional field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field has checkbox ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field has checkbox ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	} else if (optJSONArrayOptionGroupsObjectMin == 1
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																			&& optJSONArrayOptionGroupsObjectMax == 0) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is single selection Mandatory field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	}

																	else if (optJSONArrayOptionGroupsObjectMin == 0
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																			&& optJSONArrayOptionGroupsObjectMax == 0
																			|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is multi selection optional field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																			FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton2Vk
																					.click();

																			FlutterElement optionCount3Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText3Vk = optionCount3Vk
																					.getText();

																			long optionCountLong3Vk = Long
																					.parseLong(optionCountText3Vk);

																			System.out.println(
																					" After tapping the increment button twice count is : "
																							+ optionCountLong3Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping the increment button twice count is : "
																									+ optionCountLong3Vk,
																							ExtentColor.CYAN));

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	} else if (optJSONArrayOptionGroupsObjectMin == 1
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																			&& optJSONArrayOptionGroupsObjectMax == 0
																			|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is multi selection mandatory field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																			FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton2Vk
																					.click();

																			FlutterElement optionCount3Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText3Vk = optionCount3Vk
																					.getText();

																			long optionCountLong3Vk = Long
																					.parseLong(optionCountText3Vk);

																			System.out.println(
																					" After tapping the increment button twice count is : "
																							+ optionCountLong3Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping the increment button twice count is : "
																									+ optionCountLong3Vk,
																							ExtentColor.CYAN));

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	}
																} else {

																	System.out.println(" The option : "
																			+ optJSONArrayOptionsObjectName
																			+ "is disabled and won't be displayed");

																}
															}
														}

													}

												} else {
													System.out.println(
															" The Option group is null and moving to the next option group ");
												}

											}

											FlutterElement itemQuantityScreenBackIconVk = find
													.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_BACK_ICON_VK);

											itemQuantityScreenBackIconVk.click();

										} else {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

											FlutterElement subMenuScreenSoldOutVk = find
													.byValueKey("sub_menu_sold_out_item_" + n);

											String subMenuScreenSoldOutTextVk = subMenuScreenSoldOutVk.getText();

											boolean subMenuScreenSoldOutTextContainsVk = subMenuScreenSoldOutTextVk
													.contains(subMenuScreenSoldOutTextVk);

											System.out.println(" The item : " + subMenuTrue.get(n)
													+ " in the sub menu is sold out and showing the text as : "
													+ subMenuScreenSoldOutTextVk
													+ " and won't be processed further and clearing the pop-up ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(" The item : "
													+ subMenuTrue.get(n)
													+ " in the sub menu is sold out and showing the text as : "
													+ subMenuScreenSoldOutTextVk
													+ " and won't be processed further and clearing the pop-up ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" The item : " + subMenuTrue.get(n)
															+ " in the sub menu is sold out and showing the text as : "
															+ subMenuScreenSoldOutTextVk
															+ " and won't be processed further and clearing the pop-up ");

											Assert.assertEquals(subMenuScreenSoldOutTextContainsVk, true,
													" Validated that the item : " + subMenuTrue.get(n)
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk);

											System.out.println(" Validated that the item : " + subMenuTrue.get(n)
													+ " in the index : " + n + " contains the text : "
													+ subMenuScreenSoldOutTextVk);

											nextGenItemQuantityScreen001.info(MarkupHelper
													.createLabel(" Validated that the item : " + subMenuTrue.get(n)
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk, ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the item : " + optStringSubMenuName
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk);

											subMenuScreenItemVk.click();

											FlutterElement subMenuSoldOutPopupTitleVk = find
													.byValueKey(menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_TITLE_VK);

											String subMenuSoldOutPopupTitleTextVk = subMenuSoldOutPopupTitleVk
													.getText();

											System.out.println(" The sold out alert popup title is : "
													+ subMenuSoldOutPopupTitleTextVk);

											nextGenSubMenuScreen001
													.info(MarkupHelper.createLabel(
															" The sold out alert popup title is : "
																	+ subMenuSoldOutPopupTitleTextVk,
															ExtentColor.CYAN));

											FlutterElement subMenuSoldOutPopupDescriptionVk = find.byValueKey(
													menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_DESCRIPTION_VK);

											String subMenuSoldOutPopupDescriptionTextVk = subMenuSoldOutPopupDescriptionVk
													.getText();

											System.out.println(" The sold out alert popup description is : "
													+ subMenuSoldOutPopupDescriptionTextVk);

											boolean subMenuSoldOutPopupDescriptionTextContainsVk = subMenuSoldOutPopupDescriptionTextVk
													.contains("sold out");

											Assert.assertEquals(subMenuSoldOutPopupDescriptionTextContainsVk, true,
													" Validated that the pop-up contains the text sold out");

											System.out.println(" Validated that the pop-up contains the text sold out");

											nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
													" Validated that the pop-up contains the text sold out",
													ExtentColor.CYAN));

											FlutterElement subMenuSoldOutPopupOkayButtonVk = find.byValueKey(
													menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_OKAY_BUTTON_VK);

											subMenuSoldOutPopupOkayButtonVk.click();
										}
									}

//							}

//							else {
//
//								System.out.println(
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j);
//
//								nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j,
//										ExtentColor.CYAN));
//
//								nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j);
//
//							}
								} else {

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(3000);

									System.out.println(" As the sub menu item size is : " + subMenuTrueSize
											+ " There is no list to show and navigating to the menu screen for the next item in the menu ");

									nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
											" As the sub menu item size is : " + subMenuTrueSize
													+ " There is no list to show and navigating to the menu screen for the next item in the menu ",
											ExtentColor.CYAN));

									nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" Sub Menu screen " + storeNamesMenu);

									FlutterElement subMenuScreenBackIconVk = find
											.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);

									subMenuScreenBackIconVk.click();

								}

								commonMethods.switchContext("FLUTTER");

								Thread.sleep(3000);

								FlutterElement subMenuScreenBackIconVk = find
										.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);

								subMenuScreenBackIconVk.click();

							}
						} else {

							System.out.println(
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu);

							nextGenMenuScreen001.info(MarkupHelper.createLabel(
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu,
									ExtentColor.CYAN));

							nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu);
						}

					} else {

						System.out.println(" Menu list is empty ");

						nextGenMenuScreen001.info(MarkupHelper.createLabel(" Menu list is empty ", ExtentColor.CYAN));

						nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Menu list is empty ");
					}
				}
			}
		}else

	{

		System.out.println(" Menu screen doesn't have any menus and handling the error pop-up ");

		nextGenMenuScreen001.info(MarkupHelper
				.createLabel(" Menu screen doesn't have any menus and handling the error pop-up ", ExtentColor.CYAN));

		nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver), " Menu list empty screen");

		FlutterElement menuScreenEmptyMenuTitleVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_TITLE_VK);

		String menuScreenEmptyMenuTitleTextVk = menuScreenEmptyMenuTitleVk.getText();

		System.out.println(" Empty menu pop-up title is : " + menuScreenEmptyMenuTitleTextVk);

		nextGenMenuScreen001.info(MarkupHelper
				.createLabel(" Empty menu pop-up title is : " + menuScreenEmptyMenuTitleTextVk, ExtentColor.CYAN));

		FlutterElement menuScreenEmptyMenuDescriptionVk = find
				.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_DESCRIPTION_VK);

		String menuScreenEmptyMenuDescriptionTextVk = menuScreenEmptyMenuDescriptionVk.getText();

		System.out.println(" Empty menu pop-up description is : " + menuScreenEmptyMenuDescriptionTextVk);

		nextGenMenuScreen001.info(MarkupHelper.createLabel(
				" Empty menu pop-up description is : " + menuScreenEmptyMenuDescriptionTextVk, ExtentColor.CYAN));

		FlutterElement menuScreenEmptyMenuOkButtonVk = find
				.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_OK_BUTTON_VK);

		menuScreenEmptyMenuOkButtonVk.click();

		nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver), "After handling error pop-up");

		FlutterElement menuScreenBackIconVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_BACK_ICON_VK);

		menuScreenBackIconVk.click();
	}

}

//	private static void processJsonNode(JsonNode jsonNode) {
//		if (jsonNode.isObject()) {
//			jsonNode.fields().forEachRemaining(entry -> {
//				System.out.println(entry.getKey() + ": " + entry.getValue());
//				processJsonNode(entry.getValue());
//			});
//		} else if (jsonNode.isArray()) {
//			jsonNode.elements().forEachRemaining(CategoryGroups::processJsonNode);
//		} else {
//			System.out.println(jsonNode);
//		}
//	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-12-21 18:05:01.424
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-12-21 18:05:01.424
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-12-21 18:05:02.153
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.features;

import java.io.IOException;
import java.math.BigDecimal;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.locators.LocationLocators;
import com.locators.MenuScreenLocators;

import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.openqa.selenium.remote.DesiredCapabilities;
import com.locators.SignInLocators;

import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.remote.MobileCapabilityType;
import java.util.*;

/**
 * @Class_Name MenuApi
 * @Description Contains code to execute the test scripts for Menu, sub menu &
 *              Item quantity screen.
 * @author Lalith Kishore Ravi
 */

public class CategoryGroups extends BaseClass {

	static CommonMethods commonMethods = new CommonMethods();

	static String storeNamesMenu;

	static String optStringActive;

	static JSONObject optJSONObjectActive;

	static String optStringSubMenuName;

	static String optStringSubMenuIsSoldout;

	static String givenStoreCode = "999";

	static String sizeName;

	static String price;

	static int parseIntActive;

	static MenuScreenLocators menuScreenLocators = new MenuScreenLocators();

	static LocationLocators locationLocators = new LocationLocators();

	static SignInLocators signInLocators = new SignInLocators();

	static HolidayHours holidayHours = new HolidayHours();

	static ArrayList<String> subMenuTrue = new ArrayList<>();

	static ArrayList<String> soldOut = new ArrayList<>();

	static ArrayList<String> priceParam = new ArrayList<>();

	static ArrayList<String> sizeParam = new ArrayList<>();

	static ArrayList<String> subMenuPrice = new ArrayList<>();

	static ArrayList<String> hierarchyTypes = new ArrayList<>();

	static int subMenuTrueSize;

	static int optJSONArraySubMenuItemsLength;

	static String hierarchyType;

	static String hierarchyName;

	static String hierarchyId;

	static String hierarchyType1;

	static String hierarchyName1;

	static String hierarchyId1;

	static String hierarchyType2;

	static String hierarchyName2;

	static String hierarchyId2;

	static String hierarchyType3;

	static String hierarchyName3;

	static String hierarchyId3;

	static String hierarchyType4;

	static String hierarchyName4;

	static String hierarchyId4;

	static String hierarchyType5;

	static String hierarchyName5;

	static String hierarchyId5;

	static String optStringAlcohol;

	static JSONArray optJSONArrayPrices;

	static JSONArray optJSONArrayOptionGroups;

	static JSONArray optJSONArrayPizzaGroups;

	static long optJSONArrayOptionGroupsObjectMax;

	static String optStringWholeGroupName;

	static String optStringLeftGroupName;

	static String optStringRightGroupName;

	static String optStringAllowDoublingPizza;

	/**
	 * @Class_Name MenuApi
	 * @Method_Name menuApi
	 * @Description Contains code to execute the test scripts for Menu, sub menu &
	 *              Item quantity screen
	 * @return void
	 * @author Lalith Kishore Ravi
	 */
	@Test
	public static void menuApi() throws InterruptedException, GeneralSecurityException, IOException {

		DesiredCapabilities cap = new DesiredCapabilities();
		cap.setCapability(MobileCapabilityType.DEVICE_NAME, "Samsung");
		cap.setCapability("platformName", "Android");
		cap.setCapability(MobileCapabilityType.PLATFORM_VERSION, "16");
		cap.setCapability(MobileCapabilityType.UDID, "emulator-5554");
		cap.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
		cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 300);
		cap.setCapability("appPackage", "com.paytronix.nexgenfl");
		cap.setCapability("appActivity", "com.paytronix.nexgenfl.MainActivity");

		driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		BaseClass bc = new BaseClass();
		List<String> positiveSignInDatas = bc.signInPositiveData();
		String positiveEmailId = positiveSignInDatas.get(2);
		String positivePassword = positiveSignInDatas.get(5);

		FlutterFinder find = new FlutterFinder(driver);

		Thread.sleep(10000);

		FlutterElement landingLoginbutton = find.byValueKey(signInLocators.LANDING_LOGIN_BUTTON_VKL);
		commonMethods.checkAndClickTheElement(landingLoginbutton);

		FlutterElement loginScreenEmailTextField = find.byValueKey(signInLocators.LOGINSCREEN_EMAILFIELD_VKL);
		commonMethods.checkAndSendTheValue(loginScreenEmailTextField, positiveEmailId);

		// To enter the Valid password credentials //
		FlutterElement loginScreenPasswordField = find.byValueKey(signInLocators.LOGINSCREEN_PASSWORD_VKL);
		commonMethods.checkAndSendTheValue(loginScreenPasswordField, positivePassword);

		FlutterElement loginButtonEnable = find
				.byValueKey((signInLocators.LOGINSCREEN_LOGINWITHEMAIL_BUTTON_ENABLEDVKL));
		commonMethods.checkAndClickTheElement(loginButtonEnable);

		Thread.sleep(6000);

		find.byValueKey("signin_biometry_bottomsheet_close_button").click();

		find.byValueKey("bottombar_web_order").click();

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Lalith Kishore Ravi").assignDevice(deviceName)
				.assignCategory("Menu, Submenu & Item quantity");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/"
				+ givenStoreCode + "/menu/tier?";
		// Construct the query parameters
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");
		paramsMenu.put("include_combo", "false");
		paramsMenu.put("merchant_id", "60019");
		paramsMenu.put("provider", "px");
		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameters
		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");
		// Retrieving the response body using getBody() method
		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

//		ObjectMapper mapper =  new ObjectMapper();
//		mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
//		mapper.setVisibility(VisibilityChecker.Std.defaultInstance().withFieldVisibility(JsonAutoDetect.Visibility.ANY));
//
//		
//		ModifiersResponseModel readValue = mapper.readValue(responseMenu.body().asString(), ModifiersResponseModel.class);
//		
//		if (readValue != null && readValue.getHierarchy() != null) {
//			List<Content> contents =readValue.getHierarchy().stream()
//	                .filter(group -> "group".equalsIgnoreCase(group.getType()) && group.getContents() != null)
//	                .flatMap(group -> group.getContents().stream())
//	                .collect(Collectors.toList());
//			contents.forEach(t -> System.out.println("Stream "+t.getName()+" "+t.getId()));
//		}
//		
//		List<String> categoryID = new ArrayList<String>();
//		if(readValue.getHierarchy() != null && readValue.getHierarchy().size() > 0) {
//			readValue.getHierarchy().forEach(t -> {if(t.getType() != null && t.getType().equalsIgnoreCase("group")){
//				categoryID.forEach(e -> System.out.println("Stream "+e.getName()+" "+t.getId()));
//			}});
//		}

		JSONArray optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		int menuLength = optJSONArrayMenu.length();

		ExtentTest nextGenMenuScreen001 = test.createNode("nextGenMenuScreen_001");

		if (menuLength != 0) {

			FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

			String menuScreenTitleTextVk = menuScreenTitleVk.getText();

			System.out.println(" Title of the menu screen is : " + menuScreenTitleTextVk);

			nextGenMenuScreen001.info(MarkupHelper
					.createLabel(" Title of the menu screen is : " + menuScreenTitleTextVk, ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" Menu screen is : " + menuScreenTitleTextVk);

			FlutterElement menuScreenStoreNameVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_NAME_VK);

			String menuScreenStoreNameTextVk = menuScreenStoreNameVk.getText();

			System.out.println(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk);

			nextGenMenuScreen001.info(MarkupHelper
					.createLabel(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk, ExtentColor.CYAN));

			FlutterElement menuScreenStoreAddressVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ADDRESS_VK);

			String menuScreenStoreAddressTextVk = menuScreenStoreAddressVk.getText();

			System.out.println(" Store address text in the menu screen is : " + menuScreenStoreAddressTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Store address text in the menu screen is : " + menuScreenStoreAddressTextVk, ExtentColor.CYAN));

			FlutterElement menuScreenStoreZipcodeVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ZIPCODE_VK);

			String menuScreenStoreZipcodeTextVk = menuScreenStoreZipcodeVk.getText();

			System.out.println(" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk, ExtentColor.CYAN));

			FlutterElement storeDetailsButtonVk = find.byValueKey(menuScreenLocators.STORE_DETAILS_BUTTON_VK);

			String storeDetailsButtonTextVk = storeDetailsButtonVk.getText();

			System.out.println(" Details button text is : " + storeDetailsButtonTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(" Details button text is : " + storeDetailsButtonTextVk,
					ExtentColor.CYAN));

			storeDetailsButtonVk.click();

			FlutterElement storeInfoScreenTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);

			String storeInfoScreenTitleTextVk = storeInfoScreenTitleVk.getText();

			boolean storeInfoScreenTitleTextContainsVk = storeInfoScreenTitleTextVk.toLowerCase().contains("store");

			Assert.assertEquals(storeInfoScreenTitleTextContainsVk, true,
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			System.out.println(
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk,
					ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			holidayHours.holidayHours();

			FlutterElement storeInfoScreenBackNavigationVk = find
					.byValueKey(locationLocators.STOREINFO_SCREEN_BACKNAVIGATION_VKL);

			storeInfoScreenBackNavigationVk.click();

			FlutterElement menuScreenTitle1Vk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

			String menuScreenTitle1TextVk = menuScreenTitle1Vk.getText();

			boolean menuScreenTitle1TextContainsVk = menuScreenTitle1TextVk.toLowerCase().contains("menu");

			Assert.assertEquals(menuScreenTitle1TextContainsVk, true,
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			System.out.println(
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk,
					ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			JSONArray hierarchy = jObjectMenu.optJSONArray("hierarchy");

			for (int a = 0; a < hierarchy.length(); a++) {

				JSONObject hierarchyObject = hierarchy.optJSONObject(a);

				hierarchyType = hierarchyObject.optString("type");

				if (hierarchyType.contains("group")) {

					hierarchyName = hierarchyObject.optString("name");

					System.out.println(hierarchyName);

					hierarchyId = hierarchyObject.optString("id");

					System.out.println(hierarchyId);

					find.byValueKey("").click();

					if (!hierarchyObject.optJSONArray("contents").isEmpty()) {

						JSONArray hierarchyContents1 = hierarchyObject.optJSONArray("contents");

						for (int b = 0; b < hierarchyContents1.length(); b++) {

							JSONObject hierarchyObject1 = hierarchyContents1.optJSONObject(b);

							hierarchyType1 = hierarchyObject1.optString("type");

							if (hierarchyType1.contains("group")) {

								hierarchyName1 = hierarchyObject1.optString("name");

								System.out.println(hierarchyName1);

								hierarchyId1 = hierarchyObject1.optString("id");

								System.out.println(hierarchyId1);

								find.byValueKey("").click();

								if (!hierarchyObject1.optJSONArray("contents").isEmpty()) {

									JSONArray hierarchyContents2 = hierarchyObject1.optJSONArray("contents");

									for (int c = 0; c < hierarchyContents2.length(); c++) {

										JSONObject hierarchyObject2 = hierarchyContents2.optJSONObject(c);

										hierarchyType2 = hierarchyObject2.optString("type");

										if (hierarchyType2.contains("group")) {

											hierarchyName2 = hierarchyObject2.optString("name");

											System.out.println(hierarchyName2);

											hierarchyId2 = hierarchyObject2.optString("id");

											System.out.println(hierarchyId2);

											find.byValueKey("").click();

											if (!hierarchyObject2.optJSONArray("contents").isEmpty()) {

												JSONArray hierarchyContents3 = hierarchyObject2
														.optJSONArray("contents");

												for (int d = 0; d < hierarchyContents3.length(); d++) {

													JSONObject hierarchyObject3 = hierarchyContents3.optJSONObject(d);

													hierarchyType3 = hierarchyObject3.optString("type");

													if (hierarchyType3.contains("group")) {

														hierarchyName3 = hierarchyObject3.optString("name");

														System.out.println(hierarchyName3);

														hierarchyId3 = hierarchyObject3.optString("id");

														System.out.println(hierarchyId3);

														find.byValueKey("").click();

														if (!hierarchyObject3.optJSONArray("contents").isEmpty()) {

															JSONArray hierarchyContents4 = hierarchyObject3
																	.optJSONArray("contents");

															for (int e = 0; e < hierarchyContents4.length(); e++) {

																JSONObject hierarchyObject4 = hierarchyContents4
																		.optJSONObject(e);

																hierarchyType4 = hierarchyObject4.optString("type");

																if (hierarchyType4.contains("group")) {

																	hierarchyName4 = hierarchyObject4.optString("name");

																	System.out.println(hierarchyName4);

																	hierarchyId4 = hierarchyObject4.optString("id");

																	System.out.println(hierarchyId4);

																	find.byValueKey("").click();

																	if (!hierarchyObject4.optJSONArray("contents")
																			.isEmpty()) {

																		JSONArray hierarchyContents5 = hierarchyObject4
																				.optJSONArray("contents");

																		for (int f = 0; f < hierarchyContents5
																				.length(); f++) {
																			JSONObject hierarchyObject5 = hierarchyContents5
																					.optJSONObject(f);

																			hierarchyType5 = hierarchyObject5
																					.optString("type");

																			if (hierarchyType5.contains("group")) {

																				hierarchyName5 = hierarchyObject5
																						.optString("name");

																				System.out.println(hierarchyName5);

																				hierarchyId5 = hierarchyObject5
																						.optString("id");

																				System.out.println(hierarchyId5);

																				find.byValueKey("").click();

																			} else if (hierarchyType5
																					.contains("category")) {
																				if (!hierarchyObject5.optString("id")
																						.isEmpty()) {

																					hierarchyId5 = hierarchyObject5
																							.optString("id");

																					System.out.println(hierarchyId5);

																				} else {
																					hierarchyId5 = "";

																					System.out.println(hierarchyId5);
																				}
																			}
																		}
																	} else {
																		System.out.println(
																				" There is no contents to show ");
																	}

																} else if (hierarchyType4.contains("category")) {
																	if (!hierarchyObject4.optString("id").isEmpty()) {

																		hierarchyId4 = hierarchyObject4.optString("id");

																		System.out.println(hierarchyId4);

																	} else {
																		hierarchyId4 = "";

																		System.out.println(hierarchyId4);
																	}

																}
															}

														} else {
															System.out.println(" There is no item to show ");
														}

													} else if (hierarchyType3.contains("category")) {

														if (!hierarchyObject3.optString("id").isEmpty()) {

															hierarchyId3 = hierarchyObject3.optString("id");

															System.out.println(hierarchyId3);

														} else {
															hierarchyId3 = "";

															System.out.println(hierarchyId3);
														}
													}
												}
											} else {
												System.out.println("There is no item to show");
											}

										} else if (hierarchyType2.contains("category")) {

											if (!hierarchyObject2.optString("id").isEmpty()) {

												hierarchyId2 = hierarchyObject2.optString("id");

												System.out.println(hierarchyId2);

											} else {
												hierarchyId2 = "";

												System.out.println(hierarchyId2);
											}

										}
									}

								} else {
									System.out.println(" There is no item to show ");
								}

							} else if (hierarchyType1.contains("category")) {

								if (!hierarchyObject1.optString("id").isEmpty()) {

									hierarchyId1 = hierarchyObject1.optString("id");

									System.out.println(hierarchyId1);

								} else {
									hierarchyId1 = "";

									System.out.println(hierarchyId1);
								}

							}

						}
					} else {
						System.out.println(" There is no item to show ");
					}

				} else if (hierarchyType.contains("category")) {

					if (!hierarchyObject.optString("id").isEmpty()) {

						hierarchyId = hierarchyObject.optString("id");

						System.out.println(hierarchyId);

					} else {
						hierarchyId = "";

						System.out.println(hierarchyId);
					}

				}

				hierarchyTypes.add(hierarchyType1);
				hierarchyTypes.add(hierarchyType2);
				hierarchyTypes.add(hierarchyType3);
				hierarchyTypes.add(hierarchyType4);
				hierarchyTypes.add(hierarchyType5);
			}
			for (int i = 0; i < menuLength; i++) {

				if (menuLength > 0) {

					if (hierarchyTypes.get(i).equalsIgnoreCase("guest")) {

					}

					else if (hierarchyTypes.get(i).equalsIgnoreCase("category")) {

						JSONObject optJSONObjectMenu = optJSONArrayMenu.optJSONObject(i);

						String canOrderMenu = optJSONObjectMenu.optString("can_order");

						if (canOrderMenu == "true") {

							storeNamesMenu = optJSONObjectMenu.optString("name");

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(3000);

							int maxScrollAttempts3 = 5;

							if (menuLength < 4) {

								By targetElementLocator3 = By.xpath(
										"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
												+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
								// Set maximum number of scroll attempts
								// Loop to attempt finding the element and scrolling
								for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
									try {
										// Try to find the element
										WebElement element = driver.findElement(targetElementLocator3);
										if (element.isDisplayed()) {
											// Element found and displayed, perform actions
											System.out.println(
													" successfully found the store in the Menu screen of the index : "
															+ i + " is " + storeNamesMenu);

											break;
										}
									} catch (Exception e) {
										System.out.println(" Store not found in the : " + j1
												+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
												+ maxScrollAttempts3);
									}

								}
							}

							if (menuLength >= 4) {

								if (i == 4) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);
												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 8) {

								if (i == 8) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);
									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 12) {

								if (i == 12) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");

									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 16) {

								if (i == 16) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 20) {

								if (i == 20) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 24) {

								if (i == 24) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 28) {

								if (i == 28) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);
									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 32) {

								if (i == 32) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}

							Thread.sleep(3000);
							// Define your XPath locator for the target element

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(3000);

							FlutterElement menuScreenVk = find.byValueKey("menu_screen_menu_list_" + i);

							String menuScreenTextVk = menuScreenVk.getText();

							if (menuScreenTextVk.length() > 21) {

								String menuScreenTextSubStringVk = menuScreenTextVk.substring(0, 21);

								System.out.println(menuScreenTextSubStringVk);

								System.out.println(storeNamesMenu);

								boolean menuScreenTextSubStringContainsVk = storeNamesMenu
										.contains(menuScreenTextSubStringVk);

								Assert.assertEquals(menuScreenTextSubStringContainsVk, true,
										" Validated that the index : " + i + " name in the API menu & the " + i
												+ " name in the menu are same ");

							} else {

								Assert.assertEquals(storeNamesMenu, menuScreenTextVk, " Validated that the index : " + i
										+ " name in the API menu & the " + i + " name in the menu are same ");

							}

							System.out.println(" Validated that the index : " + i + " name in the API menu & the " + i
									+ " name in the menu are same ");

							nextGenMenuScreen001.info(MarkupHelper.createLabel(" Validated that the index : " + i
									+ " name in the API menu & the " + i + " name in the menu are same ",
									ExtentColor.CYAN));

							menuScreenVk.click();

						}

						else {

							System.out.println(
									" The store name which is listed in API but not listed in the menu screen is : "
											+ storeNamesMenu);
						}

						ExtentTest nextGenSubMenuScreen001 = test.createNode("nextGenSubMenuScreen_001");

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(3000);

						FlutterElement subMenuScreenTitleVk = find
								.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_TITLE_VK);

						String subMenuScreenTitleTextVk = subMenuScreenTitleVk.getText();

						System.out.println(" The title of the sub menu screen " + subMenuScreenTitleTextVk);

						nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
								" The title of the sub menu screen " + subMenuScreenTitleTextVk, ExtentColor.CYAN));

						nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Sub menu screen " + subMenuScreenTitleTextVk);

						if (subMenuScreenTitleTextVk.length() > 22) {

							String subMenuScreenTitleTextSubStringVk = subMenuScreenTitleTextVk.substring(0, 21);

							boolean subMenuScreenTitleTextSubStringContainsVk = storeNamesMenu
									.contains(subMenuScreenTitleTextSubStringVk);

							Assert.assertEquals(subMenuScreenTitleTextSubStringContainsVk, true,
									" Validated that the menu item name & sub menu header is same ");

						}

						else {

							Assert.assertEquals(storeNamesMenu, subMenuScreenTitleTextVk,
									" Validated that the menu item name & sub menu header is same ");
						}

						System.out.println(" Validated that the menu item name & sub menu header is same ");

						nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
								" Validated that the menu item name & sub menu header is same ", ExtentColor.CYAN));

						commonMethods.switchContext("NATIVE_APP");

						Thread.sleep(3000);

						JSONArray optJSONArraySubMenuItems = optJSONObjectMenu.optJSONArray("items");

						int optJSONArraySubMenuItemsLength = optJSONArraySubMenuItems.length();

						System.out.println(" Items length : " + optJSONArraySubMenuItemsLength);

						if (optJSONArraySubMenuItemsLength > 0) {

							subMenuTrue.clear();

							soldOut.clear();

							for (int j = 0; j < optJSONArraySubMenuItemsLength; j++) {

								optJSONObjectActive = optJSONArraySubMenuItems.optJSONObject(j);

								optStringActive = optJSONObjectActive.optString("active");

								parseIntActive = Integer.parseInt(optStringActive);

								optStringSubMenuName = optJSONObjectActive.optString("name");

								optStringAlcohol = optJSONObjectActive.optString("alcohol");

								optStringSubMenuIsSoldout = optJSONObjectActive.optString("is_sold_out");

								if (canOrderMenu == "true" && parseIntActive == 1) {

									soldOut.add(optStringSubMenuIsSoldout);

									subMenuTrue.add(optStringSubMenuName);

									subMenuTrueSize = subMenuTrue.size();

									optJSONArrayPrices = optJSONObjectActive.optJSONArray("prices");

									optJSONArrayOptionGroups = optJSONObjectActive.optJSONArray("option_groups");

									optJSONArrayPizzaGroups = optJSONObjectActive.optJSONArray("pizza_groups");

								}
								if (subMenuTrueSize > 0) {

									for (int n = 0; n < subMenuTrueSize; n++) {

										if (canOrderMenu == "true" && parseIntActive == 1) {

											int maxScrollAttempts3 = 5;

											if (subMenuTrueSize >= 5) {

												if (n == 5) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 10) {

												if (n == 10) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 15) {

												if (n == 15) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 20) {

												if (n == 20) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 25) {

												if (n == 25) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
											if (subMenuTrueSize >= 30) {

												if (n == 30) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
											if (subMenuTrueSize >= 35) {

												if (n == 35) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
										}

										commonMethods.switchContext("FLUTTER");

										Thread.sleep(3000);

										System.out.println(" sub menu true size : " + subMenuTrueSize);

										FlutterElement subMenuScreenItemVk = find
												.byValueKey("sub_menu_item_" + n + "_name");

										String subMenuScreenItemTextVk = subMenuScreenItemVk.getText();

										System.out.println(subMenuScreenItemTextVk);

										Assert.assertEquals(subMenuTrue.get(n), subMenuScreenItemTextVk,
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										System.out.println(
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ",
												ExtentColor.CYAN));

										nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										JSONObject optJSONObjectPrice = optJSONArraySubMenuItems.optJSONObject(n);

										JSONArray subMenuPoints = optJSONObjectPrice.optJSONArray("prices");

										int subMenuPointsLength = subMenuPoints.length();

										System.out.println(" sub menu length of index : " + subMenuPointsLength);

										sizeParam.clear();

										priceParam.clear();

										for (int p = 0; p < subMenuPointsLength; p++) {

											JSONObject subMenuPointsObject = subMenuPoints.optJSONObject(p);

											String sizeName = subMenuPointsObject.optString("name");

											String price = subMenuPointsObject.optString("price");

											sizeParam.add(sizeName);

											priceParam.add(price);

										}

										subMenuPrice.clear();

										for (int k = 0; k < subMenuPointsLength; k++) {

											if (subMenuPointsLength == 0) {

												if (sizeParam.get(k).length() == 0) {

													System.out.println(" The price is null in the index : " + n);

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" The price is null in the index : " + n,
															ExtentColor.CYAN));

												} else {

													System.out.println(" The price is null in the index : " + n);

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" The price is null in the index : " + n,
															ExtentColor.CYAN));
												}
											}

											else {

												FlutterElement subMenuScreenItemSizeVk = find
														.byValueKey("sub_menu_item_" + n + "_size_" + k);

												String subMenuScreenItemSizeTextVk = subMenuScreenItemSizeVk.getText();

												System.out.println(" The item size and price in the index : " + k
														+ " is : " + subMenuScreenItemSizeTextVk);

												nextGenSubMenuScreen001
														.info(MarkupHelper.createLabel(
																" The item size and price in the index : " + k
																		+ " is : " + subMenuScreenItemSizeTextVk,
																ExtentColor.CYAN));

												if (sizeParam.get(k).length() == 0) {

													BigDecimal originalBigDecimal = new BigDecimal(priceParam.get(k));

													// Round the BigDecimal to the specified number of decimal places
													BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
															BigDecimal.ROUND_HALF_UP);

													String priceParamInt = roundedBigDecimal.toString();

													String sizePrize = "" + priceParamInt;

													System.out.println(" size prize : " + sizePrize);

													System.out.println(" item size : " + subMenuScreenItemSizeTextVk);

													boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
															.contains(sizePrize);

													Assert.assertEquals(subMenuScreenItemSizeTextContainsVk, true,
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													System.out
															.println(" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ",
															ExtentColor.CYAN));
												} else {

													BigDecimal originalBigDecimal = new BigDecimal(priceParam.get(k));

													// Round the BigDecimal to the specified number of decimal places
													BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
															BigDecimal.ROUND_HALF_UP);

													String priceParamInt = roundedBigDecimal.toString();

													String sizePrize = sizeParam.get(k) + " - " + priceParamInt;

													System.out.println(" size prize : " + sizePrize);

													System.out.println(" item size : " + subMenuScreenItemSizeTextVk);

													boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
															.contains(sizePrize);

													Assert.assertEquals(subMenuScreenItemSizeTextContainsVk, true,
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													System.out
															.println(" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ",
															ExtentColor.CYAN));
												}

												FlutterElement subMenuScreenItemPriceVk = find
														.byValueKey("sub_menu_item_" + n + "_size_" + k);

												String subMenuScreenItemPriceTextVk = subMenuScreenItemPriceVk
														.getText();

												System.out.println(" The item price in the index : " + n + " is : "
														+ subMenuScreenItemPriceTextVk);

												nextGenSubMenuScreen001
														.info(MarkupHelper.createLabel(
																" The item price in the index : " + n + " is : "
																		+ subMenuScreenItemPriceTextVk,
																ExtentColor.CYAN));

												subMenuPrice.add(subMenuScreenItemPriceTextVk);
											}
										}

										ExtentTest nextGenItemQuantityScreen001 = test
												.createNode("nextGenItemQuantityScreen_001");

										if (soldOut.get(n) == "false") {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

											subMenuScreenItemVk.click();

											if (optStringAlcohol.equalsIgnoreCase("true")) {

												FlutterElement alcoholWarningTitleVk = find
														.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);

												String alcoholWarningTitleTextVk = alcoholWarningTitleVk.getText();

												System.out.println(" The alcohol warning pop-up title is : "
														+ alcoholWarningTitleTextVk);

												nextGenItemQuantityScreen001.info(MarkupHelper
														.createLabel(" The alcohol warning pop-up title is : "
																+ alcoholWarningTitleTextVk, ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver), " Alcohol warning pop-up screenshot ");

												FlutterElement alcoholWarningDescriptionVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);

												String alcoholWarningDescriptionTextVk = alcoholWarningDescriptionVk
														.getText();

												System.out.println(" The alcohol warning pop-up description is : "
														+ alcoholWarningDescriptionTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning pop-up description is : "
																		+ alcoholWarningDescriptionTextVk,
																ExtentColor.CYAN));

												FlutterElement alcoholWarningIUnderstandVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);

												String alcoholWarningIUnderstandTextVk = alcoholWarningIUnderstandVk
														.getText();

												System.out.println(" The alcohol warning pop-up description is : "
														+ alcoholWarningIUnderstandTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning pop-up button text is : "
																		+ alcoholWarningIUnderstandTextVk,
																ExtentColor.CYAN));

												alcoholWarningIUnderstandVk.click();

												FlutterElement alcoholWarningFooterButtonVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_FOOTER_BUTTON_VK);

												String alcoholWarningFooterButtonTextVk = alcoholWarningFooterButtonVk
														.getText();

												System.out.println(" The alcohol warning footer button text is : "
														+ alcoholWarningFooterButtonTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning footer button text is : "
																		+ alcoholWarningFooterButtonTextVk,
																ExtentColor.CYAN));

												alcoholWarningFooterButtonVk.click();

												FlutterElement alcoholWarningTitleVk1 = find
														.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);

												String alcoholWarningTitleTextVk1 = alcoholWarningTitleVk1.getText();

												Assert.assertEquals(alcoholWarningTitleTextVk,
														alcoholWarningTitleTextVk1,
														" Validated that the automatic alcohol pop-up title and the title after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up title in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the title after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up title in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the title after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.",
														ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver),
														" Alcohol warning pop-up screenshot after tapping footer button ");

												FlutterElement alcoholWarningDescription1Vk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);

												String alcoholWarningDescriptionText1Vk = alcoholWarningDescription1Vk
														.getText();

												Assert.assertEquals(alcoholWarningDescriptionTextVk,
														alcoholWarningDescriptionText1Vk,
														" Validated that the automatic alcohol pop-up description and the description after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up description in automatic alcohol pop-up is : "
																+ alcoholWarningDescriptionTextVk
																+ " and the description after tapping the footer button is : "
																+ alcoholWarningDescriptionText1Vk + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up description in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the description after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.",
														ExtentColor.CYAN));

												FlutterElement alcoholWarningIUnderstand1Vk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);

												String alcoholWarningIUnderstandText1Vk = alcoholWarningIUnderstand1Vk
														.getText();

												Assert.assertEquals(alcoholWarningIUnderstandTextVk,
														alcoholWarningIUnderstandText1Vk,
														" Validated that the automatic alcohol pop-up button text and the button text after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up button text in automatic alcohol pop-up is : "
																+ alcoholWarningIUnderstandTextVk
																+ " and the button text after tapping the footer button is : "
																+ alcoholWarningIUnderstandText1Vk + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up button text in automatic alcohol pop-up is : "
																+ alcoholWarningIUnderstandTextVk
																+ " and the button text after tapping the footer button is : "
																+ alcoholWarningIUnderstandText1Vk + " is same.",
														ExtentColor.CYAN));

												alcoholWarningIUnderstand1Vk.click();
											}

											else {

												System.out.println(
														" There is no alcohol warning and there continuing the item quantity selection ");

											}

											FlutterElement itemQuantityScreenTitleVk = find
													.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

											String itemQuantityScreenTitleTextVk = itemQuantityScreenTitleVk.getText();

											System.out.println(" Title of the item quantity screen is : "
													+ itemQuantityScreenTitleTextVk);

											nextGenItemQuantityScreen001.info(
													MarkupHelper.createLabel(" Title of the item quantity screen is : "
															+ itemQuantityScreenTitleTextVk, ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver), " Title of the item quantity screen is : "
															+ itemQuantityScreenTitleTextVk);

											if (subMenuTrue.get(n).length() > 22) {

												String itemQuantityScreenTitleTextSubStringVk = itemQuantityScreenTitleTextVk
														.substring(0, 15);

												Assert.assertEquals(
														subMenuTrue.get(n)
																.contains(itemQuantityScreenTitleTextSubStringVk),
														true,
														" Validated that the sub menu item name & item quantity title screen is same ");
											}

											else {

												Assert.assertEquals(subMenuTrue.get(n), itemQuantityScreenTitleTextVk,
														" Validated that the sub menu item name & item quantity title screen is same ");
											}

											System.out.println(
													" Validated that the sub menu item name & item quantity title screen is same ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the sub menu item name & item quantity title screen is same ",
													ExtentColor.CYAN));

											FlutterElement itemQuantityScreenDescriptionVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_DESCRIPTION_VK);

											String itemQuantityScreenDescriptionTextVk = itemQuantityScreenDescriptionVk
													.getText();

											System.out.println(" Description of the item quantity screen is : "
													+ itemQuantityScreenDescriptionTextVk);

											nextGenItemQuantityScreen001
													.info(MarkupHelper.createLabel(
															" Description of the item quantity screen is : "
																	+ itemQuantityScreenDescriptionTextVk,
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(3000);

											TouchAction touch = new TouchAction(driver);

											touch.press(PointOption.point(700, 2800))
													.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
													.moveTo(PointOption.point(700, 900)).release().perform();

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

//								FlutterElement itemQuantityScreenItemSizeVk = find
//										.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_PRICE_VK);
//
//								String itemQuantityScreenItemSizeTextVk = itemQuantityScreenItemSizeVk.getText();
//
//								if (itemQuantityScreenItemSizeTextVk.length() == 0) {
//
//									System.out.println(
//											" The item price is not displayed as well as not provided from the API ");
//
//								}
//
//								else {
//
//									StringBuilder stringBuilder = new StringBuilder();
//
//									for (String element : subMenuPrice) {
//										stringBuilder.append(element).append(", ");
//									}
//
//									if (stringBuilder.length() > 2) {
//										stringBuilder.setLength(stringBuilder.length() - 2);
//									}
//
//									String itemPrice = stringBuilder.toString();
//
//									System.out.println(itemQuantityScreenItemSizeTextVk);
//
//									System.out.println(itemPrice);
//
//									Assert.assertEquals(itemPrice, itemQuantityScreenItemSizeTextVk,
//											" Validated that the price and size in submenu & item quantity screen are same ");
//
//									System.out.println(
//											" The item quantity size and price in the item quantity screen is : "
//													+ itemQuantityScreenItemSizeTextVk);
//
//									nextGenItemQuantityScreen001.info(MarkupHelper
//											.createLabel(" The item quantity size in the item quantity screen is : "
//													+ itemQuantityScreenItemSizeTextVk, ExtentColor.CYAN));
//
//								}

											FlutterElement itemQuantityScreenItemQuantityCountVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountTextVk = itemQuantityScreenItemQuantityCountVk
													.getText();

											int itemQuantityScreenItemQuantityCountIntVk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountTextVk);

											System.out.println(" The quantity count in the item quantity screen is : "
													+ itemQuantityScreenItemQuantityCountTextVk);

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" The quantity count in the item quantity screen is : "
															+ itemQuantityScreenItemQuantityCountTextVk,
													ExtentColor.CYAN));

											FlutterElement itemQuantityScreenIncrementIconVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_INCREMENT_ICON_VK);

											itemQuantityScreenIncrementIconVk.click();

											Thread.sleep(3000);

											FlutterElement itemQuantityScreenItemQuantityCount1Vk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountText1Vk = itemQuantityScreenItemQuantityCount1Vk
													.getText();

											int itemQuantityScreenItemQuantityCountInt1Vk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountText1Vk);

											Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt1Vk,
													itemQuantityScreenItemQuantityCountIntVk,
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											System.out.println(
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											FlutterElement itemQuantityScreenDecrementIconVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_DECREMENT_ICON_VK);

											itemQuantityScreenDecrementIconVk.click();

											Thread.sleep(3000);

											FlutterElement itemQuantityScreenItemQuantityCount2Vk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountText2Vk = itemQuantityScreenItemQuantityCount2Vk
													.getText();

											int itemQuantityScreenItemQuantityCountInt2Vk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountText2Vk);

											Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt2Vk,
													itemQuantityScreenItemQuantityCountInt1Vk,
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

											System.out.println(
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

//											if (optJSONArrayPrices.length() != 0) {
//
//												FlutterElement optionGroupNameVk = find
//														.byValueKey(subMenuTrue.get(n) + "_size");
//
//												String optionGroupNameTextVk = optionGroupNameVk.getText();
//
//												optionGroupNameVk.click();
//
//												int optJSONArrayPricesLength = optJSONArrayPrices.length();
//
//												for (int d = 0; d < optJSONArrayPricesLength; d++) {
//
//													JSONObject optJSONObjectPricesList = optJSONArrayPrices
//															.optJSONObject(i);
//
//													String optStringSizeName = optJSONObjectPricesList
//															.optString("name");
//
//													String optStringSizePrice = optJSONObjectPricesList
//															.optString("price");
//
//													FlutterElement optStringSizeNameUI = find
//															.byValueKey(subMenuTrue.get(n) + "_" + optionGroupNameTextVk
//																	+ "_" + optStringSizeName);
//
//													String optStringSizeNameTextUI = optStringSizeNameUI.getText();
//
//													Assert.assertEquals(optStringSizeName, optStringSizeNameTextUI,
//															"Validated that the option name from API is : "
//																	+ optStringSizeName
//																	+ " and the option name in UI is : "
//																	+ optStringSizeNameTextUI + " is same ");
//
//													System.out.println("Validated that the option name from API is : "
//															+ optStringSizeName + " and the option name in UI is : "
//															+ optStringSizeNameTextUI + " is same ");
//
//													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
//															"Validated that the option name from API is : "
//																	+ optStringSizeName
//																	+ " and the option name in UI is : "
//																	+ optStringSizeNameTextUI + " is same ",
//															ExtentColor.CYAN));
//
//													nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
//															takeScreenshot(driver), "Optional group name : "
//																	+ optionGroupNameTextVk + " Screenshot ");
//
//													FlutterElement optStringSizePriceUI = find
//															.byValueKey(subMenuTrue.get(n) + "_" + optionGroupNameTextVk
//																	+ "_" + optStringSizeName);
//
//													String optStringSizePriceTextUI = optStringSizePriceUI.getText();
//
//													Assert.assertEquals(optStringSizePrice, optStringSizePriceTextUI,
//															"Validated that the option price from API is : "
//																	+ optStringSizePrice
//																	+ " and the option price in UI is : "
//																	+ optStringSizePriceTextUI + " is same ");
//
//													System.out.println("Validated that the option price from API is : "
//															+ optStringSizePrice + " and the option price in UI is : "
//															+ optStringSizePriceTextUI + " is same ");
//
//													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
//															"Validated that the option price from API is : "
//																	+ optStringSizePrice
//																	+ " and the option price in UI is : "
//																	+ optStringSizePriceTextUI + " is same ",
//															ExtentColor.CYAN));
//
//												}
//											} else {
//
//												System.out.println(
//														" The size is null and moving to the next option group ");
//											}

											if (optJSONArrayPizzaGroups.length() != 0) {

												int optJSONArrayPizzaGroupsLength = optJSONArrayPizzaGroups.length();

												for (int g = 0; g < optJSONArrayPizzaGroupsLength; g++) {

													JSONObject optJSONObjectPizzaGroup = optJSONArrayPizzaGroups
															.optJSONObject(n);

													optStringWholeGroupName = optJSONObjectPizzaGroup
															.optString("whole_group_name");

													optStringLeftGroupName = optJSONObjectPizzaGroup
															.optString("left_group_name");

													optStringRightGroupName = optJSONObjectPizzaGroup
															.optString("right_group_name");

													optStringAllowDoublingPizza = optJSONObjectPizzaGroup
															.optString("allow_doubling");

												}

												if (optJSONArrayOptionGroups.length() != 0) {

													int optJSONArrayOptionGroupsLength = optJSONArrayOptionGroups
															.length();

													for (int e = 0; e < optJSONArrayOptionGroupsLength; e++) {

														JSONObject optJSONArrayOptionGroupsObject = optJSONArrayOptionGroups
																.optJSONObject(e);

														String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																.optString("name");

														String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																.optString("multiselect");

														long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																.getLong("min");

														String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																.optString("quantities");

														if (optJSONArrayOptionGroupsObject.getLong("max") != 0) {

															optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																	.getLong("max");

														} else {

															optJSONArrayOptionGroupsObjectMax = 0;
														}

														if (optStringWholeGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)) {

															FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																	.byValueKey(subMenuTrue.get(n) + "_"
																			+ );

															String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																	.getText();

															Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																	optJSONArrayOptionGroupsObjectNameTextUI,
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															System.out.println(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ",
																	ExtentColor.CYAN));

															nextGenItemQuantityScreen001
																	.addScreenCaptureFromBase64String(
																			takeScreenshot(driver),
																			"Optional group name : "
																					+ optJSONArrayOptionGroupsObjectNameTextUI
																					+ " Screenshot ");

															optJSONArrayOptionGroupsObjectNameUI.click();

															JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																	.optJSONArray("options");

															if (optJSONArrayOptions.length() != 0) {

																int optJSONArrayOptionsLength = optJSONArrayOptions
																		.length();

																for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																	JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																			.optJSONObject(f);

																	String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																			.optString("name");

																	String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																			.optString("price");

																	String optStringIsDisabled = optJSONArrayOptionsObject
																			.optString("is_disabled");

																	if (optStringIsDisabled.equalsIgnoreCase("false")) {

																		FlutterElement optionGroupObjectNameVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectName);

																		String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																				.getText();

																		Assert.assertEquals(optionGroupObjectNameTextVk,
																				optJSONArrayOptionsObjectName,
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group name from API is : "
																								+ optionGroupObjectNameTextVk
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionsObjectName
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		FlutterElement optionGroupObjectPriceVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectPrice);

																		String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																				.getText();

																		Assert.assertEquals(
																				optionGroupObjectPriceTextVk,
																				optJSONArrayOptionsObjectPrice,
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group price from API is : "
																								+ optionGroupObjectPriceTextVk
																								+ " and the option group price in UI is : "
																								+ optJSONArrayOptionsObjectPrice
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has increment decrement button ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has increment decrement button ",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the optional field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the optional field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has checkbox ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has checkbox ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}

																		else if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection optional field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}
																	} else {

																		System.out.println(" The option : "
																				+ optJSONArrayOptionsObjectName
																				+ "is disabled and won't be displayed");

																	}
																}}}

														} else if (optStringLeftGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)){

															
															
														}
														else if (optStringRightGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)) {

															
															
														} 
														else (optStringWholeGroupName || optStringLeftGroupName || optStringRightGroupName
																!= optJSONArrayOptionGroupsObjectName) {

															FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																	.byValueKey(subMenuTrue.get(n) + "_"
																			+ optJSONArrayOptionGroupsObjectName);

															String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																	.getText();

															Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																	optJSONArrayOptionGroupsObjectNameTextUI,
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															System.out.println(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ",
																	ExtentColor.CYAN));

															nextGenItemQuantityScreen001
																	.addScreenCaptureFromBase64String(
																			takeScreenshot(driver),
																			"Optional group name : "
																					+ optJSONArrayOptionGroupsObjectNameTextUI
																					+ " Screenshot ");

															optJSONArrayOptionGroupsObjectNameUI.click();

															JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																	.optJSONArray("options");

															if (optJSONArrayOptions.length() != 0) {

																int optJSONArrayOptionsLength = optJSONArrayOptions
																		.length();

																for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																	JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																			.optJSONObject(f);

																	String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																			.optString("name");

																	String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																			.optString("price");

																	String optStringIsDisabled = optJSONArrayOptionsObject
																			.optString("is_disabled");

																	if (optStringIsDisabled.equalsIgnoreCase("false")) {

																		FlutterElement optionGroupObjectNameVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectName);

																		String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																				.getText();

																		Assert.assertEquals(optionGroupObjectNameTextVk,
																				optJSONArrayOptionsObjectName,
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group name from API is : "
																								+ optionGroupObjectNameTextVk
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionsObjectName
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		FlutterElement optionGroupObjectPriceVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectPrice);

																		String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																				.getText();

																		Assert.assertEquals(
																				optionGroupObjectPriceTextVk,
																				optJSONArrayOptionsObjectPrice,
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group price from API is : "
																								+ optionGroupObjectPriceTextVk
																								+ " and the option group price in UI is : "
																								+ optJSONArrayOptionsObjectPrice
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has increment decrement button ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has increment decrement button ",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the optional field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the optional field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has checkbox ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has checkbox ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}

																		else if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection optional field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}
																	} else {

																		System.out.println(" The option : "
																				+ optJSONArrayOptionsObjectName
																				+ "is disabled and won't be displayed");

																	}
																}
															}

														}

													}
												} else {

													System.out.println(" The option groups array is null ");
												}

											}

											else {

												if (optJSONArrayOptionGroups.length() != 0) {

													int optJSONArrayOptionGroupsLength = optJSONArrayOptionGroups
															.length();

													for (int e = 0; e < optJSONArrayOptionGroupsLength; e++) {

														JSONObject optJSONArrayOptionGroupsObject = optJSONArrayOptionGroups
																.optJSONObject(e);

														String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																.optString("name");

														String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																.optString("multiselect");

														long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																.getLong("min");

														String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																.optString("quantities");

														if (optJSONArrayOptionGroupsObject.getLong("max") != 0) {

															optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																	.getLong("max");

														} else {

															optJSONArrayOptionGroupsObjectMax = 0;
														}

														FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																.byValueKey(subMenuTrue.get(n) + "_"
																		+ optJSONArrayOptionGroupsObjectName);

														String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																.getText();

														Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																optJSONArrayOptionGroupsObjectNameTextUI,
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ");

														System.out.println(
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ");

														nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ",
																ExtentColor.CYAN));

														nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
																takeScreenshot(driver),
																"Optional group name : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " Screenshot ");

														optJSONArrayOptionGroupsObjectNameUI.click();

														JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																.optJSONArray("options");

														if (optJSONArrayOptions.length() != 0) {

															int optJSONArrayOptionsLength = optJSONArrayOptions
																	.length();

															for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																		.optJSONObject(f);

																String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																		.optString("name");

																String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																		.optString("price");

																String optStringIsDisabled = optJSONArrayOptionsObject
																		.optString("is_disabled");

																if (optStringIsDisabled.equalsIgnoreCase("false")) {

																	FlutterElement optionGroupObjectNameVk = find
																			.byValueKey(subMenuTrue.get(n) + "_"
																					+ optJSONArrayOptionGroupsObjectName
																					+ "_"
																					+ optJSONArrayOptionsObjectName);

																	String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																			.getText();

																	Assert.assertEquals(optionGroupObjectNameTextVk,
																			optJSONArrayOptionsObjectName,
																			"Validated that the option group name from API is : "
																					+ optionGroupObjectNameTextVk
																					+ " and the option group name in UI is : "
																					+ optJSONArrayOptionsObjectName
																					+ "in the index : " + f
																					+ " is same ");

																	System.out.println(
																			"Validated that the option group name from API is : "
																					+ optionGroupObjectNameTextVk
																					+ " and the option group name in UI is : "
																					+ optJSONArrayOptionsObjectName
																					+ "in the index : " + f
																					+ " is same ");

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					"Validated that the option group name from API is : "
																							+ optionGroupObjectNameTextVk
																							+ " and the option group name in UI is : "
																							+ optJSONArrayOptionsObjectName
																							+ "in the index : " + f
																							+ " is same ",
																					ExtentColor.CYAN));

																	FlutterElement optionGroupObjectPriceVk = find
																			.byValueKey(subMenuTrue.get(n) + "_"
																					+ optJSONArrayOptionGroupsObjectName
																					+ "_"
																					+ optJSONArrayOptionsObjectPrice);

																	String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																			.getText();

																	Assert.assertEquals(optionGroupObjectPriceTextVk,
																			optJSONArrayOptionsObjectPrice,
																			"Validated that the option group price from API is : "
																					+ optionGroupObjectPriceTextVk
																					+ " and the option group price in UI is : "
																					+ optJSONArrayOptionsObjectPrice
																					+ "in the index : " + f
																					+ " is same ");

																	System.out.println(
																			"Validated that the option group price from API is : "
																					+ optionGroupObjectPriceTextVk
																					+ " and the option group price in UI is : "
																					+ optJSONArrayOptionsObjectPrice
																					+ "in the index : " + f
																					+ " is same ");

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					"Validated that the option group price from API is : "
																							+ optionGroupObjectPriceTextVk
																							+ " and the option group price in UI is : "
																							+ optJSONArrayOptionsObjectPrice
																							+ "in the index : " + f
																							+ " is same ",
																					ExtentColor.CYAN));

																	if (optJSONArrayOptionGroupsObjectMin == 0
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																			&& optJSONArrayOptionGroupsObjectMax == 0) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is single selection optional field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field has increment decrement button ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field has increment decrement button ",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the optional field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the optional field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the optional field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the optional field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field has checkbox ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field has checkbox ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	} else if (optJSONArrayOptionGroupsObjectMin == 1
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																			&& optJSONArrayOptionGroupsObjectMax == 0) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is single selection Mandatory field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	}

																	else if (optJSONArrayOptionGroupsObjectMin == 0
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																			&& optJSONArrayOptionGroupsObjectMax == 0
																			|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is multi selection optional field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																			FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton2Vk
																					.click();

																			FlutterElement optionCount3Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText3Vk = optionCount3Vk
																					.getText();

																			long optionCountLong3Vk = Long
																					.parseLong(optionCountText3Vk);

																			System.out.println(
																					" After tapping the increment button twice count is : "
																							+ optionCountLong3Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping the increment button twice count is : "
																									+ optionCountLong3Vk,
																							ExtentColor.CYAN));

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	} else if (optJSONArrayOptionGroupsObjectMin == 1
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																			&& optJSONArrayOptionGroupsObjectMax == 0
																			|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is multi selection mandatory field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																			FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton2Vk
																					.click();

																			FlutterElement optionCount3Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText3Vk = optionCount3Vk
																					.getText();

																			long optionCountLong3Vk = Long
																					.parseLong(optionCountText3Vk);

																			System.out.println(
																					" After tapping the increment button twice count is : "
																							+ optionCountLong3Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping the increment button twice count is : "
																									+ optionCountLong3Vk,
																							ExtentColor.CYAN));

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	}
																} else {

																	System.out.println(" The option : "
																			+ optJSONArrayOptionsObjectName
																			+ "is disabled and won't be displayed");

																}
															}
														}

													}

												} else {
													System.out.println(
															" The Option group is null and moving to the next option group ");
												}

											}

											FlutterElement itemQuantityScreenBackIconVk = find
													.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_BACK_ICON_VK);

											itemQuantityScreenBackIconVk.click();

										} else {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

											FlutterElement subMenuScreenSoldOutVk = find
													.byValueKey("sub_menu_sold_out_item_" + n);

											String subMenuScreenSoldOutTextVk = subMenuScreenSoldOutVk.getText();

											boolean subMenuScreenSoldOutTextContainsVk = subMenuScreenSoldOutTextVk
													.contains(subMenuScreenSoldOutTextVk);

											System.out.println(" The item : " + subMenuTrue.get(n)
													+ " in the sub menu is sold out and showing the text as : "
													+ subMenuScreenSoldOutTextVk
													+ " and won't be processed further and clearing the pop-up ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(" The item : "
													+ subMenuTrue.get(n)
													+ " in the sub menu is sold out and showing the text as : "
													+ subMenuScreenSoldOutTextVk
													+ " and won't be processed further and clearing the pop-up ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" The item : " + subMenuTrue.get(n)
															+ " in the sub menu is sold out and showing the text as : "
															+ subMenuScreenSoldOutTextVk
															+ " and won't be processed further and clearing the pop-up ");

											Assert.assertEquals(subMenuScreenSoldOutTextContainsVk, true,
													" Validated that the item : " + subMenuTrue.get(n)
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk);

											System.out.println(" Validated that the item : " + subMenuTrue.get(n)
													+ " in the index : " + n + " contains the text : "
													+ subMenuScreenSoldOutTextVk);

											nextGenItemQuantityScreen001.info(MarkupHelper
													.createLabel(" Validated that the item : " + subMenuTrue.get(n)
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk, ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the item : " + optStringSubMenuName
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk);

											subMenuScreenItemVk.click();

											FlutterElement subMenuSoldOutPopupTitleVk = find
													.byValueKey(menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_TITLE_VK);

											String subMenuSoldOutPopupTitleTextVk = subMenuSoldOutPopupTitleVk
													.getText();

											System.out.println(" The sold out alert popup title is : "
													+ subMenuSoldOutPopupTitleTextVk);

											nextGenSubMenuScreen001
													.info(MarkupHelper.createLabel(
															" The sold out alert popup title is : "
																	+ subMenuSoldOutPopupTitleTextVk,
															ExtentColor.CYAN));

											FlutterElement subMenuSoldOutPopupDescriptionVk = find.byValueKey(
													menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_DESCRIPTION_VK);

											String subMenuSoldOutPopupDescriptionTextVk = subMenuSoldOutPopupDescriptionVk
													.getText();

											System.out.println(" The sold out alert popup description is : "
													+ subMenuSoldOutPopupDescriptionTextVk);

											boolean subMenuSoldOutPopupDescriptionTextContainsVk = subMenuSoldOutPopupDescriptionTextVk
													.contains("sold out");

											Assert.assertEquals(subMenuSoldOutPopupDescriptionTextContainsVk, true,
													" Validated that the pop-up contains the text sold out");

											System.out.println(" Validated that the pop-up contains the text sold out");

											nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
													" Validated that the pop-up contains the text sold out",
													ExtentColor.CYAN));

											FlutterElement subMenuSoldOutPopupOkayButtonVk = find.byValueKey(
													menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_OKAY_BUTTON_VK);

											subMenuSoldOutPopupOkayButtonVk.click();
										}
									}

//							}

//							else {
//
//								System.out.println(
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j);
//
//								nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j,
//										ExtentColor.CYAN));
//
//								nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j);
//
//							}
								} else {

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(3000);

									System.out.println(" As the sub menu item size is : " + subMenuTrueSize
											+ " There is no list to show and navigating to the menu screen for the next item in the menu ");

									nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
											" As the sub menu item size is : " + subMenuTrueSize
													+ " There is no list to show and navigating to the menu screen for the next item in the menu ",
											ExtentColor.CYAN));

									nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" Sub Menu screen " + storeNamesMenu);

									FlutterElement subMenuScreenBackIconVk = find
											.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);

									subMenuScreenBackIconVk.click();

								}

								commonMethods.switchContext("FLUTTER");

								Thread.sleep(3000);

								FlutterElement subMenuScreenBackIconVk = find
										.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);

								subMenuScreenBackIconVk.click();

							}
						} else {

							System.out.println(
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu);

							nextGenMenuScreen001.info(MarkupHelper.createLabel(
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu,
									ExtentColor.CYAN));

							nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu);
						}

					} else {

						System.out.println(" Menu list is empty ");

						nextGenMenuScreen001.info(MarkupHelper.createLabel(" Menu list is empty ", ExtentColor.CYAN));

						nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Menu list is empty ");
					}
				}
			}
		}else

	{

		System.out.println(" Menu screen doesn't have any menus and handling the error pop-up ");

		nextGenMenuScreen001.info(MarkupHelper
				.createLabel(" Menu screen doesn't have any menus and handling the error pop-up ", ExtentColor.CYAN));

		nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver), " Menu list empty screen");

		FlutterElement menuScreenEmptyMenuTitleVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_TITLE_VK);

		String menuScreenEmptyMenuTitleTextVk = menuScreenEmptyMenuTitleVk.getText();

		System.out.println(" Empty menu pop-up title is : " + menuScreenEmptyMenuTitleTextVk);

		nextGenMenuScreen001.info(MarkupHelper
				.createLabel(" Empty menu pop-up title is : " + menuScreenEmptyMenuTitleTextVk, ExtentColor.CYAN));

		FlutterElement menuScreenEmptyMenuDescriptionVk = find
				.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_DESCRIPTION_VK);

		String menuScreenEmptyMenuDescriptionTextVk = menuScreenEmptyMenuDescriptionVk.getText();

		System.out.println(" Empty menu pop-up description is : " + menuScreenEmptyMenuDescriptionTextVk);

		nextGenMenuScreen001.info(MarkupHelper.createLabel(
				" Empty menu pop-up description is : " + menuScreenEmptyMenuDescriptionTextVk, ExtentColor.CYAN));

		FlutterElement menuScreenEmptyMenuOkButtonVk = find
				.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_OK_BUTTON_VK);

		menuScreenEmptyMenuOkButtonVk.click();

		nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver), "After handling error pop-up");

		FlutterElement menuScreenBackIconVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_BACK_ICON_VK);

		menuScreenBackIconVk.click();
	}

}

//	private static void processJsonNode(JsonNode jsonNode) {
//		if (jsonNode.isObject()) {
//			jsonNode.fields().forEachRemaining(entry -> {
//				System.out.println(entry.getKey() + ": " + entry.getValue());
//				processJsonNode(entry.getValue());
//			});
//		} else if (jsonNode.isArray()) {
//			jsonNode.elements().forEachRemaining(CategoryGroups::processJsonNode);
//		} else {
//			System.out.println(jsonNode);
//		}
//	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor78.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1217)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4641)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1524)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1547)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1532)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1561)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1557)
	at org.eclipse.swt.widgets.Canvas.sendKeyEvent(Canvas.java:522)
	at org.eclipse.swt.widgets.Control.doCommandBySelector(Control.java:1085)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:6492)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSResponder.interpretKeyEvents(NSResponder.java:59)
	at org.eclipse.swt.widgets.Composite.keyDown(Composite.java:607)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:6324)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Widget.callSuper(Widget.java:236)
	at org.eclipse.swt.widgets.Widget.windowSendEvent(Widget.java:2264)
	at org.eclipse.swt.widgets.Shell.windowSendEvent(Shell.java:2511)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:6444)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:5692)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:5831)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:117)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3986)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-12-21 18:05:02.154
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor78.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1217)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4641)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1524)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1547)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1532)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1561)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1557)
	at org.eclipse.swt.widgets.Canvas.sendKeyEvent(Canvas.java:522)
	at org.eclipse.swt.widgets.Control.doCommandBySelector(Control.java:1085)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:6492)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSResponder.interpretKeyEvents(NSResponder.java:59)
	at org.eclipse.swt.widgets.Composite.keyDown(Composite.java:607)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:6324)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Widget.callSuper(Widget.java:236)
	at org.eclipse.swt.widgets.Widget.windowSendEvent(Widget.java:2264)
	at org.eclipse.swt.widgets.Shell.windowSendEvent(Shell.java:2511)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:6444)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:5692)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:5831)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:117)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3986)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-12-21 18:05:02.154
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.getClipboardData(ClipboardOperationAction.java:486)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.doCutCopyWithImportsOperation(ClipboardOperationAction.java:407)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.internalDoOperation(ClipboardOperationAction.java:366)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:67)
	at org.eclipse.jdt.internal.ui.javaeditor.ClipboardOperationAction.run(ClipboardOperationAction.java:287)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:474)
	at org.eclipse.jface.commands.ActionHandler.execute(ActionHandler.java:121)
	at org.eclipse.ui.internal.handlers.E4HandlerProxy.execute(E4HandlerProxy.java:97)
	at jdk.internal.reflect.GeneratedMethodAccessor78.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.e4.core.internal.di.MethodRequestor.execute(MethodRequestor.java:58)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invokeUsingClass(InjectorImpl.java:317)
	at org.eclipse.e4.core.internal.di.InjectorImpl.invoke(InjectorImpl.java:251)
	at org.eclipse.e4.core.contexts.ContextInjectionFactory.invoke(ContextInjectionFactory.java:173)
	at org.eclipse.e4.core.commands.internal.HandlerServiceHandler.execute(HandlerServiceHandler.java:156)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:488)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:485)
	at org.eclipse.e4.core.commands.internal.HandlerServiceImpl.executeHandler(HandlerServiceImpl.java:213)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.executeCommand(KeyBindingDispatcher.java:308)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.press(KeyBindingDispatcher.java:580)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.processKeyEvent(KeyBindingDispatcher.java:647)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher.filterKeySequenceBindings(KeyBindingDispatcher.java:439)
	at org.eclipse.e4.ui.bindings.keys.KeyBindingDispatcher$KeyDownFilter.handleEvent(KeyBindingDispatcher.java:96)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:89)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1217)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4641)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1524)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1547)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1532)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1561)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1557)
	at org.eclipse.swt.widgets.Canvas.sendKeyEvent(Canvas.java:522)
	at org.eclipse.swt.widgets.Control.doCommandBySelector(Control.java:1085)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:6492)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSResponder.interpretKeyEvents(NSResponder.java:59)
	at org.eclipse.swt.widgets.Composite.keyDown(Composite.java:607)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:6324)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Widget.callSuper(Widget.java:236)
	at org.eclipse.swt.widgets.Widget.windowSendEvent(Widget.java:2264)
	at org.eclipse.swt.widgets.Shell.windowSendEvent(Shell.java:2511)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:6444)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:5692)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:5831)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:117)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3986)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1155)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:643)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:550)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:171)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:136)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:402)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:568)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:596)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1467)

!ENTRY org.eclipse.jdt.core 4 4 2023-12-21 18:05:03.355
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.features;

import java.io.IOException;
import java.math.BigDecimal;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.locators.LocationLocators;
import com.locators.MenuScreenLocators;

import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.openqa.selenium.remote.DesiredCapabilities;
import com.locators.SignInLocators;

import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.remote.MobileCapabilityType;
import java.util.*;

/**
 * @Class_Name MenuApi
 * @Description Contains code to execute the test scripts for Menu, sub menu &
 *              Item quantity screen.
 * @author Lalith Kishore Ravi
 */

public class CategoryGroups extends BaseClass {

	static CommonMethods commonMethods = new CommonMethods();

	static String storeNamesMenu;

	static String optStringActive;

	static JSONObject optJSONObjectActive;

	static String optStringSubMenuName;

	static String optStringSubMenuIsSoldout;

	static String givenStoreCode = "999";

	static String sizeName;

	static String price;

	static int parseIntActive;

	static MenuScreenLocators menuScreenLocators = new MenuScreenLocators();

	static LocationLocators locationLocators = new LocationLocators();

	static SignInLocators signInLocators = new SignInLocators();

	static HolidayHours holidayHours = new HolidayHours();

	static ArrayList<String> subMenuTrue = new ArrayList<>();

	static ArrayList<String> soldOut = new ArrayList<>();

	static ArrayList<String> priceParam = new ArrayList<>();

	static ArrayList<String> sizeParam = new ArrayList<>();

	static ArrayList<String> subMenuPrice = new ArrayList<>();

	static ArrayList<String> hierarchyTypes = new ArrayList<>();

	static int subMenuTrueSize;

	static int optJSONArraySubMenuItemsLength;

	static String hierarchyType;

	static String hierarchyName;

	static String hierarchyId;

	static String hierarchyType1;

	static String hierarchyName1;

	static String hierarchyId1;

	static String hierarchyType2;

	static String hierarchyName2;

	static String hierarchyId2;

	static String hierarchyType3;

	static String hierarchyName3;

	static String hierarchyId3;

	static String hierarchyType4;

	static String hierarchyName4;

	static String hierarchyId4;

	static String hierarchyType5;

	static String hierarchyName5;

	static String hierarchyId5;

	static String optStringAlcohol;

	static JSONArray optJSONArrayPrices;

	static JSONArray optJSONArrayOptionGroups;

	static JSONArray optJSONArrayPizzaGroups;

	static long optJSONArrayOptionGroupsObjectMax;

	static String optStringWholeGroupName;

	static String optStringLeftGroupName;

	static String optStringRightGroupName;

	static String optStringAllowDoublingPizza;

	/**
	 * @Class_Name MenuApi
	 * @Method_Name menuApi
	 * @Description Contains code to execute the test scripts for Menu, sub menu &
	 *              Item quantity screen
	 * @return void
	 * @author Lalith Kishore Ravi
	 */
	@Test
	public static void menuApi() throws InterruptedException, GeneralSecurityException, IOException {

		DesiredCapabilities cap = new DesiredCapabilities();
		cap.setCapability(MobileCapabilityType.DEVICE_NAME, "Samsung");
		cap.setCapability("platformName", "Android");
		cap.setCapability(MobileCapabilityType.PLATFORM_VERSION, "16");
		cap.setCapability(MobileCapabilityType.UDID, "emulator-5554");
		cap.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
		cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 300);
		cap.setCapability("appPackage", "com.paytronix.nexgenfl");
		cap.setCapability("appActivity", "com.paytronix.nexgenfl.MainActivity");

		driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		BaseClass bc = new BaseClass();
		List<String> positiveSignInDatas = bc.signInPositiveData();
		String positiveEmailId = positiveSignInDatas.get(2);
		String positivePassword = positiveSignInDatas.get(5);

		FlutterFinder find = new FlutterFinder(driver);

		Thread.sleep(10000);

		FlutterElement landingLoginbutton = find.byValueKey(signInLocators.LANDING_LOGIN_BUTTON_VKL);
		commonMethods.checkAndClickTheElement(landingLoginbutton);

		FlutterElement loginScreenEmailTextField = find.byValueKey(signInLocators.LOGINSCREEN_EMAILFIELD_VKL);
		commonMethods.checkAndSendTheValue(loginScreenEmailTextField, positiveEmailId);

		// To enter the Valid password credentials //
		FlutterElement loginScreenPasswordField = find.byValueKey(signInLocators.LOGINSCREEN_PASSWORD_VKL);
		commonMethods.checkAndSendTheValue(loginScreenPasswordField, positivePassword);

		FlutterElement loginButtonEnable = find
				.byValueKey((signInLocators.LOGINSCREEN_LOGINWITHEMAIL_BUTTON_ENABLEDVKL));
		commonMethods.checkAndClickTheElement(loginButtonEnable);

		Thread.sleep(6000);

		find.byValueKey("signin_biometry_bottomsheet_close_button").click();

		find.byValueKey("bottombar_web_order").click();

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Lalith Kishore Ravi").assignDevice(deviceName)
				.assignCategory("Menu, Submenu & Item quantity");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/"
				+ givenStoreCode + "/menu/tier?";
		// Construct the query parameters
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");
		paramsMenu.put("include_combo", "false");
		paramsMenu.put("merchant_id", "60019");
		paramsMenu.put("provider", "px");
		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameters
		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");
		// Retrieving the response body using getBody() method
		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

//		ObjectMapper mapper =  new ObjectMapper();
//		mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
//		mapper.setVisibility(VisibilityChecker.Std.defaultInstance().withFieldVisibility(JsonAutoDetect.Visibility.ANY));
//
//		
//		ModifiersResponseModel readValue = mapper.readValue(responseMenu.body().asString(), ModifiersResponseModel.class);
//		
//		if (readValue != null && readValue.getHierarchy() != null) {
//			List<Content> contents =readValue.getHierarchy().stream()
//	                .filter(group -> "group".equalsIgnoreCase(group.getType()) && group.getContents() != null)
//	                .flatMap(group -> group.getContents().stream())
//	                .collect(Collectors.toList());
//			contents.forEach(t -> System.out.println("Stream "+t.getName()+" "+t.getId()));
//		}
//		
//		List<String> categoryID = new ArrayList<String>();
//		if(readValue.getHierarchy() != null && readValue.getHierarchy().size() > 0) {
//			readValue.getHierarchy().forEach(t -> {if(t.getType() != null && t.getType().equalsIgnoreCase("group")){
//				categoryID.forEach(e -> System.out.println("Stream "+e.getName()+" "+t.getId()));
//			}});
//		}

		JSONArray optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		int menuLength = optJSONArrayMenu.length();

		ExtentTest nextGenMenuScreen001 = test.createNode("nextGenMenuScreen_001");

		if (menuLength != 0) {

			FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

			String menuScreenTitleTextVk = menuScreenTitleVk.getText();

			System.out.println(" Title of the menu screen is : " + menuScreenTitleTextVk);

			nextGenMenuScreen001.info(MarkupHelper
					.createLabel(" Title of the menu screen is : " + menuScreenTitleTextVk, ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" Menu screen is : " + menuScreenTitleTextVk);

			FlutterElement menuScreenStoreNameVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_NAME_VK);

			String menuScreenStoreNameTextVk = menuScreenStoreNameVk.getText();

			System.out.println(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk);

			nextGenMenuScreen001.info(MarkupHelper
					.createLabel(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk, ExtentColor.CYAN));

			FlutterElement menuScreenStoreAddressVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ADDRESS_VK);

			String menuScreenStoreAddressTextVk = menuScreenStoreAddressVk.getText();

			System.out.println(" Store address text in the menu screen is : " + menuScreenStoreAddressTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Store address text in the menu screen is : " + menuScreenStoreAddressTextVk, ExtentColor.CYAN));

			FlutterElement menuScreenStoreZipcodeVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ZIPCODE_VK);

			String menuScreenStoreZipcodeTextVk = menuScreenStoreZipcodeVk.getText();

			System.out.println(" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk, ExtentColor.CYAN));

			FlutterElement storeDetailsButtonVk = find.byValueKey(menuScreenLocators.STORE_DETAILS_BUTTON_VK);

			String storeDetailsButtonTextVk = storeDetailsButtonVk.getText();

			System.out.println(" Details button text is : " + storeDetailsButtonTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(" Details button text is : " + storeDetailsButtonTextVk,
					ExtentColor.CYAN));

			storeDetailsButtonVk.click();

			FlutterElement storeInfoScreenTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);

			String storeInfoScreenTitleTextVk = storeInfoScreenTitleVk.getText();

			boolean storeInfoScreenTitleTextContainsVk = storeInfoScreenTitleTextVk.toLowerCase().contains("store");

			Assert.assertEquals(storeInfoScreenTitleTextContainsVk, true,
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			System.out.println(
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk,
					ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			holidayHours.holidayHours();

			FlutterElement storeInfoScreenBackNavigationVk = find
					.byValueKey(locationLocators.STOREINFO_SCREEN_BACKNAVIGATION_VKL);

			storeInfoScreenBackNavigationVk.click();

			FlutterElement menuScreenTitle1Vk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

			String menuScreenTitle1TextVk = menuScreenTitle1Vk.getText();

			boolean menuScreenTitle1TextContainsVk = menuScreenTitle1TextVk.toLowerCase().contains("menu");

			Assert.assertEquals(menuScreenTitle1TextContainsVk, true,
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			System.out.println(
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk,
					ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			JSONArray hierarchy = jObjectMenu.optJSONArray("hierarchy");

			for (int a = 0; a < hierarchy.length(); a++) {

				JSONObject hierarchyObject = hierarchy.optJSONObject(a);

				hierarchyType = hierarchyObject.optString("type");

				if (hierarchyType.contains("group")) {

					hierarchyName = hierarchyObject.optString("name");

					System.out.println(hierarchyName);

					hierarchyId = hierarchyObject.optString("id");

					System.out.println(hierarchyId);

					find.byValueKey("").click();

					if (!hierarchyObject.optJSONArray("contents").isEmpty()) {

						JSONArray hierarchyContents1 = hierarchyObject.optJSONArray("contents");

						for (int b = 0; b < hierarchyContents1.length(); b++) {

							JSONObject hierarchyObject1 = hierarchyContents1.optJSONObject(b);

							hierarchyType1 = hierarchyObject1.optString("type");

							if (hierarchyType1.contains("group")) {

								hierarchyName1 = hierarchyObject1.optString("name");

								System.out.println(hierarchyName1);

								hierarchyId1 = hierarchyObject1.optString("id");

								System.out.println(hierarchyId1);

								find.byValueKey("").click();

								if (!hierarchyObject1.optJSONArray("contents").isEmpty()) {

									JSONArray hierarchyContents2 = hierarchyObject1.optJSONArray("contents");

									for (int c = 0; c < hierarchyContents2.length(); c++) {

										JSONObject hierarchyObject2 = hierarchyContents2.optJSONObject(c);

										hierarchyType2 = hierarchyObject2.optString("type");

										if (hierarchyType2.contains("group")) {

											hierarchyName2 = hierarchyObject2.optString("name");

											System.out.println(hierarchyName2);

											hierarchyId2 = hierarchyObject2.optString("id");

											System.out.println(hierarchyId2);

											find.byValueKey("").click();

											if (!hierarchyObject2.optJSONArray("contents").isEmpty()) {

												JSONArray hierarchyContents3 = hierarchyObject2
														.optJSONArray("contents");

												for (int d = 0; d < hierarchyContents3.length(); d++) {

													JSONObject hierarchyObject3 = hierarchyContents3.optJSONObject(d);

													hierarchyType3 = hierarchyObject3.optString("type");

													if (hierarchyType3.contains("group")) {

														hierarchyName3 = hierarchyObject3.optString("name");

														System.out.println(hierarchyName3);

														hierarchyId3 = hierarchyObject3.optString("id");

														System.out.println(hierarchyId3);

														find.byValueKey("").click();

														if (!hierarchyObject3.optJSONArray("contents").isEmpty()) {

															JSONArray hierarchyContents4 = hierarchyObject3
																	.optJSONArray("contents");

															for (int e = 0; e < hierarchyContents4.length(); e++) {

																JSONObject hierarchyObject4 = hierarchyContents4
																		.optJSONObject(e);

																hierarchyType4 = hierarchyObject4.optString("type");

																if (hierarchyType4.contains("group")) {

																	hierarchyName4 = hierarchyObject4.optString("name");

																	System.out.println(hierarchyName4);

																	hierarchyId4 = hierarchyObject4.optString("id");

																	System.out.println(hierarchyId4);

																	find.byValueKey("").click();

																	if (!hierarchyObject4.optJSONArray("contents")
																			.isEmpty()) {

																		JSONArray hierarchyContents5 = hierarchyObject4
																				.optJSONArray("contents");

																		for (int f = 0; f < hierarchyContents5
																				.length(); f++) {
																			JSONObject hierarchyObject5 = hierarchyContents5
																					.optJSONObject(f);

																			hierarchyType5 = hierarchyObject5
																					.optString("type");

																			if (hierarchyType5.contains("group")) {

																				hierarchyName5 = hierarchyObject5
																						.optString("name");

																				System.out.println(hierarchyName5);

																				hierarchyId5 = hierarchyObject5
																						.optString("id");

																				System.out.println(hierarchyId5);

																				find.byValueKey("").click();

																			} else if (hierarchyType5
																					.contains("category")) {
																				if (!hierarchyObject5.optString("id")
																						.isEmpty()) {

																					hierarchyId5 = hierarchyObject5
																							.optString("id");

																					System.out.println(hierarchyId5);

																				} else {
																					hierarchyId5 = "";

																					System.out.println(hierarchyId5);
																				}
																			}
																		}
																	} else {
																		System.out.println(
																				" There is no contents to show ");
																	}

																} else if (hierarchyType4.contains("category")) {
																	if (!hierarchyObject4.optString("id").isEmpty()) {

																		hierarchyId4 = hierarchyObject4.optString("id");

																		System.out.println(hierarchyId4);

																	} else {
																		hierarchyId4 = "";

																		System.out.println(hierarchyId4);
																	}

																}
															}

														} else {
															System.out.println(" There is no item to show ");
														}

													} else if (hierarchyType3.contains("category")) {

														if (!hierarchyObject3.optString("id").isEmpty()) {

															hierarchyId3 = hierarchyObject3.optString("id");

															System.out.println(hierarchyId3);

														} else {
															hierarchyId3 = "";

															System.out.println(hierarchyId3);
														}
													}
												}
											} else {
												System.out.println("There is no item to show");
											}

										} else if (hierarchyType2.contains("category")) {

											if (!hierarchyObject2.optString("id").isEmpty()) {

												hierarchyId2 = hierarchyObject2.optString("id");

												System.out.println(hierarchyId2);

											} else {
												hierarchyId2 = "";

												System.out.println(hierarchyId2);
											}

										}
									}

								} else {
									System.out.println(" There is no item to show ");
								}

							} else if (hierarchyType1.contains("category")) {

								if (!hierarchyObject1.optString("id").isEmpty()) {

									hierarchyId1 = hierarchyObject1.optString("id");

									System.out.println(hierarchyId1);

								} else {
									hierarchyId1 = "";

									System.out.println(hierarchyId1);
								}

							}

						}
					} else {
						System.out.println(" There is no item to show ");
					}

				} else if (hierarchyType.contains("category")) {

					if (!hierarchyObject.optString("id").isEmpty()) {

						hierarchyId = hierarchyObject.optString("id");

						System.out.println(hierarchyId);

					} else {
						hierarchyId = "";

						System.out.println(hierarchyId);
					}

				}

				hierarchyTypes.add(hierarchyType1);
				hierarchyTypes.add(hierarchyType2);
				hierarchyTypes.add(hierarchyType3);
				hierarchyTypes.add(hierarchyType4);
				hierarchyTypes.add(hierarchyType5);
			}
			for (int i = 0; i < menuLength; i++) {

				if (menuLength > 0) {

					if (hierarchyTypes.get(i).equalsIgnoreCase("guest")) {

					}

					else if (hierarchyTypes.get(i).equalsIgnoreCase("category")) {

						JSONObject optJSONObjectMenu = optJSONArrayMenu.optJSONObject(i);

						String canOrderMenu = optJSONObjectMenu.optString("can_order");

						if (canOrderMenu == "true") {

							storeNamesMenu = optJSONObjectMenu.optString("name");

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(3000);

							int maxScrollAttempts3 = 5;

							if (menuLength < 4) {

								By targetElementLocator3 = By.xpath(
										"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
												+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
								// Set maximum number of scroll attempts
								// Loop to attempt finding the element and scrolling
								for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
									try {
										// Try to find the element
										WebElement element = driver.findElement(targetElementLocator3);
										if (element.isDisplayed()) {
											// Element found and displayed, perform actions
											System.out.println(
													" successfully found the store in the Menu screen of the index : "
															+ i + " is " + storeNamesMenu);

											break;
										}
									} catch (Exception e) {
										System.out.println(" Store not found in the : " + j1
												+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
												+ maxScrollAttempts3);
									}

								}
							}

							if (menuLength >= 4) {

								if (i == 4) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);
												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 8) {

								if (i == 8) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);
									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 12) {

								if (i == 12) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");

									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 16) {

								if (i == 16) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 20) {

								if (i == 20) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 24) {

								if (i == 24) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 28) {

								if (i == 28) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);
									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 32) {

								if (i == 32) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}

							Thread.sleep(3000);
							// Define your XPath locator for the target element

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(3000);

							FlutterElement menuScreenVk = find.byValueKey("menu_screen_menu_list_" + i);

							String menuScreenTextVk = menuScreenVk.getText();

							if (menuScreenTextVk.length() > 21) {

								String menuScreenTextSubStringVk = menuScreenTextVk.substring(0, 21);

								System.out.println(menuScreenTextSubStringVk);

								System.out.println(storeNamesMenu);

								boolean menuScreenTextSubStringContainsVk = storeNamesMenu
										.contains(menuScreenTextSubStringVk);

								Assert.assertEquals(menuScreenTextSubStringContainsVk, true,
										" Validated that the index : " + i + " name in the API menu & the " + i
												+ " name in the menu are same ");

							} else {

								Assert.assertEquals(storeNamesMenu, menuScreenTextVk, " Validated that the index : " + i
										+ " name in the API menu & the " + i + " name in the menu are same ");

							}

							System.out.println(" Validated that the index : " + i + " name in the API menu & the " + i
									+ " name in the menu are same ");

							nextGenMenuScreen001.info(MarkupHelper.createLabel(" Validated that the index : " + i
									+ " name in the API menu & the " + i + " name in the menu are same ",
									ExtentColor.CYAN));

							menuScreenVk.click();

						}

						else {

							System.out.println(
									" The store name which is listed in API but not listed in the menu screen is : "
											+ storeNamesMenu);
						}

						ExtentTest nextGenSubMenuScreen001 = test.createNode("nextGenSubMenuScreen_001");

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(3000);

						FlutterElement subMenuScreenTitleVk = find
								.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_TITLE_VK);

						String subMenuScreenTitleTextVk = subMenuScreenTitleVk.getText();

						System.out.println(" The title of the sub menu screen " + subMenuScreenTitleTextVk);

						nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
								" The title of the sub menu screen " + subMenuScreenTitleTextVk, ExtentColor.CYAN));

						nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Sub menu screen " + subMenuScreenTitleTextVk);

						if (subMenuScreenTitleTextVk.length() > 22) {

							String subMenuScreenTitleTextSubStringVk = subMenuScreenTitleTextVk.substring(0, 21);

							boolean subMenuScreenTitleTextSubStringContainsVk = storeNamesMenu
									.contains(subMenuScreenTitleTextSubStringVk);

							Assert.assertEquals(subMenuScreenTitleTextSubStringContainsVk, true,
									" Validated that the menu item name & sub menu header is same ");

						}

						else {

							Assert.assertEquals(storeNamesMenu, subMenuScreenTitleTextVk,
									" Validated that the menu item name & sub menu header is same ");
						}

						System.out.println(" Validated that the menu item name & sub menu header is same ");

						nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
								" Validated that the menu item name & sub menu header is same ", ExtentColor.CYAN));

						commonMethods.switchContext("NATIVE_APP");

						Thread.sleep(3000);

						JSONArray optJSONArraySubMenuItems = optJSONObjectMenu.optJSONArray("items");

						int optJSONArraySubMenuItemsLength = optJSONArraySubMenuItems.length();

						System.out.println(" Items length : " + optJSONArraySubMenuItemsLength);

						if (optJSONArraySubMenuItemsLength > 0) {

							subMenuTrue.clear();

							soldOut.clear();

							for (int j = 0; j < optJSONArraySubMenuItemsLength; j++) {

								optJSONObjectActive = optJSONArraySubMenuItems.optJSONObject(j);

								optStringActive = optJSONObjectActive.optString("active");

								parseIntActive = Integer.parseInt(optStringActive);

								optStringSubMenuName = optJSONObjectActive.optString("name");

								optStringAlcohol = optJSONObjectActive.optString("alcohol");

								optStringSubMenuIsSoldout = optJSONObjectActive.optString("is_sold_out");

								if (canOrderMenu == "true" && parseIntActive == 1) {

									soldOut.add(optStringSubMenuIsSoldout);

									subMenuTrue.add(optStringSubMenuName);

									subMenuTrueSize = subMenuTrue.size();

									optJSONArrayPrices = optJSONObjectActive.optJSONArray("prices");

									optJSONArrayOptionGroups = optJSONObjectActive.optJSONArray("option_groups");

									optJSONArrayPizzaGroups = optJSONObjectActive.optJSONArray("pizza_groups");

								}
								if (subMenuTrueSize > 0) {

									for (int n = 0; n < subMenuTrueSize; n++) {

										if (canOrderMenu == "true" && parseIntActive == 1) {

											int maxScrollAttempts3 = 5;

											if (subMenuTrueSize >= 5) {

												if (n == 5) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 10) {

												if (n == 10) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 15) {

												if (n == 15) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 20) {

												if (n == 20) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 25) {

												if (n == 25) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
											if (subMenuTrueSize >= 30) {

												if (n == 30) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
											if (subMenuTrueSize >= 35) {

												if (n == 35) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
										}

										commonMethods.switchContext("FLUTTER");

										Thread.sleep(3000);

										System.out.println(" sub menu true size : " + subMenuTrueSize);

										FlutterElement subMenuScreenItemVk = find
												.byValueKey("sub_menu_item_" + n + "_name");

										String subMenuScreenItemTextVk = subMenuScreenItemVk.getText();

										System.out.println(subMenuScreenItemTextVk);

										Assert.assertEquals(subMenuTrue.get(n), subMenuScreenItemTextVk,
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										System.out.println(
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ",
												ExtentColor.CYAN));

										nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										JSONObject optJSONObjectPrice = optJSONArraySubMenuItems.optJSONObject(n);

										JSONArray subMenuPoints = optJSONObjectPrice.optJSONArray("prices");

										int subMenuPointsLength = subMenuPoints.length();

										System.out.println(" sub menu length of index : " + subMenuPointsLength);

										sizeParam.clear();

										priceParam.clear();

										for (int p = 0; p < subMenuPointsLength; p++) {

											JSONObject subMenuPointsObject = subMenuPoints.optJSONObject(p);

											String sizeName = subMenuPointsObject.optString("name");

											String price = subMenuPointsObject.optString("price");

											sizeParam.add(sizeName);

											priceParam.add(price);

										}

										subMenuPrice.clear();

										for (int k = 0; k < subMenuPointsLength; k++) {

											if (subMenuPointsLength == 0) {

												if (sizeParam.get(k).length() == 0) {

													System.out.println(" The price is null in the index : " + n);

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" The price is null in the index : " + n,
															ExtentColor.CYAN));

												} else {

													System.out.println(" The price is null in the index : " + n);

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" The price is null in the index : " + n,
															ExtentColor.CYAN));
												}
											}

											else {

												FlutterElement subMenuScreenItemSizeVk = find
														.byValueKey("sub_menu_item_" + n + "_size_" + k);

												String subMenuScreenItemSizeTextVk = subMenuScreenItemSizeVk.getText();

												System.out.println(" The item size and price in the index : " + k
														+ " is : " + subMenuScreenItemSizeTextVk);

												nextGenSubMenuScreen001
														.info(MarkupHelper.createLabel(
																" The item size and price in the index : " + k
																		+ " is : " + subMenuScreenItemSizeTextVk,
																ExtentColor.CYAN));

												if (sizeParam.get(k).length() == 0) {

													BigDecimal originalBigDecimal = new BigDecimal(priceParam.get(k));

													// Round the BigDecimal to the specified number of decimal places
													BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
															BigDecimal.ROUND_HALF_UP);

													String priceParamInt = roundedBigDecimal.toString();

													String sizePrize = "" + priceParamInt;

													System.out.println(" size prize : " + sizePrize);

													System.out.println(" item size : " + subMenuScreenItemSizeTextVk);

													boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
															.contains(sizePrize);

													Assert.assertEquals(subMenuScreenItemSizeTextContainsVk, true,
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													System.out
															.println(" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ",
															ExtentColor.CYAN));
												} else {

													BigDecimal originalBigDecimal = new BigDecimal(priceParam.get(k));

													// Round the BigDecimal to the specified number of decimal places
													BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
															BigDecimal.ROUND_HALF_UP);

													String priceParamInt = roundedBigDecimal.toString();

													String sizePrize = sizeParam.get(k) + " - " + priceParamInt;

													System.out.println(" size prize : " + sizePrize);

													System.out.println(" item size : " + subMenuScreenItemSizeTextVk);

													boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
															.contains(sizePrize);

													Assert.assertEquals(subMenuScreenItemSizeTextContainsVk, true,
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													System.out
															.println(" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ",
															ExtentColor.CYAN));
												}

												FlutterElement subMenuScreenItemPriceVk = find
														.byValueKey("sub_menu_item_" + n + "_size_" + k);

												String subMenuScreenItemPriceTextVk = subMenuScreenItemPriceVk
														.getText();

												System.out.println(" The item price in the index : " + n + " is : "
														+ subMenuScreenItemPriceTextVk);

												nextGenSubMenuScreen001
														.info(MarkupHelper.createLabel(
																" The item price in the index : " + n + " is : "
																		+ subMenuScreenItemPriceTextVk,
																ExtentColor.CYAN));

												subMenuPrice.add(subMenuScreenItemPriceTextVk);
											}
										}

										ExtentTest nextGenItemQuantityScreen001 = test
												.createNode("nextGenItemQuantityScreen_001");

										if (soldOut.get(n) == "false") {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

											subMenuScreenItemVk.click();

											if (optStringAlcohol.equalsIgnoreCase("true")) {

												FlutterElement alcoholWarningTitleVk = find
														.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);

												String alcoholWarningTitleTextVk = alcoholWarningTitleVk.getText();

												System.out.println(" The alcohol warning pop-up title is : "
														+ alcoholWarningTitleTextVk);

												nextGenItemQuantityScreen001.info(MarkupHelper
														.createLabel(" The alcohol warning pop-up title is : "
																+ alcoholWarningTitleTextVk, ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver), " Alcohol warning pop-up screenshot ");

												FlutterElement alcoholWarningDescriptionVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);

												String alcoholWarningDescriptionTextVk = alcoholWarningDescriptionVk
														.getText();

												System.out.println(" The alcohol warning pop-up description is : "
														+ alcoholWarningDescriptionTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning pop-up description is : "
																		+ alcoholWarningDescriptionTextVk,
																ExtentColor.CYAN));

												FlutterElement alcoholWarningIUnderstandVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);

												String alcoholWarningIUnderstandTextVk = alcoholWarningIUnderstandVk
														.getText();

												System.out.println(" The alcohol warning pop-up description is : "
														+ alcoholWarningIUnderstandTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning pop-up button text is : "
																		+ alcoholWarningIUnderstandTextVk,
																ExtentColor.CYAN));

												alcoholWarningIUnderstandVk.click();

												FlutterElement alcoholWarningFooterButtonVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_FOOTER_BUTTON_VK);

												String alcoholWarningFooterButtonTextVk = alcoholWarningFooterButtonVk
														.getText();

												System.out.println(" The alcohol warning footer button text is : "
														+ alcoholWarningFooterButtonTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning footer button text is : "
																		+ alcoholWarningFooterButtonTextVk,
																ExtentColor.CYAN));

												alcoholWarningFooterButtonVk.click();

												FlutterElement alcoholWarningTitleVk1 = find
														.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);

												String alcoholWarningTitleTextVk1 = alcoholWarningTitleVk1.getText();

												Assert.assertEquals(alcoholWarningTitleTextVk,
														alcoholWarningTitleTextVk1,
														" Validated that the automatic alcohol pop-up title and the title after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up title in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the title after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up title in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the title after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.",
														ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver),
														" Alcohol warning pop-up screenshot after tapping footer button ");

												FlutterElement alcoholWarningDescription1Vk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);

												String alcoholWarningDescriptionText1Vk = alcoholWarningDescription1Vk
														.getText();

												Assert.assertEquals(alcoholWarningDescriptionTextVk,
														alcoholWarningDescriptionText1Vk,
														" Validated that the automatic alcohol pop-up description and the description after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up description in automatic alcohol pop-up is : "
																+ alcoholWarningDescriptionTextVk
																+ " and the description after tapping the footer button is : "
																+ alcoholWarningDescriptionText1Vk + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up description in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the description after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.",
														ExtentColor.CYAN));

												FlutterElement alcoholWarningIUnderstand1Vk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);

												String alcoholWarningIUnderstandText1Vk = alcoholWarningIUnderstand1Vk
														.getText();

												Assert.assertEquals(alcoholWarningIUnderstandTextVk,
														alcoholWarningIUnderstandText1Vk,
														" Validated that the automatic alcohol pop-up button text and the button text after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up button text in automatic alcohol pop-up is : "
																+ alcoholWarningIUnderstandTextVk
																+ " and the button text after tapping the footer button is : "
																+ alcoholWarningIUnderstandText1Vk + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up button text in automatic alcohol pop-up is : "
																+ alcoholWarningIUnderstandTextVk
																+ " and the button text after tapping the footer button is : "
																+ alcoholWarningIUnderstandText1Vk + " is same.",
														ExtentColor.CYAN));

												alcoholWarningIUnderstand1Vk.click();
											}

											else {

												System.out.println(
														" There is no alcohol warning and there continuing the item quantity selection ");

											}

											FlutterElement itemQuantityScreenTitleVk = find
													.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

											String itemQuantityScreenTitleTextVk = itemQuantityScreenTitleVk.getText();

											System.out.println(" Title of the item quantity screen is : "
													+ itemQuantityScreenTitleTextVk);

											nextGenItemQuantityScreen001.info(
													MarkupHelper.createLabel(" Title of the item quantity screen is : "
															+ itemQuantityScreenTitleTextVk, ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver), " Title of the item quantity screen is : "
															+ itemQuantityScreenTitleTextVk);

											if (subMenuTrue.get(n).length() > 22) {

												String itemQuantityScreenTitleTextSubStringVk = itemQuantityScreenTitleTextVk
														.substring(0, 15);

												Assert.assertEquals(
														subMenuTrue.get(n)
																.contains(itemQuantityScreenTitleTextSubStringVk),
														true,
														" Validated that the sub menu item name & item quantity title screen is same ");
											}

											else {

												Assert.assertEquals(subMenuTrue.get(n), itemQuantityScreenTitleTextVk,
														" Validated that the sub menu item name & item quantity title screen is same ");
											}

											System.out.println(
													" Validated that the sub menu item name & item quantity title screen is same ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the sub menu item name & item quantity title screen is same ",
													ExtentColor.CYAN));

											FlutterElement itemQuantityScreenDescriptionVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_DESCRIPTION_VK);

											String itemQuantityScreenDescriptionTextVk = itemQuantityScreenDescriptionVk
													.getText();

											System.out.println(" Description of the item quantity screen is : "
													+ itemQuantityScreenDescriptionTextVk);

											nextGenItemQuantityScreen001
													.info(MarkupHelper.createLabel(
															" Description of the item quantity screen is : "
																	+ itemQuantityScreenDescriptionTextVk,
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(3000);

											TouchAction touch = new TouchAction(driver);

											touch.press(PointOption.point(700, 2800))
													.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
													.moveTo(PointOption.point(700, 900)).release().perform();

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

//								FlutterElement itemQuantityScreenItemSizeVk = find
//										.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_PRICE_VK);
//
//								String itemQuantityScreenItemSizeTextVk = itemQuantityScreenItemSizeVk.getText();
//
//								if (itemQuantityScreenItemSizeTextVk.length() == 0) {
//
//									System.out.println(
//											" The item price is not displayed as well as not provided from the API ");
//
//								}
//
//								else {
//
//									StringBuilder stringBuilder = new StringBuilder();
//
//									for (String element : subMenuPrice) {
//										stringBuilder.append(element).append(", ");
//									}
//
//									if (stringBuilder.length() > 2) {
//										stringBuilder.setLength(stringBuilder.length() - 2);
//									}
//
//									String itemPrice = stringBuilder.toString();
//
//									System.out.println(itemQuantityScreenItemSizeTextVk);
//
//									System.out.println(itemPrice);
//
//									Assert.assertEquals(itemPrice, itemQuantityScreenItemSizeTextVk,
//											" Validated that the price and size in submenu & item quantity screen are same ");
//
//									System.out.println(
//											" The item quantity size and price in the item quantity screen is : "
//													+ itemQuantityScreenItemSizeTextVk);
//
//									nextGenItemQuantityScreen001.info(MarkupHelper
//											.createLabel(" The item quantity size in the item quantity screen is : "
//													+ itemQuantityScreenItemSizeTextVk, ExtentColor.CYAN));
//
//								}

											FlutterElement itemQuantityScreenItemQuantityCountVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountTextVk = itemQuantityScreenItemQuantityCountVk
													.getText();

											int itemQuantityScreenItemQuantityCountIntVk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountTextVk);

											System.out.println(" The quantity count in the item quantity screen is : "
													+ itemQuantityScreenItemQuantityCountTextVk);

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" The quantity count in the item quantity screen is : "
															+ itemQuantityScreenItemQuantityCountTextVk,
													ExtentColor.CYAN));

											FlutterElement itemQuantityScreenIncrementIconVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_INCREMENT_ICON_VK);

											itemQuantityScreenIncrementIconVk.click();

											Thread.sleep(3000);

											FlutterElement itemQuantityScreenItemQuantityCount1Vk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountText1Vk = itemQuantityScreenItemQuantityCount1Vk
													.getText();

											int itemQuantityScreenItemQuantityCountInt1Vk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountText1Vk);

											Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt1Vk,
													itemQuantityScreenItemQuantityCountIntVk,
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											System.out.println(
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											FlutterElement itemQuantityScreenDecrementIconVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_DECREMENT_ICON_VK);

											itemQuantityScreenDecrementIconVk.click();

											Thread.sleep(3000);

											FlutterElement itemQuantityScreenItemQuantityCount2Vk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountText2Vk = itemQuantityScreenItemQuantityCount2Vk
													.getText();

											int itemQuantityScreenItemQuantityCountInt2Vk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountText2Vk);

											Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt2Vk,
													itemQuantityScreenItemQuantityCountInt1Vk,
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

											System.out.println(
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

//											if (optJSONArrayPrices.length() != 0) {
//
//												FlutterElement optionGroupNameVk = find
//														.byValueKey(subMenuTrue.get(n) + "_size");
//
//												String optionGroupNameTextVk = optionGroupNameVk.getText();
//
//												optionGroupNameVk.click();
//
//												int optJSONArrayPricesLength = optJSONArrayPrices.length();
//
//												for (int d = 0; d < optJSONArrayPricesLength; d++) {
//
//													JSONObject optJSONObjectPricesList = optJSONArrayPrices
//															.optJSONObject(i);
//
//													String optStringSizeName = optJSONObjectPricesList
//															.optString("name");
//
//													String optStringSizePrice = optJSONObjectPricesList
//															.optString("price");
//
//													FlutterElement optStringSizeNameUI = find
//															.byValueKey(subMenuTrue.get(n) + "_" + optionGroupNameTextVk
//																	+ "_" + optStringSizeName);
//
//													String optStringSizeNameTextUI = optStringSizeNameUI.getText();
//
//													Assert.assertEquals(optStringSizeName, optStringSizeNameTextUI,
//															"Validated that the option name from API is : "
//																	+ optStringSizeName
//																	+ " and the option name in UI is : "
//																	+ optStringSizeNameTextUI + " is same ");
//
//													System.out.println("Validated that the option name from API is : "
//															+ optStringSizeName + " and the option name in UI is : "
//															+ optStringSizeNameTextUI + " is same ");
//
//													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
//															"Validated that the option name from API is : "
//																	+ optStringSizeName
//																	+ " and the option name in UI is : "
//																	+ optStringSizeNameTextUI + " is same ",
//															ExtentColor.CYAN));
//
//													nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
//															takeScreenshot(driver), "Optional group name : "
//																	+ optionGroupNameTextVk + " Screenshot ");
//
//													FlutterElement optStringSizePriceUI = find
//															.byValueKey(subMenuTrue.get(n) + "_" + optionGroupNameTextVk
//																	+ "_" + optStringSizeName);
//
//													String optStringSizePriceTextUI = optStringSizePriceUI.getText();
//
//													Assert.assertEquals(optStringSizePrice, optStringSizePriceTextUI,
//															"Validated that the option price from API is : "
//																	+ optStringSizePrice
//																	+ " and the option price in UI is : "
//																	+ optStringSizePriceTextUI + " is same ");
//
//													System.out.println("Validated that the option price from API is : "
//															+ optStringSizePrice + " and the option price in UI is : "
//															+ optStringSizePriceTextUI + " is same ");
//
//													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
//															"Validated that the option price from API is : "
//																	+ optStringSizePrice
//																	+ " and the option price in UI is : "
//																	+ optStringSizePriceTextUI + " is same ",
//															ExtentColor.CYAN));
//
//												}
//											} else {
//
//												System.out.println(
//														" The size is null and moving to the next option group ");
//											}

											if (optJSONArrayPizzaGroups.length() != 0) {

												int optJSONArrayPizzaGroupsLength = optJSONArrayPizzaGroups.length();

												for (int g = 0; g < optJSONArrayPizzaGroupsLength; g++) {

													JSONObject optJSONObjectPizzaGroup = optJSONArrayPizzaGroups
															.optJSONObject(n);

													optStringWholeGroupName = optJSONObjectPizzaGroup
															.optString("whole_group_name");

													optStringLeftGroupName = optJSONObjectPizzaGroup
															.optString("left_group_name");

													optStringRightGroupName = optJSONObjectPizzaGroup
															.optString("right_group_name");

													optStringAllowDoublingPizza = optJSONObjectPizzaGroup
															.optString("allow_doubling");

												}

												if (optJSONArrayOptionGroups.length() != 0) {

													int optJSONArrayOptionGroupsLength = optJSONArrayOptionGroups
															.length();

													for (int e = 0; e < optJSONArrayOptionGroupsLength; e++) {

														JSONObject optJSONArrayOptionGroupsObject = optJSONArrayOptionGroups
																.optJSONObject(e);

														String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																.optString("name");

														String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																.optString("multiselect");

														long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																.getLong("min");

														String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																.optString("quantities");

														if (optJSONArrayOptionGroupsObject.getLong("max") != 0) {

															optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																	.getLong("max");

														} else {

															optJSONArrayOptionGroupsObjectMax = 0;
														}

														if (optStringWholeGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)) {

															FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																	.byValueKey(subMenuTrue.get(n) + "_"
																			+ );

															String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																	.getText();

															Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																	optJSONArrayOptionGroupsObjectNameTextUI,
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															System.out.println(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ",
																	ExtentColor.CYAN));

															nextGenItemQuantityScreen001
																	.addScreenCaptureFromBase64String(
																			takeScreenshot(driver),
																			"Optional group name : "
																					+ optJSONArrayOptionGroupsObjectNameTextUI
																					+ " Screenshot ");

															optJSONArrayOptionGroupsObjectNameUI.click();

															JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																	.optJSONArray("options");

															if (optJSONArrayOptions.length() != 0) {

																int optJSONArrayOptionsLength = optJSONArrayOptions
																		.length();

																for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																	JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																			.optJSONObject(f);

																	String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																			.optString("name");

																	String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																			.optString("price");

																	String optStringIsDisabled = optJSONArrayOptionsObject
																			.optString("is_disabled");

																	if (optStringIsDisabled.equalsIgnoreCase("false")) {

																		FlutterElement optionGroupObjectNameVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectName);

																		String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																				.getText();

																		Assert.assertEquals(optionGroupObjectNameTextVk,
																				optJSONArrayOptionsObjectName,
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group name from API is : "
																								+ optionGroupObjectNameTextVk
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionsObjectName
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		FlutterElement optionGroupObjectPriceVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectPrice);

																		String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																				.getText();

																		Assert.assertEquals(
																				optionGroupObjectPriceTextVk,
																				optJSONArrayOptionsObjectPrice,
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group price from API is : "
																								+ optionGroupObjectPriceTextVk
																								+ " and the option group price in UI is : "
																								+ optJSONArrayOptionsObjectPrice
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has increment decrement button ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has increment decrement button ",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the optional field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the optional field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has checkbox ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has checkbox ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}

																		else if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection optional field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}
																	} else {

																		System.out.println(" The option : "
																				+ optJSONArrayOptionsObjectName
																				+ "is disabled and won't be displayed");

																	}
																}}}

														} else if (optStringLeftGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)){

															
															
														}
														else if (optStringRightGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)) {

															
															
														} 
														else (optStringWholeGroupName || optStringLeftGroupName || optStringRightGroupName
																!= optJSONArrayOptionGroupsObjectName) {

															FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																	.byValueKey(subMenuTrue.get(n) + "_"
																			+ optJSONArrayOptionGroupsObjectName);

															String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																	.getText();

															Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																	optJSONArrayOptionGroupsObjectNameTextUI,
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															System.out.println(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ",
																	ExtentColor.CYAN));

															nextGenItemQuantityScreen001
																	.addScreenCaptureFromBase64String(
																			takeScreenshot(driver),
																			"Optional group name : "
																					+ optJSONArrayOptionGroupsObjectNameTextUI
																					+ " Screenshot ");

															optJSONArrayOptionGroupsObjectNameUI.click();

															JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																	.optJSONArray("options");

															if (optJSONArrayOptions.length() != 0) {

																int optJSONArrayOptionsLength = optJSONArrayOptions
																		.length();

																for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																	JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																			.optJSONObject(f);

																	String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																			.optString("name");

																	String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																			.optString("price");

																	String optStringIsDisabled = optJSONArrayOptionsObject
																			.optString("is_disabled");

																	if (optStringIsDisabled.equalsIgnoreCase("false")) {

																		FlutterElement optionGroupObjectNameVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectName);

																		String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																				.getText();

																		Assert.assertEquals(optionGroupObjectNameTextVk,
																				optJSONArrayOptionsObjectName,
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group name from API is : "
																								+ optionGroupObjectNameTextVk
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionsObjectName
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		FlutterElement optionGroupObjectPriceVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectPrice);

																		String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																				.getText();

																		Assert.assertEquals(
																				optionGroupObjectPriceTextVk,
																				optJSONArrayOptionsObjectPrice,
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group price from API is : "
																								+ optionGroupObjectPriceTextVk
																								+ " and the option group price in UI is : "
																								+ optJSONArrayOptionsObjectPrice
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has increment decrement button ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has increment decrement button ",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the optional field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the optional field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has checkbox ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has checkbox ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}

																		else if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection optional field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}
																	} else {

																		System.out.println(" The option : "
																				+ optJSONArrayOptionsObjectName
																				+ "is disabled and won't be displayed");

																	}
																}
															}

														}

													}
												} else {

													System.out.println(" The option groups array is null ");
												}

											}

											else {

												if (optJSONArrayOptionGroups.length() != 0) {

													int optJSONArrayOptionGroupsLength = optJSONArrayOptionGroups
															.length();

													for (int e = 0; e < optJSONArrayOptionGroupsLength; e++) {

														JSONObject optJSONArrayOptionGroupsObject = optJSONArrayOptionGroups
																.optJSONObject(e);

														String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																.optString("name");

														String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																.optString("multiselect");

														long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																.getLong("min");

														String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																.optString("quantities");

														if (optJSONArrayOptionGroupsObject.getLong("max") != 0) {

															optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																	.getLong("max");

														} else {

															optJSONArrayOptionGroupsObjectMax = 0;
														}

														FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																.byValueKey(subMenuTrue.get(n) + "_"
																		+ optJSONArrayOptionGroupsObjectName);

														String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																.getText();

														Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																optJSONArrayOptionGroupsObjectNameTextUI,
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ");

														System.out.println(
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ");

														nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ",
																ExtentColor.CYAN));

														nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
																takeScreenshot(driver),
																"Optional group name : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " Screenshot ");

														optJSONArrayOptionGroupsObjectNameUI.click();

														JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																.optJSONArray("options");

														if (optJSONArrayOptions.length() != 0) {

															int optJSONArrayOptionsLength = optJSONArrayOptions
																	.length();

															for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																		.optJSONObject(f);

																String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																		.optString("name");

																String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																		.optString("price");

																String optStringIsDisabled = optJSONArrayOptionsObject
																		.optString("is_disabled");

																if (optStringIsDisabled.equalsIgnoreCase("false")) {

																	FlutterElement optionGroupObjectNameVk = find
																			.byValueKey(subMenuTrue.get(n) + "_"
																					+ optJSONArrayOptionGroupsObjectName
																					+ "_"
																					+ optJSONArrayOptionsObjectName);

																	String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																			.getText();

																	Assert.assertEquals(optionGroupObjectNameTextVk,
																			optJSONArrayOptionsObjectName,
																			"Validated that the option group name from API is : "
																					+ optionGroupObjectNameTextVk
																					+ " and the option group name in UI is : "
																					+ optJSONArrayOptionsObjectName
																					+ "in the index : " + f
																					+ " is same ");

																	System.out.println(
																			"Validated that the option group name from API is : "
																					+ optionGroupObjectNameTextVk
																					+ " and the option group name in UI is : "
																					+ optJSONArrayOptionsObjectName
																					+ "in the index : " + f
																					+ " is same ");

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					"Validated that the option group name from API is : "
																							+ optionGroupObjectNameTextVk
																							+ " and the option group name in UI is : "
																							+ optJSONArrayOptionsObjectName
																							+ "in the index : " + f
																							+ " is same ",
																					ExtentColor.CYAN));

																	FlutterElement optionGroupObjectPriceVk = find
																			.byValueKey(subMenuTrue.get(n) + "_"
																					+ optJSONArrayOptionGroupsObjectName
																					+ "_"
																					+ optJSONArrayOptionsObjectPrice);

																	String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																			.getText();

																	Assert.assertEquals(optionGroupObjectPriceTextVk,
																			optJSONArrayOptionsObjectPrice,
																			"Validated that the option group price from API is : "
																					+ optionGroupObjectPriceTextVk
																					+ " and the option group price in UI is : "
																					+ optJSONArrayOptionsObjectPrice
																					+ "in the index : " + f
																					+ " is same ");

																	System.out.println(
																			"Validated that the option group price from API is : "
																					+ optionGroupObjectPriceTextVk
																					+ " and the option group price in UI is : "
																					+ optJSONArrayOptionsObjectPrice
																					+ "in the index : " + f
																					+ " is same ");

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					"Validated that the option group price from API is : "
																							+ optionGroupObjectPriceTextVk
																							+ " and the option group price in UI is : "
																							+ optJSONArrayOptionsObjectPrice
																							+ "in the index : " + f
																							+ " is same ",
																					ExtentColor.CYAN));

																	if (optJSONArrayOptionGroupsObjectMin == 0
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																			&& optJSONArrayOptionGroupsObjectMax == 0) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is single selection optional field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field has increment decrement button ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field has increment decrement button ",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the optional field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the optional field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the optional field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the optional field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field has checkbox ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field has checkbox ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	} else if (optJSONArrayOptionGroupsObjectMin == 1
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																			&& optJSONArrayOptionGroupsObjectMax == 0) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is single selection Mandatory field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	}

																	else if (optJSONArrayOptionGroupsObjectMin == 0
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																			&& optJSONArrayOptionGroupsObjectMax == 0
																			|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is multi selection optional field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																			FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton2Vk
																					.click();

																			FlutterElement optionCount3Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText3Vk = optionCount3Vk
																					.getText();

																			long optionCountLong3Vk = Long
																					.parseLong(optionCountText3Vk);

																			System.out.println(
																					" After tapping the increment button twice count is : "
																							+ optionCountLong3Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping the increment button twice count is : "
																									+ optionCountLong3Vk,
																							ExtentColor.CYAN));

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	} else if (optJSONArrayOptionGroupsObjectMin == 1
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																			&& optJSONArrayOptionGroupsObjectMax == 0
																			|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is multi selection mandatory field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																			FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton2Vk
																					.click();

																			FlutterElement optionCount3Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText3Vk = optionCount3Vk
																					.getText();

																			long optionCountLong3Vk = Long
																					.parseLong(optionCountText3Vk);

																			System.out.println(
																					" After tapping the increment button twice count is : "
																							+ optionCountLong3Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping the increment button twice count is : "
																									+ optionCountLong3Vk,
																							ExtentColor.CYAN));

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	}
																} else {

																	System.out.println(" The option : "
																			+ optJSONArrayOptionsObjectName
																			+ "is disabled and won't be displayed");

																}
															}
														}

													}

												} else {
													System.out.println(
															" The Option group is null and moving to the next option group ");
												}

											}

											FlutterElement itemQuantityScreenBackIconVk = find
													.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_BACK_ICON_VK);

											itemQuantityScreenBackIconVk.click();

										} else {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

											FlutterElement subMenuScreenSoldOutVk = find
													.byValueKey("sub_menu_sold_out_item_" + n);

											String subMenuScreenSoldOutTextVk = subMenuScreenSoldOutVk.getText();

											boolean subMenuScreenSoldOutTextContainsVk = subMenuScreenSoldOutTextVk
													.contains(subMenuScreenSoldOutTextVk);

											System.out.println(" The item : " + subMenuTrue.get(n)
													+ " in the sub menu is sold out and showing the text as : "
													+ subMenuScreenSoldOutTextVk
													+ " and won't be processed further and clearing the pop-up ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(" The item : "
													+ subMenuTrue.get(n)
													+ " in the sub menu is sold out and showing the text as : "
													+ subMenuScreenSoldOutTextVk
													+ " and won't be processed further and clearing the pop-up ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" The item : " + subMenuTrue.get(n)
															+ " in the sub menu is sold out and showing the text as : "
															+ subMenuScreenSoldOutTextVk
															+ " and won't be processed further and clearing the pop-up ");

											Assert.assertEquals(subMenuScreenSoldOutTextContainsVk, true,
													" Validated that the item : " + subMenuTrue.get(n)
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk);

											System.out.println(" Validated that the item : " + subMenuTrue.get(n)
													+ " in the index : " + n + " contains the text : "
													+ subMenuScreenSoldOutTextVk);

											nextGenItemQuantityScreen001.info(MarkupHelper
													.createLabel(" Validated that the item : " + subMenuTrue.get(n)
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk, ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the item : " + optStringSubMenuName
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk);

											subMenuScreenItemVk.click();

											FlutterElement subMenuSoldOutPopupTitleVk = find
													.byValueKey(menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_TITLE_VK);

											String subMenuSoldOutPopupTitleTextVk = subMenuSoldOutPopupTitleVk
													.getText();

											System.out.println(" The sold out alert popup title is : "
													+ subMenuSoldOutPopupTitleTextVk);

											nextGenSubMenuScreen001
													.info(MarkupHelper.createLabel(
															" The sold out alert popup title is : "
																	+ subMenuSoldOutPopupTitleTextVk,
															ExtentColor.CYAN));

											FlutterElement subMenuSoldOutPopupDescriptionVk = find.byValueKey(
													menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_DESCRIPTION_VK);

											String subMenuSoldOutPopupDescriptionTextVk = subMenuSoldOutPopupDescriptionVk
													.getText();

											System.out.println(" The sold out alert popup description is : "
													+ subMenuSoldOutPopupDescriptionTextVk);

											boolean subMenuSoldOutPopupDescriptionTextContainsVk = subMenuSoldOutPopupDescriptionTextVk
													.contains("sold out");

											Assert.assertEquals(subMenuSoldOutPopupDescriptionTextContainsVk, true,
													" Validated that the pop-up contains the text sold out");

											System.out.println(" Validated that the pop-up contains the text sold out");

											nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
													" Validated that the pop-up contains the text sold out",
													ExtentColor.CYAN));

											FlutterElement subMenuSoldOutPopupOkayButtonVk = find.byValueKey(
													menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_OKAY_BUTTON_VK);

											subMenuSoldOutPopupOkayButtonVk.click();
										}
									}

//							}

//							else {
//
//								System.out.println(
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j);
//
//								nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j,
//										ExtentColor.CYAN));
//
//								nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j);
//
//							}
								} else {

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(3000);

									System.out.println(" As the sub menu item size is : " + subMenuTrueSize
											+ " There is no list to show and navigating to the menu screen for the next item in the menu ");

									nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
											" As the sub menu item size is : " + subMenuTrueSize
													+ " There is no list to show and navigating to the menu screen for the next item in the menu ",
											ExtentColor.CYAN));

									nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" Sub Menu screen " + storeNamesMenu);

									FlutterElement subMenuScreenBackIconVk = find
											.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);

									subMenuScreenBackIconVk.click();

								}

								commonMethods.switchContext("FLUTTER");

								Thread.sleep(3000);

								FlutterElement subMenuScreenBackIconVk = find
										.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);

								subMenuScreenBackIconVk.click();

							}
						} else {

							System.out.println(
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu);

							nextGenMenuScreen001.info(MarkupHelper.createLabel(
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu,
									ExtentColor.CYAN));

							nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu);
						}

					} else {

						System.out.println(" Menu list is empty ");

						nextGenMenuScreen001.info(MarkupHelper.createLabel(" Menu list is empty ", ExtentColor.CYAN));

						nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Menu list is empty ");
					}
				}
			}
		}else

	{

		System.out.println(" Menu screen doesn't have any menus and handling the error pop-up ");

		nextGenMenuScreen001.info(MarkupHelper
				.createLabel(" Menu screen doesn't have any menus and handling the error pop-up ", ExtentColor.CYAN));

		nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver), " Menu list empty screen");

		FlutterElement menuScreenEmptyMenuTitleVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_TITLE_VK);

		String menuScreenEmptyMenuTitleTextVk = menuScreenEmptyMenuTitleVk.getText();

		System.out.println(" Empty menu pop-up title is : " + menuScreenEmptyMenuTitleTextVk);

		nextGenMenuScreen001.info(MarkupHelper
				.createLabel(" Empty menu pop-up title is : " + menuScreenEmptyMenuTitleTextVk, ExtentColor.CYAN));

		FlutterElement menuScreenEmptyMenuDescriptionVk = find
				.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_DESCRIPTION_VK);

		String menuScreenEmptyMenuDescriptionTextVk = menuScreenEmptyMenuDescriptionVk.getText();

		System.out.println(" Empty menu pop-up description is : " + menuScreenEmptyMenuDescriptionTextVk);

		nextGenMenuScreen001.info(MarkupHelper.createLabel(
				" Empty menu pop-up description is : " + menuScreenEmptyMenuDescriptionTextVk, ExtentColor.CYAN));

		FlutterElement menuScreenEmptyMenuOkButtonVk = find
				.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_OK_BUTTON_VK);

		menuScreenEmptyMenuOkButtonVk.click();

		nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver), "After handling error pop-up");

		FlutterElement menuScreenBackIconVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_BACK_ICON_VK);

		menuScreenBackIconVk.click();
	}

}

//	private static void processJsonNode(JsonNode jsonNode) {
//		if (jsonNode.isObject()) {
//			jsonNode.fields().forEachRemaining(entry -> {
//				System.out.println(entry.getKey() + ": " + entry.getValue());
//				processJsonNode(entry.getValue());
//			});
//		} else if (jsonNode.isArray()) {
//			jsonNode.elements().forEachRemaining(CategoryGroups::processJsonNode);
//		} else {
//			System.out.println(jsonNode);
//		}
//	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-12-21 18:05:03.355
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-12-21 18:05:03.356
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-12-21 18:05:15.547
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.features;

import java.io.IOException;
import java.math.BigDecimal;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.locators.LocationLocators;
import com.locators.MenuScreenLocators;

import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.openqa.selenium.remote.DesiredCapabilities;
import com.locators.SignInLocators;

import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.remote.MobileCapabilityType;
import java.util.*;

/**
 * @Class_Name MenuApi
 * @Description Contains code to execute the test scripts for Menu, sub menu &
 *              Item quantity screen.
 * @author Lalith Kishore Ravi
 */

public class CategoryGroups extends BaseClass {

	static CommonMethods commonMethods = new CommonMethods();

	static String storeNamesMenu;

	static String optStringActive;

	static JSONObject optJSONObjectActive;

	static String optStringSubMenuName;

	static String optStringSubMenuIsSoldout;

	static String givenStoreCode = "999";

	static String sizeName;

	static String price;

	static int parseIntActive;

	static MenuScreenLocators menuScreenLocators = new MenuScreenLocators();

	static LocationLocators locationLocators = new LocationLocators();

	static SignInLocators signInLocators = new SignInLocators();

	static HolidayHours holidayHours = new HolidayHours();

	static ArrayList<String> subMenuTrue = new ArrayList<>();

	static ArrayList<String> soldOut = new ArrayList<>();

	static ArrayList<String> priceParam = new ArrayList<>();

	static ArrayList<String> sizeParam = new ArrayList<>();

	static ArrayList<String> subMenuPrice = new ArrayList<>();

	static ArrayList<String> hierarchyTypes = new ArrayList<>();

	static int subMenuTrueSize;

	static int optJSONArraySubMenuItemsLength;

	static String hierarchyType;

	static String hierarchyName;

	static String hierarchyId;

	static String hierarchyType1;

	static String hierarchyName1;

	static String hierarchyId1;

	static String hierarchyType2;

	static String hierarchyName2;

	static String hierarchyId2;

	static String hierarchyType3;

	static String hierarchyName3;

	static String hierarchyId3;

	static String hierarchyType4;

	static String hierarchyName4;

	static String hierarchyId4;

	static String hierarchyType5;

	static String hierarchyName5;

	static String hierarchyId5;

	static String optStringAlcohol;

	static JSONArray optJSONArrayPrices;

	static JSONArray optJSONArrayOptionGroups;

	static JSONArray optJSONArrayPizzaGroups;

	static long optJSONArrayOptionGroupsObjectMax;

	static String optStringWholeGroupName;

	static String optStringLeftGroupName;

	static String optStringRightGroupName;

	static String optStringAllowDoublingPizza;

	/**
	 * @Class_Name MenuApi
	 * @Method_Name menuApi
	 * @Description Contains code to execute the test scripts for Menu, sub menu &
	 *              Item quantity screen
	 * @return void
	 * @author Lalith Kishore Ravi
	 */
	@Test
	public static void menuApi() throws InterruptedException, GeneralSecurityException, IOException {

		DesiredCapabilities cap = new DesiredCapabilities();
		cap.setCapability(MobileCapabilityType.DEVICE_NAME, "Samsung");
		cap.setCapability("platformName", "Android");
		cap.setCapability(MobileCapabilityType.PLATFORM_VERSION, "16");
		cap.setCapability(MobileCapabilityType.UDID, "emulator-5554");
		cap.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
		cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 300);
		cap.setCapability("appPackage", "com.paytronix.nexgenfl");
		cap.setCapability("appActivity", "com.paytronix.nexgenfl.MainActivity");

		driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		BaseClass bc = new BaseClass();
		List<String> positiveSignInDatas = bc.signInPositiveData();
		String positiveEmailId = positiveSignInDatas.get(2);
		String positivePassword = positiveSignInDatas.get(5);

		FlutterFinder find = new FlutterFinder(driver);

		Thread.sleep(10000);

		FlutterElement landingLoginbutton = find.byValueKey(signInLocators.LANDING_LOGIN_BUTTON_VKL);
		commonMethods.checkAndClickTheElement(landingLoginbutton);

		FlutterElement loginScreenEmailTextField = find.byValueKey(signInLocators.LOGINSCREEN_EMAILFIELD_VKL);
		commonMethods.checkAndSendTheValue(loginScreenEmailTextField, positiveEmailId);

		// To enter the Valid password credentials //
		FlutterElement loginScreenPasswordField = find.byValueKey(signInLocators.LOGINSCREEN_PASSWORD_VKL);
		commonMethods.checkAndSendTheValue(loginScreenPasswordField, positivePassword);

		FlutterElement loginButtonEnable = find
				.byValueKey((signInLocators.LOGINSCREEN_LOGINWITHEMAIL_BUTTON_ENABLEDVKL));
		commonMethods.checkAndClickTheElement(loginButtonEnable);

		Thread.sleep(6000);

		find.byValueKey("signin_biometry_bottomsheet_close_button").click();

		find.byValueKey("bottombar_web_order").click();

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Lalith Kishore Ravi").assignDevice(deviceName)
				.assignCategory("Menu, Submenu & Item quantity");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/"
				+ givenStoreCode + "/menu/tier?";
		// Construct the query parameters
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");
		paramsMenu.put("include_combo", "false");
		paramsMenu.put("merchant_id", "60019");
		paramsMenu.put("provider", "px");
		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameters
		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");
		// Retrieving the response body using getBody() method
		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

//		ObjectMapper mapper =  new ObjectMapper();
//		mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
//		mapper.setVisibility(VisibilityChecker.Std.defaultInstance().withFieldVisibility(JsonAutoDetect.Visibility.ANY));
//
//		
//		ModifiersResponseModel readValue = mapper.readValue(responseMenu.body().asString(), ModifiersResponseModel.class);
//		
//		if (readValue != null && readValue.getHierarchy() != null) {
//			List<Content> contents =readValue.getHierarchy().stream()
//	                .filter(group -> "group".equalsIgnoreCase(group.getType()) && group.getContents() != null)
//	                .flatMap(group -> group.getContents().stream())
//	                .collect(Collectors.toList());
//			contents.forEach(t -> System.out.println("Stream "+t.getName()+" "+t.getId()));
//		}
//		
//		List<String> categoryID = new ArrayList<String>();
//		if(readValue.getHierarchy() != null && readValue.getHierarchy().size() > 0) {
//			readValue.getHierarchy().forEach(t -> {if(t.getType() != null && t.getType().equalsIgnoreCase("group")){
//				categoryID.forEach(e -> System.out.println("Stream "+e.getName()+" "+t.getId()));
//			}});
//		}

		JSONArray optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		int menuLength = optJSONArrayMenu.length();

		ExtentTest nextGenMenuScreen001 = test.createNode("nextGenMenuScreen_001");

		if (menuLength != 0) {

			FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

			String menuScreenTitleTextVk = menuScreenTitleVk.getText();

			System.out.println(" Title of the menu screen is : " + menuScreenTitleTextVk);

			nextGenMenuScreen001.info(MarkupHelper
					.createLabel(" Title of the menu screen is : " + menuScreenTitleTextVk, ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" Menu screen is : " + menuScreenTitleTextVk);

			FlutterElement menuScreenStoreNameVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_NAME_VK);

			String menuScreenStoreNameTextVk = menuScreenStoreNameVk.getText();

			System.out.println(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk);

			nextGenMenuScreen001.info(MarkupHelper
					.createLabel(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk, ExtentColor.CYAN));

			FlutterElement menuScreenStoreAddressVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ADDRESS_VK);

			String menuScreenStoreAddressTextVk = menuScreenStoreAddressVk.getText();

			System.out.println(" Store address text in the menu screen is : " + menuScreenStoreAddressTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Store address text in the menu screen is : " + menuScreenStoreAddressTextVk, ExtentColor.CYAN));

			FlutterElement menuScreenStoreZipcodeVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ZIPCODE_VK);

			String menuScreenStoreZipcodeTextVk = menuScreenStoreZipcodeVk.getText();

			System.out.println(" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk, ExtentColor.CYAN));

			FlutterElement storeDetailsButtonVk = find.byValueKey(menuScreenLocators.STORE_DETAILS_BUTTON_VK);

			String storeDetailsButtonTextVk = storeDetailsButtonVk.getText();

			System.out.println(" Details button text is : " + storeDetailsButtonTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(" Details button text is : " + storeDetailsButtonTextVk,
					ExtentColor.CYAN));

			storeDetailsButtonVk.click();

			FlutterElement storeInfoScreenTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);

			String storeInfoScreenTitleTextVk = storeInfoScreenTitleVk.getText();

			boolean storeInfoScreenTitleTextContainsVk = storeInfoScreenTitleTextVk.toLowerCase().contains("store");

			Assert.assertEquals(storeInfoScreenTitleTextContainsVk, true,
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			System.out.println(
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk,
					ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			holidayHours.holidayHours();

			FlutterElement storeInfoScreenBackNavigationVk = find
					.byValueKey(locationLocators.STOREINFO_SCREEN_BACKNAVIGATION_VKL);

			storeInfoScreenBackNavigationVk.click();

			FlutterElement menuScreenTitle1Vk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

			String menuScreenTitle1TextVk = menuScreenTitle1Vk.getText();

			boolean menuScreenTitle1TextContainsVk = menuScreenTitle1TextVk.toLowerCase().contains("menu");

			Assert.assertEquals(menuScreenTitle1TextContainsVk, true,
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			System.out.println(
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk,
					ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			JSONArray hierarchy = jObjectMenu.optJSONArray("hierarchy");

			for (int a = 0; a < hierarchy.length(); a++) {

				JSONObject hierarchyObject = hierarchy.optJSONObject(a);

				hierarchyType = hierarchyObject.optString("type");

				if (hierarchyType.contains("group")) {

					hierarchyName = hierarchyObject.optString("name");

					System.out.println(hierarchyName);

					hierarchyId = hierarchyObject.optString("id");

					System.out.println(hierarchyId);

					find.byValueKey("").click();

					if (!hierarchyObject.optJSONArray("contents").isEmpty()) {

						JSONArray hierarchyContents1 = hierarchyObject.optJSONArray("contents");

						for (int b = 0; b < hierarchyContents1.length(); b++) {

							JSONObject hierarchyObject1 = hierarchyContents1.optJSONObject(b);

							hierarchyType1 = hierarchyObject1.optString("type");

							if (hierarchyType1.contains("group")) {

								hierarchyName1 = hierarchyObject1.optString("name");

								System.out.println(hierarchyName1);

								hierarchyId1 = hierarchyObject1.optString("id");

								System.out.println(hierarchyId1);

								find.byValueKey("").click();

								if (!hierarchyObject1.optJSONArray("contents").isEmpty()) {

									JSONArray hierarchyContents2 = hierarchyObject1.optJSONArray("contents");

									for (int c = 0; c < hierarchyContents2.length(); c++) {

										JSONObject hierarchyObject2 = hierarchyContents2.optJSONObject(c);

										hierarchyType2 = hierarchyObject2.optString("type");

										if (hierarchyType2.contains("group")) {

											hierarchyName2 = hierarchyObject2.optString("name");

											System.out.println(hierarchyName2);

											hierarchyId2 = hierarchyObject2.optString("id");

											System.out.println(hierarchyId2);

											find.byValueKey("").click();

											if (!hierarchyObject2.optJSONArray("contents").isEmpty()) {

												JSONArray hierarchyContents3 = hierarchyObject2
														.optJSONArray("contents");

												for (int d = 0; d < hierarchyContents3.length(); d++) {

													JSONObject hierarchyObject3 = hierarchyContents3.optJSONObject(d);

													hierarchyType3 = hierarchyObject3.optString("type");

													if (hierarchyType3.contains("group")) {

														hierarchyName3 = hierarchyObject3.optString("name");

														System.out.println(hierarchyName3);

														hierarchyId3 = hierarchyObject3.optString("id");

														System.out.println(hierarchyId3);

														find.byValueKey("").click();

														if (!hierarchyObject3.optJSONArray("contents").isEmpty()) {

															JSONArray hierarchyContents4 = hierarchyObject3
																	.optJSONArray("contents");

															for (int e = 0; e < hierarchyContents4.length(); e++) {

																JSONObject hierarchyObject4 = hierarchyContents4
																		.optJSONObject(e);

																hierarchyType4 = hierarchyObject4.optString("type");

																if (hierarchyType4.contains("group")) {

																	hierarchyName4 = hierarchyObject4.optString("name");

																	System.out.println(hierarchyName4);

																	hierarchyId4 = hierarchyObject4.optString("id");

																	System.out.println(hierarchyId4);

																	find.byValueKey("").click();

																	if (!hierarchyObject4.optJSONArray("contents")
																			.isEmpty()) {

																		JSONArray hierarchyContents5 = hierarchyObject4
																				.optJSONArray("contents");

																		for (int f = 0; f < hierarchyContents5
																				.length(); f++) {
																			JSONObject hierarchyObject5 = hierarchyContents5
																					.optJSONObject(f);

																			hierarchyType5 = hierarchyObject5
																					.optString("type");

																			if (hierarchyType5.contains("group")) {

																				hierarchyName5 = hierarchyObject5
																						.optString("name");

																				System.out.println(hierarchyName5);

																				hierarchyId5 = hierarchyObject5
																						.optString("id");

																				System.out.println(hierarchyId5);

																				find.byValueKey("").click();

																			} else if (hierarchyType5
																					.contains("category")) {
																				if (!hierarchyObject5.optString("id")
																						.isEmpty()) {

																					hierarchyId5 = hierarchyObject5
																							.optString("id");

																					System.out.println(hierarchyId5);

																				} else {
																					hierarchyId5 = "";

																					System.out.println(hierarchyId5);
																				}
																			}
																		}
																	} else {
																		System.out.println(
																				" There is no contents to show ");
																	}

																} else if (hierarchyType4.contains("category")) {
																	if (!hierarchyObject4.optString("id").isEmpty()) {

																		hierarchyId4 = hierarchyObject4.optString("id");

																		System.out.println(hierarchyId4);

																	} else {
																		hierarchyId4 = "";

																		System.out.println(hierarchyId4);
																	}

																}
															}

														} else {
															System.out.println(" There is no item to show ");
														}

													} else if (hierarchyType3.contains("category")) {

														if (!hierarchyObject3.optString("id").isEmpty()) {

															hierarchyId3 = hierarchyObject3.optString("id");

															System.out.println(hierarchyId3);

														} else {
															hierarchyId3 = "";

															System.out.println(hierarchyId3);
														}
													}
												}
											} else {
												System.out.println("There is no item to show");
											}

										} else if (hierarchyType2.contains("category")) {

											if (!hierarchyObject2.optString("id").isEmpty()) {

												hierarchyId2 = hierarchyObject2.optString("id");

												System.out.println(hierarchyId2);

											} else {
												hierarchyId2 = "";

												System.out.println(hierarchyId2);
											}

										}
									}

								} else {
									System.out.println(" There is no item to show ");
								}

							} else if (hierarchyType1.contains("category")) {

								if (!hierarchyObject1.optString("id").isEmpty()) {

									hierarchyId1 = hierarchyObject1.optString("id");

									System.out.println(hierarchyId1);

								} else {
									hierarchyId1 = "";

									System.out.println(hierarchyId1);
								}

							}

						}
					} else {
						System.out.println(" There is no item to show ");
					}

				} else if (hierarchyType.contains("category")) {

					if (!hierarchyObject.optString("id").isEmpty()) {

						hierarchyId = hierarchyObject.optString("id");

						System.out.println(hierarchyId);

					} else {
						hierarchyId = "";

						System.out.println(hierarchyId);
					}

				}

				hierarchyTypes.add(hierarchyType1);
				hierarchyTypes.add(hierarchyType2);
				hierarchyTypes.add(hierarchyType3);
				hierarchyTypes.add(hierarchyType4);
				hierarchyTypes.add(hierarchyType5);
			}
			for (int i = 0; i < menuLength; i++) {

				if (menuLength > 0) {

					if (hierarchyTypes.get(i).equalsIgnoreCase("guest")) {

					}

					else if (hierarchyTypes.get(i).equalsIgnoreCase("category")) {

						JSONObject optJSONObjectMenu = optJSONArrayMenu.optJSONObject(i);

						String canOrderMenu = optJSONObjectMenu.optString("can_order");

						if (canOrderMenu == "true") {

							storeNamesMenu = optJSONObjectMenu.optString("name");

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(3000);

							int maxScrollAttempts3 = 5;

							if (menuLength < 4) {

								By targetElementLocator3 = By.xpath(
										"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
												+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
								// Set maximum number of scroll attempts
								// Loop to attempt finding the element and scrolling
								for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
									try {
										// Try to find the element
										WebElement element = driver.findElement(targetElementLocator3);
										if (element.isDisplayed()) {
											// Element found and displayed, perform actions
											System.out.println(
													" successfully found the store in the Menu screen of the index : "
															+ i + " is " + storeNamesMenu);

											break;
										}
									} catch (Exception e) {
										System.out.println(" Store not found in the : " + j1
												+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
												+ maxScrollAttempts3);
									}

								}
							}

							if (menuLength >= 4) {

								if (i == 4) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);
												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 8) {

								if (i == 8) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);
									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 12) {

								if (i == 12) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");

									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 16) {

								if (i == 16) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 20) {

								if (i == 20) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 24) {

								if (i == 24) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 28) {

								if (i == 28) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);
									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 32) {

								if (i == 32) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}

							Thread.sleep(3000);
							// Define your XPath locator for the target element

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(3000);

							FlutterElement menuScreenVk = find.byValueKey("menu_screen_menu_list_" + i);

							String menuScreenTextVk = menuScreenVk.getText();

							if (menuScreenTextVk.length() > 21) {

								String menuScreenTextSubStringVk = menuScreenTextVk.substring(0, 21);

								System.out.println(menuScreenTextSubStringVk);

								System.out.println(storeNamesMenu);

								boolean menuScreenTextSubStringContainsVk = storeNamesMenu
										.contains(menuScreenTextSubStringVk);

								Assert.assertEquals(menuScreenTextSubStringContainsVk, true,
										" Validated that the index : " + i + " name in the API menu & the " + i
												+ " name in the menu are same ");

							} else {

								Assert.assertEquals(storeNamesMenu, menuScreenTextVk, " Validated that the index : " + i
										+ " name in the API menu & the " + i + " name in the menu are same ");

							}

							System.out.println(" Validated that the index : " + i + " name in the API menu & the " + i
									+ " name in the menu are same ");

							nextGenMenuScreen001.info(MarkupHelper.createLabel(" Validated that the index : " + i
									+ " name in the API menu & the " + i + " name in the menu are same ",
									ExtentColor.CYAN));

							menuScreenVk.click();

						}

						else {

							System.out.println(
									" The store name which is listed in API but not listed in the menu screen is : "
											+ storeNamesMenu);
						}

						ExtentTest nextGenSubMenuScreen001 = test.createNode("nextGenSubMenuScreen_001");

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(3000);

						FlutterElement subMenuScreenTitleVk = find
								.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_TITLE_VK);

						String subMenuScreenTitleTextVk = subMenuScreenTitleVk.getText();

						System.out.println(" The title of the sub menu screen " + subMenuScreenTitleTextVk);

						nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
								" The title of the sub menu screen " + subMenuScreenTitleTextVk, ExtentColor.CYAN));

						nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Sub menu screen " + subMenuScreenTitleTextVk);

						if (subMenuScreenTitleTextVk.length() > 22) {

							String subMenuScreenTitleTextSubStringVk = subMenuScreenTitleTextVk.substring(0, 21);

							boolean subMenuScreenTitleTextSubStringContainsVk = storeNamesMenu
									.contains(subMenuScreenTitleTextSubStringVk);

							Assert.assertEquals(subMenuScreenTitleTextSubStringContainsVk, true,
									" Validated that the menu item name & sub menu header is same ");

						}

						else {

							Assert.assertEquals(storeNamesMenu, subMenuScreenTitleTextVk,
									" Validated that the menu item name & sub menu header is same ");
						}

						System.out.println(" Validated that the menu item name & sub menu header is same ");

						nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
								" Validated that the menu item name & sub menu header is same ", ExtentColor.CYAN));

						commonMethods.switchContext("NATIVE_APP");

						Thread.sleep(3000);

						JSONArray optJSONArraySubMenuItems = optJSONObjectMenu.optJSONArray("items");

						int optJSONArraySubMenuItemsLength = optJSONArraySubMenuItems.length();

						System.out.println(" Items length : " + optJSONArraySubMenuItemsLength);

						if (optJSONArraySubMenuItemsLength > 0) {

							subMenuTrue.clear();

							soldOut.clear();

							for (int j = 0; j < optJSONArraySubMenuItemsLength; j++) {

								optJSONObjectActive = optJSONArraySubMenuItems.optJSONObject(j);

								optStringActive = optJSONObjectActive.optString("active");

								parseIntActive = Integer.parseInt(optStringActive);

								optStringSubMenuName = optJSONObjectActive.optString("name");

								optStringAlcohol = optJSONObjectActive.optString("alcohol");

								optStringSubMenuIsSoldout = optJSONObjectActive.optString("is_sold_out");

								if (canOrderMenu == "true" && parseIntActive == 1) {

									soldOut.add(optStringSubMenuIsSoldout);

									subMenuTrue.add(optStringSubMenuName);

									subMenuTrueSize = subMenuTrue.size();

									optJSONArrayPrices = optJSONObjectActive.optJSONArray("prices");

									optJSONArrayOptionGroups = optJSONObjectActive.optJSONArray("option_groups");

									optJSONArrayPizzaGroups = optJSONObjectActive.optJSONArray("pizza_groups");

								}
								if (subMenuTrueSize > 0) {

									for (int n = 0; n < subMenuTrueSize; n++) {

										if (canOrderMenu == "true" && parseIntActive == 1) {

											int maxScrollAttempts3 = 5;

											if (subMenuTrueSize >= 5) {

												if (n == 5) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 10) {

												if (n == 10) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 15) {

												if (n == 15) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 20) {

												if (n == 20) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 25) {

												if (n == 25) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
											if (subMenuTrueSize >= 30) {

												if (n == 30) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
											if (subMenuTrueSize >= 35) {

												if (n == 35) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
										}

										commonMethods.switchContext("FLUTTER");

										Thread.sleep(3000);

										System.out.println(" sub menu true size : " + subMenuTrueSize);

										FlutterElement subMenuScreenItemVk = find
												.byValueKey("sub_menu_item_" + n + "_name");

										String subMenuScreenItemTextVk = subMenuScreenItemVk.getText();

										System.out.println(subMenuScreenItemTextVk);

										Assert.assertEquals(subMenuTrue.get(n), subMenuScreenItemTextVk,
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										System.out.println(
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ",
												ExtentColor.CYAN));

										nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										JSONObject optJSONObjectPrice = optJSONArraySubMenuItems.optJSONObject(n);

										JSONArray subMenuPoints = optJSONObjectPrice.optJSONArray("prices");

										int subMenuPointsLength = subMenuPoints.length();

										System.out.println(" sub menu length of index : " + subMenuPointsLength);

										sizeParam.clear();

										priceParam.clear();

										for (int p = 0; p < subMenuPointsLength; p++) {

											JSONObject subMenuPointsObject = subMenuPoints.optJSONObject(p);

											String sizeName = subMenuPointsObject.optString("name");

											String price = subMenuPointsObject.optString("price");

											sizeParam.add(sizeName);

											priceParam.add(price);

										}

										subMenuPrice.clear();

										for (int k = 0; k < subMenuPointsLength; k++) {

											if (subMenuPointsLength == 0) {

												if (sizeParam.get(k).length() == 0) {

													System.out.println(" The price is null in the index : " + n);

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" The price is null in the index : " + n,
															ExtentColor.CYAN));

												} else {

													System.out.println(" The price is null in the index : " + n);

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" The price is null in the index : " + n,
															ExtentColor.CYAN));
												}
											}

											else {

												FlutterElement subMenuScreenItemSizeVk = find
														.byValueKey("sub_menu_item_" + n + "_size_" + k);

												String subMenuScreenItemSizeTextVk = subMenuScreenItemSizeVk.getText();

												System.out.println(" The item size and price in the index : " + k
														+ " is : " + subMenuScreenItemSizeTextVk);

												nextGenSubMenuScreen001
														.info(MarkupHelper.createLabel(
																" The item size and price in the index : " + k
																		+ " is : " + subMenuScreenItemSizeTextVk,
																ExtentColor.CYAN));

												if (sizeParam.get(k).length() == 0) {

													BigDecimal originalBigDecimal = new BigDecimal(priceParam.get(k));

													// Round the BigDecimal to the specified number of decimal places
													BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
															BigDecimal.ROUND_HALF_UP);

													String priceParamInt = roundedBigDecimal.toString();

													String sizePrize = "" + priceParamInt;

													System.out.println(" size prize : " + sizePrize);

													System.out.println(" item size : " + subMenuScreenItemSizeTextVk);

													boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
															.contains(sizePrize);

													Assert.assertEquals(subMenuScreenItemSizeTextContainsVk, true,
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													System.out
															.println(" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ",
															ExtentColor.CYAN));
												} else {

													BigDecimal originalBigDecimal = new BigDecimal(priceParam.get(k));

													// Round the BigDecimal to the specified number of decimal places
													BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
															BigDecimal.ROUND_HALF_UP);

													String priceParamInt = roundedBigDecimal.toString();

													String sizePrize = sizeParam.get(k) + " - " + priceParamInt;

													System.out.println(" size prize : " + sizePrize);

													System.out.println(" item size : " + subMenuScreenItemSizeTextVk);

													boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
															.contains(sizePrize);

													Assert.assertEquals(subMenuScreenItemSizeTextContainsVk, true,
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													System.out
															.println(" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ",
															ExtentColor.CYAN));
												}

												FlutterElement subMenuScreenItemPriceVk = find
														.byValueKey("sub_menu_item_" + n + "_size_" + k);

												String subMenuScreenItemPriceTextVk = subMenuScreenItemPriceVk
														.getText();

												System.out.println(" The item price in the index : " + n + " is : "
														+ subMenuScreenItemPriceTextVk);

												nextGenSubMenuScreen001
														.info(MarkupHelper.createLabel(
																" The item price in the index : " + n + " is : "
																		+ subMenuScreenItemPriceTextVk,
																ExtentColor.CYAN));

												subMenuPrice.add(subMenuScreenItemPriceTextVk);
											}
										}

										ExtentTest nextGenItemQuantityScreen001 = test
												.createNode("nextGenItemQuantityScreen_001");

										if (soldOut.get(n) == "false") {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

											subMenuScreenItemVk.click();

											if (optStringAlcohol.equalsIgnoreCase("true")) {

												FlutterElement alcoholWarningTitleVk = find
														.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);

												String alcoholWarningTitleTextVk = alcoholWarningTitleVk.getText();

												System.out.println(" The alcohol warning pop-up title is : "
														+ alcoholWarningTitleTextVk);

												nextGenItemQuantityScreen001.info(MarkupHelper
														.createLabel(" The alcohol warning pop-up title is : "
																+ alcoholWarningTitleTextVk, ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver), " Alcohol warning pop-up screenshot ");

												FlutterElement alcoholWarningDescriptionVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);

												String alcoholWarningDescriptionTextVk = alcoholWarningDescriptionVk
														.getText();

												System.out.println(" The alcohol warning pop-up description is : "
														+ alcoholWarningDescriptionTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning pop-up description is : "
																		+ alcoholWarningDescriptionTextVk,
																ExtentColor.CYAN));

												FlutterElement alcoholWarningIUnderstandVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);

												String alcoholWarningIUnderstandTextVk = alcoholWarningIUnderstandVk
														.getText();

												System.out.println(" The alcohol warning pop-up description is : "
														+ alcoholWarningIUnderstandTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning pop-up button text is : "
																		+ alcoholWarningIUnderstandTextVk,
																ExtentColor.CYAN));

												alcoholWarningIUnderstandVk.click();

												FlutterElement alcoholWarningFooterButtonVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_FOOTER_BUTTON_VK);

												String alcoholWarningFooterButtonTextVk = alcoholWarningFooterButtonVk
														.getText();

												System.out.println(" The alcohol warning footer button text is : "
														+ alcoholWarningFooterButtonTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning footer button text is : "
																		+ alcoholWarningFooterButtonTextVk,
																ExtentColor.CYAN));

												alcoholWarningFooterButtonVk.click();

												FlutterElement alcoholWarningTitleVk1 = find
														.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);

												String alcoholWarningTitleTextVk1 = alcoholWarningTitleVk1.getText();

												Assert.assertEquals(alcoholWarningTitleTextVk,
														alcoholWarningTitleTextVk1,
														" Validated that the automatic alcohol pop-up title and the title after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up title in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the title after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up title in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the title after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.",
														ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver),
														" Alcohol warning pop-up screenshot after tapping footer button ");

												FlutterElement alcoholWarningDescription1Vk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);

												String alcoholWarningDescriptionText1Vk = alcoholWarningDescription1Vk
														.getText();

												Assert.assertEquals(alcoholWarningDescriptionTextVk,
														alcoholWarningDescriptionText1Vk,
														" Validated that the automatic alcohol pop-up description and the description after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up description in automatic alcohol pop-up is : "
																+ alcoholWarningDescriptionTextVk
																+ " and the description after tapping the footer button is : "
																+ alcoholWarningDescriptionText1Vk + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up description in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the description after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.",
														ExtentColor.CYAN));

												FlutterElement alcoholWarningIUnderstand1Vk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);

												String alcoholWarningIUnderstandText1Vk = alcoholWarningIUnderstand1Vk
														.getText();

												Assert.assertEquals(alcoholWarningIUnderstandTextVk,
														alcoholWarningIUnderstandText1Vk,
														" Validated that the automatic alcohol pop-up button text and the button text after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up button text in automatic alcohol pop-up is : "
																+ alcoholWarningIUnderstandTextVk
																+ " and the button text after tapping the footer button is : "
																+ alcoholWarningIUnderstandText1Vk + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up button text in automatic alcohol pop-up is : "
																+ alcoholWarningIUnderstandTextVk
																+ " and the button text after tapping the footer button is : "
																+ alcoholWarningIUnderstandText1Vk + " is same.",
														ExtentColor.CYAN));

												alcoholWarningIUnderstand1Vk.click();
											}

											else {

												System.out.println(
														" There is no alcohol warning and there continuing the item quantity selection ");

											}

											FlutterElement itemQuantityScreenTitleVk = find
													.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

											String itemQuantityScreenTitleTextVk = itemQuantityScreenTitleVk.getText();

											System.out.println(" Title of the item quantity screen is : "
													+ itemQuantityScreenTitleTextVk);

											nextGenItemQuantityScreen001.info(
													MarkupHelper.createLabel(" Title of the item quantity screen is : "
															+ itemQuantityScreenTitleTextVk, ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver), " Title of the item quantity screen is : "
															+ itemQuantityScreenTitleTextVk);

											if (subMenuTrue.get(n).length() > 22) {

												String itemQuantityScreenTitleTextSubStringVk = itemQuantityScreenTitleTextVk
														.substring(0, 15);

												Assert.assertEquals(
														subMenuTrue.get(n)
																.contains(itemQuantityScreenTitleTextSubStringVk),
														true,
														" Validated that the sub menu item name & item quantity title screen is same ");
											}

											else {

												Assert.assertEquals(subMenuTrue.get(n), itemQuantityScreenTitleTextVk,
														" Validated that the sub menu item name & item quantity title screen is same ");
											}

											System.out.println(
													" Validated that the sub menu item name & item quantity title screen is same ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the sub menu item name & item quantity title screen is same ",
													ExtentColor.CYAN));

											FlutterElement itemQuantityScreenDescriptionVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_DESCRIPTION_VK);

											String itemQuantityScreenDescriptionTextVk = itemQuantityScreenDescriptionVk
													.getText();

											System.out.println(" Description of the item quantity screen is : "
													+ itemQuantityScreenDescriptionTextVk);

											nextGenItemQuantityScreen001
													.info(MarkupHelper.createLabel(
															" Description of the item quantity screen is : "
																	+ itemQuantityScreenDescriptionTextVk,
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(3000);

											TouchAction touch = new TouchAction(driver);

											touch.press(PointOption.point(700, 2800))
													.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
													.moveTo(PointOption.point(700, 900)).release().perform();

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

//								FlutterElement itemQuantityScreenItemSizeVk = find
//										.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_PRICE_VK);
//
//								String itemQuantityScreenItemSizeTextVk = itemQuantityScreenItemSizeVk.getText();
//
//								if (itemQuantityScreenItemSizeTextVk.length() == 0) {
//
//									System.out.println(
//											" The item price is not displayed as well as not provided from the API ");
//
//								}
//
//								else {
//
//									StringBuilder stringBuilder = new StringBuilder();
//
//									for (String element : subMenuPrice) {
//										stringBuilder.append(element).append(", ");
//									}
//
//									if (stringBuilder.length() > 2) {
//										stringBuilder.setLength(stringBuilder.length() - 2);
//									}
//
//									String itemPrice = stringBuilder.toString();
//
//									System.out.println(itemQuantityScreenItemSizeTextVk);
//
//									System.out.println(itemPrice);
//
//									Assert.assertEquals(itemPrice, itemQuantityScreenItemSizeTextVk,
//											" Validated that the price and size in submenu & item quantity screen are same ");
//
//									System.out.println(
//											" The item quantity size and price in the item quantity screen is : "
//													+ itemQuantityScreenItemSizeTextVk);
//
//									nextGenItemQuantityScreen001.info(MarkupHelper
//											.createLabel(" The item quantity size in the item quantity screen is : "
//													+ itemQuantityScreenItemSizeTextVk, ExtentColor.CYAN));
//
//								}

											FlutterElement itemQuantityScreenItemQuantityCountVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountTextVk = itemQuantityScreenItemQuantityCountVk
													.getText();

											int itemQuantityScreenItemQuantityCountIntVk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountTextVk);

											System.out.println(" The quantity count in the item quantity screen is : "
													+ itemQuantityScreenItemQuantityCountTextVk);

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" The quantity count in the item quantity screen is : "
															+ itemQuantityScreenItemQuantityCountTextVk,
													ExtentColor.CYAN));

											FlutterElement itemQuantityScreenIncrementIconVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_INCREMENT_ICON_VK);

											itemQuantityScreenIncrementIconVk.click();

											Thread.sleep(3000);

											FlutterElement itemQuantityScreenItemQuantityCount1Vk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountText1Vk = itemQuantityScreenItemQuantityCount1Vk
													.getText();

											int itemQuantityScreenItemQuantityCountInt1Vk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountText1Vk);

											Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt1Vk,
													itemQuantityScreenItemQuantityCountIntVk,
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											System.out.println(
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											FlutterElement itemQuantityScreenDecrementIconVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_DECREMENT_ICON_VK);

											itemQuantityScreenDecrementIconVk.click();

											Thread.sleep(3000);

											FlutterElement itemQuantityScreenItemQuantityCount2Vk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountText2Vk = itemQuantityScreenItemQuantityCount2Vk
													.getText();

											int itemQuantityScreenItemQuantityCountInt2Vk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountText2Vk);

											Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt2Vk,
													itemQuantityScreenItemQuantityCountInt1Vk,
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

											System.out.println(
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

//											if (optJSONArrayPrices.length() != 0) {
//
//												FlutterElement optionGroupNameVk = find
//														.byValueKey(subMenuTrue.get(n) + "_size");
//
//												String optionGroupNameTextVk = optionGroupNameVk.getText();
//
//												optionGroupNameVk.click();
//
//												int optJSONArrayPricesLength = optJSONArrayPrices.length();
//
//												for (int d = 0; d < optJSONArrayPricesLength; d++) {
//
//													JSONObject optJSONObjectPricesList = optJSONArrayPrices
//															.optJSONObject(i);
//
//													String optStringSizeName = optJSONObjectPricesList
//															.optString("name");
//
//													String optStringSizePrice = optJSONObjectPricesList
//															.optString("price");
//
//													FlutterElement optStringSizeNameUI = find
//															.byValueKey(subMenuTrue.get(n) + "_" + optionGroupNameTextVk
//																	+ "_" + optStringSizeName);
//
//													String optStringSizeNameTextUI = optStringSizeNameUI.getText();
//
//													Assert.assertEquals(optStringSizeName, optStringSizeNameTextUI,
//															"Validated that the option name from API is : "
//																	+ optStringSizeName
//																	+ " and the option name in UI is : "
//																	+ optStringSizeNameTextUI + " is same ");
//
//													System.out.println("Validated that the option name from API is : "
//															+ optStringSizeName + " and the option name in UI is : "
//															+ optStringSizeNameTextUI + " is same ");
//
//													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
//															"Validated that the option name from API is : "
//																	+ optStringSizeName
//																	+ " and the option name in UI is : "
//																	+ optStringSizeNameTextUI + " is same ",
//															ExtentColor.CYAN));
//
//													nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
//															takeScreenshot(driver), "Optional group name : "
//																	+ optionGroupNameTextVk + " Screenshot ");
//
//													FlutterElement optStringSizePriceUI = find
//															.byValueKey(subMenuTrue.get(n) + "_" + optionGroupNameTextVk
//																	+ "_" + optStringSizeName);
//
//													String optStringSizePriceTextUI = optStringSizePriceUI.getText();
//
//													Assert.assertEquals(optStringSizePrice, optStringSizePriceTextUI,
//															"Validated that the option price from API is : "
//																	+ optStringSizePrice
//																	+ " and the option price in UI is : "
//																	+ optStringSizePriceTextUI + " is same ");
//
//													System.out.println("Validated that the option price from API is : "
//															+ optStringSizePrice + " and the option price in UI is : "
//															+ optStringSizePriceTextUI + " is same ");
//
//													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
//															"Validated that the option price from API is : "
//																	+ optStringSizePrice
//																	+ " and the option price in UI is : "
//																	+ optStringSizePriceTextUI + " is same ",
//															ExtentColor.CYAN));
//
//												}
//											} else {
//
//												System.out.println(
//														" The size is null and moving to the next option group ");
//											}

											if (optJSONArrayPizzaGroups.length() != 0) {

												int optJSONArrayPizzaGroupsLength = optJSONArrayPizzaGroups.length();

												for (int g = 0; g < optJSONArrayPizzaGroupsLength; g++) {

													JSONObject optJSONObjectPizzaGroup = optJSONArrayPizzaGroups
															.optJSONObject(n);

													optStringWholeGroupName = optJSONObjectPizzaGroup
															.optString("whole_group_name");

													optStringLeftGroupName = optJSONObjectPizzaGroup
															.optString("left_group_name");

													optStringRightGroupName = optJSONObjectPizzaGroup
															.optString("right_group_name");

													optStringAllowDoublingPizza = optJSONObjectPizzaGroup
															.optString("allow_doubling");

												}

												if (optJSONArrayOptionGroups.length() != 0) {

													int optJSONArrayOptionGroupsLength = optJSONArrayOptionGroups
															.length();

													for (int e = 0; e < optJSONArrayOptionGroupsLength; e++) {

														JSONObject optJSONArrayOptionGroupsObject = optJSONArrayOptionGroups
																.optJSONObject(e);

														String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																.optString("name");

														String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																.optString("multiselect");

														long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																.getLong("min");

														String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																.optString("quantities");

														if (optJSONArrayOptionGroupsObject.getLong("max") != 0) {

															optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																	.getLong("max");

														} else {

															optJSONArrayOptionGroupsObjectMax = 0;
														}

														if (optStringWholeGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)) {

															FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																	.byValueKey(subMenuTrue.get(n) + "_"
																			+ );

															String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																	.getText();

															Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																	optJSONArrayOptionGroupsObjectNameTextUI,
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															System.out.println(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ",
																	ExtentColor.CYAN));

															nextGenItemQuantityScreen001
																	.addScreenCaptureFromBase64String(
																			takeScreenshot(driver),
																			"Optional group name : "
																					+ optJSONArrayOptionGroupsObjectNameTextUI
																					+ " Screenshot ");

															optJSONArrayOptionGroupsObjectNameUI.click();

															JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																	.optJSONArray("options");

															if (optJSONArrayOptions.length() != 0) {

																int optJSONArrayOptionsLength = optJSONArrayOptions
																		.length();

																for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																	JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																			.optJSONObject(f);

																	String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																			.optString("name");

																	String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																			.optString("price");

																	String optStringIsDisabled = optJSONArrayOptionsObject
																			.optString("is_disabled");

																	if (optStringIsDisabled.equalsIgnoreCase("false")) {

																		FlutterElement optionGroupObjectNameVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectName);

																		String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																				.getText();

																		Assert.assertEquals(optionGroupObjectNameTextVk,
																				optJSONArrayOptionsObjectName,
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group name from API is : "
																								+ optionGroupObjectNameTextVk
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionsObjectName
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		FlutterElement optionGroupObjectPriceVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectPrice);

																		String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																				.getText();

																		Assert.assertEquals(
																				optionGroupObjectPriceTextVk,
																				optJSONArrayOptionsObjectPrice,
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group price from API is : "
																								+ optionGroupObjectPriceTextVk
																								+ " and the option group price in UI is : "
																								+ optJSONArrayOptionsObjectPrice
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has increment decrement button ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has increment decrement button ",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the optional field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the optional field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has checkbox ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has checkbox ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}

																		else if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection optional field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}
																	} else {

																		System.out.println(" The option : "
																				+ optJSONArrayOptionsObjectName
																				+ "is disabled and won't be displayed");

																	}
																}}}

														} else if (optStringLeftGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)){

															
															
														}
														else if (optStringRightGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)) {

															
															
														} 
														else (optStringWholeGroupName || optStringLeftGroupName || optStringRightGroupName
																!= optJSONArrayOptionGroupsObjectName) {

															FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																	.byValueKey(subMenuTrue.get(n) + "_"
																			+ optJSONArrayOptionGroupsObjectName);

															String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																	.getText();

															Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																	optJSONArrayOptionGroupsObjectNameTextUI,
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															System.out.println(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ",
																	ExtentColor.CYAN));

															nextGenItemQuantityScreen001
																	.addScreenCaptureFromBase64String(
																			takeScreenshot(driver),
																			"Optional group name : "
																					+ optJSONArrayOptionGroupsObjectNameTextUI
																					+ " Screenshot ");

															optJSONArrayOptionGroupsObjectNameUI.click();

															JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																	.optJSONArray("options");

															if (optJSONArrayOptions.length() != 0) {

																int optJSONArrayOptionsLength = optJSONArrayOptions
																		.length();

																for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																	JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																			.optJSONObject(f);

																	String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																			.optString("name");

																	String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																			.optString("price");

																	String optStringIsDisabled = optJSONArrayOptionsObject
																			.optString("is_disabled");

																	if (optStringIsDisabled.equalsIgnoreCase("false")) {

																		FlutterElement optionGroupObjectNameVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectName);

																		String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																				.getText();

																		Assert.assertEquals(optionGroupObjectNameTextVk,
																				optJSONArrayOptionsObjectName,
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group name from API is : "
																								+ optionGroupObjectNameTextVk
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionsObjectName
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		FlutterElement optionGroupObjectPriceVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectPrice);

																		String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																				.getText();

																		Assert.assertEquals(
																				optionGroupObjectPriceTextVk,
																				optJSONArrayOptionsObjectPrice,
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group price from API is : "
																								+ optionGroupObjectPriceTextVk
																								+ " and the option group price in UI is : "
																								+ optJSONArrayOptionsObjectPrice
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has increment decrement button ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has increment decrement button ",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the optional field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the optional field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has checkbox ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has checkbox ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}

																		else if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection optional field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}
																	} else {

																		System.out.println(" The option : "
																				+ optJSONArrayOptionsObjectName
																				+ "is disabled and won't be displayed");

																	}
																}
															}

														}

													}
												} else {

													System.out.println(" The option groups array is null ");
												}

											}

											else {

												if (optJSONArrayOptionGroups.length() != 0) {

													int optJSONArrayOptionGroupsLength = optJSONArrayOptionGroups
															.length();

													for (int e = 0; e < optJSONArrayOptionGroupsLength; e++) {

														JSONObject optJSONArrayOptionGroupsObject = optJSONArrayOptionGroups
																.optJSONObject(e);

														String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																.optString("name");

														String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																.optString("multiselect");

														long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																.getLong("min");

														String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																.optString("quantities");

														if (optJSONArrayOptionGroupsObject.getLong("max") != 0) {

															optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																	.getLong("max");

														} else {

															optJSONArrayOptionGroupsObjectMax = 0;
														}

														FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																.byValueKey(subMenuTrue.get(n) + "_"
																		+ optJSONArrayOptionGroupsObjectName);

														String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																.getText();

														Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																optJSONArrayOptionGroupsObjectNameTextUI,
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ");

														System.out.println(
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ");

														nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ",
																ExtentColor.CYAN));

														nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
																takeScreenshot(driver),
																"Optional group name : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " Screenshot ");

														optJSONArrayOptionGroupsObjectNameUI.click();

														JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																.optJSONArray("options");

														if (optJSONArrayOptions.length() != 0) {

															int optJSONArrayOptionsLength = optJSONArrayOptions
																	.length();

															for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																		.optJSONObject(f);

																String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																		.optString("name");

																String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																		.optString("price");

																String optStringIsDisabled = optJSONArrayOptionsObject
																		.optString("is_disabled");

																if (optStringIsDisabled.equalsIgnoreCase("false")) {

																	FlutterElement optionGroupObjectNameVk = find
																			.byValueKey(subMenuTrue.get(n) + "_"
																					+ optJSONArrayOptionGroupsObjectName
																					+ "_"
																					+ optJSONArrayOptionsObjectName);

																	String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																			.getText();

																	Assert.assertEquals(optionGroupObjectNameTextVk,
																			optJSONArrayOptionsObjectName,
																			"Validated that the option group name from API is : "
																					+ optionGroupObjectNameTextVk
																					+ " and the option group name in UI is : "
																					+ optJSONArrayOptionsObjectName
																					+ "in the index : " + f
																					+ " is same ");

																	System.out.println(
																			"Validated that the option group name from API is : "
																					+ optionGroupObjectNameTextVk
																					+ " and the option group name in UI is : "
																					+ optJSONArrayOptionsObjectName
																					+ "in the index : " + f
																					+ " is same ");

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					"Validated that the option group name from API is : "
																							+ optionGroupObjectNameTextVk
																							+ " and the option group name in UI is : "
																							+ optJSONArrayOptionsObjectName
																							+ "in the index : " + f
																							+ " is same ",
																					ExtentColor.CYAN));

																	FlutterElement optionGroupObjectPriceVk = find
																			.byValueKey(subMenuTrue.get(n) + "_"
																					+ optJSONArrayOptionGroupsObjectName
																					+ "_"
																					+ optJSONArrayOptionsObjectPrice);

																	String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																			.getText();

																	Assert.assertEquals(optionGroupObjectPriceTextVk,
																			optJSONArrayOptionsObjectPrice,
																			"Validated that the option group price from API is : "
																					+ optionGroupObjectPriceTextVk
																					+ " and the option group price in UI is : "
																					+ optJSONArrayOptionsObjectPrice
																					+ "in the index : " + f
																					+ " is same ");

																	System.out.println(
																			"Validated that the option group price from API is : "
																					+ optionGroupObjectPriceTextVk
																					+ " and the option group price in UI is : "
																					+ optJSONArrayOptionsObjectPrice
																					+ "in the index : " + f
																					+ " is same ");

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					"Validated that the option group price from API is : "
																							+ optionGroupObjectPriceTextVk
																							+ " and the option group price in UI is : "
																							+ optJSONArrayOptionsObjectPrice
																							+ "in the index : " + f
																							+ " is same ",
																					ExtentColor.CYAN));

																	if (optJSONArrayOptionGroupsObjectMin == 0
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																			&& optJSONArrayOptionGroupsObjectMax == 0) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is single selection optional field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field has increment decrement button ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field has increment decrement button ",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the optional field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the optional field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the optional field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the optional field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field has checkbox ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field has checkbox ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	} else if (optJSONArrayOptionGroupsObjectMin == 1
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																			&& optJSONArrayOptionGroupsObjectMax == 0) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is single selection Mandatory field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	}

																	else if (optJSONArrayOptionGroupsObjectMin == 0
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																			&& optJSONArrayOptionGroupsObjectMax == 0
																			|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is multi selection optional field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																			FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton2Vk
																					.click();

																			FlutterElement optionCount3Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText3Vk = optionCount3Vk
																					.getText();

																			long optionCountLong3Vk = Long
																					.parseLong(optionCountText3Vk);

																			System.out.println(
																					" After tapping the increment button twice count is : "
																							+ optionCountLong3Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping the increment button twice count is : "
																									+ optionCountLong3Vk,
																							ExtentColor.CYAN));

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	} else if (optJSONArrayOptionGroupsObjectMin == 1
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																			&& optJSONArrayOptionGroupsObjectMax == 0
																			|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is multi selection mandatory field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																			FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton2Vk
																					.click();

																			FlutterElement optionCount3Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText3Vk = optionCount3Vk
																					.getText();

																			long optionCountLong3Vk = Long
																					.parseLong(optionCountText3Vk);

																			System.out.println(
																					" After tapping the increment button twice count is : "
																							+ optionCountLong3Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping the increment button twice count is : "
																									+ optionCountLong3Vk,
																							ExtentColor.CYAN));

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	}
																} else {

																	System.out.println(" The option : "
																			+ optJSONArrayOptionsObjectName
																			+ "is disabled and won't be displayed");

																}
															}
														}

													}

												} else {
													System.out.println(
															" The Option group is null and moving to the next option group ");
												}

											}

											FlutterElement itemQuantityScreenBackIconVk = find
													.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_BACK_ICON_VK);

											itemQuantityScreenBackIconVk.click();

										} else {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

											FlutterElement subMenuScreenSoldOutVk = find
													.byValueKey("sub_menu_sold_out_item_" + n);

											String subMenuScreenSoldOutTextVk = subMenuScreenSoldOutVk.getText();

											boolean subMenuScreenSoldOutTextContainsVk = subMenuScreenSoldOutTextVk
													.contains(subMenuScreenSoldOutTextVk);

											System.out.println(" The item : " + subMenuTrue.get(n)
													+ " in the sub menu is sold out and showing the text as : "
													+ subMenuScreenSoldOutTextVk
													+ " and won't be processed further and clearing the pop-up ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(" The item : "
													+ subMenuTrue.get(n)
													+ " in the sub menu is sold out and showing the text as : "
													+ subMenuScreenSoldOutTextVk
													+ " and won't be processed further and clearing the pop-up ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" The item : " + subMenuTrue.get(n)
															+ " in the sub menu is sold out and showing the text as : "
															+ subMenuScreenSoldOutTextVk
															+ " and won't be processed further and clearing the pop-up ");

											Assert.assertEquals(subMenuScreenSoldOutTextContainsVk, true,
													" Validated that the item : " + subMenuTrue.get(n)
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk);

											System.out.println(" Validated that the item : " + subMenuTrue.get(n)
													+ " in the index : " + n + " contains the text : "
													+ subMenuScreenSoldOutTextVk);

											nextGenItemQuantityScreen001.info(MarkupHelper
													.createLabel(" Validated that the item : " + subMenuTrue.get(n)
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk, ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the item : " + optStringSubMenuName
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk);

											subMenuScreenItemVk.click();

											FlutterElement subMenuSoldOutPopupTitleVk = find
													.byValueKey(menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_TITLE_VK);

											String subMenuSoldOutPopupTitleTextVk = subMenuSoldOutPopupTitleVk
													.getText();

											System.out.println(" The sold out alert popup title is : "
													+ subMenuSoldOutPopupTitleTextVk);

											nextGenSubMenuScreen001
													.info(MarkupHelper.createLabel(
															" The sold out alert popup title is : "
																	+ subMenuSoldOutPopupTitleTextVk,
															ExtentColor.CYAN));

											FlutterElement subMenuSoldOutPopupDescriptionVk = find.byValueKey(
													menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_DESCRIPTION_VK);

											String subMenuSoldOutPopupDescriptionTextVk = subMenuSoldOutPopupDescriptionVk
													.getText();

											System.out.println(" The sold out alert popup description is : "
													+ subMenuSoldOutPopupDescriptionTextVk);

											boolean subMenuSoldOutPopupDescriptionTextContainsVk = subMenuSoldOutPopupDescriptionTextVk
													.contains("sold out");

											Assert.assertEquals(subMenuSoldOutPopupDescriptionTextContainsVk, true,
													" Validated that the pop-up contains the text sold out");

											System.out.println(" Validated that the pop-up contains the text sold out");

											nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
													" Validated that the pop-up contains the text sold out",
													ExtentColor.CYAN));

											FlutterElement subMenuSoldOutPopupOkayButtonVk = find.byValueKey(
													menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_OKAY_BUTTON_VK);

											subMenuSoldOutPopupOkayButtonVk.click();
										}
									}

//							}

//							else {
//
//								System.out.println(
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j);
//
//								nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j,
//										ExtentColor.CYAN));
//
//								nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j);
//
//							}
								} else {

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(3000);

									System.out.println(" As the sub menu item size is : " + subMenuTrueSize
											+ " There is no list to show and navigating to the menu screen for the next item in the menu ");

									nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
											" As the sub menu item size is : " + subMenuTrueSize
													+ " There is no list to show and navigating to the menu screen for the next item in the menu ",
											ExtentColor.CYAN));

									nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" Sub Menu screen " + storeNamesMenu);

									FlutterElement subMenuScreenBackIconVk = find
											.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);

									subMenuScreenBackIconVk.click();

								}

								commonMethods.switchContext("FLUTTER");

								Thread.sleep(3000);

								FlutterElement subMenuScreenBackIconVk = find
										.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);

								subMenuScreenBackIconVk.click();

							}
						} else {

							System.out.println(
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu);

							nextGenMenuScreen001.info(MarkupHelper.createLabel(
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu,
									ExtentColor.CYAN));

							nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu);
						}

					} else {

						System.out.println(" Menu list is empty ");

						nextGenMenuScreen001.info(MarkupHelper.createLabel(" Menu list is empty ", ExtentColor.CYAN));

						nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Menu list is empty ");
					}
				}
			}
		}else

	{

		System.out.println(" Menu screen doesn't have any menus and handling the error pop-up ");

		nextGenMenuScreen001.info(MarkupHelper
				.createLabel(" Menu screen doesn't have any menus and handling the error pop-up ", ExtentColor.CYAN));

		nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver), " Menu list empty screen");

		FlutterElement menuScreenEmptyMenuTitleVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_TITLE_VK);

		String menuScreenEmptyMenuTitleTextVk = menuScreenEmptyMenuTitleVk.getText();

		System.out.println(" Empty menu pop-up title is : " + menuScreenEmptyMenuTitleTextVk);

		nextGenMenuScreen001.info(MarkupHelper
				.createLabel(" Empty menu pop-up title is : " + menuScreenEmptyMenuTitleTextVk, ExtentColor.CYAN));

		FlutterElement menuScreenEmptyMenuDescriptionVk = find
				.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_DESCRIPTION_VK);

		String menuScreenEmptyMenuDescriptionTextVk = menuScreenEmptyMenuDescriptionVk.getText();

		System.out.println(" Empty menu pop-up description is : " + menuScreenEmptyMenuDescriptionTextVk);

		nextGenMenuScreen001.info(MarkupHelper.createLabel(
				" Empty menu pop-up description is : " + menuScreenEmptyMenuDescriptionTextVk, ExtentColor.CYAN));

		FlutterElement menuScreenEmptyMenuOkButtonVk = find
				.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_OK_BUTTON_VK);

		menuScreenEmptyMenuOkButtonVk.click();

		nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver), "After handling error pop-up");

		FlutterElement menuScreenBackIconVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_BACK_ICON_VK);

		menuScreenBackIconVk.click();
	}

}

//	private static void processJsonNode(JsonNode jsonNode) {
//		if (jsonNode.isObject()) {
//			jsonNode.fields().forEachRemaining(entry -> {
//				System.out.println(entry.getKey() + ": " + entry.getValue());
//				processJsonNode(entry.getValue());
//			});
//		} else if (jsonNode.isArray()) {
//			jsonNode.elements().forEachRemaining(CategoryGroups::processJsonNode);
//		} else {
//			System.out.println(jsonNode);
//		}
//	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-12-21 18:05:15.547
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-12-21 18:05:15.548
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:141)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:120)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2023-12-21 18:05:18.406
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.features;

import java.io.IOException;
import java.math.BigDecimal;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.time.Duration;
import java.util.concurrent.TimeUnit;
import java.util.stream.Collectors;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.introspect.VisibilityChecker;
import com.locators.LocationLocators;
import com.locators.MenuScreenLocators;

import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.openqa.selenium.remote.DesiredCapabilities;
import com.locators.SignInLocators;

import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.remote.MobileCapabilityType;
import java.util.*;

/**
 * @Class_Name MenuApi
 * @Description Contains code to execute the test scripts for Menu, sub menu &
 *              Item quantity screen.
 * @author Lalith Kishore Ravi
 */

public class CategoryGroups extends BaseClass {

	static CommonMethods commonMethods = new CommonMethods();

	static String storeNamesMenu;

	static String optStringActive;

	static JSONObject optJSONObjectActive;

	static String optStringSubMenuName;

	static String optStringSubMenuIsSoldout;

	static String givenStoreCode = "999";

	static String sizeName;

	static String price;

	static int parseIntActive;

	static MenuScreenLocators menuScreenLocators = new MenuScreenLocators();

	static LocationLocators locationLocators = new LocationLocators();

	static SignInLocators signInLocators = new SignInLocators();

	static HolidayHours holidayHours = new HolidayHours();

	static ArrayList<String> subMenuTrue = new ArrayList<>();

	static ArrayList<String> soldOut = new ArrayList<>();

	static ArrayList<String> priceParam = new ArrayList<>();

	static ArrayList<String> sizeParam = new ArrayList<>();

	static ArrayList<String> subMenuPrice = new ArrayList<>();

	static ArrayList<String> hierarchyTypes = new ArrayList<>();

	static int subMenuTrueSize;

	static int optJSONArraySubMenuItemsLength;

	static String hierarchyType;

	static String hierarchyName;

	static String hierarchyId;

	static String hierarchyType1;

	static String hierarchyName1;

	static String hierarchyId1;

	static String hierarchyType2;

	static String hierarchyName2;

	static String hierarchyId2;

	static String hierarchyType3;

	static String hierarchyName3;

	static String hierarchyId3;

	static String hierarchyType4;

	static String hierarchyName4;

	static String hierarchyId4;

	static String hierarchyType5;

	static String hierarchyName5;

	static String hierarchyId5;

	static String optStringAlcohol;

	static JSONArray optJSONArrayPrices;

	static JSONArray optJSONArrayOptionGroups;

	static JSONArray optJSONArrayPizzaGroups;

	static long optJSONArrayOptionGroupsObjectMax;

	static String optStringWholeGroupName;

	static String optStringLeftGroupName;

	static String optStringRightGroupName;

	static String optStringAllowDoublingPizza;

	/**
	 * @Class_Name MenuApi
	 * @Method_Name menuApi
	 * @Description Contains code to execute the test scripts for Menu, sub menu &
	 *              Item quantity screen
	 * @return void
	 * @author Lalith Kishore Ravi
	 */
	@Test
	public static void menuApi() throws InterruptedException, GeneralSecurityException, IOException {

		DesiredCapabilities cap = new DesiredCapabilities();
		cap.setCapability(MobileCapabilityType.DEVICE_NAME, "Samsung");
		cap.setCapability("platformName", "Android");
		cap.setCapability(MobileCapabilityType.PLATFORM_VERSION, "16");
		cap.setCapability(MobileCapabilityType.UDID, "emulator-5554");
		cap.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
		cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 300);
		cap.setCapability("appPackage", "com.paytronix.nexgenfl");
		cap.setCapability("appActivity", "com.paytronix.nexgenfl.MainActivity");

		driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		BaseClass bc = new BaseClass();
		List<String> positiveSignInDatas = bc.signInPositiveData();
		String positiveEmailId = positiveSignInDatas.get(2);
		String positivePassword = positiveSignInDatas.get(5);

		FlutterFinder find = new FlutterFinder(driver);

		Thread.sleep(10000);

		FlutterElement landingLoginbutton = find.byValueKey(signInLocators.LANDING_LOGIN_BUTTON_VKL);
		commonMethods.checkAndClickTheElement(landingLoginbutton);

		FlutterElement loginScreenEmailTextField = find.byValueKey(signInLocators.LOGINSCREEN_EMAILFIELD_VKL);
		commonMethods.checkAndSendTheValue(loginScreenEmailTextField, positiveEmailId);

		// To enter the Valid password credentials //
		FlutterElement loginScreenPasswordField = find.byValueKey(signInLocators.LOGINSCREEN_PASSWORD_VKL);
		commonMethods.checkAndSendTheValue(loginScreenPasswordField, positivePassword);

		FlutterElement loginButtonEnable = find
				.byValueKey((signInLocators.LOGINSCREEN_LOGINWITHEMAIL_BUTTON_ENABLEDVKL));
		commonMethods.checkAndClickTheElement(loginButtonEnable);

		Thread.sleep(6000);

		find.byValueKey("signin_biometry_bottomsheet_close_button").click();

		find.byValueKey("bottombar_web_order").click();

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Lalith Kishore Ravi").assignDevice(deviceName)
				.assignCategory("Menu, Submenu & Item quantity");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/"
				+ givenStoreCode + "/menu/tier?";
		// Construct the query parameters
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");
		paramsMenu.put("include_combo", "false");
		paramsMenu.put("merchant_id", "60019");
		paramsMenu.put("provider", "px");
		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameters
		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");
		// Retrieving the response body using getBody() method
		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

//		ObjectMapper mapper =  new ObjectMapper();
//		mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
//		mapper.setVisibility(VisibilityChecker.Std.defaultInstance().withFieldVisibility(JsonAutoDetect.Visibility.ANY));
//
//		
//		ModifiersResponseModel readValue = mapper.readValue(responseMenu.body().asString(), ModifiersResponseModel.class);
//		
//		if (readValue != null && readValue.getHierarchy() != null) {
//			List<Content> contents =readValue.getHierarchy().stream()
//	                .filter(group -> "group".equalsIgnoreCase(group.getType()) && group.getContents() != null)
//	                .flatMap(group -> group.getContents().stream())
//	                .collect(Collectors.toList());
//			contents.forEach(t -> System.out.println("Stream "+t.getName()+" "+t.getId()));
//		}
//		
//		List<String> categoryID = new ArrayList<String>();
//		if(readValue.getHierarchy() != null && readValue.getHierarchy().size() > 0) {
//			readValue.getHierarchy().forEach(t -> {if(t.getType() != null && t.getType().equalsIgnoreCase("group")){
//				categoryID.forEach(e -> System.out.println("Stream "+e.getName()+" "+t.getId()));
//			}});
//		}

		JSONArray optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		int menuLength = optJSONArrayMenu.length();

		ExtentTest nextGenMenuScreen001 = test.createNode("nextGenMenuScreen_001");

		if (menuLength != 0) {

			FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

			String menuScreenTitleTextVk = menuScreenTitleVk.getText();

			System.out.println(" Title of the menu screen is : " + menuScreenTitleTextVk);

			nextGenMenuScreen001.info(MarkupHelper
					.createLabel(" Title of the menu screen is : " + menuScreenTitleTextVk, ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" Menu screen is : " + menuScreenTitleTextVk);

			FlutterElement menuScreenStoreNameVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_NAME_VK);

			String menuScreenStoreNameTextVk = menuScreenStoreNameVk.getText();

			System.out.println(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk);

			nextGenMenuScreen001.info(MarkupHelper
					.createLabel(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk, ExtentColor.CYAN));

			FlutterElement menuScreenStoreAddressVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ADDRESS_VK);

			String menuScreenStoreAddressTextVk = menuScreenStoreAddressVk.getText();

			System.out.println(" Store address text in the menu screen is : " + menuScreenStoreAddressTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Store address text in the menu screen is : " + menuScreenStoreAddressTextVk, ExtentColor.CYAN));

			FlutterElement menuScreenStoreZipcodeVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ZIPCODE_VK);

			String menuScreenStoreZipcodeTextVk = menuScreenStoreZipcodeVk.getText();

			System.out.println(" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk, ExtentColor.CYAN));

			FlutterElement storeDetailsButtonVk = find.byValueKey(menuScreenLocators.STORE_DETAILS_BUTTON_VK);

			String storeDetailsButtonTextVk = storeDetailsButtonVk.getText();

			System.out.println(" Details button text is : " + storeDetailsButtonTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(" Details button text is : " + storeDetailsButtonTextVk,
					ExtentColor.CYAN));

			storeDetailsButtonVk.click();

			FlutterElement storeInfoScreenTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);

			String storeInfoScreenTitleTextVk = storeInfoScreenTitleVk.getText();

			boolean storeInfoScreenTitleTextContainsVk = storeInfoScreenTitleTextVk.toLowerCase().contains("store");

			Assert.assertEquals(storeInfoScreenTitleTextContainsVk, true,
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			System.out.println(
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk,
					ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			holidayHours.holidayHours();

			FlutterElement storeInfoScreenBackNavigationVk = find
					.byValueKey(locationLocators.STOREINFO_SCREEN_BACKNAVIGATION_VKL);

			storeInfoScreenBackNavigationVk.click();

			FlutterElement menuScreenTitle1Vk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

			String menuScreenTitle1TextVk = menuScreenTitle1Vk.getText();

			boolean menuScreenTitle1TextContainsVk = menuScreenTitle1TextVk.toLowerCase().contains("menu");

			Assert.assertEquals(menuScreenTitle1TextContainsVk, true,
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			System.out.println(
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk,
					ExtentColor.CYAN));

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			JSONArray hierarchy = jObjectMenu.optJSONArray("hierarchy");

			for (int a = 0; a < hierarchy.length(); a++) {

				JSONObject hierarchyObject = hierarchy.optJSONObject(a);

				hierarchyType = hierarchyObject.optString("type");

				if (hierarchyType.contains("group")) {

					hierarchyName = hierarchyObject.optString("name");

					System.out.println(hierarchyName);

					hierarchyId = hierarchyObject.optString("id");

					System.out.println(hierarchyId);

					find.byValueKey("").click();

					if (!hierarchyObject.optJSONArray("contents").isEmpty()) {

						JSONArray hierarchyContents1 = hierarchyObject.optJSONArray("contents");

						for (int b = 0; b < hierarchyContents1.length(); b++) {

							JSONObject hierarchyObject1 = hierarchyContents1.optJSONObject(b);

							hierarchyType1 = hierarchyObject1.optString("type");

							if (hierarchyType1.contains("group")) {

								hierarchyName1 = hierarchyObject1.optString("name");

								System.out.println(hierarchyName1);

								hierarchyId1 = hierarchyObject1.optString("id");

								System.out.println(hierarchyId1);

								find.byValueKey("").click();

								if (!hierarchyObject1.optJSONArray("contents").isEmpty()) {

									JSONArray hierarchyContents2 = hierarchyObject1.optJSONArray("contents");

									for (int c = 0; c < hierarchyContents2.length(); c++) {

										JSONObject hierarchyObject2 = hierarchyContents2.optJSONObject(c);

										hierarchyType2 = hierarchyObject2.optString("type");

										if (hierarchyType2.contains("group")) {

											hierarchyName2 = hierarchyObject2.optString("name");

											System.out.println(hierarchyName2);

											hierarchyId2 = hierarchyObject2.optString("id");

											System.out.println(hierarchyId2);

											find.byValueKey("").click();

											if (!hierarchyObject2.optJSONArray("contents").isEmpty()) {

												JSONArray hierarchyContents3 = hierarchyObject2
														.optJSONArray("contents");

												for (int d = 0; d < hierarchyContents3.length(); d++) {

													JSONObject hierarchyObject3 = hierarchyContents3.optJSONObject(d);

													hierarchyType3 = hierarchyObject3.optString("type");

													if (hierarchyType3.contains("group")) {

														hierarchyName3 = hierarchyObject3.optString("name");

														System.out.println(hierarchyName3);

														hierarchyId3 = hierarchyObject3.optString("id");

														System.out.println(hierarchyId3);

														find.byValueKey("").click();

														if (!hierarchyObject3.optJSONArray("contents").isEmpty()) {

															JSONArray hierarchyContents4 = hierarchyObject3
																	.optJSONArray("contents");

															for (int e = 0; e < hierarchyContents4.length(); e++) {

																JSONObject hierarchyObject4 = hierarchyContents4
																		.optJSONObject(e);

																hierarchyType4 = hierarchyObject4.optString("type");

																if (hierarchyType4.contains("group")) {

																	hierarchyName4 = hierarchyObject4.optString("name");

																	System.out.println(hierarchyName4);

																	hierarchyId4 = hierarchyObject4.optString("id");

																	System.out.println(hierarchyId4);

																	find.byValueKey("").click();

																	if (!hierarchyObject4.optJSONArray("contents")
																			.isEmpty()) {

																		JSONArray hierarchyContents5 = hierarchyObject4
																				.optJSONArray("contents");

																		for (int f = 0; f < hierarchyContents5
																				.length(); f++) {
																			JSONObject hierarchyObject5 = hierarchyContents5
																					.optJSONObject(f);

																			hierarchyType5 = hierarchyObject5
																					.optString("type");

																			if (hierarchyType5.contains("group")) {

																				hierarchyName5 = hierarchyObject5
																						.optString("name");

																				System.out.println(hierarchyName5);

																				hierarchyId5 = hierarchyObject5
																						.optString("id");

																				System.out.println(hierarchyId5);

																				find.byValueKey("").click();

																			} else if (hierarchyType5
																					.contains("category")) {
																				if (!hierarchyObject5.optString("id")
																						.isEmpty()) {

																					hierarchyId5 = hierarchyObject5
																							.optString("id");

																					System.out.println(hierarchyId5);

																				} else {
																					hierarchyId5 = "";

																					System.out.println(hierarchyId5);
																				}
																			}
																		}
																	} else {
																		System.out.println(
																				" There is no contents to show ");
																	}

																} else if (hierarchyType4.contains("category")) {
																	if (!hierarchyObject4.optString("id").isEmpty()) {

																		hierarchyId4 = hierarchyObject4.optString("id");

																		System.out.println(hierarchyId4);

																	} else {
																		hierarchyId4 = "";

																		System.out.println(hierarchyId4);
																	}

																}
															}

														} else {
															System.out.println(" There is no item to show ");
														}

													} else if (hierarchyType3.contains("category")) {

														if (!hierarchyObject3.optString("id").isEmpty()) {

															hierarchyId3 = hierarchyObject3.optString("id");

															System.out.println(hierarchyId3);

														} else {
															hierarchyId3 = "";

															System.out.println(hierarchyId3);
														}
													}
												}
											} else {
												System.out.println("There is no item to show");
											}

										} else if (hierarchyType2.contains("category")) {

											if (!hierarchyObject2.optString("id").isEmpty()) {

												hierarchyId2 = hierarchyObject2.optString("id");

												System.out.println(hierarchyId2);

											} else {
												hierarchyId2 = "";

												System.out.println(hierarchyId2);
											}

										}
									}

								} else {
									System.out.println(" There is no item to show ");
								}

							} else if (hierarchyType1.contains("category")) {

								if (!hierarchyObject1.optString("id").isEmpty()) {

									hierarchyId1 = hierarchyObject1.optString("id");

									System.out.println(hierarchyId1);

								} else {
									hierarchyId1 = "";

									System.out.println(hierarchyId1);
								}

							}

						}
					} else {
						System.out.println(" There is no item to show ");
					}

				} else if (hierarchyType.contains("category")) {

					if (!hierarchyObject.optString("id").isEmpty()) {

						hierarchyId = hierarchyObject.optString("id");

						System.out.println(hierarchyId);

					} else {
						hierarchyId = "";

						System.out.println(hierarchyId);
					}

				}

				hierarchyTypes.add(hierarchyType1);
				hierarchyTypes.add(hierarchyType2);
				hierarchyTypes.add(hierarchyType3);
				hierarchyTypes.add(hierarchyType4);
				hierarchyTypes.add(hierarchyType5);
			}
			for (int i = 0; i < menuLength; i++) {

				if (menuLength > 0) {

					if (hierarchyTypes.get(i).equalsIgnoreCase("guest")) {

					}

					else if (hierarchyTypes.get(i).equalsIgnoreCase("category")) {

						JSONObject optJSONObjectMenu = optJSONArrayMenu.optJSONObject(i);

						String canOrderMenu = optJSONObjectMenu.optString("can_order");

						if (canOrderMenu == "true") {

							storeNamesMenu = optJSONObjectMenu.optString("name");

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(3000);

							int maxScrollAttempts3 = 5;

							if (menuLength < 4) {

								By targetElementLocator3 = By.xpath(
										"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
												+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
								// Set maximum number of scroll attempts
								// Loop to attempt finding the element and scrolling
								for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
									try {
										// Try to find the element
										WebElement element = driver.findElement(targetElementLocator3);
										if (element.isDisplayed()) {
											// Element found and displayed, perform actions
											System.out.println(
													" successfully found the store in the Menu screen of the index : "
															+ i + " is " + storeNamesMenu);

											break;
										}
									} catch (Exception e) {
										System.out.println(" Store not found in the : " + j1
												+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
												+ maxScrollAttempts3);
									}

								}
							}

							if (menuLength >= 4) {

								if (i == 4) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);
												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 8) {

								if (i == 8) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);
									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 12) {

								if (i == 12) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");

									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 16) {

								if (i == 16) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 20) {

								if (i == 20) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 24) {

								if (i == 24) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 28) {

								if (i == 28) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);
									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}
							if (menuLength >= 32) {

								if (i == 32) {

									TouchAction touch = new TouchAction(driver);
									touch.press(PointOption.point(700, 2900))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
											.moveTo(PointOption.point(700, 1450)).release().perform();
									System.out.println(" Scrolling to interact with the element " + maxScrollAttempts3);

									By targetElementLocator3 = By.xpath(
											"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
													+ "'" + storeNamesMenu.toLowerCase() + "'" + ")]");
									// Set maximum number of scroll attempts
									// Loop to attempt finding the element and scrolling
									for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
										try {
											// Try to find the element
											WebElement element = driver.findElement(targetElementLocator3);
											if (element.isDisplayed()) {
												// Element found and displayed, perform actions
												System.out.println(
														" successfully found the store in the Menu screen of the index : "
																+ i + " is " + storeNamesMenu);

												break;
											}
										} catch (Exception e) {
											System.out.println(" Store not found in the : " + j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ maxScrollAttempts3);
										}

									}
								}
							}

							Thread.sleep(3000);
							// Define your XPath locator for the target element

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(3000);

							FlutterElement menuScreenVk = find.byValueKey("menu_screen_menu_list_" + i);

							String menuScreenTextVk = menuScreenVk.getText();

							if (menuScreenTextVk.length() > 21) {

								String menuScreenTextSubStringVk = menuScreenTextVk.substring(0, 21);

								System.out.println(menuScreenTextSubStringVk);

								System.out.println(storeNamesMenu);

								boolean menuScreenTextSubStringContainsVk = storeNamesMenu
										.contains(menuScreenTextSubStringVk);

								Assert.assertEquals(menuScreenTextSubStringContainsVk, true,
										" Validated that the index : " + i + " name in the API menu & the " + i
												+ " name in the menu are same ");

							} else {

								Assert.assertEquals(storeNamesMenu, menuScreenTextVk, " Validated that the index : " + i
										+ " name in the API menu & the " + i + " name in the menu are same ");

							}

							System.out.println(" Validated that the index : " + i + " name in the API menu & the " + i
									+ " name in the menu are same ");

							nextGenMenuScreen001.info(MarkupHelper.createLabel(" Validated that the index : " + i
									+ " name in the API menu & the " + i + " name in the menu are same ",
									ExtentColor.CYAN));

							menuScreenVk.click();

						}

						else {

							System.out.println(
									" The store name which is listed in API but not listed in the menu screen is : "
											+ storeNamesMenu);
						}

						ExtentTest nextGenSubMenuScreen001 = test.createNode("nextGenSubMenuScreen_001");

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(3000);

						FlutterElement subMenuScreenTitleVk = find
								.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_TITLE_VK);

						String subMenuScreenTitleTextVk = subMenuScreenTitleVk.getText();

						System.out.println(" The title of the sub menu screen " + subMenuScreenTitleTextVk);

						nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
								" The title of the sub menu screen " + subMenuScreenTitleTextVk, ExtentColor.CYAN));

						nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Sub menu screen " + subMenuScreenTitleTextVk);

						if (subMenuScreenTitleTextVk.length() > 22) {

							String subMenuScreenTitleTextSubStringVk = subMenuScreenTitleTextVk.substring(0, 21);

							boolean subMenuScreenTitleTextSubStringContainsVk = storeNamesMenu
									.contains(subMenuScreenTitleTextSubStringVk);

							Assert.assertEquals(subMenuScreenTitleTextSubStringContainsVk, true,
									" Validated that the menu item name & sub menu header is same ");

						}

						else {

							Assert.assertEquals(storeNamesMenu, subMenuScreenTitleTextVk,
									" Validated that the menu item name & sub menu header is same ");
						}

						System.out.println(" Validated that the menu item name & sub menu header is same ");

						nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
								" Validated that the menu item name & sub menu header is same ", ExtentColor.CYAN));

						commonMethods.switchContext("NATIVE_APP");

						Thread.sleep(3000);

						JSONArray optJSONArraySubMenuItems = optJSONObjectMenu.optJSONArray("items");

						int optJSONArraySubMenuItemsLength = optJSONArraySubMenuItems.length();

						System.out.println(" Items length : " + optJSONArraySubMenuItemsLength);

						if (optJSONArraySubMenuItemsLength > 0) {

							subMenuTrue.clear();

							soldOut.clear();

							for (int j = 0; j < optJSONArraySubMenuItemsLength; j++) {

								optJSONObjectActive = optJSONArraySubMenuItems.optJSONObject(j);

								optStringActive = optJSONObjectActive.optString("active");

								parseIntActive = Integer.parseInt(optStringActive);

								optStringSubMenuName = optJSONObjectActive.optString("name");

								optStringAlcohol = optJSONObjectActive.optString("alcohol");

								optStringSubMenuIsSoldout = optJSONObjectActive.optString("is_sold_out");

								if (canOrderMenu == "true" && parseIntActive == 1) {

									soldOut.add(optStringSubMenuIsSoldout);

									subMenuTrue.add(optStringSubMenuName);

									subMenuTrueSize = subMenuTrue.size();

									optJSONArrayPrices = optJSONObjectActive.optJSONArray("prices");

									optJSONArrayOptionGroups = optJSONObjectActive.optJSONArray("option_groups");

									optJSONArrayPizzaGroups = optJSONObjectActive.optJSONArray("pizza_groups");

								}
								if (subMenuTrueSize > 0) {

									for (int n = 0; n < subMenuTrueSize; n++) {

										if (canOrderMenu == "true" && parseIntActive == 1) {

											int maxScrollAttempts3 = 5;

											if (subMenuTrueSize >= 5) {

												if (n == 5) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 10) {

												if (n == 10) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 15) {

												if (n == 15) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 20) {

												if (n == 20) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}

											if (subMenuTrueSize >= 25) {

												if (n == 25) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
											if (subMenuTrueSize >= 30) {

												if (n == 30) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
											if (subMenuTrueSize >= 35) {

												if (n == 35) {

													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(3000);

													TouchAction touch = new TouchAction(driver);

													touch.press(PointOption.point(700, 2800))
															.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
															.moveTo(PointOption.point(700, 900)).release().perform();

												}
											}
										}

										commonMethods.switchContext("FLUTTER");

										Thread.sleep(3000);

										System.out.println(" sub menu true size : " + subMenuTrueSize);

										FlutterElement subMenuScreenItemVk = find
												.byValueKey("sub_menu_item_" + n + "_name");

										String subMenuScreenItemTextVk = subMenuScreenItemVk.getText();

										System.out.println(subMenuScreenItemTextVk);

										Assert.assertEquals(subMenuTrue.get(n), subMenuScreenItemTextVk,
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										System.out.println(
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ",
												ExtentColor.CYAN));

										nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
												" Validated that the index : " + n + " name in the API sub menu & the "
														+ n + " name in the sub menu are same ");

										JSONObject optJSONObjectPrice = optJSONArraySubMenuItems.optJSONObject(n);

										JSONArray subMenuPoints = optJSONObjectPrice.optJSONArray("prices");

										int subMenuPointsLength = subMenuPoints.length();

										System.out.println(" sub menu length of index : " + subMenuPointsLength);

										sizeParam.clear();

										priceParam.clear();

										for (int p = 0; p < subMenuPointsLength; p++) {

											JSONObject subMenuPointsObject = subMenuPoints.optJSONObject(p);

											String sizeName = subMenuPointsObject.optString("name");

											String price = subMenuPointsObject.optString("price");

											sizeParam.add(sizeName);

											priceParam.add(price);

										}

										subMenuPrice.clear();

										for (int k = 0; k < subMenuPointsLength; k++) {

											if (subMenuPointsLength == 0) {

												if (sizeParam.get(k).length() == 0) {

													System.out.println(" The price is null in the index : " + n);

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" The price is null in the index : " + n,
															ExtentColor.CYAN));

												} else {

													System.out.println(" The price is null in the index : " + n);

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" The price is null in the index : " + n,
															ExtentColor.CYAN));
												}
											}

											else {

												FlutterElement subMenuScreenItemSizeVk = find
														.byValueKey("sub_menu_item_" + n + "_size_" + k);

												String subMenuScreenItemSizeTextVk = subMenuScreenItemSizeVk.getText();

												System.out.println(" The item size and price in the index : " + k
														+ " is : " + subMenuScreenItemSizeTextVk);

												nextGenSubMenuScreen001
														.info(MarkupHelper.createLabel(
																" The item size and price in the index : " + k
																		+ " is : " + subMenuScreenItemSizeTextVk,
																ExtentColor.CYAN));

												if (sizeParam.get(k).length() == 0) {

													BigDecimal originalBigDecimal = new BigDecimal(priceParam.get(k));

													// Round the BigDecimal to the specified number of decimal places
													BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
															BigDecimal.ROUND_HALF_UP);

													String priceParamInt = roundedBigDecimal.toString();

													String sizePrize = "" + priceParamInt;

													System.out.println(" size prize : " + sizePrize);

													System.out.println(" item size : " + subMenuScreenItemSizeTextVk);

													boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
															.contains(sizePrize);

													Assert.assertEquals(subMenuScreenItemSizeTextContainsVk, true,
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													System.out
															.println(" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ",
															ExtentColor.CYAN));
												} else {

													BigDecimal originalBigDecimal = new BigDecimal(priceParam.get(k));

													// Round the BigDecimal to the specified number of decimal places
													BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
															BigDecimal.ROUND_HALF_UP);

													String priceParamInt = roundedBigDecimal.toString();

													String sizePrize = sizeParam.get(k) + " - " + priceParamInt;

													System.out.println(" size prize : " + sizePrize);

													System.out.println(" item size : " + subMenuScreenItemSizeTextVk);

													boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
															.contains(sizePrize);

													Assert.assertEquals(subMenuScreenItemSizeTextContainsVk, true,
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													System.out
															.println(" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ");

													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
															" Validated the the size and price of the item : "
																	+ subMenuScreenItemTextVk + " in the index : " + k
																	+ " and the value of the size and price from the API in the index : "
																	+ k + " are same ",
															ExtentColor.CYAN));
												}

												FlutterElement subMenuScreenItemPriceVk = find
														.byValueKey("sub_menu_item_" + n + "_size_" + k);

												String subMenuScreenItemPriceTextVk = subMenuScreenItemPriceVk
														.getText();

												System.out.println(" The item price in the index : " + n + " is : "
														+ subMenuScreenItemPriceTextVk);

												nextGenSubMenuScreen001
														.info(MarkupHelper.createLabel(
																" The item price in the index : " + n + " is : "
																		+ subMenuScreenItemPriceTextVk,
																ExtentColor.CYAN));

												subMenuPrice.add(subMenuScreenItemPriceTextVk);
											}
										}

										ExtentTest nextGenItemQuantityScreen001 = test
												.createNode("nextGenItemQuantityScreen_001");

										if (soldOut.get(n) == "false") {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

											subMenuScreenItemVk.click();

											if (optStringAlcohol.equalsIgnoreCase("true")) {

												FlutterElement alcoholWarningTitleVk = find
														.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);

												String alcoholWarningTitleTextVk = alcoholWarningTitleVk.getText();

												System.out.println(" The alcohol warning pop-up title is : "
														+ alcoholWarningTitleTextVk);

												nextGenItemQuantityScreen001.info(MarkupHelper
														.createLabel(" The alcohol warning pop-up title is : "
																+ alcoholWarningTitleTextVk, ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver), " Alcohol warning pop-up screenshot ");

												FlutterElement alcoholWarningDescriptionVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);

												String alcoholWarningDescriptionTextVk = alcoholWarningDescriptionVk
														.getText();

												System.out.println(" The alcohol warning pop-up description is : "
														+ alcoholWarningDescriptionTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning pop-up description is : "
																		+ alcoholWarningDescriptionTextVk,
																ExtentColor.CYAN));

												FlutterElement alcoholWarningIUnderstandVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);

												String alcoholWarningIUnderstandTextVk = alcoholWarningIUnderstandVk
														.getText();

												System.out.println(" The alcohol warning pop-up description is : "
														+ alcoholWarningIUnderstandTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning pop-up button text is : "
																		+ alcoholWarningIUnderstandTextVk,
																ExtentColor.CYAN));

												alcoholWarningIUnderstandVk.click();

												FlutterElement alcoholWarningFooterButtonVk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_FOOTER_BUTTON_VK);

												String alcoholWarningFooterButtonTextVk = alcoholWarningFooterButtonVk
														.getText();

												System.out.println(" The alcohol warning footer button text is : "
														+ alcoholWarningFooterButtonTextVk);

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" The alcohol warning footer button text is : "
																		+ alcoholWarningFooterButtonTextVk,
																ExtentColor.CYAN));

												alcoholWarningFooterButtonVk.click();

												FlutterElement alcoholWarningTitleVk1 = find
														.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);

												String alcoholWarningTitleTextVk1 = alcoholWarningTitleVk1.getText();

												Assert.assertEquals(alcoholWarningTitleTextVk,
														alcoholWarningTitleTextVk1,
														" Validated that the automatic alcohol pop-up title and the title after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up title in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the title after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up title in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the title after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.",
														ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver),
														" Alcohol warning pop-up screenshot after tapping footer button ");

												FlutterElement alcoholWarningDescription1Vk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);

												String alcoholWarningDescriptionText1Vk = alcoholWarningDescription1Vk
														.getText();

												Assert.assertEquals(alcoholWarningDescriptionTextVk,
														alcoholWarningDescriptionText1Vk,
														" Validated that the automatic alcohol pop-up description and the description after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up description in automatic alcohol pop-up is : "
																+ alcoholWarningDescriptionTextVk
																+ " and the description after tapping the footer button is : "
																+ alcoholWarningDescriptionText1Vk + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up description in automatic alcohol pop-up is : "
																+ alcoholWarningTitleTextVk
																+ " and the description after tapping the footer button is : "
																+ alcoholWarningTitleTextVk1 + " is same.",
														ExtentColor.CYAN));

												FlutterElement alcoholWarningIUnderstand1Vk = find.byValueKey(
														menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);

												String alcoholWarningIUnderstandText1Vk = alcoholWarningIUnderstand1Vk
														.getText();

												Assert.assertEquals(alcoholWarningIUnderstandTextVk,
														alcoholWarningIUnderstandText1Vk,
														" Validated that the automatic alcohol pop-up button text and the button text after tapping the footer button is same");

												System.out.println(
														" The alcohol warning pop-up button text in automatic alcohol pop-up is : "
																+ alcoholWarningIUnderstandTextVk
																+ " and the button text after tapping the footer button is : "
																+ alcoholWarningIUnderstandText1Vk + " is same.");

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The alcohol warning pop-up button text in automatic alcohol pop-up is : "
																+ alcoholWarningIUnderstandTextVk
																+ " and the button text after tapping the footer button is : "
																+ alcoholWarningIUnderstandText1Vk + " is same.",
														ExtentColor.CYAN));

												alcoholWarningIUnderstand1Vk.click();
											}

											else {

												System.out.println(
														" There is no alcohol warning and there continuing the item quantity selection ");

											}

											FlutterElement itemQuantityScreenTitleVk = find
													.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

											String itemQuantityScreenTitleTextVk = itemQuantityScreenTitleVk.getText();

											System.out.println(" Title of the item quantity screen is : "
													+ itemQuantityScreenTitleTextVk);

											nextGenItemQuantityScreen001.info(
													MarkupHelper.createLabel(" Title of the item quantity screen is : "
															+ itemQuantityScreenTitleTextVk, ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver), " Title of the item quantity screen is : "
															+ itemQuantityScreenTitleTextVk);

											if (subMenuTrue.get(n).length() > 22) {

												String itemQuantityScreenTitleTextSubStringVk = itemQuantityScreenTitleTextVk
														.substring(0, 15);

												Assert.assertEquals(
														subMenuTrue.get(n)
																.contains(itemQuantityScreenTitleTextSubStringVk),
														true,
														" Validated that the sub menu item name & item quantity title screen is same ");
											}

											else {

												Assert.assertEquals(subMenuTrue.get(n), itemQuantityScreenTitleTextVk,
														" Validated that the sub menu item name & item quantity title screen is same ");
											}

											System.out.println(
													" Validated that the sub menu item name & item quantity title screen is same ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the sub menu item name & item quantity title screen is same ",
													ExtentColor.CYAN));

											FlutterElement itemQuantityScreenDescriptionVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_DESCRIPTION_VK);

											String itemQuantityScreenDescriptionTextVk = itemQuantityScreenDescriptionVk
													.getText();

											System.out.println(" Description of the item quantity screen is : "
													+ itemQuantityScreenDescriptionTextVk);

											nextGenItemQuantityScreen001
													.info(MarkupHelper.createLabel(
															" Description of the item quantity screen is : "
																	+ itemQuantityScreenDescriptionTextVk,
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(3000);

											TouchAction touch = new TouchAction(driver);

											touch.press(PointOption.point(700, 2800))
													.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
													.moveTo(PointOption.point(700, 900)).release().perform();

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

//								FlutterElement itemQuantityScreenItemSizeVk = find
//										.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_PRICE_VK);
//
//								String itemQuantityScreenItemSizeTextVk = itemQuantityScreenItemSizeVk.getText();
//
//								if (itemQuantityScreenItemSizeTextVk.length() == 0) {
//
//									System.out.println(
//											" The item price is not displayed as well as not provided from the API ");
//
//								}
//
//								else {
//
//									StringBuilder stringBuilder = new StringBuilder();
//
//									for (String element : subMenuPrice) {
//										stringBuilder.append(element).append(", ");
//									}
//
//									if (stringBuilder.length() > 2) {
//										stringBuilder.setLength(stringBuilder.length() - 2);
//									}
//
//									String itemPrice = stringBuilder.toString();
//
//									System.out.println(itemQuantityScreenItemSizeTextVk);
//
//									System.out.println(itemPrice);
//
//									Assert.assertEquals(itemPrice, itemQuantityScreenItemSizeTextVk,
//											" Validated that the price and size in submenu & item quantity screen are same ");
//
//									System.out.println(
//											" The item quantity size and price in the item quantity screen is : "
//													+ itemQuantityScreenItemSizeTextVk);
//
//									nextGenItemQuantityScreen001.info(MarkupHelper
//											.createLabel(" The item quantity size in the item quantity screen is : "
//													+ itemQuantityScreenItemSizeTextVk, ExtentColor.CYAN));
//
//								}

											FlutterElement itemQuantityScreenItemQuantityCountVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountTextVk = itemQuantityScreenItemQuantityCountVk
													.getText();

											int itemQuantityScreenItemQuantityCountIntVk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountTextVk);

											System.out.println(" The quantity count in the item quantity screen is : "
													+ itemQuantityScreenItemQuantityCountTextVk);

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" The quantity count in the item quantity screen is : "
															+ itemQuantityScreenItemQuantityCountTextVk,
													ExtentColor.CYAN));

											FlutterElement itemQuantityScreenIncrementIconVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_INCREMENT_ICON_VK);

											itemQuantityScreenIncrementIconVk.click();

											Thread.sleep(3000);

											FlutterElement itemQuantityScreenItemQuantityCount1Vk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountText1Vk = itemQuantityScreenItemQuantityCount1Vk
													.getText();

											int itemQuantityScreenItemQuantityCountInt1Vk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountText1Vk);

											Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt1Vk,
													itemQuantityScreenItemQuantityCountIntVk,
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											System.out.println(
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the value in the item quantity count after tapping increment button is : "
															+ itemQuantityScreenItemQuantityCountInt1Vk
															+ " which is higher than before tapping the increment button ");

											FlutterElement itemQuantityScreenDecrementIconVk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_DECREMENT_ICON_VK);

											itemQuantityScreenDecrementIconVk.click();

											Thread.sleep(3000);

											FlutterElement itemQuantityScreenItemQuantityCount2Vk = find.byValueKey(
													menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

											String itemQuantityScreenItemQuantityCountText2Vk = itemQuantityScreenItemQuantityCount2Vk
													.getText();

											int itemQuantityScreenItemQuantityCountInt2Vk = Integer
													.parseInt(itemQuantityScreenItemQuantityCountText2Vk);

											Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt2Vk,
													itemQuantityScreenItemQuantityCountInt1Vk,
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

											System.out.println(
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the value in the item quantity count after tapping decrement button is : "
															+ itemQuantityScreenItemQuantityCountText2Vk
															+ " which is lower than before tapping the decrement button ");

//											if (optJSONArrayPrices.length() != 0) {
//
//												FlutterElement optionGroupNameVk = find
//														.byValueKey(subMenuTrue.get(n) + "_size");
//
//												String optionGroupNameTextVk = optionGroupNameVk.getText();
//
//												optionGroupNameVk.click();
//
//												int optJSONArrayPricesLength = optJSONArrayPrices.length();
//
//												for (int d = 0; d < optJSONArrayPricesLength; d++) {
//
//													JSONObject optJSONObjectPricesList = optJSONArrayPrices
//															.optJSONObject(i);
//
//													String optStringSizeName = optJSONObjectPricesList
//															.optString("name");
//
//													String optStringSizePrice = optJSONObjectPricesList
//															.optString("price");
//
//													FlutterElement optStringSizeNameUI = find
//															.byValueKey(subMenuTrue.get(n) + "_" + optionGroupNameTextVk
//																	+ "_" + optStringSizeName);
//
//													String optStringSizeNameTextUI = optStringSizeNameUI.getText();
//
//													Assert.assertEquals(optStringSizeName, optStringSizeNameTextUI,
//															"Validated that the option name from API is : "
//																	+ optStringSizeName
//																	+ " and the option name in UI is : "
//																	+ optStringSizeNameTextUI + " is same ");
//
//													System.out.println("Validated that the option name from API is : "
//															+ optStringSizeName + " and the option name in UI is : "
//															+ optStringSizeNameTextUI + " is same ");
//
//													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
//															"Validated that the option name from API is : "
//																	+ optStringSizeName
//																	+ " and the option name in UI is : "
//																	+ optStringSizeNameTextUI + " is same ",
//															ExtentColor.CYAN));
//
//													nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
//															takeScreenshot(driver), "Optional group name : "
//																	+ optionGroupNameTextVk + " Screenshot ");
//
//													FlutterElement optStringSizePriceUI = find
//															.byValueKey(subMenuTrue.get(n) + "_" + optionGroupNameTextVk
//																	+ "_" + optStringSizeName);
//
//													String optStringSizePriceTextUI = optStringSizePriceUI.getText();
//
//													Assert.assertEquals(optStringSizePrice, optStringSizePriceTextUI,
//															"Validated that the option price from API is : "
//																	+ optStringSizePrice
//																	+ " and the option price in UI is : "
//																	+ optStringSizePriceTextUI + " is same ");
//
//													System.out.println("Validated that the option price from API is : "
//															+ optStringSizePrice + " and the option price in UI is : "
//															+ optStringSizePriceTextUI + " is same ");
//
//													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
//															"Validated that the option price from API is : "
//																	+ optStringSizePrice
//																	+ " and the option price in UI is : "
//																	+ optStringSizePriceTextUI + " is same ",
//															ExtentColor.CYAN));
//
//												}
//											} else {
//
//												System.out.println(
//														" The size is null and moving to the next option group ");
//											}

											if (optJSONArrayPizzaGroups.length() != 0) {

												int optJSONArrayPizzaGroupsLength = optJSONArrayPizzaGroups.length();

												for (int g = 0; g < optJSONArrayPizzaGroupsLength; g++) {

													JSONObject optJSONObjectPizzaGroup = optJSONArrayPizzaGroups
															.optJSONObject(n);

													optStringWholeGroupName = optJSONObjectPizzaGroup
															.optString("whole_group_name");

													optStringLeftGroupName = optJSONObjectPizzaGroup
															.optString("left_group_name");

													optStringRightGroupName = optJSONObjectPizzaGroup
															.optString("right_group_name");

													optStringAllowDoublingPizza = optJSONObjectPizzaGroup
															.optString("allow_doubling");

												}

												if (optJSONArrayOptionGroups.length() != 0) {

													int optJSONArrayOptionGroupsLength = optJSONArrayOptionGroups
															.length();

													for (int e = 0; e < optJSONArrayOptionGroupsLength; e++) {

														JSONObject optJSONArrayOptionGroupsObject = optJSONArrayOptionGroups
																.optJSONObject(e);

														String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																.optString("name");

														String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																.optString("multiselect");

														long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																.getLong("min");

														String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																.optString("quantities");

														if (optJSONArrayOptionGroupsObject.getLong("max") != 0) {

															optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																	.getLong("max");

														} else {

															optJSONArrayOptionGroupsObjectMax = 0;
														}

														if (optStringWholeGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)) {

															FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																	.byValueKey(subMenuTrue.get(n) + "_"
																			+ optJSONArrayOptionGroupsObjectName);

															String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																	.getText();

															Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																	optJSONArrayOptionGroupsObjectNameTextUI,
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															System.out.println(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ",
																	ExtentColor.CYAN));

															nextGenItemQuantityScreen001
																	.addScreenCaptureFromBase64String(
																			takeScreenshot(driver),
																			"Optional group name : "
																					+ optJSONArrayOptionGroupsObjectNameTextUI
																					+ " Screenshot ");

															optJSONArrayOptionGroupsObjectNameUI.click();

															JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																	.optJSONArray("options");

															if (optJSONArrayOptions.length() != 0) {

																int optJSONArrayOptionsLength = optJSONArrayOptions
																		.length();

																for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																	JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																			.optJSONObject(f);

																	String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																			.optString("name");

																	String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																			.optString("price");

																	String optStringIsDisabled = optJSONArrayOptionsObject
																			.optString("is_disabled");

																	if (optStringIsDisabled.equalsIgnoreCase("false")) {

																		FlutterElement optionGroupObjectNameVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectName);

																		String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																				.getText();

																		Assert.assertEquals(optionGroupObjectNameTextVk,
																				optJSONArrayOptionsObjectName,
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group name from API is : "
																								+ optionGroupObjectNameTextVk
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionsObjectName
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		FlutterElement optionGroupObjectPriceVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectPrice);

																		String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																				.getText();

																		Assert.assertEquals(
																				optionGroupObjectPriceTextVk,
																				optJSONArrayOptionsObjectPrice,
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group price from API is : "
																								+ optionGroupObjectPriceTextVk
																								+ " and the option group price in UI is : "
																								+ optJSONArrayOptionsObjectPrice
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has increment decrement button ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has increment decrement button ",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the optional field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the optional field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has checkbox ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has checkbox ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}

																		else if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection optional field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}
																	} else {

																		System.out.println(" The option : "
																				+ optJSONArrayOptionsObjectName
																				+ "is disabled and won't be displayed");

																	}
																}}}

														} else if (optStringLeftGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)){

															
															
														}
														else if (optStringRightGroupName
																.equalsIgnoreCase(optJSONArrayOptionGroupsObjectName)) {

															
															
														} 
														else (optStringWholeGroupName || optStringLeftGroupName || optStringRightGroupName
																!= optJSONArrayOptionGroupsObjectName) {

															FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																	.byValueKey(subMenuTrue.get(n) + "_"
																			+ optJSONArrayOptionGroupsObjectName);

															String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																	.getText();

															Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																	optJSONArrayOptionGroupsObjectNameTextUI,
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															System.out.println(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	"Validated that the option group name from API is : "
																			+ optJSONArrayOptionGroupsObjectName
																			+ " and the option group name in UI is : "
																			+ optJSONArrayOptionGroupsObjectNameTextUI
																			+ " is same ",
																	ExtentColor.CYAN));

															nextGenItemQuantityScreen001
																	.addScreenCaptureFromBase64String(
																			takeScreenshot(driver),
																			"Optional group name : "
																					+ optJSONArrayOptionGroupsObjectNameTextUI
																					+ " Screenshot ");

															optJSONArrayOptionGroupsObjectNameUI.click();

															JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																	.optJSONArray("options");

															if (optJSONArrayOptions.length() != 0) {

																int optJSONArrayOptionsLength = optJSONArrayOptions
																		.length();

																for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																	JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																			.optJSONObject(f);

																	String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																			.optString("name");

																	String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																			.optString("price");

																	String optStringIsDisabled = optJSONArrayOptionsObject
																			.optString("is_disabled");

																	if (optStringIsDisabled.equalsIgnoreCase("false")) {

																		FlutterElement optionGroupObjectNameVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectName);

																		String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																				.getText();

																		Assert.assertEquals(optionGroupObjectNameTextVk,
																				optJSONArrayOptionsObjectName,
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group name from API is : "
																						+ optionGroupObjectNameTextVk
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionsObjectName
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group name from API is : "
																								+ optionGroupObjectNameTextVk
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionsObjectName
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		FlutterElement optionGroupObjectPriceVk = find
																				.byValueKey(subMenuTrue.get(n) + "_"
																						+ optJSONArrayOptionGroupsObjectName
																						+ "_"
																						+ optJSONArrayOptionsObjectPrice);

																		String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																				.getText();

																		Assert.assertEquals(
																				optionGroupObjectPriceTextVk,
																				optJSONArrayOptionsObjectPrice,
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		System.out.println(
																				"Validated that the option group price from API is : "
																						+ optionGroupObjectPriceTextVk
																						+ " and the option group price in UI is : "
																						+ optJSONArrayOptionsObjectPrice
																						+ "in the index : " + f
																						+ " is same ");

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						"Validated that the option group price from API is : "
																								+ optionGroupObjectPriceTextVk
																								+ " and the option group price in UI is : "
																								+ optJSONArrayOptionsObjectPrice
																								+ "in the index : " + f
																								+ " is same ",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has increment decrement button ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has increment decrement button ",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the optional field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the optional field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the optional field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field has checkbox ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection optional field has checkbox ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																				&& optJSONArrayOptionGroupsObjectMax == 0) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is single selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}

																		else if (optJSONArrayOptionGroupsObjectMin == 0
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection optional field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		} else if (optJSONArrayOptionGroupsObjectMin == 1
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																				&& optJSONArrayOptionGroupsObjectMax == 0
																				|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field",
																							ExtentColor.CYAN));

																			if (optJSONArrayOptionGroupsObjectQuantities == "true"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field has increment decrement button");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection mandatory field has increment decrement button",
																								ExtentColor.CYAN));

																				FlutterElement optionalRequiredVk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredTextVk = optionalRequiredVk
																						.getText();

																				boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																						.contains("0");

																				FlutterElement optionCountVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountTextVk = optionCountVk
																						.getText();

																				long optionCountLongVk = Long
																						.parseLong(optionCountTextVk);

																				System.out.println(
																						" Before tapping increment and decrement button the count is : "
																								+ optionCountLongVk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Before tapping increment and decrement button the count is : "
																										+ optionCountLongVk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButtonVk
																						.click();

																				FlutterElement optionCount1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText1Vk = optionCount1Vk
																						.getText();

																				long optionCountLong1Vk = Long
																						.parseLong(optionCountText1Vk);

																				System.out.println(
																						" After tapping increment button the count is : "
																								+ optionCountLong1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping increment button the count is : "
																										+ optionCountLong1Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionalRequired1Vk = find
																						.byValueKey(
																								menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																				String optionalRequiredText1Vk = optionalRequired1Vk
																						.getText();

																				boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																						.contains("1");

																				Assert.assertEquals(optionCountTextVk,
																						optionCountText1Vk,
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				System.out.println(
																						"Validated that after tapping increment button the count has been increased to : "
																								+ optionCountText1Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk,
																								ExtentColor.CYAN));

																				Assert.assertEquals(
																						optionalRequiredTextContainsVk,
																						optionalRequiredTextContains1Vk,
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				System.out.println(
																						" Validated that the required field turns to : "
																								+ optionalRequiredText1Vk
																								+ " Which makes we have selected the required field ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the required field turns to : "
																										+ optionalRequiredText1Vk
																										+ " Which makes we have selected the required field ",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameDecrementButtonVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_decrement");

																				optionGroupObjectNameDecrementButtonVk
																						.click();

																				FlutterElement optionCount2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText2Vk = optionCount2Vk
																						.getText();

																				long optionCountLong2Vk = Long
																						.parseLong(optionCountText2Vk);

																				System.out.println(
																						" After tapping decrement button the count is : "
																								+ optionCountLong2Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping decrement button the count is : "
																										+ optionCountLong2Vk,
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton1Vk
																						.click();

																				FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_increment");

																				optionGroupObjectNameIncrementButton2Vk
																						.click();

																				FlutterElement optionCount3Vk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_count");

																				String optionCountText3Vk = optionCount3Vk
																						.getText();

																				long optionCountLong3Vk = Long
																						.parseLong(optionCountText3Vk);

																				System.out.println(
																						" After tapping the increment button twice count is : "
																								+ optionCountLong3Vk);

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" After tapping the increment button twice count is : "
																										+ optionCountLong3Vk,
																								ExtentColor.CYAN));

																			} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																					&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																				System.out.println(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection Mandatory field has checkbox");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optionGroupObjectNameTextVk
																										+ " is multi selection Mandatory field has checkbox",
																								ExtentColor.CYAN));

																				FlutterElement optionGroupObjectNameCheckboxVk = find
																						.byValueKey(subMenuTrue.get(n)
																								+ "_"
																								+ optJSONArrayOptionGroupsObjectName
																								+ "_"
																								+ optJSONArrayOptionsObjectName
																								+ "_checkbox");

																				optionGroupObjectNameCheckboxVk.click();

																			}

																		}
																	} else {

																		System.out.println(" The option : "
																				+ optJSONArrayOptionsObjectName
																				+ "is disabled and won't be displayed");

																	}
																}
															}

														}

													}
												} else {

													System.out.println(" The option groups array is null ");
												}

											}

											else {

												if (optJSONArrayOptionGroups.length() != 0) {

													int optJSONArrayOptionGroupsLength = optJSONArrayOptionGroups
															.length();

													for (int e = 0; e < optJSONArrayOptionGroupsLength; e++) {

														JSONObject optJSONArrayOptionGroupsObject = optJSONArrayOptionGroups
																.optJSONObject(e);

														String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																.optString("name");

														String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																.optString("multiselect");

														long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																.getLong("min");

														String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																.optString("quantities");

														if (optJSONArrayOptionGroupsObject.getLong("max") != 0) {

															optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																	.getLong("max");

														} else {

															optJSONArrayOptionGroupsObjectMax = 0;
														}

														FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																.byValueKey(subMenuTrue.get(n) + "_"
																		+ optJSONArrayOptionGroupsObjectName);

														String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																.getText();

														Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																optJSONArrayOptionGroupsObjectNameTextUI,
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ");

														System.out.println(
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ");

														nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																"Validated that the option group name from API is : "
																		+ optJSONArrayOptionGroupsObjectName
																		+ " and the option group name in UI is : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " is same ",
																ExtentColor.CYAN));

														nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
																takeScreenshot(driver),
																"Optional group name : "
																		+ optJSONArrayOptionGroupsObjectNameTextUI
																		+ " Screenshot ");

														optJSONArrayOptionGroupsObjectNameUI.click();

														JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																.optJSONArray("options");

														if (optJSONArrayOptions.length() != 0) {

															int optJSONArrayOptionsLength = optJSONArrayOptions
																	.length();

															for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																		.optJSONObject(f);

																String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																		.optString("name");

																String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																		.optString("price");

																String optStringIsDisabled = optJSONArrayOptionsObject
																		.optString("is_disabled");

																if (optStringIsDisabled.equalsIgnoreCase("false")) {

																	FlutterElement optionGroupObjectNameVk = find
																			.byValueKey(subMenuTrue.get(n) + "_"
																					+ optJSONArrayOptionGroupsObjectName
																					+ "_"
																					+ optJSONArrayOptionsObjectName);

																	String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																			.getText();

																	Assert.assertEquals(optionGroupObjectNameTextVk,
																			optJSONArrayOptionsObjectName,
																			"Validated that the option group name from API is : "
																					+ optionGroupObjectNameTextVk
																					+ " and the option group name in UI is : "
																					+ optJSONArrayOptionsObjectName
																					+ "in the index : " + f
																					+ " is same ");

																	System.out.println(
																			"Validated that the option group name from API is : "
																					+ optionGroupObjectNameTextVk
																					+ " and the option group name in UI is : "
																					+ optJSONArrayOptionsObjectName
																					+ "in the index : " + f
																					+ " is same ");

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					"Validated that the option group name from API is : "
																							+ optionGroupObjectNameTextVk
																							+ " and the option group name in UI is : "
																							+ optJSONArrayOptionsObjectName
																							+ "in the index : " + f
																							+ " is same ",
																					ExtentColor.CYAN));

																	FlutterElement optionGroupObjectPriceVk = find
																			.byValueKey(subMenuTrue.get(n) + "_"
																					+ optJSONArrayOptionGroupsObjectName
																					+ "_"
																					+ optJSONArrayOptionsObjectPrice);

																	String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																			.getText();

																	Assert.assertEquals(optionGroupObjectPriceTextVk,
																			optJSONArrayOptionsObjectPrice,
																			"Validated that the option group price from API is : "
																					+ optionGroupObjectPriceTextVk
																					+ " and the option group price in UI is : "
																					+ optJSONArrayOptionsObjectPrice
																					+ "in the index : " + f
																					+ " is same ");

																	System.out.println(
																			"Validated that the option group price from API is : "
																					+ optionGroupObjectPriceTextVk
																					+ " and the option group price in UI is : "
																					+ optJSONArrayOptionsObjectPrice
																					+ "in the index : " + f
																					+ " is same ");

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					"Validated that the option group price from API is : "
																							+ optionGroupObjectPriceTextVk
																							+ " and the option group price in UI is : "
																							+ optJSONArrayOptionsObjectPrice
																							+ "in the index : " + f
																							+ " is same ",
																					ExtentColor.CYAN));

																	if (optJSONArrayOptionGroupsObjectMin == 0
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																			&& optJSONArrayOptionGroupsObjectMax == 0) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is single selection optional field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection optional field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field has increment decrement button ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field has increment decrement button ",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the optional field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the optional field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the optional field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the optional field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection optional field has checkbox ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection optional field has checkbox ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	} else if (optJSONArrayOptionGroupsObjectMin == 1
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "false"
																			&& optJSONArrayOptionGroupsObjectMax == 0) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is single selection Mandatory field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is single selection Mandatory field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is single selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is single selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	}

																	else if (optJSONArrayOptionGroupsObjectMin == 0
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																			&& optJSONArrayOptionGroupsObjectMax == 0
																			|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is multi selection optional field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection optional field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection optional field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection optional field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																			FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton2Vk
																					.click();

																			FlutterElement optionCount3Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText3Vk = optionCount3Vk
																					.getText();

																			long optionCountLong3Vk = Long
																					.parseLong(optionCountText3Vk);

																			System.out.println(
																					" After tapping the increment button twice count is : "
																							+ optionCountLong3Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping the increment button twice count is : "
																									+ optionCountLong3Vk,
																							ExtentColor.CYAN));

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	} else if (optJSONArrayOptionGroupsObjectMin == 1
																			&& optJSONArrayOptionGroupsObjectMultiSelect == "true"
																			&& optJSONArrayOptionGroupsObjectMax == 0
																			|| optJSONArrayOptionGroupsObjectMax > optJSONArrayOptionGroupsObjectMin) {

																		System.out.println(" The option : "
																				+ optionGroupObjectNameTextVk
																				+ " is multi selection mandatory field");

																		nextGenItemQuantityScreen001.info(MarkupHelper
																				.createLabel(" The option : "
																						+ optionGroupObjectNameTextVk
																						+ " is multi selection mandatory field",
																						ExtentColor.CYAN));

																		if (optJSONArrayOptionGroupsObjectQuantities == "true"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection mandatory field has increment decrement button");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection mandatory field has increment decrement button",
																							ExtentColor.CYAN));

																			FlutterElement optionalRequiredVk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredTextVk = optionalRequiredVk
																					.getText();

																			boolean optionalRequiredTextContainsVk = optionalRequiredTextVk
																					.contains("0");

																			FlutterElement optionCountVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountTextVk = optionCountVk
																					.getText();

																			long optionCountLongVk = Long
																					.parseLong(optionCountTextVk);

																			System.out.println(
																					" Before tapping increment and decrement button the count is : "
																							+ optionCountLongVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Before tapping increment and decrement button the count is : "
																									+ optionCountLongVk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButtonVk
																					.click();

																			FlutterElement optionCount1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText1Vk = optionCount1Vk
																					.getText();

																			long optionCountLong1Vk = Long
																					.parseLong(optionCountText1Vk);

																			System.out.println(
																					" After tapping increment button the count is : "
																							+ optionCountLong1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping increment button the count is : "
																									+ optionCountLong1Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionalRequired1Vk = find
																					.byValueKey(
																							menuScreenLocators.OPTION_OPTIONAL_REQUIRED_TEXT_VK);

																			String optionalRequiredText1Vk = optionalRequired1Vk
																					.getText();

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.contains("1");

																			Assert.assertEquals(optionCountTextVk,
																					optionCountText1Vk,
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			System.out.println(
																					"Validated that after tapping increment button the count has been increased to : "
																							+ optionCountText1Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that after tapping increment button the count has been increased to : "
																									+ optionCountText1Vk,
																							ExtentColor.CYAN));

																			Assert.assertEquals(
																					optionalRequiredTextContainsVk,
																					optionalRequiredTextContains1Vk,
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			System.out.println(
																					" Validated that the required field turns to : "
																							+ optionalRequiredText1Vk
																							+ " Which makes we have selected the required field ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the required field turns to : "
																									+ optionalRequiredText1Vk
																									+ " Which makes we have selected the required field ",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameDecrementButtonVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_decrement");

																			optionGroupObjectNameDecrementButtonVk
																					.click();

																			FlutterElement optionCount2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText2Vk = optionCount2Vk
																					.getText();

																			long optionCountLong2Vk = Long
																					.parseLong(optionCountText2Vk);

																			System.out.println(
																					" After tapping decrement button the count is : "
																							+ optionCountLong2Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping decrement button the count is : "
																									+ optionCountLong2Vk,
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton1Vk
																					.click();

																			FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_increment");

																			optionGroupObjectNameIncrementButton2Vk
																					.click();

																			FlutterElement optionCount3Vk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_count");

																			String optionCountText3Vk = optionCount3Vk
																					.getText();

																			long optionCountLong3Vk = Long
																					.parseLong(optionCountText3Vk);

																			System.out.println(
																					" After tapping the increment button twice count is : "
																							+ optionCountLong3Vk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" After tapping the increment button twice count is : "
																									+ optionCountLong3Vk,
																							ExtentColor.CYAN));

																		} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																				&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																			System.out.println(" The option : "
																					+ optionGroupObjectNameTextVk
																					+ " is multi selection Mandatory field has checkbox");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" The option : "
																									+ optionGroupObjectNameTextVk
																									+ " is multi selection Mandatory field has checkbox",
																							ExtentColor.CYAN));

																			FlutterElement optionGroupObjectNameCheckboxVk = find
																					.byValueKey(subMenuTrue.get(n) + "_"
																							+ optJSONArrayOptionGroupsObjectName
																							+ "_"
																							+ optJSONArrayOptionsObjectName
																							+ "_checkbox");

																			optionGroupObjectNameCheckboxVk.click();

																		}

																	}
																} else {

																	System.out.println(" The option : "
																			+ optJSONArrayOptionsObjectName
																			+ "is disabled and won't be displayed");

																}
															}
														}

													}

												} else {
													System.out.println(
															" The Option group is null and moving to the next option group ");
												}

											}

											FlutterElement itemQuantityScreenBackIconVk = find
													.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_BACK_ICON_VK);

											itemQuantityScreenBackIconVk.click();

										} else {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

											FlutterElement subMenuScreenSoldOutVk = find
													.byValueKey("sub_menu_sold_out_item_" + n);

											String subMenuScreenSoldOutTextVk = subMenuScreenSoldOutVk.getText();

											boolean subMenuScreenSoldOutTextContainsVk = subMenuScreenSoldOutTextVk
													.contains(subMenuScreenSoldOutTextVk);

											System.out.println(" The item : " + subMenuTrue.get(n)
													+ " in the sub menu is sold out and showing the text as : "
													+ subMenuScreenSoldOutTextVk
													+ " and won't be processed further and clearing the pop-up ");

											nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(" The item : "
													+ subMenuTrue.get(n)
													+ " in the sub menu is sold out and showing the text as : "
													+ subMenuScreenSoldOutTextVk
													+ " and won't be processed further and clearing the pop-up ",
													ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" The item : " + subMenuTrue.get(n)
															+ " in the sub menu is sold out and showing the text as : "
															+ subMenuScreenSoldOutTextVk
															+ " and won't be processed further and clearing the pop-up ");

											Assert.assertEquals(subMenuScreenSoldOutTextContainsVk, true,
													" Validated that the item : " + subMenuTrue.get(n)
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk);

											System.out.println(" Validated that the item : " + subMenuTrue.get(n)
													+ " in the index : " + n + " contains the text : "
													+ subMenuScreenSoldOutTextVk);

											nextGenItemQuantityScreen001.info(MarkupHelper
													.createLabel(" Validated that the item : " + subMenuTrue.get(n)
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk, ExtentColor.CYAN));

											nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the item : " + optStringSubMenuName
															+ " in the index : " + n + " contains the text : "
															+ subMenuScreenSoldOutTextVk);

											subMenuScreenItemVk.click();

											FlutterElement subMenuSoldOutPopupTitleVk = find
													.byValueKey(menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_TITLE_VK);

											String subMenuSoldOutPopupTitleTextVk = subMenuSoldOutPopupTitleVk
													.getText();

											System.out.println(" The sold out alert popup title is : "
													+ subMenuSoldOutPopupTitleTextVk);

											nextGenSubMenuScreen001
													.info(MarkupHelper.createLabel(
															" The sold out alert popup title is : "
																	+ subMenuSoldOutPopupTitleTextVk,
															ExtentColor.CYAN));

											FlutterElement subMenuSoldOutPopupDescriptionVk = find.byValueKey(
													menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_DESCRIPTION_VK);

											String subMenuSoldOutPopupDescriptionTextVk = subMenuSoldOutPopupDescriptionVk
													.getText();

											System.out.println(" The sold out alert popup description is : "
													+ subMenuSoldOutPopupDescriptionTextVk);

											boolean subMenuSoldOutPopupDescriptionTextContainsVk = subMenuSoldOutPopupDescriptionTextVk
													.contains("sold out");

											Assert.assertEquals(subMenuSoldOutPopupDescriptionTextContainsVk, true,
													" Validated that the pop-up contains the text sold out");

											System.out.println(" Validated that the pop-up contains the text sold out");

											nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
													" Validated that the pop-up contains the text sold out",
													ExtentColor.CYAN));

											FlutterElement subMenuSoldOutPopupOkayButtonVk = find.byValueKey(
													menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_OKAY_BUTTON_VK);

											subMenuSoldOutPopupOkayButtonVk.click();
										}
									}

//							}

//							else {
//
//								System.out.println(
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j);
//
//								nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j,
//										ExtentColor.CYAN));
//
//								nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
//										" The store name which is listed in API but not listed in the sub menu screen is : "
//												+ optStringSubMenuName + " in the index : " + j);
//
//							}
								} else {

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(3000);

									System.out.println(" As the sub menu item size is : " + subMenuTrueSize
											+ " There is no list to show and navigating to the menu screen for the next item in the menu ");

									nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
											" As the sub menu item size is : " + subMenuTrueSize
													+ " There is no list to show and navigating to the menu screen for the next item in the menu ",
											ExtentColor.CYAN));

									nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" Sub Menu screen " + storeNamesMenu);

									FlutterElement subMenuScreenBackIconVk = find
											.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);

									subMenuScreenBackIconVk.click();

								}

								commonMethods.switchContext("FLUTTER");

								Thread.sleep(3000);

								FlutterElement subMenuScreenBackIconVk = find
										.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);

								subMenuScreenBackIconVk.click();

							}
						} else {

							System.out.println(
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu);

							nextGenMenuScreen001.info(MarkupHelper.createLabel(
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu,
									ExtentColor.CYAN));

							nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
									" The items in the array is lesser than 0 for the menu : " + storeNamesMenu);
						}

					} else {

						System.out.println(" Menu list is empty ");

						nextGenMenuScreen001.info(MarkupHelper.createLabel(" Menu list is empty ", ExtentColor.CYAN));

						nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Menu list is empty ");
					}
				}
			}
		}else

	{

		System.out.println(" Menu screen doesn't have any menus and handling the error pop-up ");

		nextGenMenuScreen001.info(MarkupHelper
				.createLabel(" Menu screen doesn't have any menus and handling the error pop-up ", ExtentColor.CYAN));

		nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver), " Menu list empty screen");

		FlutterElement menuScreenEmptyMenuTitleVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_TITLE_VK);

		String menuScreenEmptyMenuTitleTextVk = menuScreenEmptyMenuTitleVk.getText();

		System.out.println(" Empty menu pop-up title is : " + menuScreenEmptyMenuTitleTextVk);

		nextGenMenuScreen001.info(MarkupHelper
				.createLabel(" Empty menu pop-up title is : " + menuScreenEmptyMenuTitleTextVk, ExtentColor.CYAN));

		FlutterElement menuScreenEmptyMenuDescriptionVk = find
				.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_DESCRIPTION_VK);

		String menuScreenEmptyMenuDescriptionTextVk = menuScreenEmptyMenuDescriptionVk.getText();

		System.out.println(" Empty menu pop-up description is : " + menuScreenEmptyMenuDescriptionTextVk);

		nextGenMenuScreen001.info(MarkupHelper.createLabel(
				" Empty menu pop-up description is : " + menuScreenEmptyMenuDescriptionTextVk, ExtentColor.CYAN));

		FlutterElement menuScreenEmptyMenuOkButtonVk = find
				.byValueKey(menuScreenLocators.MENU_SCREEN_EMPTY_MENU_OK_BUTTON_VK);

		menuScreenEmptyMenuOkButtonVk.click();

		nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver), "After handling error pop-up");

		FlutterElement menuScreenBackIconVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_BACK_ICON_VK);

		menuScreenBackIconVk.click();
	}

}

//	private static void processJsonNode(JsonNode jsonNode) {
//		if (jsonNode.isObject()) {
//			jsonNode.fields().forEachRemaining(entry -> {
//				System.out.println(entry.getKey() + ": " + entry.getValue());
//				processJsonNode(entry.getValue());
//			});
//		} else if (jsonNode.isArray()) {
//			jsonNode.elements().forEachRemaining(CategoryGroups::processJsonNode);
//		} else {
//			System.out.println(jsonNode);
//		}
//	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2718)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2041)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2220)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3063)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3042)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2268)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)
