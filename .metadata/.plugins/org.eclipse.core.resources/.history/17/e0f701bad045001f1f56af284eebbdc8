
package com.features;

import java.net.URL;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.AppLaunchAndLandingScreenLocators;
import com.locators.AppRatingLocators;
import com.locators.BottomBarNavigationLocator;
import com.locators.DashBoardLocators;
import com.locators.LocationLocators;
import com.locators.MyAccountLocators;
import com.locators.OLOLocators;
import com.locators.OrderNowLocators;
import com.locators.SideDrawerLocators;
import com.locators.SignInLocators;
import com.locators.TransactionHistoryLocators;

import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.ios.IOSTouchAction;
import io.appium.java_client.remote.MobileCapabilityType;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;

public class LocationListLoggedIn extends BaseClass {

	static SignInLocators signInLocator = new SignInLocators();
	static CommonMethods commonMethods = new CommonMethods();
	static LocationLocators locationLocators = new LocationLocators();
	static DashBoardLocators dashBoardLocators = new DashBoardLocators();
	static SideDrawerLocators sideDrawerLocators = new SideDrawerLocators();
	static OrderNowLocators orderNowLocators = new OrderNowLocators();
	static BottomBarNavigationLocator bottomBarNavigationLocators = new BottomBarNavigationLocator();

	static AppRatingLocators appRating = new AppRatingLocators();
	static SignInLocators signInLocators = new SignInLocators();
	static AppLaunchAndLandingScreenLocators appLaunchAndLandingScreenLocators = new AppLaunchAndLandingScreenLocators();
	static MyAccountLocators myAccountLocators = new MyAccountLocators();
	public static String isLocationEnabled = "true";
	static TransactionHistoryLocators transactionHistoryLocators = new TransactionHistoryLocators();
	static OLOLocators oloLocators = new OLOLocators();

	final static ArrayList<JSONObject> jList = new ArrayList<>();

	public static String componentList;
	public static String accessTokenGen;
	public static String printedCardNumberResponse;
	public static String firstnameResponse;
	public static String lastnameResponse;
	public static String salutationResponse;
	public static String welcomeResponse;
	public static String welcomeResponseDefault;
	public static String usernameResponse;
	public static StringBuilder welcomeString;
	public static StringBuilder welcomeDefault;
	public static StringBuilder pointTrackHead;
	public static StringBuilder actualSubHeader;
	public static StringBuilder responseHeader;
	public static StringBuilder actualHeader;
	public static String availableHeader;
	public static String availableViewall;
	public static StringBuilder actualWelcome;
	public static String pointTrackerHeader;
	public static String pointTrackerSubHeader;
	public static int walletMaximum;
	public static String pointBalance1;
	public static String finalPointValue;
	public static JSONArray resultArray;
	public static String pullMessageResponse;
	public static String pullMessageHeaderResponse;
	public static String barcodeAlttextResponse;
	public static String barcodeHeaderResponse;
	public static String scannableLoyaltyCardHeaderText;
	public static String mobilephoneResponse;
	public static String codeSourceResponse;
	public static String primaryCardNumbersResponse;
	public static String phoneNumberResponse;
	public static StringBuilder barcodeHeaderString;
	public static String pointTrackerHeaderAltResponse;
	public static String codeTypeResponse;
	public static String dateResponse;
	public static String messageDescriptionResponse;
	public static String formattedDate;
	public static String expirationTimeResponse;
	public static String shortCardNumberResponse;
	public static String storeCodeResponse;
	public static String storeNameResponse;
	public static String corpExpirationTimeResponse;
	public static String corpShortCardNumberResponse;
	public static String corpStoreCodeResponse;
	public static String corpStoreNameResponse;
	public static String contentValue;

	public static int walletCode;
	public static int walletCdn;
	public static JSONArray perksCdn;
	public static String cardTemplateCdn;
	public static String tierCdn;
	public static JSONArray perks;
	public static String cardTemplate;
	public static String tier;
	public static String activeDate;
	public static String expiryDate;
	public static String favoriteStore;
	public static String storeGroup;
	public static String imageUrl1;
	public static String imageAltText;
	public static Response cdnResponse;

	public static WebElement imagecomponent;

	public static String preCheckInAltTextResponse;
	public static String preCheckInTextResponse;
	public static String postCheckInTextResponse;
	public static String codeTypeCheckInResponse;
	public static String codeSourceCheckInResponse;
	public static StringBuilder preCheckInTextString;
	public static StringBuilder postCheckInTextString;
	public static String checkInStoreNameResponse;
	public static String checkInStoreCodeResponse;
	public static String availableRewardsHeader;
	public static String availableRewardsViewAll;
	public static String availableRewardsAltText;
	public static StringBuilder availableRewardsViewAllString;
	public static StringBuilder availableRewardsHeaderString;

	public static String storeShortCode;
	public static String userName;
	public static String passWord;
	public static String merchantId;
	public static String cardTemplateCode;
	public static String storeGroupCode;
	public static String clientId;
	public static String integrationDetail;
	static String storeCode;
	static String authorizationGrant;
	static String merchantid;
	static String key = "6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
	static String provider = "px";
	static String recentlyOrderedName;
	static int savedAddressLength;
	static int savedAddressLengthUpdated;

	static String authentication = "oauth";

	static String[] welcomeConfig = { "{salutation}", "{firstName}", "{lastName}", "{username}" };

	static String thirdPartyIntegration = "lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97";

	static String response_type = "code";

	static String scope = "user_read user_write account_read account_write";

	static String corpStoreCode;

	static String authentication1 = "anonymous";

	static String integrationDetail1 = "os=iOS%7Cosversion=16.6%7Cdevice=iPhone%7CmerchantId=60019%7Cintegrator=Paytronix%7Cversion=REST:14.15%20-%20API:23.21.20231010%20-%20APP:2023101001";

	@Test

	public static void nextGenLocationListFlowWithTakeoutAsapConfigured() throws Exception {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.odFlow();

		String bottomBar = takeoutFlowConfiguration.get(74);
		String sideDrawer = takeoutFlowConfiguration.get(75);

		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
		 * @author Ganeshkumarselvaraj
		 */
		ExtentTest nextGenLocationListFlowWithTakeoutAsapConfigured_003 = test
				.createNode("nextGenLocationListFlowWithTakeoutAsapConfigured_003");

		if (bottomBar.equalsIgnoreCase("Yes")) {

			NGALocationListLoggedIn.ngaLocationListTakeoutAsapBottomBarConfigured();

		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithTakeoutAsapConfigured_003 - Verified that ordernow via buttom bar is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		if (sideDrawer.equalsIgnoreCase("Yes")) {	

			NGALocationListLoggedIn.ngaLocationListTakeoutAsapSideDrawerConfigured();

		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithTakeoutAsapConfigured_003 - Verified that ordernow via side drawer is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}
		CommonMethods.switchContext("FLUTTER");

		Thread.sleep(6000);

		FlutterElement bottomBarHomeButtonVk = find.byValueKey(bottomBarNavigationLocators.BOTTOMBAR_HOME_BUTTON_VKL);
		bottomBarHomeButtonVk.click();
	}

	@Test
	public static void nextGenLocationListFlowWithCurbsideAsapConfigured() throws Exception {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.odFlow();
		String bottomBar = curbsideFlowConfiguration.get(78);
		String sideDrawer = curbsideFlowConfiguration.get(79);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenLocationListFlowWithCurbsideAsapConfigured_001
		 * @author Ganeshkumarselvaraj
		 */

		ExtentTest nextGenLocationListFlowWithCurbsideAsapConfigured_003 = test
				.createNode("nextGenLocationListFlowWithCurbsideAsapConfigured_003");

		if (bottomBar.equalsIgnoreCase("Yes")) {

			NGALocationListLoggedIn.ngaLocationListCurbsideAsapBottomBarConfigured();

		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ordernow via buttom bar is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		if (sideDrawer.equalsIgnoreCase("Yes")) {

			NGALocationListLoggedIn.ngaLocationListCurbsideAsapSideDrawerConfigured();

		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ordernow via side drawer is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		CommonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		WebElement homeButtonXpath = driver.findElement(By.xpath("//*[contains(@content-desc,'Landing Screen')]"));
		homeButtonXpath.click();

	}

	@Test
	public static void nextGenLocationListFlowWithDeliveryAsapConfigured() throws Exception {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);


		FlutterFinder find = new FlutterFinder(driver);
		
		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bass = new BaseClass();
		List<String> deliveryFlowConfiguration = bass.appConfiguration();


		String bottomBar = deliveryFlowConfiguration.get(77);
		String sideDrawer = deliveryFlowConfiguration.get(78);


		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenLocationListFlowWithDeliveryAsapConfigured_001
		 * @author Ganeshkumarselvaraj
		 */

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenLocationListFlowWithDeliveryAsapConfigured_003 = test
				.createNode("nextGenLocationListFlowWithDeliveryAsapConfigured_003");

		if (bottomBar.equalsIgnoreCase("Yes")) {
			
			
			
			NGALocationListLoggedIn.ngaLocationListDeliveryAsapBottomBarConfigured();
			
		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ordernow via buttom bar is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		if (sideDrawer.equalsIgnoreCase("Yes")) {
			
			
			NGALocationListLoggedIn.ngaLocationListDeliveryAsapSideDrawerConfigured();
			
			
		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ordernow via side drawer is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}
		CommonMethods.switchContext("FLUTTER");

		Thread.sleep(6000);

		FlutterElement bottomBarHomeButtonVk = find.byValueKey(bottomBarNavigationLocators.BOTTOMBAR_HOME_BUTTON_VKL);
		bottomBarHomeButtonVk.click();
	}

	@Test

	public void nextGenLocationListFlowWithTakeoutLaterConfigured() throws Exception {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.odFlow();

		String bottomBar = takeoutFlowConfiguration.get(76);
		String sideDrawer = takeoutFlowConfiguration.get(77);

		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenLocationListFlowWithTakeoutLaterConfigured
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenLocationListFlowWithTakeoutLaterConfigured001
		 * @author Ganeshkumarselvaraj
		 */

		ExtentTest nextGenLocationListFlowWithTakeoutLaterConfigured003 = test
				.createNode("nextGenLocationListFlowWithTakeoutLaterConfigured003");

		// To get the dashboard title text

		if (bottomBar.equalsIgnoreCase("Yes")) {

			NGALocationListLoggedIn.ngaLocationListTakeoutLaterBottomBarConfigured();

		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithTakeoutLaterConfigured003 - Verified that ordernow via buttom bar is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		if (sideDrawer.equalsIgnoreCase("Yes")) {

			NGALocationListLoggedIn.ngaLocationListTakeoutLaterSideDrawerConfigured();

		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithTakeoutLaterConfigured003 - Verified that ordernow via side drawer is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		CommonMethods.switchContext("FLUTTER");

		Thread.sleep(6000);

		FlutterElement bottomBarHomeButtonVk = find.byValueKey(bottomBarNavigationLocators.BOTTOMBAR_HOME_BUTTON_VKL);
		bottomBarHomeButtonVk.click();

	}

	@Test

	public void nextGenLocationListFlowWithCurbsideLaterConfigured() throws Exception {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.odFlow();
		String bottomBar = curbsideFlowConfiguration.get(75);
		String sideDrawer = curbsideFlowConfiguration.get(76);

		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenLocationListFlowWithCurbsideLaterConfigured
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenLocationListFlowWithCurbsideLaterConfigured001
		 * @author Ganeshkumarselvaraj
		 */

		ExtentTest nextGenLocationListFlowWithCurbsideLaterConfigured003 = test
				.createNode("nextGenLocationListFlowWithCurbsideLaterConfigured003");

		// To get the dashboard title text

		if (bottomBar.equalsIgnoreCase("Yes")) {

			NGALocationListLoggedIn.ngaLocationListCurbsideLaterBottomBarConfigured();

		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Location List via buttom bar is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		if (sideDrawer.equalsIgnoreCase("Yes")) {

			NGALocationListLoggedIn.ngaLocationListCurbsideLaterSideDrawerConfigured();

		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Location List via side drawer is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		CommonMethods.switchContext("FLUTTER");

		Thread.sleep(6000);

		FlutterElement bottomBarHomeButtonVk = find.byValueKey(bottomBarNavigationLocators.BOTTOMBAR_HOME_BUTTON_VKL);
		bottomBarHomeButtonVk.click();

	}

	@Test

	public void nextGenLocationListFlowWithDeliveryLaterConfigured() throws Exception {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);


		FlutterFinder find = new FlutterFinder(driver);


		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bass = new BaseClass();
		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		String bottomBar = deliveryFlowConfiguration.get(79);
		String sideDrawer = deliveryFlowConfiguration.get(80);


		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenLocationListFlowWithDeliveryLaterConfigured
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenLocationListFlowWithDeliveryLaterConfigured001
		 * @author Ganeshkumarselvaraj
		 */

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenLocationListFlowWithDeliveryLaterConfigured003 = test
				.createNode("nextGenLocationListFlowWithDeliveryLaterConfigured003");

		if (bottomBar.equalsIgnoreCase("Yes")) {
			
			NGALocationListLoggedIn.ngaLocationListDeliveryLaterBottomBarConfigured();
			
			
		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Location List   via buttom bar is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		if (sideDrawer.equalsIgnoreCase("Yes")) {
			
			
			NGALocationListLoggedIn.ngaLocationListDeliveryLaterSideDrawerConfigured();
			
		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Location List   via side drawer is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		CommonMethods.switchContext("FLUTTER");

		Thread.sleep(6000);

		FlutterElement bottomBarHomeButtonVk = find.byValueKey(bottomBarNavigationLocators.BOTTOMBAR_HOME_BUTTON_VKL);
		bottomBarHomeButtonVk.click();

	}

}
