package com.features;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.AppLaunchAndLandingScreenLocators;
import com.locators.AppRatingLocators;
import com.locators.BottomBarNavigationLocator;
import com.locators.DashBoardLocators;
import com.locators.LocationLocators;
import com.locators.MyAccountLocators;
import com.locators.OLOLocators;
import com.locators.OrderNowLocators;
import com.locators.SideDrawerLocators;
import com.locators.SignInLocators;
import com.locators.TransactionHistoryLocators;

import io.appium.java_client.TouchAction;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;

public class NGAOrderNowGuest extends BaseClass {

	static SignInLocators signInLocator = new SignInLocators();
	static CommonMethods commonMethods = new CommonMethods();
	static LocationLocators locationLocators = new LocationLocators();
	static DashBoardLocators dashBoardLocators = new DashBoardLocators();
	static SideDrawerLocators sideDrawerLocators = new SideDrawerLocators();
	static OrderNowLocators orderNowLocators = new OrderNowLocators();
	static BottomBarNavigationLocator bottomBarNavigationLocators = new BottomBarNavigationLocator();

	static AppRatingLocators appRating = new AppRatingLocators();
	static SignInLocators signInLocators = new SignInLocators();
	static AppLaunchAndLandingScreenLocators appLaunchAndLandingScreenLocators = new AppLaunchAndLandingScreenLocators();
	static MyAccountLocators myAccountLocators = new MyAccountLocators();
	public static String isLocationEnabled = "true";
	static TransactionHistoryLocators transactionHistoryLocators = new TransactionHistoryLocators();
	static OLOLocators oloLocators = new OLOLocators();
	static List<String> list = new ArrayList<String>();
	static AddressGuest addressGuest = new AddressGuest();
	static ReOrder reOrder = new ReOrder();

	final static ArrayList<JSONObject> jList = new ArrayList<>();

	public static String componentList;
	public static String accessTokenGen;
	public static String printedCardNumberResponse;
	public static String firstnameResponse;
	public static String lastnameResponse;
	public static String salutationResponse;
	public static String welcomeResponse;
	public static String welcomeResponseDefault;
	public static String usernameResponse;
	public static StringBuilder welcomeString;
	public static StringBuilder welcomeDefault;
	public static StringBuilder pointTrackHead;
	public static StringBuilder actualSubHeader;
	public static StringBuilder responseHeader;
	public static StringBuilder actualHeader;
	public static String availableHeader;
	public static String availableViewall;
	public static StringBuilder actualWelcome;
	public static String pointTrackerHeader;
	public static String pointTrackerSubHeader;
	public static int walletMaximum;
	public static String pointBalance1;
	public static String finalPointValue;
	public static JSONArray resultArray;
	public static String pullMessageResponse;
	public static String pullMessageHeaderResponse;
	public static String barcodeAlttextResponse;
	public static String barcodeHeaderResponse;
	public static String scannableLoyaltyCardHeaderText;
	public static String mobilephoneResponse;
	public static String codeSourceResponse;
	public static String primaryCardNumbersResponse;
	public static String phoneNumberResponse;
	public static StringBuilder barcodeHeaderString;
	public static String pointTrackerHeaderAltResponse;
	public static String codeTypeResponse;
	public static String dateResponse;
	public static String messageDescriptionResponse;
	public static String formattedDate;
	public static String expirationTimeResponse;
	public static String shortCardNumberResponse;
	public static String storeCodeResponse;
	public static String storeNameResponse;
	public static String corpExpirationTimeResponse;
	public static String corpShortCardNumberResponse;
	public static String corpStoreCodeResponse;
	public static String corpStoreNameResponse;
	public static String contentValue;

	public static int walletCode;
	public static int walletCdn;
	public static JSONArray perksCdn;
	public static String cardTemplateCdn;
	public static String tierCdn;
	public static JSONArray perks;
	public static String cardTemplate;
	public static String tier;
	public static String activeDate;
	public static String expiryDate;
	public static String favoriteStore;
	public static String storeGroup;
	public static String imageUrl1;
	public static String imageAltText;
	public static Response cdnResponse;

	public static WebElement imagecomponent;

	public static String preCheckInAltTextResponse;
	public static String preCheckInTextResponse;
	public static String postCheckInTextResponse;
	public static String codeTypeCheckInResponse;
	public static String codeSourceCheckInResponse;
	public static StringBuilder preCheckInTextString;
	public static StringBuilder postCheckInTextString;
	public static String checkInStoreNameResponse;
	public static String checkInStoreCodeResponse;
	public static String availableRewardsHeader;
	public static String availableRewardsViewAll;
	public static String availableRewardsAltText;
	public static StringBuilder availableRewardsViewAllString;
	public static StringBuilder availableRewardsHeaderString;

	public static String storeShortCode;
	public static String userName;
	public static String passWord;
	public static String merchantId;
	public static String cardTemplateCode;
	public static String storeGroupCode;
	public static String clientId;
	public static String integrationDetail;
	static String storeCode;
	static String authorizationGrant;
	static String merchantid;
	static String key = "6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
	static String provider = "px";
	static String recentlyOrderedName;
	static String Restaurant_Id;

	static String authentication = "oauth";

	static String[] welcomeConfig = { "{salutation}", "{firstName}", "{lastName}", "{username}" };

	static String thirdPartyIntegration = "lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97";

	static String response_type = "code";

	static String scope = "user_read user_write account_read account_write";

	static String corpStoreCode;

	static String authentication1 = "anonymous";

	static String integrationDetail1 = "os=iOS%7Cosversion=16.6%7Cdevice=iPhone%7CmerchantId=60019%7Cintegrator=Paytronix%7Cversion=REST:14.15%20-%20API:23.21.20231010%20-%20APP:2023101001";

	static String favStoreCode;
	static String favStoreName;
	static String optStringFavEmpty;

	static String get0;

	static String get1;

	static String get2;

	static int size;

	static String date;

	static String substring;

	static String DateApi;

	static String Date;

	static String orderId;

	static String takeoutOrderTypeText;
	static String curbsideOrderTypeText;
	static String deliveryOrderTypeText;

	static String asapOrderTimeText;
	static String laterOrderTimeText;

	static SinglePayment singlePayment = new SinglePayment();

	static SplitPayment splitPayment = new SplitPayment();

	public static void ngaOrderNowLoggedInTakeoutAsapBottomBarConfiguredGuest() throws Throwable {

		boolean jkCafeRecommendedMenuEnabledorNot = commonMethods.jkCafeRecommendedMenuEnabledorNot();

		System.out.println("print :" + jkCafeRecommendedMenuEnabledorNot);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		merchantId = takeoutFlowConfiguration.get(8);
		storeCode = takeoutFlowConfiguration.get(13);
		String localConfigTakeoutText = takeoutFlowConfiguration.get(22);

		List<String> storeName = bass.odFlow();

		List<String> menuItem = bass.menuItem();

		String string = menuItem.get(1);

		pos = Integer.parseInt(string);

		String string1 = menuItem.get(2);

		position = Integer.parseInt(string1);

		String strings = menuItem.get(3);

		pos1 = Integer.parseInt(strings);

		String strings1 = menuItem.get(4);

		position1 = Integer.parseInt(strings1);

		Thread.sleep(6000);

		if (jkCafeRecommendedMenuEnabledorNot == true) {

			pos1 = pos1 + 1;
			pos = pos + 1;
			position = position + 1;
			position1 = position1 + 1;
		}

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		String desiredStoreName = storeName.get(15);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_001 = test
				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_001");
		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_002 = test
				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_002");
		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 = test
				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003");

		// To check whether order now is present in the bottom bar.

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?";
		RequestSpecification requestingHttp = io.restassured.RestAssured.given();

		RequestSpecification parameterRequest = requestingHttp.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse = parameterRequest.get("");

		JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
		if (storeResponse.has("name")) {

			Restaurant_Id = storeResponse.optString("id");

			List<String> appConfiguration = bass.appConfiguration();

			userName = appConfiguration.get(6);
			passWord = appConfiguration.get(7);
			merchantId = appConfiguration.get(8);
			cardTemplateCode = appConfiguration.get(9);
			storeGroupCode = appConfiguration.get(10);
			clientId = appConfiguration.get(11);
			integrationDetail = appConfiguration.get(12);

			storeCode = appConfiguration.get(13);

		}

		String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
				+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
				+ cardTemplateCode + "\",\n" + "    \"scope\": \"user_read account_read account_write user_write\",\n"
				+ "    \"merchantId\": \"" + merchantId + "\",\n"
				+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
				+ "    \"authentication\": \"anonymous\",\n"
				+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n" + "    \"client_id\": \""
				+ clientId + "\"\n" + "}";

		RequestSpecification request = io.restassured.RestAssured.given();

		request.contentType(ContentType.JSON);

		request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

		request.body(jsonString);
		Response response = request.post();
		ValidatableResponse validatableResponse = response.then();
		validatableResponse.statusCode(200);
		JSONObject jObj = new JSONObject(response.body().asString());
		String accessTokenGen = jObj.optString("access_token");
		String printedCardNumberResponse = jObj.optString("printedCardNumber");

		String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n" + "    \"merchant_id\" : "
				+ merchantId + ",\n" + "    \"printed_card_number\" : " + printedCardNumberResponse + " ,\n"
				+ "    \"provider\" : \"px\",\n" + "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

		RequestSpecification requestOrders = io.restassured.RestAssured.given();

		RequestSpecification parameterReq = requestOrders.queryParam("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

		parameterReq.contentType(ContentType.JSON);

		parameterReq.baseUri("https://opendining.net/api/v1/orders?");

		parameterReq.body(Json1);
		Response responseOrders = parameterReq.post();
		ValidatableResponse validatableOrdersResponse = responseOrders.then();

		validatableOrdersResponse.statusCode(200);
		JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
		orderId = jObjOrders.optString("order_id");
		System.out.println("the order id is" + orderId);

		// To check whether order now is present in the bottom bar.

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(10000);

			WebElement bottomBarOrderNow = driver.findElement(By.xpath("//*[contains(@content-desc,'Order Now')]"));

			// To check Order now is displayed in the bottom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_001.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_001 - Validated that Order now button is present in bottom bar and text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that OrderNow is configured in bottom bar");

				bottomBarOrderNow.click();

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(5000);

				try {

					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {
					// TODO: handle exception

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_002
				 * @author Ganeshkumarselvaraj
				 */

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				Thread.sleep(2000);

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

//				nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_002.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified user navigated to the order now screen.");
				nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_002 - Verified that user navigated to the order now screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
				 * @author Ganeshkumarselvaraj
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : ",
						ExtentColor.CYAN));

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(3000);

				WebElement bottomBarOrderNow1 = driver
						.findElement(By.xpath("//*[contains(@content-desc,'Order Now')]"));

				bottomBarOrderNow1.click();

				commonMethods.switchContext("FLUTTER");

			}
//
//			/**
//			 * @Class_Name Location
//			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
//			 * @Description Ensure that user navigated to dashboard screen while tapping the
//			 *              backicon in the ordernow screen.
//			 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
//			 * @author Ganeshkumarselvaraj
//			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				String takeoutResponse = storeResponse1.optString("takeout");
				String takeoutResponseLabelText = storeResponse1.optString("takeout_label");

				System.out.println(takeoutResponse);
				System.out.println(takeoutResponseLabelText);
				System.out.println(asapOrder);

				JSONObject curbsideObject = storeResponse1.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
				 * @author Ganeshkumarselvaraj
				 */

				try {

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(3000);

					// Define your XPath locator for the target element
					By targetElementLocator3 = By.xpath(
							"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + desiredStoreName + "'" + ")]");

					// Set maximum number of scroll attempts
					int maxScrollAttempts3 = 5;

					// Loop to attempt finding the element and scrolling
					for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
						try {
							// Try to find the element
							WebElement element = driver.findElement(targetElementLocator3);
							if (element.isDisplayed()) {
								// Element found and displayed, perform actions
								element.click();

								System.out.println(" successfully found the store in the Order Now screen ");

								nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Desired store is displayed in the OrderNow ",
										ExtentColor.CYAN));

								break;
							}
						} catch (Exception e) {
							// Element not found, perform scroll action

							TouchAction touchAction1 = new TouchAction(driver);
							touchAction1.press(PointOption.point(500, 1900))
									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
									.moveTo(PointOption.point(500, 550)).release().perform();

							System.out.println(" Store not found in the : " + j1
									+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
									+ maxScrollAttempts3);

							nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Desired store is not displayed in the order now screen in the : "
											+ j1
											+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
											+ "										+ maxScrollAttempts3 ",
									ExtentColor.CYAN));
						}
					}

					// To verify the Configured order type.

					if (takeoutResponse.equalsIgnoreCase("true")) {

						if (!takeoutResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(10000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();
								boolean equalsIgnoreCase = takeoutResponseLabelText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("FLUTTER");

									takeoutText1.click();

									nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ takeoutResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(6000);

									takeoutText1.click();

									nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ takeoutResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(10000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actaul text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											Basket.ngaBasket();

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											singlePayment.singlePaymentFlowGuest(orderId);

											splitPayment.splitPaymentFlowGuest(orderId);

											Thread.sleep(3000);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											System.out.println("asap label text is : " + asapOrderTimeText);

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actaul text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											Basket.ngaBasket();

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											singlePayment.singlePaymentFlowGuest(orderId);

											splitPayment.splitPaymentFlowGuest(orderId);

											Thread.sleep(3000);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											Basket.ngaBasket();

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											singlePayment.singlePaymentFlowGuest(orderId);

											splitPayment.splitPaymentFlowGuest(orderId);

											Thread.sleep(3000);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

										asapOrderTimeText = asapLabel.getText();

										System.out.println("asap label text is : " + asapOrderTimeText);

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel.click();

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actaul text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											Basket.ngaBasket();

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											singlePayment.singlePaymentFlowGuest(orderId);

											splitPayment.splitPaymentFlowGuest(orderId);

											Thread.sleep(3000);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actaul text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											Basket.ngaBasket();

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											singlePayment.singlePaymentFlowGuest(orderId);

											splitPayment.splitPaymentFlowGuest(orderId);

											Thread.sleep(3000);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											Basket.ngaBasket();

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											singlePayment.singlePaymentFlowGuest(orderId);

											splitPayment.splitPaymentFlowGuest(orderId);

											Thread.sleep(3000);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);
								takeoutOrderTypeText = takeoutText1.getText();
								boolean equalsIgnoreCase = localConfigTakeoutText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									takeoutText1.click();

									nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ localConfigTakeoutText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("FLUTTER");

									takeoutText1.click();

									nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ localConfigTakeoutText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}
								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actaul text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											Basket.ngaBasket();

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											singlePayment.singlePaymentFlowGuest(orderId);

											splitPayment.splitPaymentFlowGuest(orderId);

											Thread.sleep(3000);

										} else {

											// To fail that ASAP label text is not matching

											asapLabel1.click();

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actaul text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											Basket.ngaBasket();

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											singlePayment.singlePaymentFlowGuest(orderId);

											splitPayment.splitPaymentFlowGuest(orderId);

											Thread.sleep(3000);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											Basket.ngaBasket();

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											singlePayment.singlePaymentFlowGuest(orderId);

											splitPayment.splitPaymentFlowGuest(orderId);

											Thread.sleep(3000);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that takeout lable is not displayed in the screen where as takeout is not configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			e.printStackTrace();

			nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the bottom bar ",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInTakeoutAsapSideDrawerConfiguredGuest() throws Exception {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		merchantId = takeoutFlowConfiguration.get(8);
		storeCode = takeoutFlowConfiguration.get(13);
		String localConfigTakeoutText = takeoutFlowConfiguration.get(36);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_001 = test
				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_001");
		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_002 = test
				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_002");
		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 = test
				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003");

		try {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find.byValueKey(sideDrawerLocators.SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			try {

				WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

				if (dontAllowId.isDisplayed()) {

					commonMethods.checkAndClickTheElement(dontAllowId);

				}
			} catch (Exception e) {

				System.out.println("Native Popup not appears");

			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the order now screen.

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(2000);

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_002.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
			 * @author Ganeshkumarselvaraj
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : ",
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			// Need to verify the store details in the map icon and list view are same

//			commonMethods.checkAndClickTheElement(locationScreenStoreMapIconButton);
			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?";
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				Restaurant_Id = storeResponse.optString("id");

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);

				storeCode = appConfiguration.get(13);

			}

			String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
					+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
					+ cardTemplateCode + "\",\n"
					+ "    \"scope\": \"user_read account_read account_write user_write\",\n" + "    \"merchantId\": \""
					+ merchantId + "\",\n" + "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
					+ "    \"authentication\": \"anonymous\",\n"
					+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
					+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

			RequestSpecification request = io.restassured.RestAssured.given();

			request.contentType(ContentType.JSON);

			request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

			request.body(jsonString);
			Response response = request.post();
			ValidatableResponse validatableResponse = response.then();
			validatableResponse.statusCode(200);
			JSONObject jObj = new JSONObject(response.body().asString());
			String accessTokenGen = jObj.optString("access_token");
			String printedCardNumberResponse = jObj.optString("printedCardNumber");

			String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n" + "    \"merchant_id\" : "
					+ merchantId + ",\n" + "    \"printed_card_number\" : " + printedCardNumberResponse + " ,\n"
					+ "    \"provider\" : \"px\",\n" + "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

			RequestSpecification requestOrders = io.restassured.RestAssured.given();

			RequestSpecification parameterReq = requestOrders.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

			parameterReq.contentType(ContentType.JSON);

			parameterReq.baseUri("https://opendining.net/api/v1/orders?");

			parameterReq.body(Json1);
			Response responseOrders = parameterReq.post();
			ValidatableResponse validatableOrdersResponse = responseOrders.then();

			validatableOrdersResponse.statusCode(200);
			JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
			orderId = jObjOrders.optString("order_id");
			System.out.println("the order id is" + orderId);

			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String takeoutResponse = storeResponse1.optString("takeout");
				String takeoutResponseLabelText = storeResponse1.optString("takeout_label");

				System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);
				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				System.out.println(storeShortCodeNumberConfiguration);
				System.out.println(corpShortCodeNumberConfiguration);

				String jsonString1 = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
						+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
						+ cardTemplateCode + "\",\n"
						+ "    \"scope\": \"user_read account_read account_write user_write\",\n"
						+ "    \"merchantId\": \"" + merchantId + "\",\n"
						+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
						+ "    \"authentication\": \"anonymous\",\n"
						+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
						+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

				RequestSpecification request1 = io.restassured.RestAssured.given();

				request1.contentType(ContentType.JSON);

				request1.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

				request1.body(jsonString1);
				Response response1 = request1.post();
				ValidatableResponse validatableResponse1 = response1.then();
				validatableResponse1.statusCode(200);
				JSONObject jObj1 = new JSONObject(response1.body().asString());
				accessTokenGen = jObj1.optString("access_token");
				printedCardNumberResponse = jObj1.optString("printedCardNumber");

				////////////////////////////

				try {

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(3000);

					// Define your XPath locator for the target element
					By targetElementLocator3 = By.xpath(
							"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + desiredStoreName + "'" + ")]");

					// Set maximum number of scroll attempts
					int maxScrollAttempts3 = 5;

					// Loop to attempt finding the element and scrolling
					for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
						try {
							// Try to find the element
							WebElement element = driver.findElement(targetElementLocator3);
							if (element.isDisplayed()) {
								// Element found and displayed, perform actions
								element.click();

								System.out.println(" successfully found the store in the Order Now screen ");

								nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Desired store is displayed in the OrderNow ",
										ExtentColor.CYAN));

								break;
							}
						} catch (Exception e) {
							// Element not found, perform scroll action

							TouchAction touchAction1 = new TouchAction(driver);
							touchAction1.press(PointOption.point(500, 1900))
									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
									.moveTo(PointOption.point(500, 550)).release().perform();

							System.out.println(" Store not found in the : " + j1
									+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
									+ maxScrollAttempts3);

							nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Desired store is not displayed in the order now screen in the : "
											+ j1
											+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
											+ "										+ maxScrollAttempts3 ",
									ExtentColor.CYAN));
						}
					}

					// To verify the Configured order type.

					if (takeoutResponse.equalsIgnoreCase("true")) {

						if (!takeoutResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);
								takeoutOrderTypeText = takeoutText1.getText();
								boolean equalsIgnoreCase = takeoutResponseLabelText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									takeoutText1.click();

									nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ takeoutResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(6000);

									takeoutText1.click();

									nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
													+ takeoutOrderTypeText + "  " + " and response text is : "
													+ takeoutResponseLabelText + " " + "  not matching.",
											ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actaul text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											System.out.println("asap label text is : " + asapOrderTimeText);

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actaul text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actaul text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											System.out.println("asap label text is : " + asapOrderTimeText);

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actaul text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);
								takeoutOrderTypeText = takeoutText1.getText();
								boolean equalsIgnoreCase = localConfigTakeoutText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									takeoutText1.click();

									nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that takeout is displayed in the order type popup and displayed texts is "
													+ takeoutOrderTypeText + " " + " response text is : "
													+ localConfigTakeoutText + " " + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("FLUTTER");

									takeoutText1.click();

									nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that takeout is displayed in the order type popup and displayed texts is "
													+ takeoutOrderTypeText + " " + " response text is : "
													+ localConfigTakeoutText + " " + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actaul text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											System.out.println("asap label text is : " + asapOrderTimeText);

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actaul text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that takeout lable is not displayed in the screen where as takeout is not configured in the back end..",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ordernow is not configured in the side drawer ",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInTakeoutLaterBottomBarConfiguredGuest() throws Exception {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass baseclass = new BaseClass();

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		merchantId = takeoutFlowConfiguration.get(8);
		storeCode = takeoutFlowConfiguration.get(13);
		String localConfigTakeoutText = takeoutFlowConfiguration.get(20);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest001 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest001");
		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest002 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest002");
		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003");

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?";
		RequestSpecification requestingHttp = io.restassured.RestAssured.given();

		RequestSpecification parameterRequest = requestingHttp.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse = parameterRequest.get("");

		JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
		if (storeResponse.has("name")) {

			Restaurant_Id = storeResponse.optString("id");

			List<String> appConfiguration = bass.appConfiguration();

			userName = appConfiguration.get(6);
			passWord = appConfiguration.get(7);
			merchantId = appConfiguration.get(8);
			cardTemplateCode = appConfiguration.get(9);
			storeGroupCode = appConfiguration.get(10);
			clientId = appConfiguration.get(11);
			integrationDetail = appConfiguration.get(12);

			storeCode = appConfiguration.get(13);

		}

		String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
				+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
				+ cardTemplateCode + "\",\n" + "    \"scope\": \"user_read account_read account_write user_write\",\n"
				+ "    \"merchantId\": \"" + merchantId + "\",\n"
				+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
				+ "    \"authentication\": \"anonymous\",\n"
				+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n" + "    \"client_id\": \""
				+ clientId + "\"\n" + "}";

		RequestSpecification request = io.restassured.RestAssured.given();

		request.contentType(ContentType.JSON);

		request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

		request.body(jsonString);
		Response response = request.post();
		ValidatableResponse validatableResponse = response.then();
		validatableResponse.statusCode(200);
		JSONObject jObj = new JSONObject(response.body().asString());
		String accessTokenGen = jObj.optString("access_token");
		String printedCardNumberResponse = jObj.optString("printedCardNumber");

		String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n" + "    \"merchant_id\" : "
				+ merchantId + ",\n" + "    \"printed_card_number\" : " + printedCardNumberResponse + " ,\n"
				+ "    \"provider\" : \"px\",\n" + "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

		RequestSpecification requestOrders = io.restassured.RestAssured.given();

		RequestSpecification parameterReq = requestOrders.queryParam("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

		parameterReq.contentType(ContentType.JSON);

		parameterReq.baseUri("https://opendining.net/api/v1/orders?");

		parameterReq.body(Json1);
		Response responseOrders = parameterReq.post();
		ValidatableResponse validatableOrdersResponse = responseOrders.then();

		validatableOrdersResponse.statusCode(200);
		JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
		orderId = jObjOrders.optString("order_id");
		System.out.println("the order id is" + orderId);

		// To check whether ordernow is present in the bottom bar.

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver.findElement(By.xpath("//*[contains(@content-desc,'Order Now')]"));

			// To check Order now is displayed in the buttom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest001.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest001 - Validated that Order now button is present in bottom bar and the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();

				try {

					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {
					// TODO: handle exception

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest002
				 * @author Ganeshkumarselvaraj
				 */

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the order now screen.");
				nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest002 - Verified that user navigated to the order now screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
				 * @author Ganeshkumarselvaraj
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : ",
						ExtentColor.CYAN));

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(3000);

				WebElement bottomBarOrderNow1 = driver
						.findElement(By.xpath("//*[contains(@content-desc,'Order Now')]"));

				bottomBarOrderNow1.click();

				commonMethods.switchContext("FLUTTER");

			}
//
//			/**
//			 * @Class_Name Location
//			 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest
//			 * @Description Ensure that user navigated to dashboard screen while tapping the
//			 *              backicon in the ordernow screen.
//			 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
//			 * @author Ganeshkumarselvaraj
//			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				String takeoutResponse = storeResponse1.optString("takeout");
				String takeoutResponseLabelText = storeResponse1.optString("takeout_label");

				System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);

				JSONObject curbsideObject = storeResponse1.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				Restaurant_Id = storeResponse1.optString("id");

				System.out.println("Restaurant Id is : " + Restaurant_Id);

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				BaseClass bc = new BaseClass();

				List<String> appConfiguration = bc.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);
				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);

				DateApi = odFlow.get(18);
				Date = odFlow.get(19);
				storeCode = appConfiguration.get(13);
				System.out.println(storeShortCodeNumberConfiguration);
				System.out.println(corpShortCodeNumberConfiguration);

				String jsonString1 = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
						+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
						+ cardTemplateCode + "\",\n"
						+ "    \"scope\": \"user_read account_read account_write user_write\",\n"
						+ "    \"merchantId\": \"" + merchantId + "\",\n"
						+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
						+ "    \"authentication\": \"anonymous\",\n"
						+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
						+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

				RequestSpecification request1 = io.restassured.RestAssured.given();

				request1.contentType(ContentType.JSON);

				request1.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

				request.body(jsonString1);
				Response response1 = request.post();
				ValidatableResponse validatableResponse1 = response1.then();
				validatableResponse1.statusCode(200);
				JSONObject jObj1 = new JSONObject(response1.body().asString());
				accessTokenGen = jObj1.optString("access_token");
				printedCardNumberResponse = jObj1.optString("printedCardNumber");

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
				 * @author Ganeshkumarselvaraj
				 */

				try {

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(3000);

					// Define your XPath locator for the target element
					By targetElementLocator3 = By.xpath(
							"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + desiredStoreName + "'" + ")]");

					// Set maximum number of scroll attempts
					int maxScrollAttempts3 = 5;

					// Loop to attempt finding the element and scrolling
					for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
						try {
							// Try to find the element
							WebElement element = driver.findElement(targetElementLocator3);
							if (element.isDisplayed()) {
								// Element found and displayed, perform actions
								element.click();

								System.out.println(" successfully found the store in the Order Now screen ");

								nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Desired store is displayed in the OrderNow ",
										ExtentColor.CYAN));

								break;
							}
						} catch (Exception e) {
							// Element not found, perform scroll action

							TouchAction touchAction1 = new TouchAction(driver);
							touchAction1.press(PointOption.point(500, 1900))
									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
									.moveTo(PointOption.point(500, 550)).release().perform();

							System.out.println(" Store not found in the : " + j1
									+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
									+ maxScrollAttempts3);

							nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Desired store is not displayed in the order now screen in the : "
											+ j1
											+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
											+ "										+ maxScrollAttempts3 ",
									ExtentColor.CYAN));
						}
					}

					// To verify the Configured order type.

					if (takeoutResponse.equalsIgnoreCase("true")) {

						if (!takeoutResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();
								boolean equalsIgnoreCase = takeoutResponseLabelText
										.equalsIgnoreCase(takeoutOrderTypeText);

								System.out.println("takeoutResponseLabelText is " + takeoutResponseLabelText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
													+ takeoutOrderTypeText + " " + " response text is : "
													+ takeoutResponseLabelText + " " + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Takeout  is displayed in the order type popup and displayed texts is "
													+ takeoutOrderTypeText + " " + " response text is : "
													+ takeoutResponseLabelText + " " + "  not matching.",
											ExtentColor.CYAN));

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}
									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}
									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								System.out.println("appppppeaaaaarssss");

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();
								boolean equalsIgnoreCase = localConfigTakeoutText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									takeoutText1.click();

									nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ takeoutOrderTypeText + " " + " response text is : "
													+ localConfigTakeoutText + " " + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ takeoutOrderTypeText + " " + " response text is : "
													+ localConfigTakeoutText + " " + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}
									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out later is not configured.
						nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that takeout lable is not displayed in the screen where as takeout is not configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the bottom bar ",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInTakeoutLaterSideDrawerConfiguredGuest() throws Exception {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass baseclass = new BaseClass();

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		merchantId = takeoutFlowConfiguration.get(8);
		storeCode = takeoutFlowConfiguration.get(13);
		String localConfigTakeoutText = takeoutFlowConfiguration.get(36);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest001 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest001");
		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest002 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest002");
		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003");

		try {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find.byValueKey(sideDrawerLocators.SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest001.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest001 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest001.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			try {

				WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

				if (dontAllowId.isDisplayed()) {

					dontAllowId.click();

				}

			}

			catch (Exception e) {
				// TODO: handle exception

				System.out.println("Native Popup not aappears");

			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the order now screen.

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(2000);

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest002.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
			 * @author Ganeshkumarselvaraj
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : ",
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			// Need to verify the store details in the map icon and list view are same

//				commonMethods.checkAndClickTheElement(locationScreenStoreMapIconButton);
			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?";
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				Restaurant_Id = storeResponse.optString("id");

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);

				storeCode = appConfiguration.get(13);

			}

			String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
					+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
					+ cardTemplateCode + "\",\n"
					+ "    \"scope\": \"user_read account_read account_write user_write\",\n" + "    \"merchantId\": \""
					+ merchantId + "\",\n" + "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
					+ "    \"authentication\": \"anonymous\",\n"
					+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
					+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

			RequestSpecification request = io.restassured.RestAssured.given();

			request.contentType(ContentType.JSON);

			request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

			request.body(jsonString);
			Response response = request.post();
			ValidatableResponse validatableResponse = response.then();
			validatableResponse.statusCode(200);
			JSONObject jObj = new JSONObject(response.body().asString());
			String accessTokenGen = jObj.optString("access_token");
			String printedCardNumberResponse = jObj.optString("printedCardNumber");

			String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n" + "    \"merchant_id\" : "
					+ merchantId + ",\n" + "    \"printed_card_number\" : " + printedCardNumberResponse + " ,\n"
					+ "    \"provider\" : \"px\",\n" + "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

			RequestSpecification requestOrders = io.restassured.RestAssured.given();

			RequestSpecification parameterReq = requestOrders.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

			parameterReq.contentType(ContentType.JSON);

			parameterReq.baseUri("https://opendining.net/api/v1/orders?");

			parameterReq.body(Json1);
			Response responseOrders = parameterReq.post();
			ValidatableResponse validatableOrdersResponse = responseOrders.then();

			validatableOrdersResponse.statusCode(200);
			JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
			orderId = jObjOrders.optString("order_id");
			System.out.println("the order id is" + orderId);

			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String takeoutResponse = storeResponse1.optString("takeout");
				String takeoutResponseLabelText = storeResponse1.optString("takeout_label");

				System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);
				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				System.out.println(storeShortCodeNumberConfiguration);
				System.out.println(corpShortCodeNumberConfiguration);

				String jsonString1 = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
						+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
						+ cardTemplateCode + "\",\n"
						+ "    \"scope\": \"user_read account_read account_write user_write\",\n"
						+ "    \"merchantId\": \"" + merchantId + "\",\n"
						+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
						+ "    \"authentication\": \"anonymous\",\n"
						+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
						+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

				RequestSpecification request1 = io.restassured.RestAssured.given();

				request1.contentType(ContentType.JSON);

				request1.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

				request1.body(jsonString1);
				Response response1 = request1.post();
				ValidatableResponse validatableResponse1 = response1.then();
				validatableResponse1.statusCode(200);
				JSONObject jObj1 = new JSONObject(response1.body().asString());
				accessTokenGen = jObj1.optString("access_token");
				printedCardNumberResponse = jObj1.optString("printedCardNumber");

				try {

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(3000);

					// Define your XPath locator for the target element
					By targetElementLocator3 = By.xpath(
							"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + desiredStoreName + "'" + ")]");

					// Set maximum number of scroll attempts
					int maxScrollAttempts3 = 5;

					// Loop to attempt finding the element and scrolling
					for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
						try {
							// Try to find the element
							WebElement element = driver.findElement(targetElementLocator3);
							if (element.isDisplayed()) {
								// Element found and displayed, perform actions
								element.click();

								System.out.println(" successfully found the store in the Order Now screen ");

								nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Desired store is displayed in the OrderNow ",
										ExtentColor.CYAN));

								break;
							}
						} catch (Exception e) {
							// Element not found, perform scroll action

							TouchAction touchAction1 = new TouchAction(driver);
							touchAction1.press(PointOption.point(500, 1900))
									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
									.moveTo(PointOption.point(500, 550)).release().perform();

							System.out.println(" Store not found in the : " + j1
									+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
									+ maxScrollAttempts3);

							nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Desired store is not displayed in the order now screen in the : "
											+ j1
											+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
											+ "										+ maxScrollAttempts3 ",
									ExtentColor.CYAN));
						}
					}

					// To verify the Configured order type.

					if (takeoutResponse.equalsIgnoreCase("true")) {

						if (!takeoutResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();
								boolean equalsIgnoreCase = takeoutResponseLabelText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									takeoutText1.click();

									nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ takeoutResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ takeoutResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();
										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();
										}
									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();
										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();
										}
									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));
								takeoutOrderTypeText = takeoutText.getText();
								boolean equalsIgnoreCase = localConfigTakeoutText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ localConfigTakeoutText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ localConfigTakeoutText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();
										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText, orderId);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();
										}
									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out later is not configured.
						nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the back end",
					ExtentColor.CYAN));
		}

	}

	@Test

	public static void ngaOrderNowLoggedInCurbsideAsapBottomBarConfiguredGuest() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.appConfiguration();
		merchantId = curbsideFlowConfiguration.get(8);
		storeCode = curbsideFlowConfiguration.get(13);

		String localConfigCurbsideText = commonMethods
				.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_CURBSIDE_TEXT);

		String asapText = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_ASAP_TEXT);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_001 = test
				.createNode("nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_001");
		ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_002 = test
				.createNode("nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_002");
		ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 = test
				.createNode("nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003");

		// To check whether ordernow is present in the bottom bar.

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));

			// To check Order now is displayed in the buttom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_001.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_001 - Validated that Order now button is present in bottom bar and the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that OrderNow is configured in bottom bar");

				bottomBarOrderNow.click();

				try {

					Thread.sleep(6000);

					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {
					// TODO: handle exception

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_002
				 * @author Ganeshkumarselvaraj
				 */

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the order now screen.");
				nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithLocationOffLoggedIn002 - Verified that user navigated to the order now screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
				 * @author Ganeshkumarselvaraj
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithLocationOffLoggedIn003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : ",
						ExtentColor.CYAN));

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(3000);

				WebElement bottomBarOrderNow1 = driver
						.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));

				bottomBarOrderNow1.click();

				commonMethods.switchContext("FLUTTER");

			}

//
//	

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				JSONObject curbsideObject = storeResponse1.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				List<String> odFlow = bass.odFlow();

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);
				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				System.out.println(storeShortCodeNumberConfiguration);
				System.out.println(corpShortCodeNumberConfiguration);

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithLocationOffLoggedIn003
				 * @author Ganeshkumarselvaraj
				 */

				try {

					Thread.sleep(5000);

					commonMethods.scrollDownAndClick(desiredStoreName);

					// To verify the Configured order type.

					if (curbsideResponse.equalsIgnoreCase("true")) {

						if (!curbsideResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);
								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that curbside is displayed in the order type popup and displayed texts is "
															+ curbsideOrderTypeText + " " + " response text is : "
															+ curbsideResponseLabelText + " " + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that curbside is displayed in the order type popup and displayed texts is "
															+ curbsideOrderTypeText + " " + " response text is : "
															+ curbsideResponseLabelText + " " + "  not matching.",
													ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);
										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);
										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);
								curbsideOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = localConfigCurbsideText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									takeoutText1.click();

									nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ curbsideOrderTypeText + " response text is : "
															+ localConfigCurbsideText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ curbsideOrderTypeText + " response text is : "
															+ localConfigCurbsideText + " not matching.",
													ExtentColor.CYAN));

									// text mismatches

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithLocationOffLoggedIn003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the back end",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInCurbsideAsapSideDrawerConfiguredGuest() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.appConfiguration();
		merchantId = curbsideFlowConfiguration.get(8);
		storeCode = curbsideFlowConfiguration.get(13);

		String localConfigCurbsideText = commonMethods
				.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_CURBSIDE_TEXT);

		String asapText = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_ASAP_TEXT);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_001 = test
				.createNode("nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_001");
		ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_002 = test
				.createNode("nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_002");
		ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 = test
				.createNode("nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003");

		// To get the dashboard title text

		try {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find.byValueKey(sideDrawerLocators.SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_001.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_001 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_001.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			try {

				WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

				if (dontAllowId.isDisplayed()) {

					commonMethods.checkAndClickTheElement(dontAllowId);

				}
			} catch (Exception e) {

				System.out.println("Native Popup not appears");

			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the order now screen.

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(2000);

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_002.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
			 * @author Ganeshkumarselvaraj
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : ",
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			Thread.sleep(5000);

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				JSONObject curbsideObject = storeResponse1.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				List<String> odFlow = bass.odFlow();

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);
				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				System.out.println(storeShortCodeNumberConfiguration);
				System.out.println(corpShortCodeNumberConfiguration);

				try {

					Thread.sleep(15000);

					commonMethods.scrollDownAndClick(desiredStoreName);

					// To verify the Configured order type.

					if (curbsideResponse.equalsIgnoreCase("true")) {

						if (!curbsideResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);
								curbsideOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									takeoutText1.click();

									nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that curbside is displayed in the order type popup and displayed texts is "
															+ curbsideOrderTypeText + " " + " response text is : "
															+ curbsideResponseLabelText + " " + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									takeoutText.click();

									nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that curbside is displayed in the order type popup and displayed texts is "
															+ curbsideOrderTypeText + " " + " response text is : "
															+ curbsideResponseLabelText + " " + "  not matching.",
													ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);
										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);
								curbsideOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									takeoutText1.click();

									nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ curbsideOrderTypeText + " " + " response text is : "
															+ localConfigCurbsideText + " " + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ curbsideOrderTypeText + " " + " response text is : "
															+ localConfigCurbsideText + " " + " not matching.",
													ExtentColor.CYAN));

									// text mismatches

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest_003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the back end",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInCurbsideLaterBottomBarConfiguredGuest() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.appConfiguration();
		merchantId = curbsideFlowConfiguration.get(8);
		storeCode = curbsideFlowConfiguration.get(13);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		String localConfigCurbsideText = commonMethods
				.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_CURBSIDE_TEXT);

		String laterText = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_LATER_TEXT);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest001 = test
				.createNode("nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest001");
		ExtentTest nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest002 = test
				.createNode("nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest002");
		ExtentTest nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 = test
				.createNode("nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003");

		// To check whether ordernow is present in the bottom bar.

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(10000);

			WebElement bottomBarOrderNow = driver.findElement(By.xpath(locationLocators.ORDERNOW_BUTTON_XPATH));

			// To check Order now is displayed in the buttom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest001.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest001 - Validated that Order now button is present in bottom bar and the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();

				Thread.sleep(10000);

				try {

					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {
					// TODO: handle exception

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest002
				 * @author Ganeshkumarselvaraj
				 */

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				Thread.sleep(2000);

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the order now screen.");
				nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest002 - Verified that user navigated to the order now screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
				 * @author Ganeshkumarselvaraj
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : ",
						ExtentColor.CYAN));

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(3000);

				WebElement bottomBarOrderNow1 = driver.findElement(By.xpath(locationLocators.ORDERNOW_BUTTON_XPATH));

				bottomBarOrderNow1.click();

				commonMethods.switchContext("FLUTTER");

			}

			Thread.sleep(5000);

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				JSONObject curbsideObject = storeResponse1.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
				 * @author Ganeshkumarselvaraj
				 */

				Thread.sleep(15000);

				commonMethods.scrollDownAndClick(desiredStoreName);

				try {

					// To verify the Configured order type.

					if (curbsideResponse.equalsIgnoreCase("true")) {

						if (!curbsideResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));
								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);
								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ curbsideOrderTypeText + " response text is : "
															+ curbsideResponseLabelText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									Thread.sleep(6000);

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ curbsideOrderTypeText + " response text is : "
															+ curbsideResponseLabelText + "  not matching.",
													ExtentColor.CYAN));

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);
										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath(locationLocators.MENU_TITLE_XPATH));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath(locationLocators.MENU_TITLE_XPATH));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = localConfigCurbsideText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ curbsideOrderTypeText + " response text is : "
															+ localConfigCurbsideText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ curbsideOrderTypeText + " response text is : "
															+ localConfigCurbsideText + " not matching.",
													ExtentColor.CYAN));

									// text mismatches

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										} else {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath(locationLocators.MENU_TITLE_XPATH));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that curbside lable is not displayed in the screen where as curbside is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out later is not configured.
						nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that curbside lable is not displayed in the screen where as curbside is configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the back end",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInCurbsideLaterSideDrawerConfiguredGuest() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.appConfiguration();
		merchantId = curbsideFlowConfiguration.get(8);
		storeCode = curbsideFlowConfiguration.get(13);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		List<String> menuItem = bass.menuItem();

		String localConfigCurbsideText = commonMethods
				.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_CURBSIDE_TEXT);

		String laterText = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_LATER_TEXT);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest001 = test
				.createNode("nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest001");
		ExtentTest nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest002 = test
				.createNode("nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest002");
		ExtentTest nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 = test
				.createNode("nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003");

		try {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find.byValueKey(sideDrawerLocators.SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(5000);

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest001.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest001 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest001.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(10000);

			try {

				WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

				if (dontAllowId.isDisplayed()) {

					dontAllowId.click();

				}

			}

			catch (Exception e) {
				// TODO: handle exception

				System.out.println("Native Popup not aappears");

			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the order now screen.

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(5000);

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest002.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
			 * @author Ganeshkumarselvaraj
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : ",
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(5000);

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			// Need to verify the store details in the map icon and list view are same

//		
			Thread.sleep(5000);

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				JSONObject curbsideObject = storeResponse1.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				List<String> odFlow = bass.odFlow();

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);
				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				System.out.println(storeShortCodeNumberConfiguration);
				System.out.println(corpShortCodeNumberConfiguration);

				Thread.sleep(15000);

				commonMethods.scrollDownAndClick(desiredStoreName);

				try {

					// To verify the Configured order type.

					if (curbsideResponse.equalsIgnoreCase("true")) {

						if (!curbsideResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));
								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);
								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that curbside is displayed in the order type popup and displayed texts is "
															+ curbsideOrderTypeText + " response text is : "
															+ curbsideResponseLabelText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(6000);

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that curbside is displayed in the order type popup and displayed texts is "
															+ curbsideOrderTypeText + " response text is : "
															+ curbsideResponseLabelText + "  not matching.",
													ExtentColor.CYAN));

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath(locationLocators.MENU_TITLE_XPATH));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath(locationLocators.MENU_TITLE_XPATH));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

								// To fail the case where curbside is configured and not displayed.

								nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that curbside label is not displayed in the screen where as curbside later not is configured in the back end.",
										ExtentColor.CYAN));

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = localConfigCurbsideText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ curbsideOrderTypeText + " response text is : "
															+ localConfigCurbsideText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ curbsideOrderTypeText + " response text is : "
															+ localConfigCurbsideText + " not matching.",
													ExtentColor.CYAN));

									// text mismatches

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										} else {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath(locationLocators.MENU_TITLE_XPATH));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that curbside lable is not displayed in the screen where as curbside is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out later is not configured.
						nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that curbside lable is not displayed in the screen where as curbside is not configured",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the back end",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowDeliveryAsapBottomBarConfiguredGuest() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		merchantId = deliveryFlowConfiguration.get(8);

		storeCode = deliveryFlowConfiguration.get(13);

		String localConfigDeliveryText = deliveryFlowConfiguration.get(21);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		String state = storeName.get(110);

		String country = storeName.get(111);

		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured001
		 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
		 */

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_001 = test
				.createNode("nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_001");
		ExtentTest nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_002 = test
				.createNode("nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_002");
		ExtentTest nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 = test
				.createNode("nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003");

		// To check whether order now is present in the bottom bar.

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(orderNowLocators.GUEST_LANDING_ORDERNOW_BUTTON_XPATHL));

			// To check Order now is displayed in the bottom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_001.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_001 - Validated that Order now button is present in bottom bar navigation bar with the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(10000);

				try {

					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {
					// TODO: handle exception

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_002
				 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
				 */

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the order now screen.");
				nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_002 - Verified that user navigated to the order now screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
				 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : ",
						ExtentColor.CYAN));

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(3000);

				WebElement bottomBarOrderNow1 = driver
						.findElement(By.xpath(orderNowLocators.GUEST_LANDING_ORDERNOW_BUTTON_XPATHL));

				bottomBarOrderNow1.click();

				commonMethods.switchContext("FLUTTER");
			}

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?";
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				Restaurant_Id = storeResponse.optString("id");

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);

				storeCode = appConfiguration.get(13);

			}

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the ordernow screen.
			 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfigured_003
			 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantid
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);

				String jsonString1 = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
						+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
						+ cardTemplateCode + "\",\n"
						+ "    \"scope\": \"user_read account_read account_write user_write\",\n"
						+ "    \"merchantId\": \"" + merchantId + "\",\n"
						+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
						+ "    \"authentication\": \"anonymous\",\n"
						+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
						+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

				RequestSpecification request1 = io.restassured.RestAssured.given();

				request1.contentType(ContentType.JSON);

				request1.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

				request1.body(jsonString1);
				Response response1 = request1.post();
				ValidatableResponse validatableResponse1 = response1.then();
				validatableResponse1.statusCode(200);
				JSONObject jObj1 = new JSONObject(response1.body().asString());
				accessTokenGen = jObj1.optString("access_token");
				printedCardNumberResponse = jObj1.optString("printedCardNumber");

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
				 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
				 */

				Thread.sleep(6000);

				try {

					commonMethods.scrollDownAndClick(desiredStoreName);

					// To verify the Configured order type.

					if (deliveryResponse.equalsIgnoreCase("true")) {

						if (!deliveryResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(11000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = deliveryResponseLabelText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									deliveryText1.click();

									nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ deliveryOrderTypeText + " response text is : "
															+ deliveryResponseLabelText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									Thread.sleep(6000);

									deliveryText1.click();

									nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ deliveryOrderTypeText + " response text is : "
															+ deliveryResponseLabelText + "  not matching.",
													ExtentColor.CYAN));

								}

								///////////////////////// Address Script /////////////////
								/////////////////////////////////////////////////////////

								Thread.sleep(5000);

								AddressGuest.addresss();

								Thread.sleep(5000);

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								Thread.sleep(5000);

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}
							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(11000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = localConfigDeliveryText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ deliveryOrderTypeText + " response text is : "
															+ localConfigDeliveryText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ deliveryOrderTypeText + " response text is : "
															+ localConfigDeliveryText + " not matching.",
													ExtentColor.CYAN));

									// text mismatches

								}

								Thread.sleep(5000);

								AddressGuest.addresss();

								Thread.sleep(5000);

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			e.printStackTrace();

			nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the back end",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowDeliveryAsapSideDrawerConfiguredGuest() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		merchantId = deliveryFlowConfiguration.get(8);

		storeCode = deliveryFlowConfiguration.get(13);

		String localConfigDeliveryText = deliveryFlowConfiguration.get(21);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		String state = storeName.get(110);

		String country = storeName.get(111);

		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured001
		 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
		 */

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_001 = test
				.createNode("nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_001");
		ExtentTest nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_002 = test
				.createNode("nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_002");
		ExtentTest nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 = test
				.createNode("nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003");

		// To get the dashboard title text

		try {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find.byValueKey(sideDrawerLocators.SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(10000);

			try {

				WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

				if (dontAllowId.isDisplayed()) {

					commonMethods.checkAndClickTheElement(dontAllowId);

				}
			} catch (Exception e) {

				System.out.println("Native Popup not appears");

			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_002
			 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
			 */

			// To get the title of the order now screen.

			commonMethods.switchContext("FLUTTER");

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_002.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
			 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : ",
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			// Need to verify the store details in the map icon and list view are same

//			commonMethods.checkAndClickTheElement(locationScreenStoreMapIconButton);

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?";
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				Restaurant_Id = storeResponse.optString("id");

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);

				storeCode = appConfiguration.get(13);

			}

			orderId = APIMethods.orderId();

//
//			/**
//			 * @Class_Name Location
//			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
//			 * @Description Ensure that user navigated to dashboard screen while tapping the
//			 *              backicon in the ordernow screen.
//			 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfigured_003
//			 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
//			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantid
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);

				String jsonString1 = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
						+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
						+ cardTemplateCode + "\",\n"
						+ "    \"scope\": \"user_read account_read account_write user_write\",\n"
						+ "    \"merchantId\": \"" + merchantId + "\",\n"
						+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
						+ "    \"authentication\": \"anonymous\",\n"
						+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
						+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

				RequestSpecification request1 = io.restassured.RestAssured.given();

				request1.contentType(ContentType.JSON);

				request1.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

				request1.body(jsonString1);
				Response response1 = request1.post();
				ValidatableResponse validatableResponse1 = response1.then();
				validatableResponse1.statusCode(200);
				JSONObject jObj1 = new JSONObject(response1.body().asString());
				accessTokenGen = jObj1.optString("access_token");
				printedCardNumberResponse = jObj1.optString("printedCardNumber");

				////////////////////////////

				try {

					commonMethods.scrollDownAndClick(desiredStoreName);

					// To verify the Configured order type.

					if (deliveryResponse.equalsIgnoreCase("true")) {

						if (deliveryResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = deliveryResponseLabelText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ deliveryOrderTypeText + " response text is : "
															+ deliveryResponseLabelText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ deliveryOrderTypeText + " response text is : "
															+ deliveryResponseLabelText + "  not matching.",
													ExtentColor.CYAN));

								}

								/////////////////////////////////////////////////////////////// ADDRESS SCRIPT
								/////////////////////////////////////////////////////////////// ////////////////////////////

								Thread.sleep(5000);

								AddressGuest.addresss();

								Thread.sleep(5000);

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}
							}

						} else {

							Thread.sleep(5000);

							try {

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = localConfigDeliveryText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ deliveryOrderTypeText + " response text is : "
															+ localConfigDeliveryText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ deliveryOrderTypeText + " response text is : "
															+ localConfigDeliveryText + " not matching.",
													ExtentColor.CYAN));

								}

								/////////////////////////////////////////////////////////////// ADDRESS SCRIPT
								/////////////////////////////////////////////////////////////// ////////////////////////////

								Thread.sleep(5000);

								AddressGuest.addresss();

								Thread.sleep(5000);

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the back end",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowDeliveryLaterBottomBarConfiguredGuest() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();

		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		merchantId = deliveryFlowConfiguration.get(8);

		storeCode = deliveryFlowConfiguration.get(13);

		String localConfigDeliveryText = deliveryFlowConfiguration.get(21);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		String state = storeName.get(110);

		String country = storeName.get(111);

		System.out.println("ngaOrderNowLoggedInDeliveryLaterBottomBarConfigured");

		storeCode = deliveryFlowConfiguration.get(13);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured001
		 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
		 */

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest001 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest001");
		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest002 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest002");
		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003");

		// To check whether ordernow is present in the bottom bar.

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver.findElement(By.xpath("//*[contains(@content-desc,'Order Now')]"));

			// To check Order now is displayed in the buttom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest001.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest001 - Validated that Order now button is present in bottom bar navigation bar with the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();

				Thread.sleep(2000);

				try {

					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {
					// TODO: handle exception

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest002
				 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
				 */

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				Thread.sleep(2000);

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the order now screen.");
				nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest002 - Verified that user navigated to the order now screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

//				commonMethods.elementFoundOrNotDontAllowNativePopUp();

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
				 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : ",
						ExtentColor.CYAN));

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(3000);

				WebElement bottomBarOrderNow1 = driver
						.findElement(By.xpath("//*[contains(@content-desc,'Order Now')]"));

				bottomBarOrderNow1.click();

				commonMethods.switchContext("FLUTTER");

				orderId = APIMethods.orderId();

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfigured_003
				 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
				 */

				io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
						+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
				// Construct the query parameters
				RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
				// specify the method type (GET) and the parameters if any.
				// In this case the request does not take any parameter

				RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
						"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
				Response restaurantsResponse1 = parameterRequest1.get("");

				JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

				if (storeResponse1.has("name")) {

					String asapOrder = storeResponse1.optString("advance_only");
					String laterOrder = storeResponse1.optString("use_eta");

					String deliveryResponse = storeResponse1.optString("delivery");
					String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

					System.out.println(" delivery label text : " + deliveryResponseLabelText);

					List<String> odFlow = bass.odFlow();

					String asapText = odFlow.get(16);
					String laterText = odFlow.get(17);

					List<String> appConfiguration = bass.appConfiguration();

					userName = appConfiguration.get(6);
					passWord = appConfiguration.get(7);
					merchantId = appConfiguration.get(8);
					cardTemplateCode = appConfiguration.get(9);
					storeGroupCode = appConfiguration.get(10);
					clientId = appConfiguration.get(11);
					integrationDetail = appConfiguration.get(12);
					storeCode = appConfiguration.get(13);
					String storeShortCodeNumberConfiguration = appConfiguration.get(4);
					String corpShortCodeNumberConfiguration = appConfiguration.get(5);

					/**
					 * @Class_Name Location
					 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest
					 * @Description Ensure that user navigated to dashboard screen while tapping the
					 *              backicon in the ordernow screen.
					 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
					 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
					 */

					try {

						commonMethods.scrollDownAndClick(desiredStoreName);

						// To verify the Configured order type.

						if (deliveryResponse.equalsIgnoreCase("true")) {

							if (!deliveryResponseLabelText.isEmpty()) {

								try {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									WebElement deliveryText = driver.findElement(
											By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

									commonMethods.switchContext("FLUTTER");

									FlutterElement deliveryText1 = find
											.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

									deliveryOrderTypeText = deliveryText1.getText();

									boolean equalsIgnoreCase = deliveryResponseLabelText
											.equalsIgnoreCase(deliveryOrderTypeText);

									if (equalsIgnoreCase == true) {

										commonMethods.switchContext("NATIVE_APP");

										deliveryText.click();

										nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
												.info(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
																+ deliveryOrderTypeText + " response text is : "
																+ deliveryResponseLabelText + " matching.",
														ExtentColor.CYAN));

										// Text matches

									} else {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										deliveryText.click();

										nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
												.fail(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
																+ deliveryOrderTypeText + " response text is : "
																+ deliveryResponseLabelText + "  not matching.",
														ExtentColor.CYAN));

									}

									/////////////////////////////////////////////////////////////// ADDRESS SCRIPT
									/////////////////////////////////////////////////////////////// ////////////////////////////

									Thread.sleep(5000);

									addressGuest.addresss();

									Thread.sleep(5000);

									if (laterOrder.equalsIgnoreCase("true")) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											WebElement laterLabel = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

											commonMethods.switchContext("FLUTTER");

											FlutterElement laterLabel1 = find
													.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

											laterOrderTimeText = laterLabel1.getText();

											boolean laterLabelComparison = laterText
													.equalsIgnoreCase(laterOrderTimeText);

											if (laterLabelComparison == true) {

												laterLabel1.click();

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied that alert appears");

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.info(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																		+ laterText + "later config text : "
																		+ laterOrderTimeText + "matching",
																ExtentColor.CYAN));

												integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

											} else {

												commonMethods.switchContext("NATIVE_APP");

												Thread.sleep(6000);

												// To fail that later label text is not matching

												laterLabel.click();

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied that alert appears");

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.fail(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																		+ laterText + "later config text : "
																		+ laterOrderTimeText + " not matching",
																ExtentColor.CYAN));

												integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
											}

										} catch (Exception e) {

											try {

												commonMethods.switchContext("NATIVE_APP");
												Thread.sleep(5000);

												WebElement asapTextXpath = driver
														.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

												if (asapTextXpath.isDisplayed()) {

													FlutterElement closeIcon = find
															.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

													closeIcon.click();

												}

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.fail(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
																ExtentColor.CYAN));

											} catch (Exception e1) {
												// TODO: handle exception

												System.out.println(
														" Later is only displayed where as Later is only configured on the back end ");

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.info(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
																ExtentColor.CYAN));

												integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
											}
										}

									} else {

										commonMethods.switchContext("NATIVE_APP");

										try {

											Thread.sleep(6000);

											WebElement laterLabel = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

											if (laterLabel.isDisplayed()) {
												// To fail the test case.

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied that later is displayed in the screen.");
												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.fail(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
																ExtentColor.CYAN));

												commonMethods.switchContext("FLUTTER");

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

										} catch (Exception e) {

											try {

												commonMethods.switchContext("NATIVE_APP");

												WebElement menuText = driver.findElement(
														By.xpath("//android.view.View[@content-desc='Menu']"));

												System.out.println(menuText);

												System.out.println(
														"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.info(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
																ExtentColor.CYAN));

											} catch (Exception e2) {
												// TODO: handle exception

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.info(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
																ExtentColor.CYAN));

											}

										}

									}

								} catch (Exception E) {

									if (laterOrder.equalsIgnoreCase("true")) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											WebElement laterLabel = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

											commonMethods.switchContext("FLUTTER");

											FlutterElement laterLabel1 = find
													.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

											laterOrderTimeText = laterLabel1.getText();

											boolean laterLabelComparison = laterText
													.equalsIgnoreCase(laterOrderTimeText);

											if (laterLabelComparison == true) {

												laterLabel1.click();

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied that alert appears");

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.info(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																		+ laterText + "later config text : "
																		+ laterOrderTimeText + "matching",
																ExtentColor.CYAN));

												integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

											} else {

												commonMethods.switchContext("NATIVE_APP");

												Thread.sleep(6000);

												// To fail that later label text is not matching

												laterLabel.click();

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied that alert appears");

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.fail(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																		+ laterText + "later config text : "
																		+ laterOrderTimeText + " not matching",
																ExtentColor.CYAN));

												integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
											}

										} catch (Exception e) {

											try {

												commonMethods.switchContext("NATIVE_APP");
												Thread.sleep(5000);

												WebElement asapTextXpath = driver
														.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

												if (asapTextXpath.isDisplayed()) {

													FlutterElement closeIcon = find
															.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

													closeIcon.click();

												}

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.fail(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
																ExtentColor.CYAN));

											} catch (Exception e1) {
												// TODO: handle exception

												System.out.println(
														" Later is only displayed where as Later is only configured on the back end ");

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.info(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
																ExtentColor.CYAN));

												integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
											}
										}

									} else {

										commonMethods.switchContext("NATIVE_APP");

										try {

											Thread.sleep(6000);

											WebElement laterLabel = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

											if (laterLabel.isDisplayed()) {
												// To fail the test case.

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied that later is displayed in the screen.");
												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.fail(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
																ExtentColor.CYAN));

												commonMethods.switchContext("FLUTTER");

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

										} catch (Exception e) {

											try {

												commonMethods.switchContext("NATIVE_APP");

												WebElement menuText = driver.findElement(
														By.xpath("//android.view.View[@content-desc='Menu']"));

												System.out.println(menuText);

												System.out.println(
														"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.info(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
																ExtentColor.CYAN));

											} catch (Exception e2) {
												// TODO: handle exception

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.info(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
																ExtentColor.CYAN));

											}

										}

									}
								}

							} else {

								try {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									WebElement deliveryText = driver.findElement(
											By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

									commonMethods.switchContext("FLUTTER");

									FlutterElement deliveryText1 = find
											.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

									deliveryOrderTypeText = deliveryText1.getText();

									boolean equalsIgnoreCase = localConfigDeliveryText
											.equalsIgnoreCase(deliveryOrderTypeText);

									if (equalsIgnoreCase == true) {

										commonMethods.switchContext("NATIVE_APP");

										deliveryText.click();

										nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
												.info(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
																+ deliveryOrderTypeText + " response text is : "
																+ localConfigDeliveryText + " matching.",
														ExtentColor.CYAN));

										// Text matches

									} else {

										commonMethods.switchContext("NATIVE_APP");

										deliveryText.click();

										nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
												.fail(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
																+ deliveryOrderTypeText + " response text is : "
																+ localConfigDeliveryText + " not matching.",
														ExtentColor.CYAN));

										// text mismatches

									}

									Thread.sleep(5000);

									addressGuest.addresss();

									Thread.sleep(5000);

									if (laterOrder.equalsIgnoreCase("true")) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											WebElement laterLabel = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

											commonMethods.switchContext("FLUTTER");

											FlutterElement laterLabel1 = find
													.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

											laterOrderTimeText = laterLabel1.getText();

											boolean laterLabelComparison = laterText
													.equalsIgnoreCase(laterOrderTimeText);

											if (laterLabelComparison == true) {

												laterLabel1.click();

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied that alert appears");

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.info(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																		+ laterText + "later config text : "
																		+ laterOrderTimeText + "matching",
																ExtentColor.CYAN));

												integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

											} else {

												commonMethods.switchContext("NATIVE_APP");

												Thread.sleep(6000);

												// To fail that later label text is not matching

												laterLabel.click();

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied that alert appears");

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.fail(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																		+ laterText + "later config text : "
																		+ laterOrderTimeText + " not matching",
																ExtentColor.CYAN));

												integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
											}

										} catch (Exception e) {

											try {

												commonMethods.switchContext("NATIVE_APP");
												Thread.sleep(5000);

												WebElement asapTextXpath = driver
														.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

												if (asapTextXpath.isDisplayed()) {

													FlutterElement closeIcon = find
															.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

													closeIcon.click();

												}

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.fail(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
																ExtentColor.CYAN));

											} catch (Exception e1) {
												// TODO: handle exception

												System.out.println(
														" Later is only displayed where as Later is only configured on the back end ");

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.info(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
																ExtentColor.CYAN));

												integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
											}
										}

									} else {

										commonMethods.switchContext("NATIVE_APP");

										try {

											Thread.sleep(6000);

											WebElement laterLabel = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

											if (laterLabel.isDisplayed()) {
												// To fail the test case.

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied that later is displayed in the screen.");
												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.fail(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
																ExtentColor.CYAN));

												commonMethods.switchContext("FLUTTER");

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

										} catch (Exception e) {

											try {

												commonMethods.switchContext("NATIVE_APP");

												WebElement menuText = driver.findElement(
														By.xpath("//android.view.View[@content-desc='Menu']"));

												System.out.println(menuText);

												System.out.println(
														"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.info(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
																ExtentColor.CYAN));

											} catch (Exception e2) {
												// TODO: handle exception

												nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
														.info(MarkupHelper.createLabel(
																"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
																ExtentColor.CYAN));

											}

										}

									}

								} catch (Exception e) {

									nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
													ExtentColor.CYAN));
								}

							}

						} else {

							// take out later is not configured.
							nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
									ExtentColor.CYAN));

						}

					} catch (Exception e) {

						nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that desired store is not found in the screen.",
								ExtentColor.CYAN));

						System.out.println("Store Not found or store not listed");

					}

				}
			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the back end",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowDeliveryLaterSideDrawerConfiguredGuest() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();

		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		merchantId = deliveryFlowConfiguration.get(8);

		storeCode = deliveryFlowConfiguration.get(13);

		String localConfigDeliveryText = deliveryFlowConfiguration.get(21);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		String state = storeName.get(110);

		String country = storeName.get(111);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured001
		 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
		 */

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest001 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest001");
		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest002 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest002");
		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003");

		try {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find.byValueKey(sideDrawerLocators.SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest001.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest001 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest001.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			try {

				WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

				if (dontAllowId.isDisplayed()) {

					dontAllowId.click();

				}

			}

			catch (Exception e) {
				// TODO: handle exception

				System.out.println("Native Popup not aappears");

			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest002
			 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
			 */

			// To get the title of the order now screen.

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(2000);

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest002.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
			 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : ",
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the ordernow screen.
			 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfigured_003
			 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				System.out.println(" delivery label text : " + deliveryResponseLabelText);

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);

				try {
					commonMethods.scrollDownAndClick(desiredStoreName);
					// To verify the Configured order type.

					if (deliveryResponse.equalsIgnoreCase("true")) {

						if (!deliveryResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = deliveryResponseLabelText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ deliveryOrderTypeText + " response text is : "
															+ deliveryResponseLabelText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ deliveryOrderTypeText + " response text is : "
															+ deliveryResponseLabelText + "  not matching.",
													ExtentColor.CYAN));

								}

								Thread.sleep(5000);

								addressGuest.addresss();

								Thread.sleep(5000);

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										}
									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
										}
									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										}
									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}
							}

						} else {

							Thread.sleep(5000);

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = localConfigDeliveryText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
											.info(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ deliveryOrderTypeText + " response text is : "
															+ localConfigDeliveryText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
											.fail(MarkupHelper.createLabel(
													"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Desired store is displayed in the order now and displayed texts is "
															+ deliveryOrderTypeText + " response text is : "
															+ localConfigDeliveryText + " not matching.",
													ExtentColor.CYAN));

								}

								/////////////////////////////////////////////////////////////// ADDRESS SCRIPT
								/////////////////////////////////////////////////////////////// ////////////////////////////

								Thread.sleep(5000);

								addressGuest.addresss();

								Thread.sleep(5000);

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
										}
									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {
											// TODO: handle exception

											nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out later is not configured.
						nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the back end",
					ExtentColor.CYAN));
		}

	}

	private static void integratedMethods(String orderType, String orderTime) throws Throwable {

		boolean jkCafeRecommendedMenuEnabledorNot = commonMethods.jkCafeRecommendedMenuEnabledorNot();

		BaseClass baseClass = new BaseClass();

		List<String> menuItem = baseClass.menuItem();

		String string = menuItem.get(1);

		int pos = Integer.parseInt(string);

		String string1 = menuItem.get(2);

		int position = Integer.parseInt(string1);

		String strings = menuItem.get(3);

		int pos1 = Integer.parseInt(strings);

		String strings1 = menuItem.get(4);

		int position1 = Integer.parseInt(strings1);

		if (jkCafeRecommendedMenuEnabledorNot == true) {

			pos1 = pos1 + 1;
			pos = pos + 1;
			position = position + 1;
			position1 = position1 + 1;
		}

		List<String> deliveryOrderTypeWithOrderTime = APIMethods.deliveryOrderTypeWithOrderTime();

		boolean deliveryAsap = deliveryOrderTypeWithOrderTime.contains("ASAP");

		List<String> curbsideOrderTypeWithOrderTime = APIMethods.curbsideOrderTypeWithOrderTime();

		boolean curbsideAsap = curbsideOrderTypeWithOrderTime.contains("ASAP");

		List<String> takeoutOrderTypeWithOrderTime = APIMethods.takeoutOrderTypeWithOrderTime();

		boolean takeoutAsap = takeoutOrderTypeWithOrderTime.contains("ASAP");

		if (deliveryAsap == false) {

			reOrder.laterCapacityManagement();

		} else if (takeoutAsap == false || curbsideAsap == false) {

			CapacityManagement.ngaCapacityManagement();
		}

		MenuApiHierarchy.menuApi(pos, position, orderId);

		double discountValue = Basket.ngaBasket(orderType, orderTime, orderId);

//		Basket.deleteItem(orderId);

		Thread.sleep(6000);

		Checkout.ngaCheckout(orderId);

		singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

		splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

		Thread.sleep(3000);
	}

}
