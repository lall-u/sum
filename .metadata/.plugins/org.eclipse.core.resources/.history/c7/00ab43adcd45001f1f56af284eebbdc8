package com.features;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.AppLaunchAndLandingScreenLocators;
import com.locators.AppRatingLocators;
import com.locators.BottomBarNavigationLocator;
import com.locators.DashBoardLocators;
import com.locators.LocationLocators;
import com.locators.MyAccountLocators;
import com.locators.OLOLocators;
import com.locators.OrderNowLocators;
import com.locators.SideDrawerLocators;
import com.locators.SignInLocators;
import com.locators.TransactionHistoryLocators;

import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.ios.IOSTouchAction;
import io.appium.java_client.remote.MobileCapabilityType;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;

public class NGAOrderNowLoggedIn extends BaseClass {

	static SignInLocators signInLocator = new SignInLocators();
	static CommonMethods commonMethods = new CommonMethods();
	static LocationLocators locationLocators = new LocationLocators();
	static DashBoardLocators dashBoardLocators = new DashBoardLocators();
	static SideDrawerLocators sideDrawerLocators = new SideDrawerLocators();
	static OrderNowLocators orderNowLocators = new OrderNowLocators();
	static BottomBarNavigationLocator bottomBarNavigationLocators = new BottomBarNavigationLocator();
	static SplitPayment splitPayment = new SplitPayment();
	static SinglePayment singlePayment = new SinglePayment();

	static AppRatingLocators appRating = new AppRatingLocators();
	static SignInLocators signInLocators = new SignInLocators();
	static AppLaunchAndLandingScreenLocators appLaunchAndLandingScreenLocators = new AppLaunchAndLandingScreenLocators();
	static MyAccountLocators myAccountLocators = new MyAccountLocators();
	public static String isLocationEnabled = "true";
	static TransactionHistoryLocators transactionHistoryLocators = new TransactionHistoryLocators();
	static OLOLocators oloLocators = new OLOLocators();
	static List<String> list = new ArrayList<String>();
	static FavouriteOrder favouriteOrder = new FavouriteOrder();
	static Address address = new Address();
	static ReOrder reOrder = new ReOrder();

	final static ArrayList<JSONObject> jList = new ArrayList<>();

	public static String componentList;
	public static String accessTokenGen;
	public static String printedCardNumberResponse;
	public static String firstnameResponse;
	public static String lastnameResponse;
	public static String salutationResponse;
	public static String welcomeResponse;
	public static String welcomeResponseDefault;
	public static String usernameResponse;
	public static StringBuilder welcomeString;
	public static StringBuilder welcomeDefault;
	public static StringBuilder pointTrackHead;
	public static StringBuilder actualSubHeader;
	public static StringBuilder responseHeader;
	public static StringBuilder actualHeader;
	public static String availableHeader;
	public static String availableViewall;
	public static StringBuilder actualWelcome;
	public static String pointTrackerHeader;
	public static String pointTrackerSubHeader;
	public static int walletMaximum;
	public static String pointBalance1;
	public static String finalPointValue;
	public static JSONArray resultArray;
	public static String pullMessageResponse;
	public static String pullMessageHeaderResponse;
	public static String barcodeAlttextResponse;
	public static String barcodeHeaderResponse;
	public static String scannableLoyaltyCardHeaderText;
	public static String mobilephoneResponse;
	public static String codeSourceResponse;
	public static String primaryCardNumbersResponse;
	public static String phoneNumberResponse;
	public static StringBuilder barcodeHeaderString;
	public static String pointTrackerHeaderAltResponse;
	public static String codeTypeResponse;
	public static String dateResponse;
	public static String messageDescriptionResponse;
	public static String formattedDate;
	public static String expirationTimeResponse;
	public static String shortCardNumberResponse;
	public static String storeCodeResponse;
	public static String storeNameResponse;
	public static String corpExpirationTimeResponse;
	public static String corpShortCardNumberResponse;
	public static String corpStoreCodeResponse;
	public static String corpStoreNameResponse;
	public static String contentValue;

	public static int walletCode;
	public static int walletCdn;
	public static JSONArray perksCdn;
	public static String cardTemplateCdn;
	public static String tierCdn;
	public static JSONArray perks;
	public static String cardTemplate;
	public static String tier;
	public static String activeDate;
	public static String expiryDate;
	public static String favoriteStore;
	public static String storeGroup;
	public static String imageUrl1;
	public static String imageAltText;
	public static Response cdnResponse;

	public static WebElement imagecomponent;

	public static String preCheckInAltTextResponse;
	public static String preCheckInTextResponse;
	public static String postCheckInTextResponse;
	public static String codeTypeCheckInResponse;
	public static String codeSourceCheckInResponse;
	public static StringBuilder preCheckInTextString;
	public static StringBuilder postCheckInTextString;
	public static String checkInStoreNameResponse;
	public static String checkInStoreCodeResponse;
	public static String availableRewardsHeader;
	public static String availableRewardsViewAll;
	public static String availableRewardsAltText;
	public static StringBuilder availableRewardsViewAllString;
	public static StringBuilder availableRewardsHeaderString;

	public static String storeShortCode;
	public static String userName;
	public static String passWord;
	public static String merchantId;
	public static String cardTemplateCode;
	public static String storeGroupCode;
	public static String clientId;
	public static String integrationDetail;
	static String storeCode;
	static String authorizationGrant;
	static String merchantid;
	static String key = "6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
	static String provider = "px";
	static String recentlyOrderedName;
	static String Restaurant_Id;

	static String authentication = "oauth";

	static String[] welcomeConfig = { "{salutation}", "{firstName}", "{lastName}", "{username}" };

	static String thirdPartyIntegration = "lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97";

	static String response_type = "code";

	static String scope = "user_read user_write account_read account_write";

	static String corpStoreCode;

	static String authentication1 = "anonymous";

	static String integrationDetail1 = "os=iOS%7Cosversion=16.6%7Cdevice=iPhone%7CmerchantId=60019%7Cintegrator=Paytronix%7Cversion=REST:14.15%20-%20API:23.21.20231010%20-%20APP:2023101001";

	static String favStoreCode;
	static String favStoreName;
	static String optStringFavEmpty;

	static String get0;

	static String get1;

	static String get2;

	static int size;

	static String date;

	static String substring;

	static String DateApi;

	static String Date;

	static String orderId;

	static String takeoutOrderTypeText;
	static String curbsideOrderTypeText;
	static String deliveryOrderTypeText;

	static String asapOrderTimeText;
	static String laterOrderTimeText;

	static int pos1;

	static int pos;

	static int position;

	static int position1;

	static Boolean takeoutResponse;
	static String takeoutLabelResponse;
	static Boolean laterOrder;
	static String laterOrderTextDisplayed;

	static Boolean hideTakeout;
	static boolean curbsideOrderTypeResponse;
	static boolean deliveryOrderTypeResponse;

	@Test

	public static void ngaOrderNowLoggedInTakeoutAsapBottomBarConfigured() throws Throwable {

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		merchantId = takeoutFlowConfiguration.get(8);
		storeCode = takeoutFlowConfiguration.get(13);

		String localConfigTakeoutText = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_TAKEOUT_TEXT);

		String asapText = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_ASAP_TEXT);

		List<String> storeName = bass.odFlow();

		List<String> menuItem = bass.menuItem();

		String string = menuItem.get(1);

		List<String> paymentScreenData = bass.paymentScreenData();

		String paymentMode = paymentScreenData.get(0);

		String remainingPaymentMode = paymentScreenData.get(1);

		String desiredStoreName = storeName.get(15);

		List<String> positiveSignInDatas = bass.signInPositiveData();
		List<String> negtiveSignInDatas = bass.signInNegativeData();

		String positiveEmailId = positiveSignInDatas.get(2);
		String positivePassword = positiveSignInDatas.get(5);

		Thread.sleep(6000);

		commonMethods.switchContext("FLUTTER");

//		ExtentTest nextGenSignInWithEmailSmoke001 = test.createNode("nextGenSignInWithEmailSmoke001");
//		nextGenSignInWithEmailSmoke001.info(MarkupHelper.createLabel(
//				"nextGenSignInWithEmailSmoke001 - Verified that on tapping on login button app navigated to the login screen",
//				ExtentColor.CYAN));

		/**
		 * @Class_Name SignIn
		 * @Method_Name nextGenSignInWithEmailSmoke
		 * @Case_Id nextGenSignInWithEmailSmoke002
		 * @Description To check whether the user successfully entering valid
		 *              credentials
		 * @return FlutterElement
		 * @author Ganeshkumarselvaraj
		 */

//		
//		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfigured_001 = test
//				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfigured001");
//		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfigured_002 = test
//				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfigured002");
//		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfigured_003 = test
//				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfigured003");

		// To get the dashboard title text

		commonMethods.switchContext("FLUTTER");

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		Thread.sleep(5000);

		orderId = APIMethods.orderId();

		// To check whether order now is present in the bottom bar.

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));

			// To check Order now is displayed in the bottom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

//				nextGenOrderNowFlowWithTakeoutAsapConfigured_001.info(MarkupHelper.createLabel(
//						"nextGenOrderNowFlowWithTakeoutAsapConfigured_001 - Validated that Order now button is present in bottom bar navigation bar with the text name as : "
//								+ bottomBarOrderNowText,
//						ExtentColor.CYAN));
//				nextGenOrderNowFlowWithTakeoutAsapConfigured_001.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(11000);

				try {

					WebElement dontAllowId = driver.findElement(
							By.id("com.android.permissioncontroller:id/permission_deny_and_dont_ask_again_button"));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfigured_002
				 * @author Ganeshkumarselvaraj
				 */

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

//				nextGenOrderNowFlowWithTakeoutAsapConfigured_002.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified user navigated to the location list screen.");
//				nextGenOrderNowFlowWithTakeoutAsapConfigured_002.info(MarkupHelper.createLabel(
//						"nextGenOrderNowFlowWithTakeoutAsapConfigured_002 - Verified that user navigated to the location list screen and the title is : "
//								+ locationTitleText,
//						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfigured_003
				 * @author Ganeshkumarselvaraj
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

//				nextGenOrderNowFlowWithTakeoutAsapConfigured_003.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
//				nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
//						"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : "
//								+ dashboardTitleVkText,
//						ExtentColor.CYAN));

				commonMethods.switchContext("NATIVE_APP");

				bottomBarOrderNow.click();

				commonMethods.switchContext("FLUTTER");

			}

			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String takeoutResponse = storeResponse1.optString("takeout");
				String takeoutResponseLabelText = storeResponse1.optString("takeout_label");

				System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);
				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				System.out.println(storeShortCodeNumberConfiguration);
				System.out.println(corpShortCodeNumberConfiguration);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfigured_003
				 * @author Ganeshkumarselvaraj
				 */

				try {

					Thread.sleep(11000);

					commonMethods.scrollDownAndClick(desiredStoreName);

					// To verify the Configured order type.

					if (takeoutResponse.equalsIgnoreCase("true")) {

						if (!takeoutResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));
								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = takeoutResponseLabelText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									takeoutText1.click();

//									nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
//											"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
//													+ takeoutOrderTypeText + " response text is : "
//													+ takeoutResponseLabelText + " matching.",
//											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									takeoutText.click();

//									nextGenOrderNowFlowWithTakeoutAsapConfigured_003.fail(MarkupHelper.createLabel(
//											"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
//													+ takeoutOrderTypeText + " response text is : "
//													+ takeoutResponseLabelText + "  not matching.",
//											ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.addScreenCaptureFromBase64String(takeScreenshot(driver),
//															"Verfied that alert appears");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
//																	+ asapText + "Asap config text : "
//																	+ asapOrderTimeText + "matching",
//															ExtentColor.CYAN));

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.addScreenCaptureFromBase64String(takeScreenshot(driver),
//															"Verfied that alert appears");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.fail(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
//																	+ asapText + "Asap config text : "
//																	+ asapOrderTimeText + " not matching",
//															ExtentColor.CYAN));

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);
										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

											Thread.sleep(3000);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

										} catch (Exception e1) {

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

										} catch (Exception e1) {

										}

									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(3000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = localConfigTakeoutText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									// text mismatches

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

										} catch (Exception e1) {

										}

									}

								}

							} catch (Exception e) {

							}

						}

					} else {

						// take out asap is not configured.

					}

				} catch (Exception e) {

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

		}

	}

	public static void ngaOrderNowLoggedInTakeoutAsapSideDrawerConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		String merchantId = takeoutFlowConfiguration.get(8);
		String storeCode = takeoutFlowConfiguration.get(13);

		String localConfigTakeoutText = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_TAKEOUT_TEXT);

		String asapText = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_ASAP_TEXT);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfigured_001 = test
				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfigured001");
		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfigured_002 = test
				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfigured002");
		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfigured_003 = test
				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfigured003");

		// To get the dashboard title text

		commonMethods.switchContext("FLUTTER");

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		try {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find
					.byValueKey(dashBoardLocators.DASHBOARD_SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithTakeoutAsapConfigured_003.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(11000);

			try {

				WebElement dontAllowId = driver.findElement(
						By.id("com.android.permissioncontroller:id/permission_deny_and_dont_ask_again_button"));

				if (dontAllowId.isDisplayed()) {

					commonMethods.checkAndClickTheElement(dontAllowId);

				}
			} catch (Exception e) {

				System.out.println("Native Popup not appears");

			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfigured_002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the order now screen.

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithTakeoutAsapConfigured_002.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithTakeoutAsapConfigured_002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutAsapConfigured_002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfigured_003
			 * @author Ganeshkumarselvaraj
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithTakeoutAsapConfigured_003.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : "
							+ dashboardTitleVkText,
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			// Need to verify the store details in the map icon and list view are same

			Thread.sleep(5000);

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String takeoutResponse = storeResponse1.optString("takeout");
				String takeoutResponseLabelText = storeResponse1.optString("takeout_label");

				System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);
				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				System.out.println(storeShortCodeNumberConfiguration);
				System.out.println(corpShortCodeNumberConfiguration);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				try {

					Thread.sleep(11000);

					commonMethods.scrollDownAndClick(desiredStoreName);

					// To verify the Configured order type.

					if (takeoutResponse.equalsIgnoreCase("true")) {

						if (!takeoutResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = takeoutResponseLabelText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ takeoutResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ takeoutResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(3000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = localConfigTakeoutText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ localConfigTakeoutText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ localConfigTakeoutText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											integratedMethods(takeoutOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithTakeoutAsapConfigured_003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the app level.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the app level.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithTakeoutAsapConfigured_003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithTakeoutAsapConfigured_003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the App level",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInTakeoutLaterBottomBarConfigured() throws Exception, Throwable {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Prasanna Venkatesh").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfigured001 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfigured001");
		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfigured002 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfigured002");
		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfigured003 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfigured003");

		boolean jkCafeRecommendedMenuEnabledorNot = commonMethods.jkCafeRecommendedMenuEnabledorNot();
		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		String localConfigTakeoutText = takeoutFlowConfiguration.get(20);
		String laterLocalConfigText = takeoutFlowConfiguration.get(24);
		List<String> storeName = bass.odFlow();
		List<String> menuItem = bass.menuItem();
		String string = menuItem.get(1);
		pos = Integer.parseInt(string);
		String string1 = menuItem.get(2);
		position = Integer.parseInt(string1);
		String strings = menuItem.get(3);
		pos1 = Integer.parseInt(strings);
		String strings1 = menuItem.get(4);
		position1 = Integer.parseInt(strings1);

		if (jkCafeRecommendedMenuEnabledorNot == true) {

			pos1 = pos1 + 1;
			pos = pos + 1;
			position = position + 1;
			position1 = position1 + 1;
		}

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		FlutterFinder find = new FlutterFinder(driver);
		CommonMethods.switchContext("FLUTTER");

		Thread.sleep(6000);
		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);
		String dashboardTitleVkText = dashboardTitleVk.getText();
		System.out.println(dashboardTitleVkText);

		try {
			CommonMethods.switchContext("NATIVE_APP");

			Thread.sleep(15000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));
			// To check Order now is displayed in the buttom bar.
			if (bottomBarOrderNow.isDisplayed()) {
				System.out.println("Order now is displayed");
				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				bottomBarOrderNow.click();
				// To print the informations using node in the extent report.
				nextGenOrderNowFlowWithTakeoutLaterConfigured001.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutLaterConfigured001 - Validated that Order now button is present in bottom bar navigation bar with the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenOrderNowFlowWithTakeoutLaterConfigured001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				Thread.sleep(40000);

				try {
					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));
					if (dontAllowId.isDisplayed()) {
						dontAllowId.click();
					}
				} catch (Exception e) {
					System.out.println("Native Popup not aappears");
				}

				// To get the Order now screen title.
				CommonMethods.switchContext("FLUTTER");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenOrderNowFlowWithTakeoutLaterConfigured002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the location list screen.");
				nextGenOrderNowFlowWithTakeoutLaterConfigured002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutLaterConfigured002 - Verified that user navigated to the location list screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

//				nextGenOrderNowFlowWithTakeoutLaterConfigured003.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : "
								+ dashboardTitleVkText,
						ExtentColor.CYAN));
				System.out.println("Button tapping");

				CommonMethods.switchContext("NATIVE_APP");
				Thread.sleep(8000);
				bottomBarOrderNow.click();
				CommonMethods.switchContext("FLUTTER");

			}
			String orderId = APIMethods.orderId();

			System.out.println("Orders API success");

			boolean favRecentOrderFeature = commonMethods
					.features("favourite_and_recent_order_order_now_location_list");

			if (favRecentOrderFeature == true) {

				favouriteOrder.favoriteRecentOrder();

			}

			Response takeOutConfig = APIMethods.takeOutResponse();
			JSONObject storeResponse1 = new JSONObject(takeOutConfig.body().asString());
			if (storeResponse1.has("name")) {
				laterOrder = storeResponse1.optBoolean("use_eta");
				takeoutResponse = storeResponse1.optBoolean("takeout");
				takeoutLabelResponse = storeResponse1.optString("takeout_label").toLowerCase();
				JSONObject curbsideResponse = storeResponse1.optJSONObject("curbside");

				hideTakeout = curbsideResponse.optBoolean("hide_takeout");

				curbsideOrderTypeResponse = curbsideResponse.optBoolean("en");
				deliveryOrderTypeResponse = storeResponse1.optBoolean("delivery");
				System.out.println(" takeout Response & Label Text : " + takeoutResponse + hideTakeout + " & "
						+ takeoutLabelResponse);
			}

			System.out.println("API success");

			boolean locationListStoreSelection = commonMethods.locationListStoreSelection(desiredStoreName);

			if (locationListStoreSelection) {

				System.out.println("Store successfully found and clicked the store.");

				if (takeoutResponse && hideTakeout == false) {

					try {

						CommonMethods.switchContext("NATIVE_APP");

						Thread.sleep(10000);

						WebElement takeoutPopup = driver
								.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

						if (takeoutPopup.isDisplayed()) {

							CommonMethods.switchContext("FLUTTER");

							FlutterElement takeoutText = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

							takeoutOrderTypeText = takeoutText.getText().toLowerCase();

							if (!takeoutLabelResponse.isEmpty()) {

								commonMethods.assertvalidation("takeout Label Text", takeoutLabelResponse,
										takeoutOrderTypeText, nextGenOrderNowFlowWithTakeoutLaterConfigured003);
								takeoutText.click();

								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
												+ takeoutOrderTypeText + " " + " response text is : "
												+ takeoutLabelResponse + " matching.",
										ExtentColor.CYAN));

							} else {

								commonMethods.assertvalidation("takeout Label Text", localConfigTakeoutText,
										takeoutOrderTypeText, nextGenOrderNowFlowWithTakeoutLaterConfigured003);
								takeoutText.click();

								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
												+ takeoutOrderTypeText + " " + " response text is : "
												+ localConfigTakeoutText + " matching.",
										ExtentColor.CYAN));
							}

							if (laterOrder) {

								try {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									WebElement laterLabel = driver
											.findElement(By.xpath(orderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

									if (laterLabel.isDisplayed()) {

										CommonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTextDisplayed = laterLabel1.getText();

										commonMethods.assertvalidation("later Label Text", laterLocalConfigText,
												laterOrderTextDisplayed,
												nextGenOrderNowFlowWithTakeoutLaterConfigured003);

										System.out.println(
												"Verified that later is displayed in the order type popup and displayed texts is "
														+ laterLocalConfigText + " " + " response text is : "
														+ laterOrderTextDisplayed + " matching.");

										nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that later is displayed in the order type popup and displayed texts is "
														+ laterLocalConfigText + " " + " response text is : "
														+ laterOrderTextDisplayed + " matching.",
												ExtentColor.CYAN));
										nextGenOrderNowFlowWithTakeoutLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver));

										laterLabel1.click();

										Thread.sleep(5000);

										CapacityManagement.ngaCapacityManagement();

									}

								} catch (Exception e2) {
									System.out.println(
											"Verified that respected store has takeout order and later order type only.");

									Thread.sleep(5000);

									CapacityManagement.ngaCapacityManagement();
								}

							} else {

								System.out.println("Later orders is not configured for the takeout order Type.");

								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 -Verified that Later orders is not configured for the takeout order Type and response is : "
												+ laterOrder,
										ExtentColor.CYAN));

								Thread.sleep(5000);
								FlutterElement bottombarHome = find.byValueKey(orderNowLocators.BOTTOM_BAR_HOME);
								bottombarHome.click();

							}

						}

					} catch (Exception e) {

						if (laterOrder) {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								WebElement laterLabel = driver
										.findElement(By.xpath(orderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								if (laterLabel.isDisplayed()) {

									FlutterElement laterLabel1 = find.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

									laterOrderTextDisplayed = laterLabel1.getText();

									commonMethods.assertvalidation("later Label Text", laterLocalConfigText,
											laterOrderTextDisplayed, nextGenOrderNowFlowWithTakeoutLaterConfigured003);

									laterLabel1.click();

									Thread.sleep(5000);

									CapacityManagement.ngaCapacityManagement();

								}

							} catch (Exception e2) {

								System.out.println(
										"Verified that respected store has takeout order and later order type only.");

								Thread.sleep(5000);

								CapacityManagement.ngaCapacityManagement();
							}

						} else {

							System.out.println("Later type of orders is not configured for the takeout order Type.");

							nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithTakeoutLaterConfigured003 -Verified that Later orders is not configured for the takeout order Type and response is : "
											+ laterOrder,
									ExtentColor.CYAN));

							Thread.sleep(5000);
							FlutterElement bottombarHome = find.byValueKey(orderNowLocators.BOTTOM_BAR_HOME);
							bottombarHome.click();

						}
					}

					MenuApi.menuApi(takeoutOrderTypeText, laterLocalConfigText, pos, position, orderId);

					double discountValue = Basket.ngaBasket(orderId);

					Thread.sleep(6000);

					CheckOut.ngaCheckout(orderId);

					singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

					splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

				} else {
					System.out.println("Takeout not configured");

					if (curbsideOrderTypeResponse || deliveryOrderTypeResponse) {

						Thread.sleep(5000);
						try {
							CommonMethods.switchContext("NATIVE_APP");
							Thread.sleep(5000);
							WebElement orderTypeCloseIconXpath = driver
									.findElement(By.xpath(orderNowLocators.ORDERTYPE_POPUP_XPATH));
							CommonMethods.switchContext("FLUTTER");
							if (orderTypeCloseIconXpath.isDisplayed()) {

								Thread.sleep(2000);
								FlutterElement orderTypeCloseIconVk = find
										.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);
								orderTypeCloseIconVk.click();
								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that curbside label is not displayed on the order type popup ",
										ExtentColor.CYAN));

								Thread.sleep(5000);
								FlutterElement bottombarHome = find.byValueKey(orderNowLocators.BOTTOM_BAR_HOME);
								bottombarHome.click();

							}

						} catch (Exception e) {
							CommonMethods.switchContext("NATIVE_APP");
							Thread.sleep(3000);
							WebElement orderTypeCloseIconXpath = driver
									.findElement(By.xpath(orderNowLocators.ORDERTIME_POPUP_XPATH));
							if (orderTypeCloseIconXpath.isDisplayed()) {
								CommonMethods.switchContext("FLUTTER");
								Thread.sleep(2000);
								FlutterElement orderTypeCloseIconVk = find
										.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);
								orderTypeCloseIconVk.click();
								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that When would you like your order popup displayed where as app close the popup ",
										ExtentColor.CYAN));

								System.out.println(
										" Verified that When would you like your order popup displayed where as app close the popup ");

								Thread.sleep(5000);
								FlutterElement bottombarHome = find.byValueKey(orderNowLocators.BOTTOM_BAR_HOME);
								bottombarHome.click();
							}
						}
					} else {

						System.out.println("Verified that respective store : " + desiredStoreName
								+ " has no order type or Not accepting any order right now.");

						Thread.sleep(8000);

						FlutterElement bottombarHome = find.byValueKey(orderNowLocators.BOTTOM_BAR_HOME);
						bottombarHome.click();

					}

				}

			} else {

				System.out.println(
						"Verified that respective store is not found in the location list and store is not clicked");

				nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that respective store is not found in the location list and store is not clicked",
						ExtentColor.CYAN));

				Thread.sleep(8000);

				FlutterElement bottombarHome = find.byValueKey(orderNowLocators.BOTTOM_BAR_HOME);
				bottombarHome.click();

			}

		} catch (Exception e) {

			System.out.println(
					"Verified that OrderNow is not displayed in the bottom bar whereas order now is configured in the App level.");

			nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that OrderNow is not displayed in the bottom bar whereas order now is configured in the App level. ",
					ExtentColor.CYAN));

			CommonMethods.switchContext("FLUTTER");

			Thread.sleep(10000);
			// Locator need to verify for the below code.

//			FlutterElement alertDescription = find.byValueKey(orderNowLocators.LOCATION_LIST_ALERT_DESCRIPTION_VKL);
//			String locationListErrorAlertDisplayed = alertDescription.getText();
//
//			System.out.println(locationListErrorAlertDisplayed);
//			FlutterElement alertOkayButton = find.byValueKey(orderNowLocators.LOCATION_LIST_ALERT_OKAY_BUTTON_VKL);
//			alertOkayButton.click();

		}

	}

	public static void ngaOrderNowLoggedInTakeoutLaterSideDrawerConfigured() throws Exception {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass baseclass = new BaseClass();

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		String merchantId = takeoutFlowConfiguration.get(8);
		String storeCode = takeoutFlowConfiguration.get(13);
		String localConfigTakeoutText = takeoutFlowConfiguration.get(36);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfigured001 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfigured001");
		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfigured002 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfigured002");
		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfigured003 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfigured003");

		// To get the dashboard title text

		commonMethods.switchContext("FLUTTER");

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		try {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find
					.byValueKey(dashBoardLocators.DASHBOARD_SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithTakeoutLaterConfigured001.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured001 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithTakeoutLaterConfigured001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified that order now is configured in side drawer");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the order now screen.

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithTakeoutLaterConfigured002.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithTakeoutLaterConfigured002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured003
			 * @author Ganeshkumarselvaraj
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithTakeoutLaterConfigured003.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : "
							+ dashboardTitleVkText,
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			// Need to verify the store details in the map icon and list view are same

//			commonMethods.checkAndClickTheElement(locationScreenStoreMapIconButton);

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?";
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				Restaurant_Id = storeResponse.optString("id");

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);

				storeCode = appConfiguration.get(13);

			}

			String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
					+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
					+ cardTemplateCode + "\",\n"
					+ "    \"scope\": \"user_read account_read account_write user_write\",\n" + "    \"merchantId\": \""
					+ merchantId + "\",\n" + "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
					+ "    \"authentication\": \"anonymous\",\n"
					+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
					+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

			RequestSpecification request = io.restassured.RestAssured.given();

			request.contentType(ContentType.JSON);

			request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

			request.body(jsonString);
			Response response = request.post();
			ValidatableResponse validatableResponse = response.then();
			validatableResponse.statusCode(200);
			JSONObject jObj = new JSONObject(response.body().asString());
			String accessTokenGen = jObj.optString("access_token");
			String printedCardNumberResponse = jObj.optString("printedCardNumber");

			String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n" + "    \"merchant_id\" : "
					+ merchantId + ",\n" + "    \"printed_card_number\" : " + printedCardNumberResponse + " ,\n"
					+ "    \"provider\" : \"px\",\n" + "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

			RequestSpecification requestOrders = io.restassured.RestAssured.given();

			RequestSpecification parameterReq = requestOrders.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

			parameterReq.contentType(ContentType.JSON);

			parameterReq.baseUri("https://opendining.net/api/v1/orders?");

			parameterReq.body(Json1);
			Response responseOrders = parameterReq.post();
			ValidatableResponse validatableOrdersResponse = responseOrders.then();

			validatableOrdersResponse.statusCode(200);
			JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
			orderId = jObjOrders.optString("order_id");
			System.out.println("the order id is" + orderId);

			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String takeoutResponse = storeResponse1.optString("takeout");
				String takeoutResponseLabelText = storeResponse1.optString("takeout_label");

				System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);
				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				System.out.println(storeShortCodeNumberConfiguration);
				System.out.println(corpShortCodeNumberConfiguration);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favoriteRecentOrder();

				}

				try {

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(3000);

					// XPath to locate the state element by its name
					By targetElementLocator = By.xpath(
							"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + desiredStoreName + "'" + ")]");
					// Variable to track whether the element is found
					boolean elementFound = false;

					// Loop to attempt finding the element and scrolling
					while (!elementFound) {
						try {
							// Try to find the element
							WebElement element = driver.findElement(targetElementLocator);

							// Check if the element is displayed
							if (element.isDisplayed()) {
								// Element found and displayed, try to click
								try {
									element.click();
									System.out.println("Successfully clicked the state in the dropdown");
									elementFound = true; // Set the flag to true to exit the loop

									nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Desired store is displayed in the OrderNow ",
											ExtentColor.CYAN));

								} catch (Exception clickException) {
									// Handle issues with clicking, e.g., element not clickable
									System.out
											.println("Issue with clicking the state. Scrolling again and retrying...");
									IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
									IOSTouchAction.press(PointOption.point(150, 650))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
											.moveTo(PointOption.point(150, 550)).release().perform();
								}
							} else {
								// Element not displayed, perform scroll action
								System.out.println("Element not displayed. Scrolling again...");
								IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
								IOSTouchAction.press(PointOption.point(150, 650))
										.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
										.moveTo(PointOption.point(150, 550)).release().perform();
							}
						} catch (NoSuchElementException e) {
							// Element not found, perform scroll action
							System.out.println("Element not found. Scrolling again...");
							IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
							IOSTouchAction.press(PointOption.point(150, 650))
									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
									.moveTo(PointOption.point(150, 550)).release().perform();
						}

					}
					// If the loop completes without finding the element, you may want to handle it
					if (!elementFound) {
						System.out.println("State not found in the dropdown after scrolling");
					}

					// To verify the Configured order type.

					if (takeoutResponse.equalsIgnoreCase("true")) {

						if (!takeoutResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = takeoutResponseLabelText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Takeout is displayed in the order now and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ takeoutResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Takeout is displayed in the order now and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ takeoutResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

											if (paymentMode.equals("Split")) {

												splitPayment.splitPayment();

											}

											else if (paymentMode.equals("Single")) {

												singlePayment.singlePayment();

												if (remainingPaymentMode.equals("Apple pay")) {

												}
												if (remainingPaymentMode.equals("CreditCard")) {

												}
												if (remainingPaymentMode.equals("Cash")) {

												}
											}

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

											if (paymentMode.equals("Split")) {

												splitPayment.splitPayment();

											}

											else if (paymentMode.equals("Single")) {

												singlePayment.singlePayment();

												if (remainingPaymentMode.equals("Apple pay")) {

												}
												if (remainingPaymentMode.equals("CreditCard")) {

												}
												if (remainingPaymentMode.equals("Cash")) {

												}
											}
										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

											if (paymentMode.equals("Split")) {

												splitPayment.splitPayment();

											}

											else if (paymentMode.equals("Single")) {

												singlePayment.singlePayment();

												if (remainingPaymentMode.equals("Apple pay")) {

												}
												if (remainingPaymentMode.equals("CreditCard")) {

												}
												if (remainingPaymentMode.equals("Cash")) {

												}
											}
										}
									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

											if (paymentMode.equals("Split")) {

												splitPayment.splitPayment();

											}

											else if (paymentMode.equals("Single")) {

												singlePayment.singlePayment();

												if (remainingPaymentMode.equals("Apple pay")) {

												}
												if (remainingPaymentMode.equals("CreditCard")) {

												}
												if (remainingPaymentMode.equals("Cash")) {

												}
											}

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

											if (paymentMode.equals("Split")) {

												splitPayment.splitPayment();

											}

											else if (paymentMode.equals("Single")) {

												singlePayment.singlePayment();

												if (remainingPaymentMode.equals("Apple pay")) {

												}
												if (remainingPaymentMode.equals("CreditCard")) {

												}
												if (remainingPaymentMode.equals("Cash")) {

												}
											}
										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();
										}
									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = localConfigTakeoutText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ localConfigTakeoutText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithTakeoutLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
													+ takeoutOrderTypeText + " response text is : "
													+ localConfigTakeoutText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

											if (paymentMode.equals("Split")) {

												splitPayment.splitPayment();

											}

											else if (paymentMode.equals("Single")) {

												singlePayment.singlePayment();

												if (remainingPaymentMode.equals("Apple pay")) {

												}
												if (remainingPaymentMode.equals("CreditCard")) {

												}
												if (remainingPaymentMode.equals("Cash")) {

												}
											}

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

											if (paymentMode.equals("Split")) {

												splitPayment.splitPayment();

											}

											else if (paymentMode.equals("Single")) {

												singlePayment.singlePayment();

												if (remainingPaymentMode.equals("Apple pay")) {

												}
												if (remainingPaymentMode.equals("CreditCard")) {

												}
												if (remainingPaymentMode.equals("Cash")) {

												}
											}
										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											CapacityManagement.ngaCapacityManagement(takeoutOrderTypeText,
													laterOrderTimeText);

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(takeoutOrderTypeText, laterOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(takeoutOrderTypeText, laterOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

											if (paymentMode.equals("Split")) {

												splitPayment.splitPayment();

											}

											else if (paymentMode.equals("Single")) {

												singlePayment.singlePayment();

												if (remainingPaymentMode.equals("Apple pay")) {

												}
												if (remainingPaymentMode.equals("CreditCard")) {

												}
												if (remainingPaymentMode.equals("Cash")) {

												}
											}
										}
									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {

											nextGenOrderNowFlowWithTakeoutLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithTakeoutLaterConfigured003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out later is not configured.
						nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that takeout lable is not displayed in the screen where as takeout is not configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithTakeoutLaterConfigured003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithTakeoutLaterConfigured003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the side drawer ",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInCurbsideAsapBottomBarConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		boolean jkCafeRecommendedMenuEnabledorNot = commonMethods.jkCafeRecommendedMenuEnabledorNot();

		System.out.println("print :" + jkCafeRecommendedMenuEnabledorNot);

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.appConfiguration();
		merchantId = curbsideFlowConfiguration.get(8);
		storeCode = curbsideFlowConfiguration.get(13);
		String localConfigCurbsideText = curbsideFlowConfiguration.get(22);

		List<String> storeName = bass.odFlow();

		List<String> menuItem = bass.menuItem();

		String string = menuItem.get(1);

		pos = Integer.parseInt(string);

		String string1 = menuItem.get(2);

		position = Integer.parseInt(string1);

		String strings = menuItem.get(3);

		pos1 = Integer.parseInt(strings);

		String strings1 = menuItem.get(4);

		position1 = Integer.parseInt(strings1);

		Thread.sleep(6000);

		if (jkCafeRecommendedMenuEnabledorNot == true) {

			pos1 = pos1 + 1;
			pos = pos + 1;
			position = position + 1;
			position1 = position1 + 1;
		}

		List<String> paymentScreenData = bass.paymentScreenData();

		String paymentMode = paymentScreenData.get(0);

		String remainingPaymentMode = paymentScreenData.get(1);

		String desiredStoreName = storeName.get(15);

		List<String> positiveSignInDatas = bass.signInPositiveData();
		List<String> negtiveSignInDatas = bass.signInNegativeData();

		String positiveEmailId = positiveSignInDatas.get(2);
		String positivePassword = positiveSignInDatas.get(5);

		Thread.sleep(6000);

//		commonMethods.switchContext("FLUTTER");

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Location Screen");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		// To get the dashboard title text

		commonMethods.switchContext("FLUTTER");

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?";
		RequestSpecification requestingHttp = io.restassured.RestAssured.given();

		RequestSpecification parameterRequest = requestingHttp.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse = parameterRequest.get("");

		JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
		if (storeResponse.has("name")) {

			Restaurant_Id = storeResponse.optString("id");

			List<String> appConfiguration = bass.appConfiguration();

			userName = appConfiguration.get(6);
			passWord = appConfiguration.get(7);
			merchantId = appConfiguration.get(8);
			cardTemplateCode = appConfiguration.get(9);
			storeGroupCode = appConfiguration.get(10);
			clientId = appConfiguration.get(11);
			integrationDetail = appConfiguration.get(12);

			storeCode = appConfiguration.get(13);

		}

		String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
				+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
				+ cardTemplateCode + "\",\n" + "    \"scope\": \"user_read account_read account_write user_write\",\n"
				+ "    \"merchantId\": \"" + merchantId + "\",\n"
				+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
				+ "    \"authentication\": \"anonymous\",\n"
				+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n" + "    \"client_id\": \""
				+ clientId + "\"\n" + "}";

		RequestSpecification request = io.restassured.RestAssured.given();

		request.contentType(ContentType.JSON);

		request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

		request.body(jsonString);
		Response response = request.post();
		ValidatableResponse validatableResponse = response.then();
		validatableResponse.statusCode(200);
		JSONObject jObj = new JSONObject(response.body().asString());
		String accessTokenGen = jObj.optString("access_token");
		String printedCardNumberResponse = jObj.optString("printedCardNumber");

		String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n" + "    \"merchant_id\" : "
				+ merchantId + ",\n" + "    \"printed_card_number\" : " + printedCardNumberResponse + " ,\n"
				+ "    \"provider\" : \"px\",\n" + "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

		RequestSpecification requestOrders = io.restassured.RestAssured.given();

		RequestSpecification parameterReq = requestOrders.queryParam("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

		parameterReq.contentType(ContentType.JSON);

		parameterReq.baseUri("https://opendining.net/api/v1/orders?");

		parameterReq.body(Json1);
		Response responseOrders = parameterReq.post();
		ValidatableResponse validatableOrdersResponse = responseOrders.then();

		validatableOrdersResponse.statusCode(200);
		JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
		orderId = jObjOrders.optString("order_id");
		System.out.println("the order id is" + orderId);

		// To check whether order now is present in the bottom bar or not.

		ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfigured_001 = test
				.createNode("nextGenOrderNowFlowWithCurbsideAsapConfigured_001");

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));

			// To check Order now is displayed in the bottom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();
				bottomBarOrderNow.click();

				// To print the informations using node in the extent report.

//				commonMethods.switchContext("FLUTTER");

				nextGenOrderNowFlowWithCurbsideAsapConfigured_001.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithCurbsideAsapConfigured_001 - Validated that Order now button is present in bottom bar navigation bar with the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenOrderNowFlowWithCurbsideAsapConfigured_001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Order Now is configured in bottom bar");

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(10000);

				try {

					WebElement dontAllowId = driver.findElement(
							By.id("com.android.permissioncontroller:id/permission_deny_and_dont_ask_again_button"));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {

					System.out.println("Native Popup not displayed");

				}

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfigured_002 = test
						.createNode("nextGenOrderNowFlowWithCurbsideAsapConfigured_002");

				FlutterElement ordernowTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String ordernowTitleText = ordernowTitle.getText();

				Thread.sleep(6000);

				nextGenOrderNowFlowWithCurbsideAsapConfigured_002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the location list screen.");
				nextGenOrderNowFlowWithCurbsideAsapConfigured_002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutAsapConfigured_002 - Verified that user navigated to the location list screen and the title is : "
								+ ordernowTitleText,
						ExtentColor.CYAN));

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				nextGenOrderNowFlowWithCurbsideAsapConfigured_002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the dashbaord screen.");
				nextGenOrderNowFlowWithCurbsideAsapConfigured_002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutAsapConfigured_002 - Verified that user navigated to the dashboard screen and the title is :",
						ExtentColor.CYAN));

				commonMethods.switchContext("NATIVE_APP");

				bottomBarOrderNow.click();

				commonMethods.switchContext("FLUTTER");

			}

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				JSONObject curbsideObject = storeResponse1.optJSONObject("curbside");

				String asapCurbside = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");
				System.out.println("CHECK WEATHER THE CURBSIDE IS DISPLAYED" + curbsideResponse
						+ curbsideResponseLabelText + asapCurbside);

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);
				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				System.out.println(storeShortCodeNumberConfiguration);
				System.out.println(corpShortCodeNumberConfiguration);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favoriteRecentOrder();

				}

				ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfigured_003 = test
						.createNode("nextGenOrderNowFlowWithCurbsideAsapConfigured_003");

				try {

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(3000);

					// XPath to locate the store element by its name
					By targetElementLocator = By.xpath(
							"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + desiredStoreName + "'" + ")]");
					// Variable to track whether the element is found
					boolean elementFound = false;

					// Loop to attempt finding the element and scrolling
					while (!elementFound) {
						try {
							// Try to find the element
							WebElement element = driver.findElement(targetElementLocator);

							// Check if the element is displayed
							if (element.isDisplayed()) {
								// Element found and displayed, try to click
								try {
									element.click();
									System.out.println("Successfully clicked the store in the dropdown");
									elementFound = true; // Set the flag to true to exit the loop

								} catch (Exception clickException) {
									// Handle issues with clicking, e.g., element not clickable
									System.out
											.println("Issue with clicking the store. Scrolling again and retrying...");
									IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
									IOSTouchAction.press(PointOption.point(150, 650))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
											.moveTo(PointOption.point(150, 550)).release().perform();
								}
							} else {
								// Element not displayed, perform scroll action
								System.out.println("Element not displayed. Scrolling again...");
								IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
								IOSTouchAction.press(PointOption.point(150, 650))
										.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
										.moveTo(PointOption.point(150, 550)).release().perform();
							}
						} catch (NoSuchElementException e) {
							// Element not found, perform scroll action
							System.out.println("Element not found. Scrolling again...");
							IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
							IOSTouchAction.press(PointOption.point(150, 650))
									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
									.moveTo(PointOption.point(150, 550)).release().perform();
						}

					}
					// If the loop completes without finding the element, you may want to handle it
					if (!elementFound) {
						System.out.println("store not found in the dropdown after scrolling");
					}

					// To verify the Configured order type.

					ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfigured_004 = test
							.createNode("nextGenOrderNowFlowWithCurbsideAsapConfigured_004");

					commonMethods.switchContext("FLUTTER");

					String localConfigCurbsideTxt = commonMethods
							.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_CURBSIDE_TEXT);

					String laterTxt = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_LATER_TEXT);

					if (curbsideResponse.equalsIgnoreCase("true")) {

						if (!curbsideResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);
//								// Need to change locator name and locator
								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));
								String curbsideLabelText = curbsideText.getText();

								System.out.println(curbsideLabelText);

								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideOrderTypeText1 = find
										.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideOrderTypeText1.getText();

								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									Thread.sleep(3000);

									nextGenOrderNowFlowWithCurbsideAsapConfigured_004.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideAsapConfigured_004 - Verified that Order Type is displayed for Desired store in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + " matching.",
											ExtentColor.CYAN));

									curbsideOrderTypeText1.click();

//									 Text matches

								} else {

									Thread.sleep(5000);

									nextGenOrderNowFlowWithCurbsideAsapConfigured_004.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideAsapConfigured_004 - Verified that Order Type is displayed for Desired store in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + " not matching.",
											ExtentColor.CYAN));

									curbsideOrderTypeText1.click();

								}

								ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfigured_005 = test
										.createNode("nextGenOrderNowFlowWithCurbsideAsapConfigured_005");

								if (asapCurbside.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert displayed on the screen");
//
											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_005 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											asapLabel1.click();

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											double discountValue = Basket.ngaBasket(orderId);

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos1, position1, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											CurbsideScreen.curbside();

											singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

											splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

										} else {

//											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(3000);

											// To fail that ASAP label text is not matching

											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears on the screen");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_005 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											asapLabel1.click();

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(3000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											double discountValue = Basket.ngaBasket(orderId);

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos1, position1, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											CurbsideScreen.curbside();

											singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

											splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

											Thread.sleep(3000);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));
//
//											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithCurbsideAsapConfigured_005 - Verified that ASAP is not displayed where as ASAP is not configured on the back end and user taps the Cancel button in the popup",
//															ExtentColor.CYAN));

											cancelButton.click();

//											System.out.println(
//													"ASAP is not displayed where as ASAP is configured on the back end ");

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));
//											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithCurbsideAsapConfigured_005 - Verified that the ASAP is only configured on the back end and User navigate to the menu screen",
//															ExtentColor.CYAN));

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											double discountValue = Basket.ngaBasket(orderId);

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos1, position1, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											CurbsideScreen.curbside();

											singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

											splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

											Thread.sleep(3000);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_005 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

//											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
//													.fail(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithCurbsideAsapConfigured_005 - Verified that ASAP is displayed where as ASAP is not configured on the back",
//															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_005 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfigured_005
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));
											// need to add exception

										}

									}

								}

							} catch (Exception E) {

								ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfigured_006 = test
										.createNode("nextGenOrderNowFlowWithCurbsideAsapConfigured_006");

								if (asapCurbside.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithCurbsideAsapConfigured_006
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_006
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_006 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											double discountValue = Basket.ngaBasket(orderId);

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos1, position1, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											CurbsideScreen.curbside();

											singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

											splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

											Thread.sleep(3000);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithCurbsideAsapConfigured_006
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_006
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_006 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											double discountValue = Basket.ngaBasket(orderId);

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos1, position1, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											CurbsideScreen.curbside();

											singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

											splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

											Thread.sleep(3000);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_006
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_006 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));
										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_006
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_006 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));
											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											double discountValue = Basket.ngaBasket(orderId);

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos1, position1, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											CurbsideScreen.curbside();

											singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

											splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

											Thread.sleep(3000);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {

											nextGenOrderNowFlowWithCurbsideAsapConfigured_006
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_006
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_006 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));
											// To fail the test case.

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_006
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_006 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfigured_006
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_006 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfigured_007 = test
									.createNode("nextGenOrderNowFlowWithCurbsideAsapConfigured_007");

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(3000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								try {

									Assert.assertEquals(localConfigCurbsideTxt, curbsideOrderTypeText);

									System.out.println("Verified that configured curbside order type text text : "
											+ localConfigCurbsideTxt + " and displayed program name text :  "
											+ curbsideOrderTypeText + " are same.");

									nextGenOrderNowFlowWithCurbsideAsapConfigured_007.info(MarkupHelper.createLabel(
											"nextGenOrderHistoryFlowViaBottomBar_003 - Verified that configured curbside order type text : "
													+ localConfigCurbsideTxt + " and displayed program name text :  "
													+ curbsideOrderTypeText + " are same.",
											ExtentColor.CYAN));

								} catch (Throwable e) {
									nextGenOrderNowFlowWithCurbsideAsapConfigured_007.log(Status.FAIL,
											"Verified that configured curbside order type text : "
													+ localConfigCurbsideTxt + " and displayed program name text :  "
													+ curbsideOrderTypeText + " are not same.");
								}

								boolean equalsIgnoreCase = localConfigCurbsideText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									curbsideText.click();

									nextGenOrderNowFlowWithCurbsideAsapConfigured_007.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideAsapConfigured_007 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ localConfigCurbsideText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									curbsideText.click();

									nextGenOrderNowFlowWithCurbsideAsapConfigured_007.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideAsapConfigured_007 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ localConfigCurbsideText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								if (asapCurbside.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										try {

											Assert.assertEquals(laterTxt, asapOrderTimeText);

											System.out.println("Verified that configured ASAP order type text text : "
													+ laterTxt + " and displayed program name text :  "
													+ curbsideOrderTypeText + " are same.");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_007
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_007 - Verified that configured ASAP order type text : "
																	+ laterTxt + " and displayed program name text :  "
																	+ curbsideOrderTypeText + " are same.",
															ExtentColor.CYAN));

										} catch (Throwable e) {
											nextGenOrderNowFlowWithCurbsideAsapConfigured_007.log(Status.FAIL,
													"Verified that configured ASAP order type text : " + laterTxt
															+ " and displayed program name text :  "
															+ curbsideOrderTypeText + " are not same.");
										}

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithCurbsideAsapConfigured_007
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_007
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_007 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											double discountValue = Basket.ngaBasket(orderId);

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos1, position1, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											CurbsideScreen.curbside();

											singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

											splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

											Thread.sleep(3000);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithCurbsideAsapConfigured_007
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_007
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_007 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											double discountValue = Basket.ngaBasket(orderId);

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos1, position1, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											CurbsideScreen.curbside();

											singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

											splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

											Thread.sleep(3000);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_007
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_007 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_007
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_007 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, pos, position,
													orderId);

											double discountValue = Basket.ngaBasket(orderId);

//											Thread.sleep(6000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, pos1, position1, orderId);
//
//											Thread.sleep(6000);
//
//											Coupon.ngaCoupon(orderId);
//
//											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout(orderId);

											CurbsideScreen.curbside();

											singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

											splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

											Thread.sleep(3000);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {

											nextGenOrderNowFlowWithCurbsideAsapConfigured_007
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideAsapConfigured_007
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_007 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));
											// To fail the test case.

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											nextGenOrderNowFlowWithCurbsideAsapConfigured_007
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_007 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfigured_007
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_007 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {
								nextGenOrderNowFlowWithCurbsideAsapConfigured_007.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that curbside lable is not displayed in the screen where as takeout is configured in the app level.",
										ExtentColor.CYAN));

							}

						}

					} else {

						Thread.sleep(4000);
						System.out.println(" Verified that curbside label is not displayed on the order type popup ");
//						// take out later is not configured.
//						nextGenOrderNowFlowWithCurbsideAsapConfigured_004.info(MarkupHelper.createLabel(
//                                "nextGenOrderNowFlowWithCurbsideAsapConfigured_004 - Verified that curbside lable is not displayed in the screen where as curbside is not configured on the back end.",
//                                ExtentColor.CYAN));
//                        Thread.sleep(5000);
						try {
							commonMethods.switchContext("NATIVE_APP");
							Thread.sleep(3000);
							WebElement orderTypeCloseIconXpath = driver
									.findElement(By.xpath(orderNowLocators.ORDERTYPE_POPUP_XPATH));
							commonMethods.switchContext("FLUTTER");
							Thread.sleep(2000);
							FlutterElement orderTypeCloseIconVk = find
									.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);
							orderTypeCloseIconVk.click();
							nextGenOrderNowFlowWithCurbsideAsapConfigured_004.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithCurbsideAsapConfigured_004 - Verified that curbside label is not displayed on the order type popup ",
									ExtentColor.CYAN));
							System.out
									.println(" Verified that curbside label is not displayed on the order type popup ");
						} catch (Exception e) {

							commonMethods.switchContext("NATIVE_APP");
							Thread.sleep(3000);
							WebElement orderTypeCloseIconXpath = driver
									.findElement(By.xpath(orderNowLocators.ORDERTIME_POPUP_XPATH));
							commonMethods.switchContext("FLUTTER");
							Thread.sleep(2000);
							FlutterElement orderTypeCloseIconVk = find
									.byValueKey(orderNowLocators.ORDERTYPE_ASAP_CLOSE_ICON_VKL);
							orderTypeCloseIconVk.click();
							nextGenOrderNowFlowWithCurbsideAsapConfigured_004.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithCurbsideAsapConfigured_004 - Verified that When would you like your order popup displayed where as app close the popup ",
									ExtentColor.CYAN));
							System.out.println(
									" Verified that When would you like your order popup displayed where as app close the popup ");
						}

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Store is not displayed on the location list",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithCurbsideAsapConfigured_001.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Order now is not displayed in the bottom bar",
					ExtentColor.CYAN));

			System.out.println("Order now is not config in the bottom bar");

		}

	}

	public static void ngaOrderNowLoggedInCurbsideAsapSideDrawerConfigured() throws Exception {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.appConfiguration();
		String merchantId = curbsideFlowConfiguration.get(8);
		String storeCode = curbsideFlowConfiguration.get(13);
		String localConfigCurbsideText = curbsideFlowConfiguration.get(38);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfigured_001 = test
				.createNode("nextGenOrderNowFlowWithCurbsideAsapConfigured_001");
		ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfigured_002 = test
				.createNode("nextGenOrderNowFlowWithCurbsideAsapConfigured_002");
		ExtentTest nextGenOrderNowFlowWithCurbsideAsapConfigured_003 = test
				.createNode("nextGenOrderNowFlowWithCurbsideAsapConfigured_003");

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		try {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find
					.byValueKey(dashBoardLocators.DASHBOARD_SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithCurbsideAsapConfigured_001.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideAsapConfigured_001 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithCurbsideAsapConfigured_001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithCurbsideAsapConfigured_002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the order now screen.

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithCurbsideAsapConfigured_002.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithCurbsideAsapConfigured_002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideAsapConfigured_002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithCurbsideAsapConfigured_003
			 * @author Ganeshkumarselvaraj
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithCurbsideAsapConfigured_003.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : "
							+ dashboardTitleVkText,
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?";
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				Restaurant_Id = storeResponse.optString("id");

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);

				storeCode = appConfiguration.get(13);

			}

			String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
					+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
					+ cardTemplateCode + "\",\n"
					+ "    \"scope\": \"user_read account_read account_write user_write\",\n" + "    \"merchantId\": \""
					+ merchantId + "\",\n" + "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
					+ "    \"authentication\": \"anonymous\",\n"
					+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
					+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

			RequestSpecification request = io.restassured.RestAssured.given();

			request.contentType(ContentType.JSON);

			request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

			request.body(jsonString);
			Response response = request.post();
			ValidatableResponse validatableResponse = response.then();
			validatableResponse.statusCode(200);
			JSONObject jObj = new JSONObject(response.body().asString());
			String accessTokenGen = jObj.optString("access_token");
			String printedCardNumberResponse = jObj.optString("printedCardNumber");

			String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n" + "    \"merchant_id\" : "
					+ merchantId + ",\n" + "    \"printed_card_number\" : " + printedCardNumberResponse + " ,\n"
					+ "    \"provider\" : \"px\",\n" + "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

			RequestSpecification requestOrders = io.restassured.RestAssured.given();

			RequestSpecification parameterReq = requestOrders.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

			parameterReq.contentType(ContentType.JSON);

			parameterReq.baseUri("https://opendining.net/api/v1/orders?");

			parameterReq.body(Json1);
			Response responseOrders = parameterReq.post();
			ValidatableResponse validatableOrdersResponse = responseOrders.then();

			validatableOrdersResponse.statusCode(200);
			JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
			orderId = jObjOrders.optString("order_id");
			System.out.println("the order id is" + orderId);

			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				JSONObject curbsideObject = storeResponse1.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);
				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				System.out.println(storeShortCodeNumberConfiguration);
				System.out.println(corpShortCodeNumberConfiguration);

				try {

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(3000);

					// XPath to locate the state element by its name
					By targetElementLocator = By.xpath(
							"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + desiredStoreName + "'" + ")]");
					// Variable to track whether the element is found
					boolean elementFound = false;

					// Loop to attempt finding the element and scrolling
					while (!elementFound) {
						try {
							// Try to find the element
							WebElement element = driver.findElement(targetElementLocator);

							// Check if the element is displayed
							if (element.isDisplayed()) {
								// Element found and displayed, try to click
								try {
									element.click();
									System.out.println("Successfully clicked the state in the dropdown");
									elementFound = true; // Set the flag to true to exit the loop

									nextGenOrderNowFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the OrderNow ",
											ExtentColor.CYAN));

								} catch (Exception clickException) {
									// Handle issues with clicking, e.g., element not clickable
									System.out
											.println("Issue with clicking the state. Scrolling again and retrying...");
									IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
									IOSTouchAction.press(PointOption.point(150, 650))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
											.moveTo(PointOption.point(150, 550)).release().perform();
								}
							} else {
								// Element not displayed, perform scroll action
								System.out.println("Element not displayed. Scrolling again...");
								IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
								IOSTouchAction.press(PointOption.point(150, 650))
										.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
										.moveTo(PointOption.point(150, 550)).release().perform();
							}
						} catch (NoSuchElementException e) {
							// Element not found, perform scroll action
							System.out.println("Element not found. Scrolling again...");
							IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
							IOSTouchAction.press(PointOption.point(150, 650))
									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
									.moveTo(PointOption.point(150, 550)).release().perform();
						}

					}
					// If the loop completes without finding the element, you may want to handle it
					if (!elementFound) {
						System.out.println("State not found in the dropdown after scrolling");
					}

					// To verify the Configured order type.

					if (curbsideResponse.equalsIgnoreCase("true")) {

						if (!curbsideResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									takeoutText.click();

									nextGenOrderNowFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										String asaplabelText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asaplabelText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : " + asaplabelText
																	+ "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

											if (paymentMode.equals("Split")) {

												splitPayment.splitPayment();

											}

											else if (paymentMode.equals("Single")) {

												singlePayment.singlePayment();

												if (remainingPaymentMode.equals("Apple pay")) {

												}
												if (remainingPaymentMode.equals("CreditCard")) {

												}
												if (remainingPaymentMode.equals("Cash")) {

												}
											}

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : " + asaplabelText
																	+ " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

											if (paymentMode.equals("Split")) {

												splitPayment.splitPayment();

											}

											else if (paymentMode.equals("Single")) {

												singlePayment.singlePayment();

												if (remainingPaymentMode.equals("Apple pay")) {

												}
												if (remainingPaymentMode.equals("CreditCard")) {

												}
												if (remainingPaymentMode.equals("Cash")) {

												}
											}

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										String asaplabelText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asaplabelText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : " + asaplabelText
																	+ "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : " + asaplabelText
																	+ " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = localConfigCurbsideText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ localConfigCurbsideText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenOrderNowFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ localConfigCurbsideText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										String asaplabelText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asaplabelText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : " + asaplabelText
																	+ "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : " + asaplabelText
																	+ " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Basket.ngaBasket(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

											MenuApi.menuApi(curbsideOrderTypeText, asapOrderTimeText, 1, 2, orderId);

											Thread.sleep(6000);

											Coupon.ngaCoupon(orderId);

											Basket.deleteItem(orderId);

											Thread.sleep(6000);

											CheckOut.ngaCheckout();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the app level.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenOrderNowFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the app level.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideAsapConfigured_003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the App level",
					ExtentColor.CYAN));
		}

	}

	@Test

	public static void ngaOrderNowLoggedInCurbsideLaterBottomBarConfigured() throws Throwable {

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.appConfiguration();
		merchantId = curbsideFlowConfiguration.get(8);
		storeCode = curbsideFlowConfiguration.get(13);

		FlutterFinder find = new FlutterFinder(driver);

		String localConfigCurbsideText = commonMethods
				.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_CURBSIDE_TEXT);

		String laterText = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_LATER_TEXT);

		test = extent.createTest(nameofCurrMethod).assignAuthor("Prasanna Venkatesh").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		ExtentTest nextGenOrderNowFlowWithCurbsideLaterConfigured001 = test
				.createNode("nextGenOrderNowFlowWithCurbsideLaterConfigured001");
		ExtentTest nextGenOrderNowFlowWithCurbsideLaterConfigured002 = test
				.createNode("nextGenOrderNowFlowWithCurbsideLaterConfigured002");
		ExtentTest nextGenOrderNowFlowWithCurbsideLaterConfigured003 = test
				.createNode("nextGenOrderNowFlowWithCurbsideLaterConfigured003");

		// To get the dashboard title text

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		// To check whether ordernow is present in the bottom bar.

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));

			// To check Order now is displayed in the bottom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenOrderNowFlowWithCurbsideLaterConfigured001.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithCurbsideLaterConfigured001 - Validated that Order now button is present in bottom bar and the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenOrderNowFlowWithCurbsideLaterConfigured001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();

				try {

					Thread.sleep(20000);

					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithCurbsideLaterConfigured
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenOrderNowFlowWithCurbsideLaterConfigured002
				 * @author Ganeshkumarselvaraj
				 */

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				Thread.sleep(5000);

				System.err.println("OrderNow Title");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenOrderNowFlowWithCurbsideLaterConfigured002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the order now screen.");
				nextGenOrderNowFlowWithCurbsideLaterConfigured002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithCurbsideLaterConfigured002 - Verified that user navigated to the order now screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithCurbsideLaterConfigured
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithCurbsideLaterConfigured003
				 * @author Ganeshkumarselvaraj
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				nextGenOrderNowFlowWithCurbsideLaterConfigured003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				nextGenOrderNowFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : "
								+ dashboardTitleVkText,
						ExtentColor.CYAN));

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(10000);

				bottomBarOrderNow.click();

				commonMethods.switchContext("FLUTTER");

			}

			else {

				System.out.println("Element Not Found");

			}

			Thread.sleep(5000);

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				JSONObject curbsideObject = storeResponse1.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithCurbsideLaterConfigured
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithCurbsideLaterConfigured003
				 * @author Ganeshkumarselvaraj
				 */

				Thread.sleep(15000);

				commonMethods.scrollDownAndClick(desiredStoreName);

				try {

					// To verify the Configured order type.

					if (curbsideResponse.equalsIgnoreCase("true")) {

						if (!curbsideResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(12000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								Assert.assertEquals(equalsIgnoreCase, true,
										"Verified that the curbside is displayed in the order type popup and displayed texts is "
												+ curbsideOrderTypeText + " response text is : "
												+ curbsideResponseLabelText + " matching.");

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("FLUTTER");

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside is displayed in the order type popup and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(6000);

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside is displayed in the order type popup and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										Assert.assertEquals(laterLabelComparison, true,
												"Verified that Alert appears when user taps the later button and the later actual text :"
														+ laterText + "later config text : " + laterOrderTimeText
														+ "matching");

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(12000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									}

								} else {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(12000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(12000);

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(12000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										Assert.assertEquals(laterLabelComparison, true,
												" Verified that Alert appears when user taps the later button and the later actual text :"
														+ laterText + "later config text : " + laterOrderTimeText
														+ "matching");

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(12000);

									try {

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = localConfigCurbsideText
										.equalsIgnoreCase(curbsideOrderTypeText);

								Assert.assertEquals(equalsIgnoreCase, true,
										" Verified that curbside is displayed in the order type popup and displayed texts is "
												+ curbsideOrderTypeText + " local configuration text is : "
												+ localConfigCurbsideText + " matching.");

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("FLUTTER");

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside is displayed in the order type popup and displayed texts is "
													+ curbsideOrderTypeText + " local configuration text is : "
													+ localConfigCurbsideText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(3000);

									curbsideText.click();

									nextGenOrderNowFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside is displayed in the order type popup and displayed texts is "
													+ curbsideOrderTypeText + " local configuration text is : "
													+ localConfigCurbsideText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}
								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										Assert.assertEquals(laterLabelComparison, true,
												" Verified that Alert appears when user taps the later button and the later actual text :"
														+ laterText + "later config text : " + laterOrderTimeText
														+ "matching");

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										nextGenOrderNowFlowWithCurbsideLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that later not appearss");

										nextGenOrderNowFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label not appears in the screen where as later is configured in the back end.",
												ExtentColor.CYAN));

										integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(12000);

									try {

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside lable is not displayed in the screen where as curbside is not configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out later is not configured.
						nextGenOrderNowFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside lable is not displayed in the screen where as curbside is not configured on the back end.",
								ExtentColor.CYAN));

						Thread.sleep(5000);

						try {

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(6000);

							WebElement orderTypeCloseIconXpath = driver
									.findElement(By.xpath(orderNowLocators.ORDERTYPE_POPUP_XPATH));

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(2000);

							FlutterElement orderTypeCloseIconVk = find
									.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

							orderTypeCloseIconVk.click();

							nextGenOrderNowFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside label is not displayed on the order type popup ",
									ExtentColor.CYAN));

							System.out
									.println(" Verified that curbside label is not displayed on the order type popup ");

						} catch (Exception e) {

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(3000);

							WebElement orderTypeCloseIconXpath = driver
									.findElement(By.xpath(orderNowLocators.ORDERTIME_POPUP_XPATH));

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(2000);

							FlutterElement orderTypeCloseIconVk = find
									.byValueKey(orderNowLocators.ORDERTYPE_ASAP_ICON_VKL);

							orderTypeCloseIconVk.click();

							nextGenOrderNowFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that When would you like your order popup displayed where as app close the popup ",
									ExtentColor.CYAN));

							System.out.println(
									" Verified that When would you like your order popup displayed where as app close the popup ");

						}

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the side drawer",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInCurbsideLaterSideDrawerConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.appConfiguration();
		merchantId = curbsideFlowConfiguration.get(8);
		storeCode = curbsideFlowConfiguration.get(13);

		String localConfigCurbsideText = commonMethods
				.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_CURBSIDE_TEXT);

		String laterText = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_LATER_TEXT);

		test = extent.createTest(nameofCurrMethod).assignAuthor("Prasanna Venkatesh").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		ExtentTest nextGenOrderNowFlowWithCurbsideLaterConfigured001 = test
				.createNode("nextGenOrderNowFlowWithCurbsideLaterConfigured001");
		ExtentTest nextGenOrderNowFlowWithCurbsideLaterConfigured002 = test
				.createNode("nextGenOrderNowFlowWithCurbsideLaterConfigured002");
		ExtentTest nextGenOrderNowFlowWithCurbsideLaterConfigured003 = test
				.createNode("nextGenOrderNowFlowWithCurbsideLaterConfigured003");

		// To get the dashboard title text

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		try {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find
					.byValueKey(dashBoardLocators.DASHBOARD_SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(5000);

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithCurbsideLaterConfigured001.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideLaterConfigured001 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithCurbsideLaterConfigured001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(12000);

			try {

				WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

				if (dontAllowId.isDisplayed()) {

					dontAllowId.click();

				}

			}

			catch (Exception e) {

				System.out.println("Native Popup not appears");

			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithCurbsideLaterConfigured
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithCurbsideLaterConfigured002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the order now screen.

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithCurbsideLaterConfigured002.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithCurbsideLaterConfigured002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideLaterConfigured002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithCurbsideLaterConfigured
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithCurbsideLaterConfigured003
			 * @author Ganeshkumarselvaraj
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithCurbsideLaterConfigured003.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : "
							+ dashboardTitleVkText,
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			// Need to verify the store details in the map icon and list view are same

//			commonMethods.checkAndClickTheElement(locationScreenStoreMapIconButton);

			Thread.sleep(5000);

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID nextGenLocationListFlowWithTakeoutAsapConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				JSONObject curbsideObject = storeResponse1.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
//				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithCurbsideLaterConfigured
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithCurbsideLaterConfigured003
				 * @author Ganeshkumarselvaraj
				 */

				Thread.sleep(15000);

				commonMethods.scrollDownAndClick(desiredStoreName);

				try {

					// To verify the Configured order type.

					if (curbsideResponse.equalsIgnoreCase("true")) {

						if (!curbsideResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(12000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								Assert.assertEquals(equalsIgnoreCase, true,
										"Verified that the curbside is displayed in the order type popup and displayed texts is "
												+ curbsideOrderTypeText + " response text is : "
												+ curbsideResponseLabelText + " matching.");

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("FLUTTER");

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside is displayed in the order type popup and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(6000);

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside is displayed in the order type popup and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										Assert.assertEquals(laterLabelComparison, true,
												"Verified that Alert appears when user taps the later button and the later actual text :"
														+ laterText + "later config text : " + laterOrderTimeText
														+ "matching");

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

											Thread.sleep(3000);

										} else {

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(12000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									}

								} else {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(12000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(12000);

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(12000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										Assert.assertEquals(laterLabelComparison, true,
												" Verified that Alert appears when user taps the later button and the later actual text :"
														+ laterText + "later config text : " + laterOrderTimeText
														+ "matching");

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(12000);

									try {

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = localConfigCurbsideText
										.equalsIgnoreCase(curbsideOrderTypeText);

								Assert.assertEquals(equalsIgnoreCase, true,
										" Verified that curbside is displayed in the order type popup and displayed texts is "
												+ curbsideOrderTypeText + " local configuration text is : "
												+ localConfigCurbsideText + " matching.");

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("FLUTTER");

									curbsideText1.click();

									nextGenOrderNowFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside is displayed in the order type popup and displayed texts is "
													+ curbsideOrderTypeText + " local configuration text is : "
													+ localConfigCurbsideText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(3000);

									curbsideText.click();

									nextGenOrderNowFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside is displayed in the order type popup and displayed texts is "
													+ curbsideOrderTypeText + " local configuration text is : "
													+ localConfigCurbsideText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}
								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										Assert.assertEquals(laterLabelComparison, true,
												" Verified that Alert appears when user taps the later button and the later actual text :"
														+ laterText + "later config text : " + laterOrderTimeText
														+ "matching");

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										nextGenOrderNowFlowWithCurbsideLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that later not appearss");

										nextGenOrderNowFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label not appears in the screen where as later is configured in the back end.",
												ExtentColor.CYAN));

										integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(12000);

									try {

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {

											nextGenOrderNowFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside lable is not displayed in the screen where as curbside is not configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out later is not configured.
						nextGenOrderNowFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside lable is not displayed in the screen where as curbside is not configured on the back end.",
								ExtentColor.CYAN));

						Thread.sleep(5000);

						try {

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(6000);

							WebElement orderTypeCloseIconXpath = driver
									.findElement(By.xpath(orderNowLocators.ORDERTYPE_POPUP_XPATH));

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(2000);

							FlutterElement orderTypeCloseIconVk = find
									.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

							orderTypeCloseIconVk.click();

							nextGenOrderNowFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that curbside label is not displayed on the order type popup ",
									ExtentColor.CYAN));

							System.out
									.println(" Verified that curbside label is not displayed on the order type popup ");

						} catch (Exception e) {

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(3000);

							WebElement orderTypeCloseIconXpath = driver
									.findElement(By.xpath(orderNowLocators.ORDERTIME_POPUP_XPATH));

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(2000);

							FlutterElement orderTypeCloseIconVk = find
									.byValueKey(orderNowLocators.ORDERTYPE_ASAP_ICON_VKL);

							orderTypeCloseIconVk.click();

							nextGenOrderNowFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that When would you like your order popup displayed where as app close the popup ",
									ExtentColor.CYAN));

							System.out.println(
									" Verified that When would you like your order popup displayed where as app close the popup ");

						}

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithCurbsideLaterConfigured003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the side drawer",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInDeliveryAsapBottomBarConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		merchantId = deliveryFlowConfiguration.get(8);

		storeCode = deliveryFlowConfiguration.get(13);

		String localConfigDeliveryText = deliveryFlowConfiguration.get(21);

		storeCode = deliveryFlowConfiguration.get(13);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		String state = storeName.get(110);

		String country = storeName.get(111);

		Thread.sleep(6000);

		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfigured001 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfigured001");
		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfigured002 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfigured002");
		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfigured003 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfigured003");
		ExtentTest nextGenOrderNowFlowWithDeliveryAsapConfigured_003 = test
				.createNode("nextGenOrderNowFlowWithDeliveryAsapConfigured_003");

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		orderId = APIMethods.orderId();

		// To check whether ordernow is present in the bottom bar.

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));

			// To check Order now is displayed in the bottom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenOrderNowFlowWithDeliveryLaterConfigured001.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithDeliveryLaterConfigured001 - Validated that Order now button is present in bottom bar and the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
//				nextGenOrderNowFlowWithDeliveryLaterConfigured001.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				Thread.sleep(5000);

				bottomBarOrderNow.click();

//			

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfigured
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfigured002
				 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
				 */

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenOrderNowFlowWithDeliveryLaterConfigured002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the order now screen.");
				nextGenOrderNowFlowWithDeliveryLaterConfigured002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithDeliveryLaterConfigured002 - Verified that user navigated to the order now screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				commonMethods.switchContext("FLUTTER");

			}

//			/**
//			 * @Class_Name Location
//			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
//			 * @Description Ensure that user navigated to dashboard screen while tapping the
//			 *              backicon in the ordernow screen.
//			 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfigured_003
//			 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
//			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				System.out.println(" delivery label text : " + deliveryResponseLabelText);

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfigured
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfigured003
				 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
				 */

				Thread.sleep(15000);

				try {

					commonMethods.scrollDownAndClick(desiredStoreName);

					// To verify the Configured order type.

					if (deliveryResponse.equalsIgnoreCase("true")) {

						if (!deliveryResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = deliveryResponseLabelText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									System.out.println(" favsss ");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryResponseLabelText + " matching.",
											ExtentColor.CYAN));

									Thread.sleep(3000);

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									System.out.println(" favsss ");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

									Thread.sleep(3000);

								}

								/////////////////////////////////////////////////////////////// ADDRESS SCRIPT
								/////////////////////////////////////////////////////////////// ////////////////////////////

								address.addresss();

								Thread.sleep(5000);

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = localConfigDeliveryText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									deliveryText1.click();

									nextGenOrderNowFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Delivery is displayed in the order type popup and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ localConfigDeliveryText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Delivery is displayed in the order type popup and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ localConfigDeliveryText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								address.addresss();
								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenOrderNowFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the back end",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInDeliveryAsapSideDrawerConfigured() throws Throwable {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bass = new BaseClass();
		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		String merchantId = deliveryFlowConfiguration.get(8);
		String storeCode = deliveryFlowConfiguration.get(13);

		String localConfigDeliveryText = deliveryFlowConfiguration.get(21);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfigured_001
		 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
		 */

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithDeliveryAsapConfigured_001 = test
				.createNode("nextGenOrderNowFlowWithDeliveryAsapConfigured_001");
		ExtentTest nextGenOrderNowFlowWithDeliveryAsapConfigured_002 = test
				.createNode("nextGenOrderNowFlowWithDeliveryAsapConfigured_002");
		ExtentTest nextGenOrderNowFlowWithDeliveryAsapConfigured_003 = test
				.createNode("nextGenOrderNowFlowWithDeliveryAsapConfigured_003");

		// To get the dashboard title text

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		try {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find
					.byValueKey(dashBoardLocators.DASHBOARD_SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithDeliveryAsapConfigured_003.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(10000);

			try {

				WebElement dontAllowId = driver.findElement(
						By.id("com.android.permissioncontroller:id/permission_deny_and_dont_ask_again_button"));

				if (dontAllowId.isDisplayed()) {

					commonMethods.checkAndClickTheElement(dontAllowId);

				}
			} catch (Exception e) {

				System.out.println("Native Popup not appears");

			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfigured_002
			 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
			 */

			// To get the title of the order now screen.

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithDeliveryAsapConfigured_002.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithDeliveryAsapConfigured_002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryAsapConfigured_002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfigured_003
			 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithDeliveryAsapConfigured_003.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : "
							+ dashboardTitleVkText,
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?";
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				Restaurant_Id = storeResponse.optString("id");

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);

				storeCode = appConfiguration.get(13);

			}

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the ordernow screen.
			 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfigured_003
			 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantid
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				try {

					commonMethods.scrollDownAndClick(desiredStoreName);

					// To verify the Configured order type.

					if (deliveryResponse.equalsIgnoreCase("true")) {

						if (!deliveryResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = deliveryResponseLabelText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								/////////////////////////////////////////////////////////////// ADDRESS SCRIPT
								/////////////////////////////////////////////////////////////// ////////////////////////////

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								address.addresss();

								Thread.sleep(5000);

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										String asaplabelText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asaplabelText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : " + asaplabelText
																	+ "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : " + asaplabelText
																	+ " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										String asaplabelText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asaplabelText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : " + asaplabelText
																	+ "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : " + asaplabelText
																	+ " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);
										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = localConfigDeliveryText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryOrderTypeText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryOrderTypeText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}
								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);
										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenOrderNowFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the app level.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenOrderNowFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the app level.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryAsapConfigured_003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the App level",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInDeliveryLaterBottomBarConfigured() throws Throwable {

		System.out.println("ngaOrderNowLoggedInDeliveryLaterBottomBarConfigured");

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();

		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		merchantId = deliveryFlowConfiguration.get(8);

		storeCode = deliveryFlowConfiguration.get(13);

		String localConfigDeliveryText = deliveryFlowConfiguration.get(21);

		storeCode = deliveryFlowConfiguration.get(13);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		String state = storeName.get(110);

		String country = storeName.get(111);

		Thread.sleep(6000);

		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfigured001 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfigured001");
		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfigured002 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfigured002");
		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfigured003 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfigured003");

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		orderId = APIMethods.orderId();

		// To check whether ordernow is present in the bottom bar.

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));

			// To check Order now is displayed in the bottom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenOrderNowFlowWithDeliveryLaterConfigured001.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithDeliveryLaterConfigured001 - Validated that Order now button is present in bottom bar and the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenOrderNowFlowWithDeliveryLaterConfigured001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				Thread.sleep(5000);

				bottomBarOrderNow.click();

				try {

					Thread.sleep(30000);

					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfigured
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfigured002
				 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
				 */

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenOrderNowFlowWithDeliveryLaterConfigured002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the order now screen.");
				nextGenOrderNowFlowWithDeliveryLaterConfigured002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithDeliveryLaterConfigured002 - Verified that user navigated to the order now screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfigured
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfigured003
				 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				nextGenOrderNowFlowWithDeliveryLaterConfigured003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : "
								+ dashboardTitleVkText,
						ExtentColor.CYAN));

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(5000);

				bottomBarOrderNow.click();

				commonMethods.switchContext("FLUTTER");

//				// Need to verify the store details in the map icon and list view are same
//
//				commonMethods.checkAndClickTheElement(locationScreenStoreMapIconButton);
//
			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the ordernow screen.
			 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfigured_003
			 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				System.out.println(" delivery label text : " + deliveryResponseLabelText);

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfigured
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfigured003
				 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
				 */

				Thread.sleep(15000);

				commonMethods.scrollDownAndClick(desiredStoreName);

				// To verify the Configured order type.

				if (deliveryResponse.equalsIgnoreCase("true")) {

					if (!deliveryResponseLabelText.isEmpty()) {

						try {

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(6000);

							WebElement deliveryText = driver
									.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

							commonMethods.switchContext("FLUTTER");

							FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

							deliveryOrderTypeText = deliveryText1.getText();

							boolean equalsIgnoreCase = deliveryResponseLabelText
									.equalsIgnoreCase(deliveryOrderTypeText);

							if (equalsIgnoreCase == true) {

								commonMethods.switchContext("NATIVE_APP");

								deliveryText.click();

								nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the order now and displayed texts is "
												+ deliveryOrderTypeText + " response text is : "
												+ deliveryResponseLabelText + " matching.",
										ExtentColor.CYAN));

								Thread.sleep(3000);

								// Text matches

							} else {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								deliveryText.click();

								nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the order now and displayed texts is "
												+ deliveryOrderTypeText + " response text is : "
												+ deliveryResponseLabelText + "  not matching.",
										ExtentColor.CYAN));

								Thread.sleep(3000);

							}

							/////////////////////////////////////////////////////////////// ADDRESS SCRIPT
							/////////////////////////////////////////////////////////////// ////////////////////////////

							address.addresss();

							if (laterOrder.equalsIgnoreCase("true")) {

								try {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									WebElement laterLabel = driver.findElement(
											By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

									commonMethods.switchContext("FLUTTER");

									FlutterElement laterLabel1 = find.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

									laterOrderTimeText = laterLabel1.getText();

									boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

									if (laterLabelComparison == true) {

										laterLabel1.click();

										nextGenOrderNowFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that alert appears");

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
														+ laterText + "later config text : " + laterOrderTimeText
														+ "matching",
												ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

									} else {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										// To fail that later label text is not matching

										laterLabel.click();

										nextGenOrderNowFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that alert appears");

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
														+ laterText + "later config text : " + laterOrderTimeText
														+ " not matching",
												ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
									}

								} catch (Exception e) {

									try {

										commonMethods.switchContext("NATIVE_APP");
										Thread.sleep(5000);

										WebElement asapTextXpath = driver
												.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

										if (asapTextXpath.isDisplayed()) {

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
												ExtentColor.CYAN));

									} catch (Exception e1) {

										System.out.println(
												" Later is only displayed where as Later is only configured on the back end ");

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
												ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

									}
								}

							} else {

								commonMethods.switchContext("NATIVE_APP");

								try {

									Thread.sleep(6000);

									WebElement laterLabel = driver.findElement(
											By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

									if (laterLabel.isDisplayed()) {
										// To fail the test case.

										nextGenOrderNowFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that later is displayed in the screen.");
										nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
												ExtentColor.CYAN));

										commonMethods.switchContext("FLUTTER");

										FlutterElement closeIcon = find
												.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

										closeIcon.click();

									}

								} catch (Exception e) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										WebElement menuText = driver
												.findElement(By.xpath("//android.view.View[@name='Menu']"));

										System.out.println(menuText);

										System.out.println(
												"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
												ExtentColor.CYAN));

									} catch (Exception e2) {

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
												ExtentColor.CYAN));

									}

								}

							}

						} catch (Exception E) {

							if (laterOrder.equalsIgnoreCase("true")) {

								try {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									WebElement laterLabel = driver.findElement(
											By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

									commonMethods.switchContext("FLUTTER");

									FlutterElement laterLabel1 = find.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

									laterOrderTimeText = laterLabel1.getText();

									boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

									if (laterLabelComparison == true) {

										laterLabel1.click();

										nextGenOrderNowFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that alert appears");

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
														+ laterText + "later config text : " + laterOrderTimeText
														+ "matching",
												ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

									} else {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										// To fail that later label text is not matching

										laterLabel.click();

										nextGenOrderNowFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that alert appears");

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
														+ laterText + "later config text : " + laterOrderTimeText
														+ " not matching",
												ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
									}

								} catch (Exception e) {

									try {

										commonMethods.switchContext("NATIVE_APP");
										Thread.sleep(5000);

										WebElement asapTextXpath = driver
												.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

										if (asapTextXpath.isDisplayed()) {

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
												ExtentColor.CYAN));

									} catch (Exception e1) {

										System.out.println(
												" Later is only displayed where as Later is only configured on the back end ");

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
												ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
									}
								}

							} else {

								commonMethods.switchContext("NATIVE_APP");

								try {

									Thread.sleep(6000);

									WebElement laterLabel = driver.findElement(
											By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

									if (laterLabel.isDisplayed()) {
										// To fail the test case.

										nextGenOrderNowFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that later is displayed in the screen.");
										nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
												ExtentColor.CYAN));

										commonMethods.switchContext("FLUTTER");

										FlutterElement closeIcon = find
												.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

										closeIcon.click();

									}

								} catch (Exception e) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										WebElement menuText = driver
												.findElement(By.xpath("//android.view.View[@name='Menu']"));

										System.out.println(menuText);

										System.out.println(
												"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
												ExtentColor.CYAN));

									} catch (Exception e2) {

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
												ExtentColor.CYAN));

									}

								}

							}
						}

					} else {

						try {

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(6000);

							WebElement deliveryText = driver
									.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

							commonMethods.switchContext("FLUTTER");

							FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

							deliveryOrderTypeText = deliveryText1.getText();

							boolean equalsIgnoreCase = localConfigDeliveryText.equalsIgnoreCase(deliveryOrderTypeText);

							if (equalsIgnoreCase == true) {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								deliveryText.click();

								nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the order now and displayed texts is "
												+ deliveryOrderTypeText + " response text is : "
												+ localConfigDeliveryText + " matching.",
										ExtentColor.CYAN));

								// Text matches

							} else {

								commonMethods.switchContext("NATIVE_APP");

								deliveryText.click();

								nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the order now and displayed texts is "
												+ deliveryOrderTypeText + " response text is : "
												+ localConfigDeliveryText + " not matching.",
										ExtentColor.CYAN));

								// text mismatches

							}

							address.addresss();

							if (laterOrder.equalsIgnoreCase("true")) {

								try {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									WebElement laterLabel = driver.findElement(
											By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

									commonMethods.switchContext("FLUTTER");

									FlutterElement laterLabel1 = find.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

									laterOrderTimeText = laterLabel1.getText();

									boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

									if (laterLabelComparison == true) {

										laterLabel1.click();

										nextGenOrderNowFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that alert appears");

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
														+ laterText + "later config text : " + laterOrderTimeText
														+ "matching",
												ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

									} else {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										// To fail that later label text is not matching

										laterLabel.click();

										nextGenOrderNowFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that alert appears");

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
														+ laterText + "later config text : " + laterOrderTimeText
														+ " not matching",
												ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
									}

								} catch (Exception e) {

									try {

										commonMethods.switchContext("NATIVE_APP");
										Thread.sleep(5000);

										WebElement asapTextXpath = driver
												.findElement(By.xpath(orderNowLocators.ORDER_ASAP_TEXT_VKL));

										if (asapTextXpath.isDisplayed()) {

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
												ExtentColor.CYAN));

									} catch (Exception e1) {

										System.out.println(
												" Later is only displayed where as Later is only configured on the back end ");

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
												ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
									}
								}

							} else {

								commonMethods.switchContext("NATIVE_APP");

								try {

									Thread.sleep(6000);

									WebElement laterLabel = driver.findElement(
											By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

									if (laterLabel.isDisplayed()) {
										// To fail the test case.

										nextGenOrderNowFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that later is displayed in the screen.");
										nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
												ExtentColor.CYAN));

										commonMethods.switchContext("FLUTTER");

										FlutterElement closeIcon = find
												.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

										closeIcon.click();

									}

								} catch (Exception e) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										WebElement menuText = driver
												.findElement(By.xpath("//android.view.View[@name='Menu']"));

										System.out.println(menuText);

										System.out.println(
												"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
												ExtentColor.CYAN));

									} catch (Exception e2) {

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
												ExtentColor.CYAN));

									}

								}

							}

						} catch (Exception e) {

							nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
									ExtentColor.CYAN));
						}

					}

				} else {

					// take out later is not configured.
					nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
							ExtentColor.CYAN));

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the back end",
					ExtentColor.CYAN));
		}

	}

	public static void ngaOrderNowLoggedInDeliveryLaterSideDrawerConfigured() throws Throwable {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();

		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		merchantId = deliveryFlowConfiguration.get(8);

		storeCode = deliveryFlowConfiguration.get(13);

		storeCode = deliveryFlowConfiguration.get(13);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		String state = storeName.get(110);

		String country = storeName.get(111);

		Thread.sleep(6000);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		String localConfigDeliveryText = deliveryFlowConfiguration.get(38);

		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfigured
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfigured001
		 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
		 */

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfigured001 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfigured001");
		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfigured002 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfigured002");
		ExtentTest nextGenOrderNowFlowWithDeliveryLaterConfigured003 = test
				.createNode("nextGenOrderNowFlowWithDeliveryLaterConfigured003");

		// To get the dashboard title text

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		try {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find
					.byValueKey(dashBoardLocators.DASHBOARD_SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithDeliveryLaterConfigured001.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryLaterConfigured001 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithDeliveryLaterConfigured001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfigured
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfigured002
			 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
			 */

			// To get the title of the order now screen.

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithDeliveryLaterConfigured002.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithDeliveryLaterConfigured002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryLaterConfigured002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			commonMethods.elementFoundOrNotDontAllowNativePopUp();

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfigured
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfigured003
			 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithDeliveryLaterConfigured003.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : "
							+ dashboardTitleVkText,
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			commonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "ORDER NOW");

			commonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the ordernow screen.
			 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfigured_003
			 * @author GaneshKumarSelvaraj & Lalith Kishore Ravi
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");
				String laterOrder = storeResponse1.optString("use_eta");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				System.out.println(" delivery label text : " + deliveryResponseLabelText);

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);
				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
				String corpShortCodeNumberConfiguration = appConfiguration.get(5);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				try {

					commonMethods.scrollDownAndClick(desiredStoreName);

					// To verify the Configured order type.

					if (deliveryResponse.equalsIgnoreCase("true")) {

						if (!deliveryResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = deliveryResponseLabelText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								/////////////////////////////////////////////////////////////// ADDRESS SCRIPT
								/////////////////////////////////////////////////////////////// ////////////////////////////

								Thread.sleep(5000);

								address.addresss();

								Thread.sleep(5000);

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(5000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find.byValueKey("order_asap_type_items_later");

										String laterlabelText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterlabelText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterlabelText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterlabelText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
										}

									} catch (Exception e) {

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the App level",
															ExtentColor.CYAN));
										}

									} catch (Exception e) {
										// Asap working fine.

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the App level",
												ExtentColor.CYAN));
									}

								}

							} catch (Exception E) {

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(5000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find.byValueKey("order_asap_type_items_later");

										String laterlabelText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterlabelText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterlabelText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterlabelText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the App level",
															ExtentColor.CYAN));
										}

									} catch (Exception e) {
										// Asap working fine.

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the App level",
												ExtentColor.CYAN));
									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = localConfigDeliveryText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ localConfigDeliveryText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ localConfigDeliveryText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(5000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(orderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenOrderNowFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the App level",
															ExtentColor.CYAN));
										}

									} catch (Exception e) {
										// Asap working fine.

										nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the App level",
												ExtentColor.CYAN));
									}

								}

							} catch (Exception e) {

								nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the app level.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out later is not configured.
						nextGenOrderNowFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the app level.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenOrderNowFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryLaterConfigured003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the App level",
					ExtentColor.CYAN));
		}

	}

	/**
	 * @Class_Name NGAOrderNowGuest
	 * @Method_Name integratedMethods
	 * @Description Contains Menu,capacity management,basket,checkout,payment
	 *              methods integrated in a signle method
	 * @return void
	 * @author Lalith kishore Ravi
	 */

	private static void integratedMethods(String orderType, String orderTime) throws Throwable {

		boolean jkCafeRecommendedMenuEnabledorNot = commonMethods.jkCafeRecommendedMenuEnabledorNot();

		orderId = APIMethods.orderId();

		BaseClass baseClass = new BaseClass();

		List<String> menuItem = baseClass.menuItem();

		String string = menuItem.get(1);

		int pos = Integer.parseInt(string);

		String string1 = menuItem.get(2);

		int position = Integer.parseInt(string1);

		String strings = menuItem.get(3);

		int pos1 = Integer.parseInt(strings);

		String strings1 = menuItem.get(4);

		int position1 = Integer.parseInt(strings1);

		if (jkCafeRecommendedMenuEnabledorNot == true) {

			pos1 = pos1 + 1;
			pos = pos + 1;
			position = position + 1;
			position1 = position1 + 1;
		}

		List<String> deliveryOrderTypeWithOrderTime = APIMethods.deliveryOrderTypeWithOrderTime();

		boolean deliveryAsap = deliveryOrderTypeWithOrderTime.contains("ASAP");

		List<String> curbsideOrderTypeWithOrderTime = APIMethods.curbsideOrderTypeWithOrderTime();

		boolean curbsideAsap = curbsideOrderTypeWithOrderTime.contains("ASAP");

		List<String> takeoutOrderTypeWithOrderTime = APIMethods.takeoutOrderTypeWithOrderTime();

		boolean takeoutAsap = takeoutOrderTypeWithOrderTime.contains("ASAP");

		if (deliveryAsap == false) {

			reOrder.laterCapacityManagement();

		} else if (takeoutAsap == false || curbsideAsap == false) {

			CapacityManagement.ngaCapacityManagement();
		}

		MenuApi.menuApi(pos, position, orderId);

		double discountValue = Basket.ngaBasket(orderType, orderTime, orderId);

//		Basket.deleteItem(orderId);

		Thread.sleep(6000);

		Checkout.ngaCheckout(orderId);

		singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

		splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

		Thread.sleep(3000);
	}
}
