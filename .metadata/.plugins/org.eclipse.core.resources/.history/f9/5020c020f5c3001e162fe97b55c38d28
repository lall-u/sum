package com.features;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.TimeUnit;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.BasketLocators;
import com.locators.LocationLocators;
import com.locators.MenuScreenLocators;
import com.locators.SignInLocators;

import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import io.appium.java_client.ios.IOSTouchAction;
import org.openqa.selenium.remote.DesiredCapabilities;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.remote.MobileCapabilityType;
import java.net.URL;

public class MenuApi extends BaseClass {

	static CommonMethods commonMethods = new CommonMethods();

	static AppLaunchAndLandingScreen appLaunchAndLandingScreen = new AppLaunchAndLandingScreen();

	static BasketLocators basketLocators = new BasketLocators();

	static String itemNames;

	static String optStringActive;

	static JSONObject optJSONObjectActive;

	static String optStringSubMenuName;

	static String optStringSubMenuIsSoldout;

	static String givenStoreCode = "NGAHS01";

	static String sizeName;

	static String price;

	static int parseIntActive;

	static MenuScreenLocators menuScreenLocators = new MenuScreenLocators();

	static LocationLocators locationLocators = new LocationLocators();

	static SignInLocators signInLocators = new SignInLocators();

	static HolidayHours holidayHours = new HolidayHours();

	static ArrayList<String> subMenuTrue = new ArrayList<>();

	static ArrayList<String> soldOut = new ArrayList<>();

	static ArrayList<String> priceParam = new ArrayList<>();

	static ArrayList<String> sizeParam = new ArrayList<>();

	static ArrayList<String> subMenuPrice = new ArrayList<>();

	static ArrayList<String> hierarchyTypes = new ArrayList<>();

	static int subMenuTrueSize;

	static int optJSONArraySubMenuItemsLength;

	static String optStringAlcohol;

	static JSONArray optJSONArrayPrices;

	static JSONArray optJSONArrayOptionGroups;

	static JSONArray optJSONArrayPizzaGroups;

	static long optJSONArrayOptionGroupsObjectMax;

	static String optStringWholeGroupName;

	static String optStringLeftGroupName;

	static String optStringRightGroupName;

	static String optStringAllowDoublingPizza;

	static ArrayList<String> menuLists = new ArrayList<>();

	static int menuLength;

	static JSONArray optJSONArrayMenu;

	static String storeNamesMenu;

	static int parseIntActivee;

	static ArrayList<String> optJSONArrayOptionGroupsObjectNameTrue = new ArrayList<>();

	static String sizePrize;

	static String optStringTobacco;

	static String stringSubMenuName;

	static String subMenuIsSoldout;

	static String stringActive;

	static JSONArray jsonArrayOptionGroups;

	static JSONObject jsonObjectActive;

	static String optionGroupName;

	static JSONObject optionGroupObject;

	static ArrayList<String> optionGroup = new ArrayList<>();

	static ArrayList<String> isDefaultList = new ArrayList<>();

	static ArrayList<String> descriptionList = new ArrayList<>();

	static ArrayList<String> toppingsNameMatch = new ArrayList<>();

	static boolean storeInfoScreenTitleTextContainsVk;

	static boolean menuScreenTitle1TextContainsVk;

	static JSONArray subMenuPoints;

	static String left;

	static String right;

	static JSONArray optJSONArrayOptionGroupsObjectSizeConditions;

	static String specialInstructionsEnabled;

	static String specialInstructionsNotesLimit;

	static String specialInstructionsEnabledSubString;

	static String specialInstructionsNotesLabel;

	static ArrayList<String> levelsList = new ArrayList<>();

	static String TakeoutOrderType = "Take out";
	static String CurbsideOrderType = "curbside";
	static String DeliveryrderType = "delivery";

	static String ASAPOrderTime = "ASAP";
	static String LaterOrderTime = "later";

	/**
	 * @Class_Name MenuApi
	 * @Method_Name menuApi
	 * @Description Contains code to execute the test scripts for Menu, sub menu &
	 *              Item quantity screen
	 * @return void
	 * @author Lalith Kishore Ravi
	 * @throws Exception
	 */
	@Test
	public static void menuApi(String OrderType, String OrderTime) throws Exception {

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/NGAHS01/menu/tier?";
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");
		paramsMenu.put("include_combo", "false");
		paramsMenu.put("merchant_id", "60019");
		paramsMenu.put("provider", "px");
//		paramsMenu.put("order_date", "11-01-2024");
//		paramsMenu.put("eta", "5.00 am");

		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();
		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");
		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

		optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		menuLength = optJSONArrayMenu.length();

		JSONArray hierarchy = jObjectMenu.optJSONArray("hierarchy");

//		DesiredCapabilities caps = new DesiredCapabilities();
//		caps.setCapability(MobileCapabilityType.DEVICE_NAME, "iPhone X NGA");
//		caps.setCapability(MobileCapabilityType.PLATFORM_NAME, "iOS");
//		caps.setCapability(MobileCapabilityType.PLATFORM_VERSION, "15.7.1");
//		caps.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
//		caps.setCapability("bundleId", "com.paytronix.nexgenfl");
//		caps.setCapability(MobileCapabilityType.UDID, "FB544EF5-4FD7-45B9-B525-3C746378DE95");
//		caps.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, "300");
//
//		driver = new IOSDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), caps);
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/"
				+ givenStoreCode + "?";
		Map<String, String> paramsRestaurant = new HashMap<>();
		paramsRestaurant.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

		RequestSpecification httpRequestRestaurant = io.restassured.RestAssured.given();

		RequestSpecification responseBodyRestaurant = httpRequestRestaurant.queryParams(paramsRestaurant);

		Response responseRestaurant = responseBodyRestaurant.get("");

		JSONObject jObjectRestaurant = new JSONObject(responseRestaurant.body().asString());

		specialInstructionsEnabled = jObjectRestaurant.optString("allow_notes");

		specialInstructionsNotesLabel = jObjectRestaurant.optString("notes_label");

		specialInstructionsEnabledSubString = specialInstructionsNotesLabel.substring(0, 20).toLowerCase();

		specialInstructionsNotesLimit = jObjectRestaurant.optString("notes_limit");

		test = extent.createTest(nameofCurrMethod).assignAuthor(author).assignDevice(deviceName)
				.assignCategory("Launch And Splashscreen");

		FlutterFinder find = new FlutterFinder(driver);

		ExtentTest nextGenMenuScreen001 = test.createNode("nextGenMenuScreen_001");

//		if (menuLength > 0) {
//
//			commonMethods.switchContext("FLUTTER");
//
//			FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);
//
//			String menuScreenTitleTextVk = menuScreenTitleVk.getText();
//
//			nextGenMenuScreen001.info(MarkupHelper
//					.createLabel(" Title of the menu screen is : " + menuScreenTitleTextVk, ExtentColor.CYAN));
//
//			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
//					" Menu screen is : " + menuScreenTitleTextVk);
//
//			FlutterElement menuScreenStoreNameVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_NAME_VK);
//
//			String menuScreenStoreNameTextVk = menuScreenStoreNameVk.getText();
//
//			nextGenMenuScreen001.info(MarkupHelper
//					.createLabel(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk, ExtentColor.CYAN));
//
//			FlutterElement menuScreenStoreAddressVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ADDRESS_VK);
//
//			String menuScreenStoreAddressTextVk = menuScreenStoreAddressVk.getText();
//
//			nextGenMenuScreen001.info(MarkupHelper.createLabel(
//					" Store address text in the menu screen is : " + menuScreenStoreAddressTextVk, ExtentColor.CYAN));
//
//			FlutterElement menuScreenStoreZipcodeVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ZIPCODE_VK);
//
//			String menuScreenStoreZipcodeTextVk = menuScreenStoreZipcodeVk.getText();
//
//			nextGenMenuScreen001.info(MarkupHelper.createLabel(
//					" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk, ExtentColor.CYAN));
//
//			FlutterElement storeDetailsButtonVk = find.byValueKey(menuScreenLocators.STORE_DETAILS_BUTTON_VK);
//
//			String storeDetailsButtonTextVk = storeDetailsButtonVk.getText();
//
//			nextGenMenuScreen001.info(MarkupHelper.createLabel(" Details button text is : " + storeDetailsButtonTextVk,
//					ExtentColor.CYAN));
//
////			storeDetailsButtonVk.click();
////
////			FlutterElement storeInfoScreenTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);
////
////			String storeInfoScreenTitleTextVk = storeInfoScreenTitleVk.getText();
////
////			storeInfoScreenTitleTextContainsVk = storeInfoScreenTitleTextVk.toLowerCase().contains("store");
////
////			Assert.assertEquals(storeInfoScreenTitleTextContainsVk, true,
////					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
////							+ storeInfoScreenTitleTextVk);
////
////			nextGenMenuScreen001.info(MarkupHelper.createLabel(
////					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
////							+ storeInfoScreenTitleTextVk,
////					ExtentColor.CYAN));
////
////			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
////					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
////							+ storeInfoScreenTitleTextVk);
////
////			commonMethods.switchContext("FLUTTER");
////
////			Thread.sleep(3000);
////
////				holidayHours.holidayHours();
////
////			FlutterElement storeInfoScreenBackNavigationVk = find
////					.byValueKey(locationLocators.STOREINFO_SCREEN_BACKNAVIGATION_VKL);
////
////			storeInfoScreenBackNavigationVk.click();
//
//			FlutterElement menuScreenTitle1Vk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);
//
//			String menuScreenTitle1TextVk = menuScreenTitle1Vk.getText();
//
//			menuScreenTitle1TextContainsVk = menuScreenTitle1TextVk.toLowerCase().contains("menu");
//
//			Assert.assertEquals(menuScreenTitle1TextContainsVk, true,
//					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
//							+ menuScreenTitle1TextVk);
//
//			nextGenMenuScreen001.info(MarkupHelper.createLabel(
//					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
//							+ menuScreenTitle1TextVk,
//					ExtentColor.CYAN));
//
//			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
//					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
//							+ menuScreenTitle1TextVk);
//
//		}

		processHierarchyAndRetrieveNames(hierarchy, optJSONArrayMenu, OrderType, OrderTime);

	}

	private static void processHierarchyAndRetrieveNames(JSONArray hierarchyArray, JSONArray menuArray,
			String OrderType, String OrderTime) throws Exception {

		FlutterFinder find = new FlutterFinder(driver);

		ExtentTest nextGenMenuScreen001 = test.createNode("nextGenMenuScreen_001");

		for (int i = 0; i < 1; i++) {

			JSONObject hierarchyObject = hierarchyArray.getJSONObject(i);

			if (hierarchyObject.has("type")) {
				String type = hierarchyObject.getString("type");

				if (type.contains("group")) {
					String name = hierarchyObject.getString("name");

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(1500);

					By targetElementLocator = By.xpath(
							"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + name.toLowerCase() + "'" + ")]");

					boolean elementFound = false;

					while (!elementFound) {

						try {

							WebElement element = driver.findElement(targetElementLocator);

							Thread.sleep(1500);

							if (element.isDisplayed()) {

								element.click();

								String typeGroupTextVk = element.getText();

							} else {

								nextGenMenuScreen001.info(
										MarkupHelper.createLabel(" Group name not displayed  ", ExtentColor.CYAN));
							}
						} catch (NoSuchElementException e2) {

							nextGenMenuScreen001
									.info(MarkupHelper.createLabel(" Group name not displayed  ", ExtentColor.CYAN));
						}

					}
					if (!elementFound) {

					}

					commonMethods.switchContext("FLUTTER");

					Thread.sleep(1500);
				}
			}

			if (hierarchyObject.has("id")) {

				String hierarchyId = hierarchyObject.getString("id");

				for (int t = 0; t < 1; t++) {

					JSONObject menuItem = menuArray.getJSONObject(t);

					if (menuItem.has("id")) {

						String menuId = menuItem.getJSONObject("id").getString("$id");

						if (hierarchyId.equals(menuId)) {

							String itemName = menuItem.getString("name");

							if (menuLength > 0) {

								JSONObject optJSONObjectMenu = optJSONArrayMenu.optJSONObject(t);

								String canOrderMenu = optJSONObjectMenu.optString("can_order");

								if (canOrderMenu == "true") {

									itemNames = optJSONObjectMenu.optString("name");

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(1500);

									int maxScrollAttempts3 = 5;

									if (menuArray.length() < 4) {

										By targetElementLocator3 = By.xpath(
												"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
														+ "'" + itemName.toLowerCase() + "'" + ")]");
										for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
											try {
												WebElement element = driver.findElement(targetElementLocator3);
												if (element.isDisplayed()) {

													break;
												}
											} catch (Exception e) {
											}

										}
									}

									menuScroll();

									FlutterElement menuScreenVk = find
											.byValueKey(menuScreenLocators.MENU_SCREEN_LIST_VK + itemName);

									String menuScreenTextVk = menuScreenVk.getText();

									if (menuScreenTextVk.length() > 21) {

										String menuScreenTextSubStringVk = menuScreenTextVk.substring(0, 21);

										boolean menuScreenTextSubStringContainsVk = itemName
												.contains(menuScreenTextSubStringVk);

										Assert.assertEquals(menuScreenTextSubStringContainsVk, true,
												" Validated that the index : " + i + " name in the API menu & the " + i
														+ " name in the menu are same ");

									} else {

										Assert.assertEquals(itemName, menuScreenTextVk,
												" Validated that the index : " + i + " name in the API menu & the " + i
														+ " name in the menu are same ");

									}

									nextGenMenuScreen001.info(MarkupHelper.createLabel(" Validated that the index : "
											+ i + " name in the API menu & the " + i + " name in the menu are same ",
											ExtentColor.CYAN));

									menuScreenVk.click();

								}

								else {

									nextGenMenuScreen001.info(MarkupHelper.createLabel(
											" The store name which is listed in API but not listed in the menu screen is : "
													+ itemName,
											ExtentColor.CYAN));
								}

								ExtentTest nextGenSubMenuScreen001 = test.createNode("nextGenSubMenuScreen_001");

								commonMethods.switchContext("FLUTTER");

								Thread.sleep(1500);

								FlutterElement subMenuScreenTitleVk = find
										.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_TITLE_VK);

								String subMenuScreenTitleTextVk = subMenuScreenTitleVk.getText();

								nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
										" The title of the sub menu screen " + subMenuScreenTitleTextVk,
										ExtentColor.CYAN));

								nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
										" Sub menu screen " + subMenuScreenTitleTextVk);

								if (subMenuScreenTitleTextVk.length() > 22) {

									String subMenuScreenTitleTextSubStringVk = subMenuScreenTitleTextVk.substring(0,
											21);

									boolean subMenuScreenTitleTextSubStringContainsVk = itemName
											.contains(subMenuScreenTitleTextSubStringVk);

									Assert.assertEquals(subMenuScreenTitleTextSubStringContainsVk, true,
											" Validated that the menu item name & sub menu header is same ");

								}

								else {

									Assert.assertEquals(itemName, subMenuScreenTitleTextVk,
											" Validated that the menu item name & sub menu header is same ");
								}

								nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
										" Validated that the menu item name & sub menu header is same ",
										ExtentColor.CYAN));

								JSONArray optJSONArraySubMenuItems = optJSONObjectMenu.optJSONArray("items");

								int optJSONArraySubMenuItemsLength = optJSONArraySubMenuItems.length();

								if (optJSONArraySubMenuItemsLength > 0) {

									subMenuTrue.clear();

									soldOut.clear();

									for (int j = 0; j < optJSONArraySubMenuItemsLength; j++) {

										optJSONObjectActive = optJSONArraySubMenuItems.optJSONObject(j);

										optStringActive = optJSONObjectActive.optString("active");

										parseIntActive = Integer.parseInt(optStringActive);

										optStringSubMenuName = optJSONObjectActive.optString("name");

										optStringSubMenuIsSoldout = optJSONObjectActive.optString("is_sold_out");

										if (canOrderMenu == "true" && parseIntActive == 1) {

											soldOut.add(optStringSubMenuIsSoldout);

											subMenuTrue.add(optStringSubMenuName);

											subMenuTrueSize = subMenuTrue.size();

											optJSONArrayPrices = optJSONObjectActive.optJSONArray("prices");

										}
									}
									if (subMenuTrueSize > 0) {

										for (int n = 0; n < 1; n++) {

											if (canOrderMenu == "true" && parseIntActive == 1) {

												if (n >= 1) {

													subMenuScroll();

												}

											}

											FlutterElement subMenuScreenItemVk = find
													.byValueKey("sub_menu_item_" + n + "_name");

											String subMenuScreenItemTextVk = subMenuScreenItemVk.getText();

											Assert.assertEquals(subMenuTrue.get(n), subMenuScreenItemTextVk,
													" Validated that the index : " + n
															+ " name in the API sub menu & the " + n
															+ " name in the sub menu are same ");

											nextGenSubMenuScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the index : " + n
															+ " name in the API sub menu & the " + n
															+ " name in the sub menu are same ");

											JSONObject optJSONObjectPrice = optJSONArraySubMenuItems.optJSONObject(n);

											subMenuPoints = optJSONObjectPrice.optJSONArray("prices");

											int subMenuPointsLength = subMenuPoints.length();

											sizeParam.clear();

											priceParam.clear();

											isDefaultList.clear();

											descriptionList.clear();

											for (int p = 0; p < subMenuPointsLength; p++) {

												JSONObject subMenuPointsObject = subMenuPoints.optJSONObject(p);

												String sizeName = subMenuPointsObject.optString("name");

												String price = subMenuPointsObject.optString("price");

												String isDefault = subMenuPointsObject.optString("is_default");

												String description = subMenuPointsObject.optString("description");

												descriptionList.add(description);

												isDefaultList.add(isDefault);

												sizeParam.add(sizeName);

												priceParam.add(price);

											}

											subMenuPrice.clear();

											for (int k = 0; k < subMenuPointsLength; k++) {

												if (subMenuPointsLength == 0) {

													if (sizeParam.get(k).length() == 0) {

														nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
																" The price is null in the index : " + n,
																ExtentColor.CYAN));

													} else {

														nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
																" The price is null in the index : " + n,
																ExtentColor.CYAN));
													}
												}

												else {

													FlutterElement subMenuScreenItemSizeVk = find
															.byValueKey("sub_menu_item_" + n + "_size_" + k);

													String subMenuScreenItemSizeTextVk = subMenuScreenItemSizeVk
															.getText();

													nextGenSubMenuScreen001
															.info(MarkupHelper.createLabel(
																	" The item size and price in the index : " + k
																			+ " is : " + subMenuScreenItemSizeTextVk,
																	ExtentColor.CYAN));

													if (sizeParam.get(k).length() == 0) {

														BigDecimal originalBigDecimal = new BigDecimal(
																priceParam.get(k));

														BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
																BigDecimal.ROUND_HALF_UP);

														String priceParamInt = roundedBigDecimal.toString();

														String sizePrize = "" + priceParamInt;

														boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
																.contains(sizePrize);

														nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
																" Validated the the size and price of the item : "
																		+ subMenuScreenItemTextVk + " in the index : "
																		+ k
																		+ " and the value of the size and price from the API in the index : "
																		+ k + " are same ",
																ExtentColor.CYAN));
													} else {

														BigDecimal originalBigDecimal = new BigDecimal(
																priceParam.get(k));

														BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
																BigDecimal.ROUND_HALF_UP);

														String priceParamInt = roundedBigDecimal.toString();

														String sizePrize = sizeParam.get(k) + " - " + priceParamInt;

														boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
																.contains(sizePrize);

														nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
																" Validated the the size and price of the item : "
																		+ subMenuScreenItemTextVk + " in the index : "
																		+ k
																		+ " and the value of the size and price from the API in the index : "
																		+ k + " are same ",
																ExtentColor.CYAN));
													}

													FlutterElement subMenuScreenItemPriceVk = find
															.byValueKey("sub_menu_item_" + n + "_size_" + k);

													String subMenuScreenItemPriceTextVk = subMenuScreenItemPriceVk
															.getText();

													nextGenSubMenuScreen001
															.info(MarkupHelper.createLabel(
																	" The item price in the index : " + n + " is : "
																			+ subMenuScreenItemPriceTextVk,
																	ExtentColor.CYAN));

													subMenuPrice.add(subMenuScreenItemPriceTextVk);
												}

												String description = optJSONObjectPrice.optString("description");

												FlutterElement subMenuScreenItemDescriptionVk = find
														.byValueKey("sub_menu_item_" + n + "_description");

												String subMenuScreenItemDescriptionTextVk = subMenuScreenItemDescriptionVk
														.getText();

												Assert.assertEquals(subMenuScreenItemDescriptionTextVk, description,
														" Validated that item description from the API is : "
																+ description + " and the description from the UI is : "
																+ subMenuScreenItemDescriptionTextVk + " are same ");

												nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
														" Validated that item description from the API is : "
																+ description + " and the description from the UI is : "
																+ subMenuScreenItemDescriptionTextVk + " are same ",
														ExtentColor.CYAN));
											}

											ExtentTest nextGenItemQuantityScreen001 = test
													.createNode("nextGenItemQuantityScreen_001");

											if (soldOut.get(n) == "false") {

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(1500);

												subMenuScreenItemVk.click();

												try {
													commonMethods.switchContext("NATIVE_APP");

													Thread.sleep(2500);

													boolean displayed2 = driver.findElement(By.xpath(
															menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_IOS_XPATH))
															.isDisplayed();

													commonMethods.switchContext("FLUTTER");

													Thread.sleep(1500);

													FlutterElement alcoholWarningTitleVk = find.byValueKey(
															menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);
													String alcoholWarningTitleTextVk = alcoholWarningTitleVk.getText();

													nextGenItemQuantityScreen001
															.info(MarkupHelper.createLabel(
																	" The alcohol or tobacco warning pop-up title is : "
																			+ alcoholWarningTitleTextVk,
																	ExtentColor.CYAN));
													nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
															takeScreenshot(driver),
															" Alcohol warning pop-up screenshot ");
													FlutterElement alcoholWarningDescriptionVk = find.byValueKey(
															menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);
													String alcoholWarningDescriptionTextVk = alcoholWarningDescriptionVk
															.getText();

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" The alcohol or tobacco warning pop-up description is : "
																	+ alcoholWarningDescriptionTextVk,
															ExtentColor.CYAN));
													FlutterElement alcoholWarningIUnderstandVk = find.byValueKey(
															menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);
													String alcoholWarningIUnderstandTextVk = alcoholWarningIUnderstandVk
															.getText();

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" The alcohol or tobacco warning pop-up button text is : "
																	+ alcoholWarningIUnderstandTextVk,
															ExtentColor.CYAN));
													alcoholWarningIUnderstandVk.click();
													FlutterElement alcoholWarningFooterButtonVk = find.byValueKey(
															menuScreenLocators.ALCOHOL_WARNING_POPUP_FOOTER_BUTTON_VK);
													String alcoholWarningFooterButtonTextVk = alcoholWarningFooterButtonVk
															.getText();

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" The alcohol or tobacco warning footer button text is : "
																	+ alcoholWarningFooterButtonTextVk,
															ExtentColor.CYAN));
													alcoholWarningFooterButtonVk.click();
													FlutterElement alcoholWarningTitleVk1 = find.byValueKey(
															menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);
													String alcoholWarningTitleTextVk1 = alcoholWarningTitleVk1
															.getText();
													Assert.assertEquals(alcoholWarningTitleTextVk,
															alcoholWarningTitleTextVk1,
															" Validated that the automatic alcohol or tobacco pop-up title and the title after tapping the footer button is same");

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" The alcohol warning pop-up title in automatic alcohol or tobacco pop-up is : "
																	+ alcoholWarningTitleTextVk
																	+ " and the title after tapping the footer button is : "
																	+ alcoholWarningTitleTextVk1 + " is same.",
															ExtentColor.CYAN));
													nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
															takeScreenshot(driver),
															" Alcohol or tobacco warning pop-up screenshot after tapping footer button ");
													FlutterElement alcoholWarningDescription1Vk = find.byValueKey(
															menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);
													String alcoholWarningDescriptionText1Vk = alcoholWarningDescription1Vk
															.getText();
													Assert.assertEquals(alcoholWarningDescriptionTextVk,
															alcoholWarningDescriptionText1Vk,
															" Validated that the automatic alcohol or tobacco pop-up description and the description after tapping the footer button is same");

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" The alcohol or tobacco warning pop-up description in automatic alcohol pop-up is : "
																	+ alcoholWarningTitleTextVk
																	+ " and the description after tapping the footer button is : "
																	+ alcoholWarningTitleTextVk1 + " is same.",
															ExtentColor.CYAN));
													FlutterElement alcoholWarningIUnderstand1Vk = find.byValueKey(
															menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);
													String alcoholWarningIUnderstandText1Vk = alcoholWarningIUnderstand1Vk
															.getText();
													Assert.assertEquals(alcoholWarningIUnderstandTextVk,
															alcoholWarningIUnderstandText1Vk,
															" Validated that the automatic alcohol or tobacco pop-up button text and the button text after tapping the footer button is same");

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" The alcohol or tobacco warning pop-up button text in automatic alcohol pop-up is : "
																	+ alcoholWarningIUnderstandTextVk
																	+ " and the button text after tapping the footer button is : "
																	+ alcoholWarningIUnderstandText1Vk + " is same.",
															ExtentColor.CYAN));
													alcoholWarningIUnderstand1Vk.click();

												} catch (Exception e) {

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															"Verified the alcohol popup doesn't appear which is in disabled in back end",
															ExtentColor.CYAN));

												}

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(1500);

												FlutterElement itemQuantityScreenTitleVk = find
														.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

												String itemQuantityScreenTitleTextVk = itemQuantityScreenTitleVk
														.getText();

												nextGenItemQuantityScreen001
														.info(MarkupHelper.createLabel(
																" Title of the item quantity screen is : "
																		+ itemQuantityScreenTitleTextVk,
																ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver),
														" Title of the item quantity screen is : "
																+ itemQuantityScreenTitleTextVk);

												if (subMenuTrue.get(n).length() > 22) {

													String itemQuantityScreenTitleTextSubStringVk = itemQuantityScreenTitleTextVk
															.substring(0, 15);

													Assert.assertEquals(
															subMenuTrue.get(n).contains(
																	itemQuantityScreenTitleTextSubStringVk),
															true,
															" Validated that the sub menu item name & item quantity title screen is same ");
												}

												else {

													Assert.assertEquals(subMenuTrue.get(n),
															itemQuantityScreenTitleTextVk,
															" Validated that the sub menu item name & item quantity title screen is same ");
												}

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" Validated that the sub menu item name & item quantity title screen is same ",
														ExtentColor.CYAN));

												FlutterElement itemQuantityScreenDescriptionVk = find.byValueKey(
														menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_DESCRIPTION_VK);

												String itemQuantityScreenDescriptionTextVk = itemQuantityScreenDescriptionVk
														.getText();

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" Description of the item quantity screen is : "
																+ itemQuantityScreenDescriptionTextVk,
														ExtentColor.CYAN));

												optionGroupsObjectScroll();

												FlutterElement itemQuantityScreenItemQuantityCountVk = find.byValueKey(
														menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

												String itemQuantityScreenItemQuantityCountTextVk = itemQuantityScreenItemQuantityCountVk
														.getText();

												int itemQuantityScreenItemQuantityCountIntVk = Integer
														.parseInt(itemQuantityScreenItemQuantityCountTextVk);

												FlutterElement itemQuantityScreenIncrementIconVk = find.byValueKey(
														menuScreenLocators.ITEM_QUANTITY_SCREEN_INCREMENT_ICON_VK);

												itemQuantityScreenIncrementIconVk.click();

												Thread.sleep(3000);

												FlutterElement itemQuantityScreenItemQuantityCount1Vk = find.byValueKey(
														menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

												String itemQuantityScreenItemQuantityCountText1Vk = itemQuantityScreenItemQuantityCount1Vk
														.getText();

												int itemQuantityScreenItemQuantityCountInt1Vk = Integer
														.parseInt(itemQuantityScreenItemQuantityCountText1Vk);

												Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt1Vk,
														itemQuantityScreenItemQuantityCountIntVk,
														" Validated that the value in the item quantity count after tapping increment button is : "
																+ itemQuantityScreenItemQuantityCountInt1Vk
																+ " which is higher than before tapping the increment button ");

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver),
														" Validated that the value in the item quantity count after tapping increment button is : "
																+ itemQuantityScreenItemQuantityCountInt1Vk
																+ " which is higher than before tapping the increment button ");

												FlutterElement itemQuantityScreenDecrementIconVk = find.byValueKey(
														menuScreenLocators.ITEM_QUANTITY_SCREEN_DECREMENT_ICON_VK);

												itemQuantityScreenDecrementIconVk.click();

												Thread.sleep(1500);

												FlutterElement itemQuantityScreenItemQuantityCount2Vk = find.byValueKey(
														menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

												String itemQuantityScreenItemQuantityCountText2Vk = itemQuantityScreenItemQuantityCount2Vk
														.getText();

												int itemQuantityScreenItemQuantityCountInt2Vk = Integer
														.parseInt(itemQuantityScreenItemQuantityCountText2Vk);

												Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt2Vk,
														itemQuantityScreenItemQuantityCountInt1Vk,
														" Validated that the value in the item quantity count after tapping decrement button is : "
																+ itemQuantityScreenItemQuantityCountText2Vk
																+ " which is lower than before tapping the decrement button ");

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver),
														" Validated that the value in the item quantity count after tapping decrement button is : "
																+ itemQuantityScreenItemQuantityCountText2Vk
																+ " which is lower than before tapping the decrement button ");

												JSONArray jsonArraySubMenuItems = optJSONObjectMenu
														.optJSONArray("items");

												int jsonArraySubMenuItemsLength = jsonArraySubMenuItems.length();

												JSONObject optJSONObjectPrice1 = optJSONArraySubMenuItems
														.optJSONObject(n);

												JSONArray subMenuPoints1 = optJSONObjectPrice1.optJSONArray("prices");

												String subMenuName = optJSONObjectPrice1.optString("name");

												if (subMenuPoints1 != null) {

													int subMenuPointsLength1 = subMenuPoints1.length();

													if (subMenuPointsLength1 > 1) {

														FlutterElement optionGroupNameVk = find.byValueKey(
																subMenuTrue.get(n).toLowerCase().replace(" ", "_")
																		+ "_size");

														String optionGroupNameTextVk = optionGroupNameVk.getText();

														String optionGroupNameTextReplaceVk = optionGroupNameTextVk
																.toLowerCase().replace(" ", "_");

														optionGroupNameVk.click();

														for (int d = 0; d < subMenuPointsLength1; d++) {

															JSONObject optJSONObjectPricesList = subMenuPoints1
																	.optJSONObject(d);

															String optStringSizeName = optJSONObjectPricesList
																	.optString("name");

															String optStringSizeNameReplace = optStringSizeName
																	.toLowerCase().replace(" ", "_");

															String optStringSizePrice = optJSONObjectPricesList
																	.optString("price");

															Double optStringSizePriceDouble = Double
																	.parseDouble(optStringSizePrice);

															String optStringIsDefault = optJSONObjectPricesList
																	.optString("is_default");

															if (optStringIsDefault.equalsIgnoreCase("false")) {

																nextGenItemQuantityScreen001.info(MarkupHelper
																		.createLabel(" The size option named : "
																				+ optStringSizeName
																				+ " is not set to default and it's not shown in the list of it and not selected in the UI ",
																				ExtentColor.CYAN));
															}

															else {

																nextGenItemQuantityScreen001.info(MarkupHelper
																		.createLabel(" The size option named : "
																				+ optStringSizeName
																				+ " is set to default and it's shown in the list of it and selected in the UI ",
																				ExtentColor.CYAN));

																FlutterElement optStringSizePriceCheckboxUI = find
																		.byValueKey(subMenuTrue.get(n).toLowerCase()
																				.replace(" ", "_") + "_size_"
																				+ optStringSizeNameReplace
																				+ "_checkbox");

																optStringSizePriceCheckboxUI.click();
															}

															Double optStringSizePriceInt = Double
																	.parseDouble(optStringSizePrice);

															FlutterElement optStringSizeNameUI = find.byValueKey(
																	subMenuTrue.get(n).toLowerCase().replace(" ", "_")
																			+ "_size_" + optStringSizeNameReplace);

															String optStringSizeNameTextUI = optStringSizeNameUI
																	.getText();

															Assert.assertEquals(optStringSizeName,
																	optStringSizeNameTextUI,
																	"Validated that the option name from API is : "
																			+ optStringSizeName
																			+ " and the option name in UI is : "
																			+ optStringSizeNameTextUI + " is same ");

															nextGenItemQuantityScreen001
																	.addScreenCaptureFromBase64String(
																			takeScreenshot(driver),
																			"Optional group name : "
																					+ optionGroupNameTextVk
																					+ " Screenshot ");

															if (optStringSizePriceDouble > 0) {

																FlutterElement optStringSizePriceUI = find
																		.byValueKey(subMenuTrue.get(n).toLowerCase()
																				.replace(" ", "_") + "_size_"
																				+ optStringSizeNameReplace + "_"
																				+ optStringSizePriceDouble);

																String optStringSizePriceTextUI = optStringSizePriceUI
																		.getText();

																String optStringSizePriceTextReplaceUI = optStringSizePriceTextUI
																		.replace("+", "").replace(" ", "");

																Double optStringSizePriceTextReplaceDoubleUI = Double
																		.parseDouble(optStringSizePriceTextReplaceUI);

																Assert.assertEquals(optStringSizePriceInt,
																		optStringSizePriceTextReplaceDoubleUI,
																		"Validated that the option price from API is : "
																				+ optStringSizePrice
																				+ " and the option price in UI is : "
																				+ optStringSizePriceTextUI
																				+ " is same ");

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				"Validated that the option price from API is : "
																						+ optStringSizePrice
																						+ " and the option price in UI is : "
																						+ optStringSizePriceTextUI
																						+ " is same ",
																				ExtentColor.CYAN));

																FlutterElement optStringSizePriceCheckboxUI = find
																		.byValueKey(subMenuTrue.get(n).toLowerCase()
																				.replace(" ", "_") + "_size_"
																				+ optStringSizeNameReplace
																				+ "_checkbox");

																optStringSizePriceCheckboxUI.click();

															} else {

																FlutterElement optStringSizePriceCheckboxUI = find
																		.byValueKey(subMenuTrue.get(n).toLowerCase()
																				.replace(" ", "_") + "_size_"
																				+ optStringSizeNameReplace
																				+ "_checkbox");

																optStringSizePriceCheckboxUI.click();
															}

															JSONArray optionGroupsArray = optJSONObjectPrice1
																	.optJSONArray("option_groups");

															for (int p = 0; p < optionGroupsArray.length(); p++) {

																JSONObject optionGroupsArrayObjectt = optionGroupsArray
																		.getJSONObject(p);

																if (optionGroupsArrayObjectt.has("size_conditions")) {

																	JSONArray optionGroupsArrayObject = optionGroupsArrayObjectt
																			.getJSONArray("size_conditions");

																	if (optionGroupsArrayObject != null
																			&& optionGroupsArrayObject.length() > 0) {

																		JSONArray pricesArray = optJSONObjectPrice1
																				.getJSONArray("prices");

																		for (int z = 0; z < optionGroupsArrayObject
																				.length(); z++) {

																			String sizeConditionParam = optionGroupsArrayObject
																					.getString(z);

																			if (optStringSizeNameTextUI
																					.equalsIgnoreCase(
																							sizeConditionParam)) {

																				for (int l = 0; l < pricesArray
																						.length(); l++) {

																					JSONObject price = pricesArray
																							.getJSONObject(l);

																					String priceName = price
																							.getString("name");

																					if (priceName.equals(
																							sizeConditionParam)) {

																						if (optionGroupsArray != null) {

																							JSONObject optJSONArrayOptionGroupsObject = optionGroupsArray
																									.optJSONObject(p);

																							String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																									.optString("name");

																							String optJSONArrayOptionGroupsObjectNameReplace = optJSONArrayOptionGroupsObjectName
																									.replace(" ", "_")
																									.toLowerCase();

																							String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																									.optString(
																											"multiselect");

																							long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																									.getLong("min");

																							String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																									.optString(
																											"quantities");

																							if (optJSONArrayOptionGroupsObject
																									.has("max")) {

																								optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																										.getLong("max");

																							} else {

																								optJSONArrayOptionGroupsObjectMax = 999;
																							}

																							FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																									.byValueKey(
																											subMenuTrue
																													.get(n)
																													.toLowerCase()
																													.replace(
																															" ",
																															"_")
																													+ "_"
																													+ optJSONArrayOptionGroupsObjectNameReplace);

																							String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																									.getText();

																							Assert.assertEquals(
																									optJSONArrayOptionGroupsObjectName,
																									optJSONArrayOptionGroupsObjectNameTextUI,
																									"Validated that the option group name from API is : "
																											+ optJSONArrayOptionGroupsObjectName
																											+ " and the option group name in UI is : "
																											+ optJSONArrayOptionGroupsObjectNameTextUI
																											+ " is same ");

																							nextGenItemQuantityScreen001
																									.info(MarkupHelper
																											.createLabel(
																													"Validated that the option group name from API is : "
																															+ optJSONArrayOptionGroupsObjectName
																															+ " and the option group name in UI is : "
																															+ optJSONArrayOptionGroupsObjectNameTextUI
																															+ " is same ",
																													ExtentColor.CYAN));

																							nextGenItemQuantityScreen001
																									.addScreenCaptureFromBase64String(
																											takeScreenshot(
																													driver),
																											"Optional group name : "
																													+ optJSONArrayOptionGroupsObjectNameTextUI
																													+ " Screenshot ");

																							scrollOptionsGroupDown(
																									optJSONArrayOptionGroupsObjectName);

																							optJSONArrayOptionGroupsObjectNameUI
																									.click();

																							if (optJSONArrayOptionGroupsObject
																									.has("options")) {

																								JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																										.optJSONArray(
																												"options");

																								if (optJSONArrayOptions != null) {

																									int optJSONArrayOptionsLength = optJSONArrayOptions
																											.length();

																									for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																										JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																												.optJSONObject(
																														f);

																										String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																												.optString(
																														"name");

																										String optJSONArrayOptionsObjectNameReplace = optJSONArrayOptionsObjectName
																												.toLowerCase()
																												.replace(
																														" ",
																														"_");

																										String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																												.optString(
																														"price");

																										String optStringIsDisabled = optJSONArrayOptionsObject
																												.optString(
																														"is_disabled");

																										String optStringIsDefaultSizeOpt = optJSONArrayOptionsObject
																												.optString(
																														"is_default");

																										itemQuantityScroll();

																										if (optStringIsDefaultSizeOpt
																												.equalsIgnoreCase(
																														"false")) {

																											nextGenItemQuantityScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	" The option name :  "
																																			+ optJSONArrayOptionsObjectName
																																			+ " is not set to default and it's not shown in the list of the option group name : "
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ " and it's not auto selected in the UI ",
																																	ExtentColor.CYAN));

																										} else {

																											nextGenItemQuantityScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	" The option name :  "
																																			+ optJSONArrayOptionsObjectName
																																			+ " is set to default and it's shown in the list of the option group name : "
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ " and it's auto selected in the UI ",
																																	ExtentColor.CYAN));

																											FlutterElement optionGroupObjectNameCheckboxVk = find
																													.byValueKey(
																															subMenuTrue
																																	.get(n)
																																	.toLowerCase()
																																	.replace(
																																			" ",
																																			"_")
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_checkbox");

																											optionGroupObjectNameCheckboxVk
																													.click();

																										}

																										if (optStringIsDisabled
																												.equalsIgnoreCase(
																														"false")) {

																											FlutterElement optionGroupObjectNameVk = find
																													.byValueKey(
																															subMenuTrue
																																	.get(n)
																																	.toLowerCase()
																																	.replace(
																																			" ",
																																			"_")
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace);

																											String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																													.getText();

																											Assert.assertEquals(
																													optionGroupObjectNameTextVk,
																													optJSONArrayOptionsObjectName,
																													"Validated that the option group name from API is : "
																															+ optionGroupObjectNameTextVk
																															+ " and the option group name in UI is : "
																															+ optJSONArrayOptionsObjectName
																															+ " in the index : "
																															+ f
																															+ " is same ");

																											nextGenItemQuantityScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	"Validated that the option group name from API is : "
																																			+ optionGroupObjectNameTextVk
																																			+ " and the option group name in UI is : "
																																			+ optJSONArrayOptionsObjectName
																																			+ " in the index : "
																																			+ f
																																			+ " is same ",
																																	ExtentColor.CYAN));

																											double optJSONArrayOptionsObjectPriceInt = Double
																													.parseDouble(
																															optJSONArrayOptionsObjectPrice);

																											double value = Double
																													.parseDouble(
																															optJSONArrayOptionsObjectPrice);

																											DecimalFormat decimalFormat = new DecimalFormat(
																													"0.00");

																											String optJSONArrayOptionsObjectPriceConcat = decimalFormat
																													.format(value);

																											if (optJSONArrayOptionsObjectPriceInt > 0) {

																												FlutterElement optionGroupObjectPriceVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectPrice);

																												String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																														.getText();

																												String optionGroupObjectPriceTextReplaceVk = optionGroupObjectPriceTextVk
																														.replace(
																																"+",
																																"")
																														.replace(
																																" ",
																																"");

																												Assert.assertEquals(
																														optionGroupObjectPriceTextReplaceVk,
																														optJSONArrayOptionsObjectPriceConcat
																																.replace(
																																		" ",
																																		""),
																														"Validated that the option group price from API is : "
																																+ optionGroupObjectPriceTextReplaceVk
																																+ " and the option group price in UI is : "
																																+ optJSONArrayOptionsObjectPriceConcat
																																+ "in the index : "
																																+ f
																																+ " is same ");

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		"Validated that the option group price from API is : "
																																				+ optionGroupObjectPriceTextReplaceVk
																																				+ " and the option group price in UI is : "
																																				+ optJSONArrayOptionsObjectPriceConcat
																																				+ "in the index : "
																																				+ f
																																				+ " is same ",
																																		ExtentColor.CYAN));

																											}

																											else {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" Price is null for the item : "
																																				+ subMenuTrue
																																						.get(n)
																																				+ " of option groups : "
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ " of the option : "
																																				+ optJSONArrayOptionsObjectNameReplace,
																																		ExtentColor.CYAN));
																											}

																											if ((optJSONArrayOptionGroupsObjectMin == 0
																													|| !optJSONArrayOptionGroupsObject
																															.has("min"))
																													&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option : "
																																				+ optionGroupObjectNameTextVk
																																				+ " is single selection optional field",
																																		ExtentColor.CYAN));

																												if (optJSONArrayOptionGroupsObjectQuantities == "true"
																														&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option : "
																																					+ optionGroupObjectNameTextVk
																																					+ " is single selection optional field has increment decrement button ",
																																			ExtentColor.CYAN));

																													FlutterElement optionCountVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountTextVk = optionCountVk
																															.getText();

																													long optionCountLongVk = Long
																															.parseLong(
																																	optionCountTextVk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" Before tapping increment and decrement button the count is : "
																																					+ optionCountLongVk,
																																			ExtentColor.CYAN));

																													if (optStringIsDefault
																															.equalsIgnoreCase(
																																	"true")) {

																														FlutterElement optionGroupObjectNameIncrementButtonVk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_decrement");

																														optionGroupObjectNameIncrementButtonVk
																																.click();

																													}

																													FlutterElement optionGroupObjectNameIncrementButtonVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_increment");

																													optionGroupObjectNameIncrementButtonVk
																															.click();

																													FlutterElement optionCount1Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountText1Vk = optionCount1Vk
																															.getText();

																													long optionCountLong1Vk = Long
																															.parseLong(
																																	optionCountText1Vk);

																													Assert.assertNotEquals(
																															optionCountTextVk,
																															optionCountText1Vk,
																															"Validated that after tapping increment button the count has been increased to : "
																																	+ optionCountText1Vk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			"Validated that after tapping increment button the count has been increased to : "
																																					+ optionCountText1Vk,
																																			ExtentColor.CYAN));

																													FlutterElement optionGroupObjectNameDecrementButtonVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_decrement");

																													optionGroupObjectNameDecrementButtonVk
																															.click();

																													FlutterElement optionCount2Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountText2Vk = optionCount2Vk
																															.getText();

																													long optionCountLong2Vk = Long
																															.parseLong(
																																	optionCountText2Vk);

																													Assert.assertEquals(
																															optionCountTextVk,
																															optionCountText2Vk,
																															"Validated that after tapping decrement button the count has been decreased to : "
																																	+ optionCountText2Vk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" After tapping decrement button the count is : "
																																					+ optionCountLong2Vk,
																																			ExtentColor.CYAN));

																													FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_increment");

																													optionGroupObjectNameIncrementButton1Vk
																															.click();

																													FlutterElement optionCount3Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountText3Vk = optionCount3Vk
																															.getText();

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" After tapping increment button the count is : "
																																					+ optionCountText3Vk,
																																			ExtentColor.CYAN));

																													if (optJSONArrayOptionGroupsObject
																															.has("max")) {

																														String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																																.optString(
																																		"max");

																														int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																.parseInt(
																																		optJSONArrayOptionGroupsObjectMaximum);

																														if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																- 1) {

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" Validated that after tapping the max limit of : "
																																							+ optJSONArrayOptionGroupsObjectMax
																																							+ " in this option group name : "
																																							+ optJSONArrayOptionGroupsObjectName
																																							+ " the below items are hidden ",
																																					ExtentColor.CYAN));

																															FlutterElement optionGroupObjectNameDecrementButton1Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_decrement");

																															optionGroupObjectNameDecrementButton1Vk
																																	.click();
																														}
																														if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																															
																															System.out
																																	.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);

																															FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_increment");

																															optionGroupObjectNameIncrementButton2Vk
																																	.click();
																														}
																													} else {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" There is no maximum condition for this option group : "
																																						+ optJSONArrayOptionGroupsObjectName,
																																				ExtentColor.CYAN));
																													}

																												}

																												else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																														&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option : "
																																					+ optionGroupObjectNameTextVk
																																					+ " is single selection optional field has checkbox ",
																																			ExtentColor.CYAN));

																													FlutterElement optionGroupObjectNameCheckboxVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_checkbox");

																													optionGroupObjectNameCheckboxVk
																															.click();

																													if (optJSONArrayOptionGroupsObject
																															.has("option_levels")) {
																														JSONObject optionLevels = optJSONArrayOptionGroupsObject
																																.getJSONObject(
																																		"option_levels");
																														String optionLevelsName = optionLevels
																																.getString(
																																		"name");

																														JSONArray optJSONArrayLevels = optionLevels
																																.optJSONArray(
																																		"levels");

																														if (optJSONArrayLevels != null) {

																															for (int a = 0; a < optJSONArrayLevels
																																	.length(); a++) {

																																JSONObject jsonObjectLevels = optJSONArrayLevels
																																		.getJSONObject(
																																				a);

																																levelsList
																																		.clear();

																																for (int j = 0; j < optJSONArrayLevels
																																		.length(); j++) {

																																	JSONObject jsonObjectLevelss = optJSONArrayLevels
																																			.getJSONObject(
																																					j);

																																	String levelsNames = jsonObjectLevelss
																																			.optString(
																																					"name");

																																	levelsList
																																			.add(levelsNames);

																																}

																																String levelsName = jsonObjectLevels
																																		.optString(
																																				"name");

																																String levelsNameReplace = levelsName
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_");

																																String levelsDefault = jsonObjectLevels
																																		.optString(
																																				"is_default");

																																if (levelsDefault
																																		.equalsIgnoreCase(
																																				"true")) {

																																	nextGenItemQuantityScreen001
																																			.info(MarkupHelper
																																					.createLabel(
																																							" The option name :  "
																																									+ optionGroupObjectNameTextVk
																																									+ " is set to default and it's not shown in the list of the option group name : "
																																									+ levelsName
																																									+ " and it's not auto selected in the UI ",
																																							ExtentColor.CYAN));

																																} else {

																																	nextGenItemQuantityScreen001
																																			.info(MarkupHelper
																																					.createLabel(
																																							" The option name :  "
																																									+ optionGroupObjectNameTextVk
																																									+ " is not set to default and it's shown in the list of the option group name : "
																																									+ levelsName
																																									+ " and it's auto selected in the UI ",
																																							ExtentColor.CYAN));

																																}

																																FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optJSONArrayOptionGroupsObjectNameReplace
																																						+ "_"
																																						+ optJSONArrayOptionsObjectNameReplace
																																						+ "_"
																																						+ "level_name");

																																String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																		.getText();

																																boolean levelsNameContains = levelsList
																																		.contains(
																																				optionGroupObjectNameOptionLevelsTextVk);

																																Assert.assertEquals(
																																		levelsNameContains,
																																		true,
																																		" Validated that the option levels name from the API and the option levels name from the UI is : "
																																				+ optionGroupObjectNameOptionLevelsTextVk
																																				+ " are same ");

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" Validated that the option levels name from the API and the option levels name from the UI is : "
																																								+ optionGroupObjectNameOptionLevelsTextVk
																																								+ " are same ",
																																						ExtentColor.CYAN));

																																FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optJSONArrayOptionGroupsObjectNameReplace
																																						+ "_"
																																						+ optJSONArrayOptionsObjectNameReplace
																																						+ "_rightarrow");

																																optionGroupObjectNameOptionLevelsForwardArrowVk
																																		.click();

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																						ExtentColor.CYAN));

																															}

																															FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_leftarrow");

																															optionGroupObjectNameOptionLevelsBackwardArrowVk
																																	.click();
																														}
																													}

																													if (optJSONObjectPrice1
																															.optJSONArray(
																																	"option_groups") != null) {

																														JSONArray optionGroups = optJSONObjectPrice1
																																.getJSONArray(
																																		"option_groups");

																														for (int g = 0; g < optionGroups
																																.length(); g++) {
																															JSONObject optionGroup = optionGroups
																																	.getJSONObject(
																																			g);

																															if (optionGroup
																																	.has("option_conditions")) {
																																JSONArray optionConditionsArray = optionGroup
																																		.getJSONArray(
																																				"option_conditions");

																																for (int h = 0; h < optionConditionsArray
																																		.length(); h++) {
																																	JSONArray optionCondition = optionConditionsArray
																																			.getJSONArray(
																																					h);

																																	for (int m = 0; m < optionCondition
																																			.length(); m++) {
																																		JSONObject condition = optionCondition
																																				.getJSONObject(
																																						m);

																																		String optionValue = condition
																																				.getString(
																																						"option_value");
																																		String optionGroupInCondition = condition
																																				.getString(
																																						"option_group");

																																		if (optionGroupObjectNameTextVk
																																				.equals(optionValue)) {

																																			String optionGroupName = optionGroup
																																					.getString(
																																							"name");

																																			String optionGroupNameLowerCase = optionGroupName
																																					.replace(
																																							" ",
																																							"_")
																																					.toLowerCase();

																																			String quantities = optionGroup
																																					.optString(
																																							"quantities");

																																			scrollOptionsGroupDown(
																																					optionGroupName);

																																			FlutterElement optionGroup1Vk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optionGroupNameLowerCase);

																																			optionGroup1Vk
																																					.click();

																																			itemQuantityScroll();

																																			if (optionGroup
																																					.has("options")) {

																																				JSONArray options = optionGroup
																																						.optJSONArray(
																																								"options");

																																				for (int j = 0; j < options
																																						.length(); j++) {

																																					JSONObject optionObject = options
																																							.getJSONObject(
																																									j);

																																					String optionsName = optionObject
																																							.optString(
																																									"name");

																																					String optionsNameLowerCase = optionsName
																																							.replace(
																																									" ",
																																									"_")
																																							.toLowerCase();

																																					String isDefault = optionObject
																																							.optString(
																																									"is_default");

																																					String isDisabled = optionObject
																																							.optString(
																																									"is_disabled");

																																					if (isDisabled == "false") {

																																						if (quantities == "true") {

																																							if (isDefault == "true") {

																																								FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optionGroupNameLowerCase
																																														+ "_"
																																														+ optionsNameLowerCase
																																														+ "_decrement");

																																								optionGroupObjectNameDecrementOptCVk
																																										.click();

																																							}

																																							FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_increment");

																																							optionGroupObjectNameIncrementOptCVk
																																									.click();

																																						} else if (quantities == "false") {

																																							if (isDefault == "true") {

																																								FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optionGroupNameLowerCase
																																														+ "_"
																																														+ optionsNameLowerCase
																																														+ "_checkbox");

																																								optionGroupObjectNameCheckboxOptCVk
																																										.click();

																																							}

																																							FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_checkbox");

																																							optionGroupObjectNameCheckboxOptCVk
																																									.click();

																																							if (optionGroup
																																									.has("option_levels")) {
																																								JSONObject optionLevels = optionGroup
																																										.getJSONObject(
																																												"option_levels");
																																								String optionLevelsName = optionLevels
																																										.getString(
																																												"name");

																																								JSONArray optJSONArrayLevels = optionLevels
																																										.optJSONArray(
																																												"levels");

																																								if (optJSONArrayLevels != null) {

																																									for (int a = 0; a < optJSONArrayLevels
																																											.length(); a++) {

																																										JSONObject jsonObjectLevels = optJSONArrayLevels
																																												.getJSONObject(
																																														a);

																																										levelsList
																																												.clear();

																																										for (int b = 0; b < optJSONArrayLevels
																																												.length(); b++) {

																																											JSONObject jsonObjectLevelss = optJSONArrayLevels
																																													.getJSONObject(
																																															b);

																																											String levelsNames = jsonObjectLevelss
																																													.optString(
																																															"name");

																																											levelsList
																																													.add(levelsNames);

																																										}

																																										String levelsName = jsonObjectLevels
																																												.optString(
																																														"name");

																																										String levelsNameReplace = levelsName
																																												.toLowerCase()
																																												.replace(
																																														" ",
																																														"_");

																																										String levelsDefault = jsonObjectLevels
																																												.optString(
																																														"is_default");

																																										if (levelsDefault
																																												.equalsIgnoreCase(
																																														"true")) {

																																											nextGenItemQuantityScreen001
																																													.info(MarkupHelper
																																															.createLabel(
																																																	" The option name :  "
																																																			+ optionGroupObjectNameTextVk
																																																			+ " is set to default and it's not shown in the list of the option group name : "
																																																			+ levelsName
																																																			+ " and it's not auto selected in the UI ",
																																																	ExtentColor.CYAN));

																																										} else {

																																											nextGenItemQuantityScreen001
																																													.info(MarkupHelper
																																															.createLabel(
																																																	" The option name :  "
																																																			+ optionGroupObjectNameTextVk
																																																			+ " is not set to default and it's shown in the list of the option group name : "
																																																			+ levelsName
																																																			+ " and it's auto selected in the UI ",
																																																	ExtentColor.CYAN));
																																										}

																																										FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																												.byValueKey(
																																														subMenuTrue
																																																.get(n)
																																																.toLowerCase()
																																																.replace(
																																																		" ",
																																																		"_")
																																																+ "_"
																																																+ optJSONArrayOptionGroupsObjectNameReplace
																																																+ "_"
																																																+ optJSONArrayOptionsObjectNameReplace
																																																+ "_"
																																																+ "level_name");

																																										String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																												.getText();

																																										boolean levelsNameContains = levelsList
																																												.contains(
																																														optionGroupObjectNameOptionLevelsTextVk);

																																										Assert.assertEquals(
																																												levelsNameContains,
																																												true,
																																												" Validated that the option levels name from the API and the option levels name from the UI is : "
																																														+ optionGroupObjectNameOptionLevelsTextVk
																																														+ " are same ");

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" Validated that the option levels name from the API and the option levels name from the UI is : "
																																																		+ optionGroupObjectNameOptionLevelsTextVk
																																																		+ " are same ",
																																																ExtentColor.CYAN));

																																										FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																												.byValueKey(
																																														subMenuTrue
																																																.get(n)
																																																.toLowerCase()
																																																.replace(
																																																		" ",
																																																		"_")
																																																+ "_"
																																																+ optJSONArrayOptionGroupsObjectNameReplace
																																																+ "_"
																																																+ optJSONArrayOptionsObjectNameReplace
																																																+ "_rightarrow");

																																										optionGroupObjectNameOptionLevelsForwardArrowVk
																																												.click();

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																																ExtentColor.CYAN));

																																									}

																																									FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_leftarrow");

																																									optionGroupObjectNameOptionLevelsBackwardArrowVk
																																											.click();
																																								}
																																							}

																																							if (optionGroup
																																									.has("max")) {

																																								String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																										.optString(
																																												"max");

																																								int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																										.parseInt(
																																												optJSONArrayOptionGroupsObjectMaximum);

																																								if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																										- 1) {

																																									nextGenItemQuantityScreen001
																																											.info(MarkupHelper
																																													.createLabel(
																																															" Validated that after tapping the max limit of : "
																																																	+ optJSONArrayOptionGroupsObjectMax
																																																	+ " in this option group name : "
																																																	+ optJSONArrayOptionGroupsObjectName
																																																	+ " the below items are hidden ",
																																															ExtentColor.CYAN));

																																									FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_checkbox");

																																									optionGroupObjectNameCheckbox1Vk
																																											.click();

																																								}

																																								if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																																									System.out
																																									.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																																									FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_checkbox");

																																									optionGroupObjectNameCheckbox1Vk
																																											.click();

																																								}

																																							} else {

																																								nextGenItemQuantityScreen001
																																										.info(MarkupHelper
																																												.createLabel(
																																														" There is no maximum condition for this option group : "
																																																+ optJSONArrayOptionGroupsObjectName,
																																														ExtentColor.CYAN));
																																							}

																																						}

																																					}
																																				}

																																				scrollOptionsGroupUpAndClick(
																																						optJSONArrayOptionGroupsObjectName);

																																				FlutterElement optionGroupObjectGroupVk = find
																																						.byValueKey(
																																								subMenuTrue
																																										.get(n)
																																										.toLowerCase()
																																										.replace(
																																												" ",
																																												"_")
																																										+ "_"
																																										+ optJSONArrayOptionGroupsObjectNameReplace);

																																				optionGroupObjectGroupVk
																																						.click();

																																				itemQuantityScroll();
																																			}
																																		}

																																		else {

																																			nextGenItemQuantityScreen001
																																					.info(MarkupHelper
																																							.createLabel(
																																									"No match found for option_value: "
																																											+ optionGroupObjectNameTextVk,
																																									ExtentColor.CYAN));
																																		}
																																	}
																																}

																															}

																														}

																													}

																													if (optJSONArrayOptionGroupsObject
																															.has("max")) {

																														String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																																.optString(
																																		"max");

																														int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																.parseInt(
																																		optJSONArrayOptionGroupsObjectMaximum);

																														if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																- 1) {

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" Validated that after tapping the max limit of : "
																																							+ optJSONArrayOptionGroupsObjectMax
																																							+ " in this option group name : "
																																							+ optJSONArrayOptionGroupsObjectName
																																							+ " the below items are hidden ",
																																					ExtentColor.CYAN));

																															FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_checkbox");

																															optionGroupObjectNameCheckbox1Vk
																																	.click();

																														}

																														if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																															System.out
																															.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																															FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_checkbox");

																															optionGroupObjectNameCheckbox1Vk
																																	.click();

																														}

																													} else {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" There is no maximum condition for this option group : "
																																						+ optJSONArrayOptionGroupsObjectName,
																																				ExtentColor.CYAN));
																													}

																												}
																											} else if (optJSONArrayOptionGroupsObjectMin == 1
																													&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option : "
																																				+ optionGroupObjectNameTextVk
																																				+ " is single selection Mandatory field",
																																		ExtentColor.CYAN));

																												if (optJSONArrayOptionGroupsObjectQuantities == "true"
																														&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option : "
																																					+ optionGroupObjectNameTextVk
																																					+ " is single selection Mandatory field has increment decrement button",
																																			ExtentColor.CYAN));

																													FlutterElement optionCountVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountTextVk = optionCountVk
																															.getText();

																													long optionCountLongVk = Long
																															.parseLong(
																																	optionCountTextVk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" Before tapping increment and decrement button the count is : "
																																					+ optionCountLongVk,
																																			ExtentColor.CYAN));
																													if (optStringIsDefault
																															.equalsIgnoreCase(
																																	"true")) {

																														FlutterElement optionGroupObjectNameIncrementButtonVk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_decrement");

																														optionGroupObjectNameIncrementButtonVk
																																.click();

																													}
																													FlutterElement optionGroupObjectNameIncrementButtonVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_increment");

																													optionGroupObjectNameIncrementButtonVk
																															.click();

																													FlutterElement optionCount1Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountText1Vk = optionCount1Vk
																															.getText();

																													long optionCountLong1Vk = Long
																															.parseLong(
																																	optionCountText1Vk);

																													Assert.assertNotEquals(
																															optionCountTextVk,
																															optionCountText1Vk,
																															"Validated that after tapping increment button the count has been increased to : "
																																	+ optionCountText1Vk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			"Validated that after tapping increment button the count has been increased to : "
																																					+ optionCountText1Vk,
																																			ExtentColor.CYAN));

																													FlutterElement optionGroupObjectNameDecrementButtonVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_decrement");

																													optionGroupObjectNameDecrementButtonVk
																															.click();

																													FlutterElement optionCount2Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountText2Vk = optionCount2Vk
																															.getText();

																													long optionCountLong2Vk = Long
																															.parseLong(
																																	optionCountText2Vk);

																													Assert.assertEquals(
																															optionCountTextVk,
																															optionCountText2Vk,
																															"Validated that after tapping decreased button the count has been decreased to : "
																																	+ optionCountText2Vk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" After tapping decrement button the count is : "
																																					+ optionCountLong2Vk,
																																			ExtentColor.CYAN));

																													FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_increment");

																													optionGroupObjectNameIncrementButton1Vk
																															.click();

																													FlutterElement optionCount3Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountText3Vk = optionCount3Vk
																															.getText();

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" After tapping increment button the count is : "
																																					+ optionCountText3Vk,
																																			ExtentColor.CYAN));
																													if (optJSONArrayOptionGroupsObject
																															.has("max")) {

																														String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																																.optString(
																																		"max");

																														int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																.parseInt(
																																		optJSONArrayOptionGroupsObjectMaximum);

																														if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																- 1) {

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" Validated that after tapping the max limit of : "
																																							+ optJSONArrayOptionGroupsObjectMax
																																							+ " in this option group name : "
																																							+ optJSONArrayOptionGroupsObjectName
																																							+ " the below items are hidden ",
																																					ExtentColor.CYAN));

																															FlutterElement optionGroupObjectNameDecrementButton1Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_decrement");

																															optionGroupObjectNameDecrementButton1Vk
																																	.click();
																														}
																														if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																															System.out
																															.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																															FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_increment");

																															optionGroupObjectNameIncrementButton2Vk
																																	.click();
																														}
																													} else {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" There is no maximum condition for this option group : "
																																						+ optJSONArrayOptionGroupsObjectName,
																																				ExtentColor.CYAN));
																													}

																												}

																												else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																														&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option : "
																																					+ optionGroupObjectNameTextVk
																																					+ " is single selection Mandatory field has checkbox",
																																			ExtentColor.CYAN));

																													FlutterElement optionGroupObjectNameCheckboxVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_checkbox");

																													optionGroupObjectNameCheckboxVk
																															.click();

																													if (optJSONArrayOptionGroupsObject
																															.has("option_levels")) {
																														JSONObject optionLevels = optJSONArrayOptionGroupsObject
																																.getJSONObject(
																																		"option_levels");
																														String optionLevelsName = optionLevels
																																.getString(
																																		"name");

																														JSONArray optJSONArrayLevels = optionLevels
																																.optJSONArray(
																																		"levels");

																														if (optJSONArrayLevels != null) {

																															for (int a = 0; a < optJSONArrayLevels
																																	.length(); a++) {

																																JSONObject jsonObjectLevels = optJSONArrayLevels
																																		.getJSONObject(
																																				a);

																																levelsList
																																		.clear();

																																for (int j = 0; j < optJSONArrayLevels
																																		.length(); j++) {

																																	JSONObject jsonObjectLevelss = optJSONArrayLevels
																																			.getJSONObject(
																																					j);

																																	String levelsNames = jsonObjectLevelss
																																			.optString(
																																					"name");

																																	levelsList
																																			.add(levelsNames);

																																}

																																String levelsName = jsonObjectLevels
																																		.optString(
																																				"name");

																																String levelsNameReplace = levelsName
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_");

																																String levelsDefault = jsonObjectLevels
																																		.optString(
																																				"is_default");

																																if (levelsDefault
																																		.equalsIgnoreCase(
																																				"true")) {

																																	nextGenItemQuantityScreen001
																																			.info(MarkupHelper
																																					.createLabel(
																																							" The option name :  "
																																									+ optionGroupObjectNameTextVk
																																									+ " is set to default and it's not shown in the list of the option group name : "
																																									+ levelsName
																																									+ " and it's not auto selected in the UI ",
																																							ExtentColor.CYAN));

																																} else {

																																	nextGenItemQuantityScreen001
																																			.info(MarkupHelper
																																					.createLabel(
																																							" The option name :  "
																																									+ optionGroupObjectNameTextVk
																																									+ " is not set to default and it's shown in the list of the option group name : "
																																									+ levelsName
																																									+ " and it's auto selected in the UI ",
																																							ExtentColor.CYAN));
																																}

																																FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optJSONArrayOptionGroupsObjectNameReplace
																																						+ "_"
																																						+ optJSONArrayOptionsObjectNameReplace
																																						+ "_"
																																						+ "level_name");

																																String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																		.getText();

																																boolean levelsNameContains = levelsList
																																		.contains(
																																				optionGroupObjectNameOptionLevelsTextVk);

																																Assert.assertEquals(
																																		levelsNameContains,
																																		true,
																																		" Validated that the option levels name from the API and the option levels name from the UI is : "
																																				+ optionGroupObjectNameOptionLevelsTextVk
																																				+ " are same ");

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" Validated that the option levels name from the API and the option levels name from the UI is : "
																																								+ optionGroupObjectNameOptionLevelsTextVk
																																								+ " are same ",
																																						ExtentColor.CYAN));

																																FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optJSONArrayOptionGroupsObjectNameReplace
																																						+ "_"
																																						+ optJSONArrayOptionsObjectNameReplace
																																						+ "_rightarrow");

																																optionGroupObjectNameOptionLevelsForwardArrowVk
																																		.click();

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																						ExtentColor.CYAN));

																															}

																															FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_leftarrow");

																															optionGroupObjectNameOptionLevelsBackwardArrowVk
																																	.click();
																														}
																													}
																													if (optJSONObjectPrice1
																															.optJSONArray(
																																	"option_groups") != null) {

																														JSONArray optionGroups = optJSONObjectPrice1
																																.getJSONArray(
																																		"option_groups");

																														for (int g = 0; g < optionGroups
																																.length(); g++) {
																															JSONObject optionGroup = optionGroups
																																	.getJSONObject(
																																			g);

																															if (optionGroup
																																	.has("option_conditions")) {
																																JSONArray optionConditionsArray = optionGroup
																																		.getJSONArray(
																																				"option_conditions");

																																for (int h = 0; h < optionConditionsArray
																																		.length(); h++) {
																																	JSONArray optionCondition = optionConditionsArray
																																			.getJSONArray(
																																					h);

																																	for (int m = 0; m < optionCondition
																																			.length(); m++) {
																																		JSONObject condition = optionCondition
																																				.getJSONObject(
																																						m);

																																		String optionValue = condition
																																				.getString(
																																						"option_value");
																																		String optionGroupInCondition = condition
																																				.getString(
																																						"option_group");

																																		if (optionGroupObjectNameTextVk
																																				.equals(optionValue)) {
																																			String optionGroupName = optionGroup
																																					.getString(
																																							"name");

																																			String optionGroupNameLowerCase = optionGroupName
																																					.replace(
																																							" ",
																																							"_")
																																					.toLowerCase();

																																			String quantities = optionGroup
																																					.optString(
																																							"quantities");

																																			scrollOptionsGroupDown(
																																					optionGroupName);

																																			FlutterElement optionGroup1Vk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optionGroupNameLowerCase);

																																			optionGroup1Vk
																																					.click();

																																			itemQuantityScroll();

																																			if (optionGroup
																																					.has("options")) {

																																				JSONArray options = optionGroup
																																						.optJSONArray(
																																								"options");

																																				for (int j = 0; j < options
																																						.length(); j++) {

																																					JSONObject optionObject = options
																																							.getJSONObject(
																																									j);

																																					String optionsName = optionObject
																																							.optString(
																																									"name");

																																					String optionsNameLowerCase = optionsName
																																							.replace(
																																									" ",
																																									"_")
																																							.toLowerCase();

																																					String isDefault = optionObject
																																							.optString(
																																									"is_default");

																																					String isDisabled = optionObject
																																							.optString(
																																									"is_disabled");

																																					if (isDisabled == "false") {

																																						if (quantities == "true") {

																																							if (isDefault == "true") {

																																								FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optionGroupNameLowerCase
																																														+ "_"
																																														+ optionsNameLowerCase
																																														+ "_decrement");

																																								optionGroupObjectNameDecrementOptCVk
																																										.click();

																																							}

																																							FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_increment");

																																							optionGroupObjectNameIncrementOptCVk
																																									.click();

																																						} else if (quantities == "false") {

																																							if (isDefault == "true") {

																																								FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optionGroupNameLowerCase
																																														+ "_"
																																														+ optionsNameLowerCase
																																														+ "_checkbox");

																																								optionGroupObjectNameCheckboxOptCVk
																																										.click();

																																							}

																																							FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_checkbox");

																																							optionGroupObjectNameCheckboxOptCVk
																																									.click();

																																							if (optionGroup
																																									.has("option_levels")) {
																																								JSONObject optionLevels = optionGroup
																																										.getJSONObject(
																																												"option_levels");
																																								String optionLevelsName = optionLevels
																																										.getString(
																																												"name");

																																								JSONArray optJSONArrayLevels = optionLevels
																																										.optJSONArray(
																																												"levels");

																																								if (optJSONArrayLevels != null) {

																																									for (int a = 0; a < optJSONArrayLevels
																																											.length(); a++) {

																																										JSONObject jsonObjectLevels = optJSONArrayLevels
																																												.getJSONObject(
																																														a);

																																										levelsList
																																												.clear();

																																										for (int b = 0; b < optJSONArrayLevels
																																												.length(); b++) {

																																											JSONObject jsonObjectLevelss = optJSONArrayLevels
																																													.getJSONObject(
																																															b);

																																											String levelsNames = jsonObjectLevelss
																																													.optString(
																																															"name");

																																											levelsList
																																													.add(levelsNames);

																																										}

																																										String levelsName = jsonObjectLevels
																																												.optString(
																																														"name");

																																										String levelsNameReplace = levelsName
																																												.toLowerCase()
																																												.replace(
																																														" ",
																																														"_");

																																										String levelsDefault = jsonObjectLevels
																																												.optString(
																																														"is_default");

																																										if (levelsDefault
																																												.equalsIgnoreCase(
																																														"true")) {

																																											nextGenItemQuantityScreen001
																																													.info(MarkupHelper
																																															.createLabel(
																																																	" The option name :  "
																																																			+ optionGroupObjectNameTextVk
																																																			+ " is set to default and it's not shown in the list of the option group name : "
																																																			+ levelsName
																																																			+ " and it's not auto selected in the UI ",
																																																	ExtentColor.CYAN));

																																										} else {

																																											nextGenItemQuantityScreen001
																																													.info(MarkupHelper
																																															.createLabel(
																																																	" The option name :  "
																																																			+ optionGroupObjectNameTextVk
																																																			+ " is not set to default and it's shown in the list of the option group name : "
																																																			+ levelsName
																																																			+ " and it's auto selected in the UI ",
																																																	ExtentColor.CYAN));
																																										}

																																										FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																												.byValueKey(
																																														subMenuTrue
																																																.get(n)
																																																.toLowerCase()
																																																.replace(
																																																		" ",
																																																		"_")
																																																+ "_"
																																																+ optJSONArrayOptionGroupsObjectNameReplace
																																																+ "_"
																																																+ optJSONArrayOptionsObjectNameReplace
																																																+ "_"
																																																+ "level_name");

																																										String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																												.getText();

																																										boolean levelsNameContains = levelsList
																																												.contains(
																																														optionGroupObjectNameOptionLevelsTextVk);

																																										Assert.assertEquals(
																																												levelsNameContains,
																																												true,
																																												" Validated that the option levels name from the API and the option levels name from the UI is : "
																																														+ optionGroupObjectNameOptionLevelsTextVk
																																														+ " are same ");

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" Validated that the option levels name from the API and the option levels name from the UI is : "
																																																		+ optionGroupObjectNameOptionLevelsTextVk
																																																		+ " are same ",
																																																ExtentColor.CYAN));

																																										FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																												.byValueKey(
																																														subMenuTrue
																																																.get(n)
																																																.toLowerCase()
																																																.replace(
																																																		" ",
																																																		"_")
																																																+ "_"
																																																+ optJSONArrayOptionGroupsObjectNameReplace
																																																+ "_"
																																																+ optJSONArrayOptionsObjectNameReplace
																																																+ "_rightarrow");

																																										optionGroupObjectNameOptionLevelsForwardArrowVk
																																												.click();

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																																ExtentColor.CYAN));

																																									}

																																									FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_leftarrow");

																																									optionGroupObjectNameOptionLevelsBackwardArrowVk
																																											.click();
																																								}
																																							}

																																							if (optionGroup
																																									.has("max")) {

																																								String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																										.optString(
																																												"max");

																																								int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																										.parseInt(
																																												optJSONArrayOptionGroupsObjectMaximum);

																																								if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																										- 1) {

																																									nextGenItemQuantityScreen001
																																											.info(MarkupHelper
																																													.createLabel(
																																															" Validated that after tapping the max limit of : "
																																																	+ optJSONArrayOptionGroupsObjectMax
																																																	+ " in this option group name : "
																																																	+ optJSONArrayOptionGroupsObjectName
																																																	+ " the below items are hidden ",
																																															ExtentColor.CYAN));

																																									FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_checkbox");

																																									optionGroupObjectNameCheckbox1Vk
																																											.click();

																																								}

																																								if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																																									System.out
																																									.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																																									FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_checkbox");

																																									optionGroupObjectNameCheckbox1Vk
																																											.click();

																																								}

																																							} else {

																																								nextGenItemQuantityScreen001
																																										.info(MarkupHelper
																																												.createLabel(

																																														" There is no maximum condition for this option group : "
																																																+ optJSONArrayOptionGroupsObjectName,
																																														ExtentColor.CYAN));
																																							}

																																						}

																																					}
																																				}

																																				scrollOptionsGroupUpAndClick(
																																						optJSONArrayOptionGroupsObjectName);

																																				FlutterElement optionGroupObjectGroupVk = find
																																						.byValueKey(
																																								subMenuTrue
																																										.get(n)
																																										.toLowerCase()
																																										.replace(
																																												" ",
																																												"_")
																																										+ "_"
																																										+ optJSONArrayOptionGroupsObjectNameReplace);

																																				optionGroupObjectGroupVk
																																						.click();

																																				itemQuantityScroll();
																																			}
																																		}

																																		else {

																																			nextGenItemQuantityScreen001
																																					.info(MarkupHelper
																																							.createLabel(
																																									"No match found for option_value: "
																																											+ optionGroupObjectNameTextVk,
																																									ExtentColor.CYAN));

																																		}
																																	}
																																}

																															}

																														}

																													}

																													if (optJSONArrayOptionGroupsObject
																															.has("max")) {

																														String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																																.optString(
																																		"max");

																														int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																.parseInt(
																																		optJSONArrayOptionGroupsObjectMaximum);

																														if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																- 1) {

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" Validated that after tapping the max limit of : "
																																							+ optJSONArrayOptionGroupsObjectMax
																																							+ " in this option group name : "
																																							+ optJSONArrayOptionGroupsObjectName
																																							+ " the below items are hidden ",
																																					ExtentColor.CYAN));

																															FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_checkbox");

																															optionGroupObjectNameCheckbox1Vk
																																	.click();

																														}
																														if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																															System.out
																															.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																															FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_checkbox");

																															optionGroupObjectNameCheckbox1Vk
																																	.click();

																														}

																													} else {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" There is no maximum condition for this option group : "
																																						+ optJSONArrayOptionGroupsObjectName,
																																				ExtentColor.CYAN));
																													}

																												}
																											}

																											else if (optJSONArrayOptionGroupsObjectMin == 0
																													&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option : "
																																				+ optionGroupObjectNameTextVk
																																				+ " is multi selection optional field",
																																		ExtentColor.CYAN));

																												if (optJSONArrayOptionGroupsObjectQuantities == "true"
																														&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option : "
																																					+ optionGroupObjectNameTextVk
																																					+ " is multi selection optional field has increment decrement button",
																																			ExtentColor.CYAN));

																													FlutterElement optionCountVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountTextVk = optionCountVk
																															.getText();

																													long optionCountLongVk = Long
																															.parseLong(
																																	optionCountTextVk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" Before tapping increment and decrement button the count is : "
																																					+ optionCountLongVk,
																																			ExtentColor.CYAN));
																													if (optStringIsDefault
																															.equalsIgnoreCase(
																																	"true")) {

																														FlutterElement optionGroupObjectNameIncrementButtonVk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_decrement");

																														optionGroupObjectNameIncrementButtonVk
																																.click();

																													}
																													FlutterElement optionGroupObjectNameIncrementButtonVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_increment");

																													optionGroupObjectNameIncrementButtonVk
																															.click();

																													FlutterElement optionCount1Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountText1Vk = optionCount1Vk
																															.getText();

																													long optionCountLong1Vk = Long
																															.parseLong(
																																	optionCountText1Vk);

																													Assert.assertNotEquals(
																															optionCountTextVk,
																															optionCountText1Vk,
																															"Validated that after tapping increment button the count has been increased to : "
																																	+ optionCountText1Vk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			"Validated that after tapping increment button the count has been increased to : "
																																					+ optionCountText1Vk,
																																			ExtentColor.CYAN));

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" After tapping increment button the count is : "
																																					+ optionCountLong1Vk,
																																			ExtentColor.CYAN));

																													FlutterElement optionGroupObjectNameDecrementButtonVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_decrement");

																													optionGroupObjectNameDecrementButtonVk
																															.click();

																													FlutterElement optionCount2Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountText2Vk = optionCount2Vk
																															.getText();

																													long optionCountLong2Vk = Long
																															.parseLong(
																																	optionCountText2Vk);

																													Assert.assertEquals(
																															optionCountTextVk,
																															optionCountText2Vk,
																															"Validated that after tapping decrement button the count has been decreased to : "
																																	+ optionCountText2Vk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" After tapping decrement button the count is : "
																																					+ optionCountLong2Vk,
																																			ExtentColor.CYAN));

																													FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_increment");

																													optionGroupObjectNameIncrementButton1Vk
																															.click();

																													FlutterElement optionCount3Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountText3Vk = optionCount3Vk
																															.getText();

																													long optionCountLong3Vk = Long
																															.parseLong(
																																	optionCountText3Vk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" After tapping the increment button count is : "
																																					+ optionCountLong3Vk,
																																			ExtentColor.CYAN));

																													if (optJSONArrayOptionGroupsObject
																															.has("max")) {

																														String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																																.optString(
																																		"max");

																														int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																.parseInt(
																																		optJSONArrayOptionGroupsObjectMaximum);

																														if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																- 1) {

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" Validated that after tapping the max limit of : "
																																							+ optJSONArrayOptionGroupsObjectMax
																																							+ " in this option group name : "
																																							+ optJSONArrayOptionGroupsObjectName
																																							+ " the below items are hidden ",
																																					ExtentColor.CYAN));

																															FlutterElement optionGroupObjectNameDecrementButton1Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_decrement");

																															optionGroupObjectNameDecrementButton1Vk
																																	.click();
																														}
																														if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																															System.out
																															.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																															FlutterElement optionGroupObjectNameIncrementButton3Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_increment");

																															optionGroupObjectNameIncrementButton3Vk
																																	.click();
																														}
																													} else {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" There is no maximum condition for this option group : "
																																						+ optJSONArrayOptionGroupsObjectName,
																																				ExtentColor.CYAN));
																													}

																												}

																												else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																														&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option : "
																																					+ optionGroupObjectNameTextVk
																																					+ " is multi selection Mandatory field has checkbox",
																																			ExtentColor.CYAN));

																													FlutterElement optionGroupObjectNameCheckboxVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_checkbox");

																													optionGroupObjectNameCheckboxVk
																															.click();

																													if (optJSONArrayOptionGroupsObject
																															.has("option_levels")) {
																														JSONObject optionLevels = optJSONArrayOptionGroupsObject
																																.getJSONObject(
																																		"option_levels");
																														String optionLevelsName = optionLevels
																																.getString(
																																		"name");

																														JSONArray optJSONArrayLevels = optionLevels
																																.optJSONArray(
																																		"levels");

																														if (optJSONArrayLevels != null) {

																															for (int a = 0; a < optJSONArrayLevels
																																	.length(); a++) {

																																JSONObject jsonObjectLevels = optJSONArrayLevels
																																		.getJSONObject(
																																				a);

																																levelsList
																																		.clear();

																																for (int j = 0; j < optJSONArrayLevels
																																		.length(); j++) {

																																	JSONObject jsonObjectLevelss = optJSONArrayLevels
																																			.getJSONObject(
																																					j);

																																	String levelsNames = jsonObjectLevelss
																																			.optString(
																																					"name");

																																	levelsList
																																			.add(levelsNames);

																																}

																																String levelsName = jsonObjectLevels
																																		.optString(
																																				"name");

																																String levelsNameReplace = levelsName
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_");

																																String levelsDefault = jsonObjectLevels
																																		.optString(
																																				"is_default");

																																if (levelsDefault
																																		.equalsIgnoreCase(
																																				"true")) {

																																	nextGenItemQuantityScreen001
																																			.info(MarkupHelper
																																					.createLabel(
																																							" The option name :  "
																																									+ optionGroupObjectNameTextVk
																																									+ " is set to default and it's not shown in the list of the option group name : "
																																									+ levelsName
																																									+ " and it's not auto selected in the UI ",
																																							ExtentColor.CYAN));

																																} else {

																																	nextGenItemQuantityScreen001
																																			.info(MarkupHelper
																																					.createLabel(
																																							" The option name :  "
																																									+ optionGroupObjectNameTextVk
																																									+ " is not set to default and it's shown in the list of the option group name : "
																																									+ levelsName
																																									+ " and it's auto selected in the UI ",
																																							ExtentColor.CYAN));
																																}

																																FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optJSONArrayOptionGroupsObjectNameReplace
																																						+ "_"
																																						+ optJSONArrayOptionsObjectNameReplace
																																						+ "_"
																																						+ "level_name");

																																String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																		.getText();

																																boolean levelsNameContains = levelsList
																																		.contains(
																																				optionGroupObjectNameOptionLevelsTextVk);

																																Assert.assertEquals(
																																		levelsNameContains,
																																		true,
																																		" Validated that the option levels name from the API and the option levels name from the UI is : "
																																				+ optionGroupObjectNameOptionLevelsTextVk
																																				+ " are same ");

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" Validated that the option levels name from the API and the option levels name from the UI is : "
																																								+ optionGroupObjectNameOptionLevelsTextVk
																																								+ " are same ",
																																						ExtentColor.CYAN));

																																FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optJSONArrayOptionGroupsObjectNameReplace
																																						+ "_"
																																						+ optJSONArrayOptionsObjectNameReplace
																																						+ "_rightarrow");

																																optionGroupObjectNameOptionLevelsForwardArrowVk
																																		.click();

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																						ExtentColor.CYAN));

																															}

																															FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_leftarrow");

																															optionGroupObjectNameOptionLevelsBackwardArrowVk
																																	.click();
																														}
																													}
																													if (optJSONObjectPrice1
																															.optJSONArray(
																																	"option_groups") != null) {

																														JSONArray optionGroups = optJSONObjectPrice1
																																.getJSONArray(
																																		"option_groups");

																														for (int g = 0; g < optionGroups
																																.length(); g++) {
																															JSONObject optionGroup = optionGroups
																																	.getJSONObject(
																																			g);

																															if (optionGroup
																																	.has("option_conditions")) {
																																JSONArray optionConditionsArray = optionGroup
																																		.getJSONArray(
																																				"option_conditions");

																																for (int h = 0; h < optionConditionsArray
																																		.length(); h++) {
																																	JSONArray optionCondition = optionConditionsArray
																																			.getJSONArray(
																																					h);

																																	for (int m = 0; m < optionCondition
																																			.length(); m++) {
																																		JSONObject condition = optionCondition
																																				.getJSONObject(
																																						m);

																																		String optionValue = condition
																																				.getString(
																																						"option_value");
																																		String optionGroupInCondition = condition
																																				.getString(
																																						"option_group");

																																		if (optionGroupObjectNameTextVk
																																				.equals(optionValue)) {

																																			String optionGroupName = optionGroup
																																					.getString(
																																							"name");

																																			String optionGroupNameLowerCase = optionGroupName
																																					.replace(
																																							" ",
																																							"_")
																																					.toLowerCase();

																																			String quantities = optionGroup
																																					.optString(
																																							"quantities");

																																			scrollOptionsGroupDown(
																																					optionGroupName);

																																			FlutterElement optionGroup1Vk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optionGroupNameLowerCase);

																																			optionGroup1Vk
																																					.click();

																																			itemQuantityScroll();

																																			if (optionGroup
																																					.has("options")) {

																																				JSONArray options = optionGroup
																																						.optJSONArray(
																																								"options");

																																				for (int j = 0; j < options
																																						.length(); j++) {

																																					JSONObject optionObject = options
																																							.getJSONObject(
																																									j);

																																					String optionsName = optionObject
																																							.optString(
																																									"name");

																																					String optionsNameLowerCase = optionsName
																																							.replace(
																																									" ",
																																									"_")
																																							.toLowerCase();

																																					String isDefault = optionObject
																																							.optString(
																																									"is_default");

																																					String isDisabled = optionObject
																																							.optString(
																																									"is_disabled");

																																					if (isDisabled == "false") {

																																						if (quantities == "true") {

																																							if (isDefault == "true") {

																																								FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optionGroupNameLowerCase
																																														+ "_"
																																														+ optionsNameLowerCase
																																														+ "_decrement");

																																								optionGroupObjectNameDecrementOptCVk
																																										.click();

																																							}

																																							FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_increment");

																																							optionGroupObjectNameIncrementOptCVk
																																									.click();

																																						} else if (quantities == "false") {

																																							if (isDefault == "true") {

																																								FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optionGroupNameLowerCase
																																														+ "_"
																																														+ optionsNameLowerCase
																																														+ "_checkbox");

																																								optionGroupObjectNameCheckboxOptCVk
																																										.click();

																																							}

																																							FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_checkbox");

																																							optionGroupObjectNameCheckboxOptCVk
																																									.click();

																																							if (optionGroup
																																									.has("option_levels")) {
																																								JSONObject optionLevels = optionGroup
																																										.getJSONObject(
																																												"option_levels");
																																								String optionLevelsName = optionLevels
																																										.getString(
																																												"name");

																																								JSONArray optJSONArrayLevels = optionLevels
																																										.optJSONArray(
																																												"levels");

																																								if (optJSONArrayLevels != null) {

																																									for (int a = 0; a < optJSONArrayLevels
																																											.length(); a++) {

																																										JSONObject jsonObjectLevels = optJSONArrayLevels
																																												.getJSONObject(
																																														a);

																																										levelsList
																																												.clear();

																																										for (int b = 0; b < optJSONArrayLevels
																																												.length(); b++) {

																																											JSONObject jsonObjectLevelss = optJSONArrayLevels
																																													.getJSONObject(
																																															b);

																																											String levelsNames = jsonObjectLevelss
																																													.optString(
																																															"name");

																																											levelsList
																																													.add(levelsNames);

																																										}

																																										String levelsName = jsonObjectLevels
																																												.optString(
																																														"name");

																																										String levelsNameReplace = levelsName
																																												.toLowerCase()
																																												.replace(
																																														" ",
																																														"_");

																																										String levelsDefault = jsonObjectLevels
																																												.optString(
																																														"is_default");

																																										if (levelsDefault
																																												.equalsIgnoreCase(
																																														"true")) {

																																											nextGenItemQuantityScreen001
																																													.info(MarkupHelper
																																															.createLabel(
																																																	" The option name :  "
																																																			+ optionGroupObjectNameTextVk
																																																			+ " is set to default and it's not shown in the list of the option group name : "
																																																			+ levelsName
																																																			+ " and it's not auto selected in the UI ",
																																																	ExtentColor.CYAN));

																																										} else {

																																											nextGenItemQuantityScreen001
																																													.info(MarkupHelper
																																															.createLabel(
																																																	" The option name :  "
																																																			+ optionGroupObjectNameTextVk
																																																			+ " is not set to default and it's shown in the list of the option group name : "
																																																			+ levelsName
																																																			+ " and it's auto selected in the UI ",
																																																	ExtentColor.CYAN));
																																										}

																																										FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																												.byValueKey(
																																														subMenuTrue
																																																.get(n)
																																																.toLowerCase()
																																																.replace(
																																																		" ",
																																																		"_")
																																																+ "_"
																																																+ optJSONArrayOptionGroupsObjectNameReplace
																																																+ "_"
																																																+ optJSONArrayOptionsObjectNameReplace
																																																+ "_"
																																																+ "level_name");

																																										String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																												.getText();

																																										boolean levelsNameContains = levelsList
																																												.contains(
																																														optionGroupObjectNameOptionLevelsTextVk);

																																										Assert.assertEquals(
																																												levelsNameContains,
																																												true,
																																												" Validated that the option levels name from the API and the option levels name from the UI is : "
																																														+ optionGroupObjectNameOptionLevelsTextVk
																																														+ " are same ");

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" Validated that the option levels name from the API and the option levels name from the UI is : "
																																																		+ optionGroupObjectNameOptionLevelsTextVk
																																																		+ " are same ",
																																																ExtentColor.CYAN));

																																										FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																												.byValueKey(
																																														subMenuTrue
																																																.get(n)
																																																.toLowerCase()
																																																.replace(
																																																		" ",
																																																		"_")
																																																+ "_"
																																																+ optJSONArrayOptionGroupsObjectNameReplace
																																																+ "_"
																																																+ optJSONArrayOptionsObjectNameReplace
																																																+ "_rightarrow");

																																										optionGroupObjectNameOptionLevelsForwardArrowVk
																																												.click();

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																																ExtentColor.CYAN));

																																									}

																																									FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_leftarrow");

																																									optionGroupObjectNameOptionLevelsBackwardArrowVk
																																											.click();
																																								}
																																							}

																																							if (optionGroup
																																									.has("max")) {

																																								String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																										.optString(
																																												"max");

																																								int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																										.parseInt(
																																												optJSONArrayOptionGroupsObjectMaximum);

																																								if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																										- 1) {

																																									nextGenItemQuantityScreen001
																																											.info(MarkupHelper
																																													.createLabel(
																																															" Validated that after tapping the max limit of : "
																																																	+ optJSONArrayOptionGroupsObjectMax
																																																	+ " in this option group name : "
																																																	+ optJSONArrayOptionGroupsObjectName
																																																	+ " the below items are hidden ",
																																															ExtentColor.CYAN));

																																									FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_checkbox");

																																									optionGroupObjectNameCheckbox1Vk
																																											.click();

																																								}

																																								if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																																									System.out
																																									.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																																									FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_checkbox");

																																									optionGroupObjectNameCheckbox1Vk
																																											.click();

																																								}

																																							} else {

																																								nextGenItemQuantityScreen001
																																										.info(MarkupHelper
																																												.createLabel(
																																														" There is no maximum condition for this option group : "
																																																+ optJSONArrayOptionGroupsObjectName,
																																														ExtentColor.CYAN));
																																							}

																																						}

																																					}
																																				}

																																				scrollOptionsGroupUpAndClick(
																																						optJSONArrayOptionGroupsObjectName);

																																				FlutterElement optionGroupObjectGroupVk = find
																																						.byValueKey(
																																								subMenuTrue
																																										.get(n)
																																										.toLowerCase()
																																										.replace(
																																												" ",
																																												"_")
																																										+ "_"
																																										+ optJSONArrayOptionGroupsObjectNameReplace);

																																				optionGroupObjectGroupVk
																																						.click();

																																				itemQuantityScroll();
																																			}
																																		}

																																		else {

																																			nextGenItemQuantityScreen001
																																					.info(MarkupHelper
																																							.createLabel(
																																									" No match found for option_value : "
																																											+ optionGroupObjectNameTextVk,
																																									ExtentColor.CYAN));

																																		}
																																	}

																																}

																															}

																														}

																													}

																													if (optJSONArrayOptionGroupsObject
																															.has("max")) {

																														String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																																.optString(
																																		"max");

																														int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																.parseInt(
																																		optJSONArrayOptionGroupsObjectMaximum);

																														if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																- 1) {

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" Validated that after tapping the max limit of : "
																																							+ optJSONArrayOptionGroupsObjectMax
																																							+ " in this option group name : "
																																							+ optJSONArrayOptionGroupsObjectName
																																							+ " the below items are hidden ",
																																					ExtentColor.CYAN));

																															FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_checkbox");

																															optionGroupObjectNameCheckbox1Vk
																																	.click();

																														}
																														if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																															System.out
																															.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																															FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_checkbox");

																															optionGroupObjectNameCheckbox1Vk
																																	.click();

																														}

																													} else {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" There is no maximum condition for this option group : "
																																						+ optJSONArrayOptionGroupsObjectName,
																																				ExtentColor.CYAN));
																													}

																												}

																											} else if (optJSONArrayOptionGroupsObjectMin >= 1
																													&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option : "
																																				+ optionGroupObjectNameTextVk
																																				+ " is multi selection mandatory field",
																																		ExtentColor.CYAN));

																												if (optJSONArrayOptionGroupsObjectQuantities == "true"
																														&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option : "
																																					+ optionGroupObjectNameTextVk
																																					+ " is multi selection mandatory field has increment decrement button",
																																			ExtentColor.CYAN));

																													FlutterElement optionCountVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountTextVk = optionCountVk
																															.getText();

																													long optionCountLongVk = Long
																															.parseLong(
																																	optionCountTextVk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" Before tapping increment and decrement button the count is : "
																																					+ optionCountLongVk,
																																			ExtentColor.CYAN));
																													if (optStringIsDefault
																															.equalsIgnoreCase(
																																	"true")) {

																														FlutterElement optionGroupObjectNameIncrementButtonVk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_decrement");

																														optionGroupObjectNameIncrementButtonVk
																																.click();

																													}
																													FlutterElement optionGroupObjectNameIncrementButtonVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_increment");

																													optionGroupObjectNameIncrementButtonVk
																															.click();

																													FlutterElement optionCount1Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountText1Vk = optionCount1Vk
																															.getText();

																													long optionCountLong1Vk = Long
																															.parseLong(
																																	optionCountText1Vk);

																													Assert.assertNotEquals(
																															optionCountTextVk,
																															optionCountText1Vk,
																															"Validated that after tapping increment button the count has been increased to : "
																																	+ optionCountText1Vk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			"Validated that after tapping increment button the count has been increased to : "
																																					+ optionCountText1Vk,
																																			ExtentColor.CYAN));

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" After tapping increment button the count is : "
																																					+ optionCountLong1Vk,
																																			ExtentColor.CYAN));

																													FlutterElement optionGroupObjectNameDecrementButtonVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_decrement");

																													optionGroupObjectNameDecrementButtonVk
																															.click();

																													FlutterElement optionCount2Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountText2Vk = optionCount2Vk
																															.getText();

																													long optionCountLong2Vk = Long
																															.parseLong(
																																	optionCountText2Vk);

																													Assert.assertEquals(
																															optionCountTextVk,
																															optionCountText2Vk,
																															"Validated that after tapping decrement button the count has been decreased to : "
																																	+ optionCountText2Vk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" After tapping decrement button the count is : "
																																					+ optionCountLong2Vk,
																																			ExtentColor.CYAN));

																													FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_increment");

																													optionGroupObjectNameIncrementButton1Vk
																															.click();

																													FlutterElement optionCount3Vk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_quantityvalue");

																													String optionCountText3Vk = optionCount3Vk
																															.getText();

																													long optionCountLong3Vk = Long
																															.parseLong(
																																	optionCountText3Vk);

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" After tapping the increment button the count is : "
																																					+ optionCountLong3Vk,
																																			ExtentColor.CYAN));

																													if (optJSONArrayOptionGroupsObject
																															.has("max")) {

																														String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																																.optString(
																																		"max");

																														int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																.parseInt(
																																		optJSONArrayOptionGroupsObjectMaximum);

																														if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																- 1) {

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" Validated that after tapping the max limit of : "
																																							+ optJSONArrayOptionGroupsObjectMax
																																							+ " in this option group name : "
																																							+ optJSONArrayOptionGroupsObjectName
																																							+ " the below items are hidden ",
																																					ExtentColor.CYAN));

																															FlutterElement optionGroupObjectNameDecrementButton1Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_decrement");

																															optionGroupObjectNameDecrementButton1Vk
																																	.click();
																														}
																														if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																															System.out
																															.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																															FlutterElement optionGroupObjectNameIncrementButton4Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_increment");

																															optionGroupObjectNameIncrementButton4Vk
																																	.click();
																														}
																													} else {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" There is no maximum condition for this option group : "
																																						+ optJSONArrayOptionGroupsObjectName,
																																				ExtentColor.CYAN));
																													}

																												}

																												else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																														&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option : "
																																					+ optionGroupObjectNameTextVk
																																					+ " is multi selection Mandatory field has checkbox",
																																			ExtentColor.CYAN));

																													FlutterElement optionGroupObjectNameCheckboxVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_checkbox");

																													optionGroupObjectNameCheckboxVk
																															.click();

																													if (optJSONArrayOptionGroupsObject
																															.has("option_levels")) {
																														JSONObject optionLevels = optJSONArrayOptionGroupsObject
																																.getJSONObject(
																																		"option_levels");
																														String optionLevelsName = optionLevels
																																.getString(
																																		"name");

																														JSONArray optJSONArrayLevels = optionLevels
																																.optJSONArray(
																																		"levels");

																														if (optJSONArrayLevels != null) {

																															for (int a = 0; a < optJSONArrayLevels
																																	.length(); a++) {

																																JSONObject jsonObjectLevels = optJSONArrayLevels
																																		.getJSONObject(
																																				a);

																																levelsList
																																		.clear();

																																for (int j = 0; j < optJSONArrayLevels
																																		.length(); j++) {

																																	JSONObject jsonObjectLevelss = optJSONArrayLevels
																																			.getJSONObject(
																																					j);

																																	String levelsNames = jsonObjectLevelss
																																			.optString(
																																					"name");

																																	levelsList
																																			.add(levelsNames);

																																}

																																String levelsName = jsonObjectLevels
																																		.optString(
																																				"name");

																																String levelsNameReplace = levelsName
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_");

																																String levelsDefault = jsonObjectLevels
																																		.optString(
																																				"is_default");

																																if (levelsDefault
																																		.equalsIgnoreCase(
																																				"true")) {

																																	nextGenItemQuantityScreen001
																																			.info(MarkupHelper
																																					.createLabel(
																																							" The option name :  "
																																									+ optionGroupObjectNameTextVk
																																									+ " is set to default and it's not shown in the list of the option group name : "
																																									+ levelsName
																																									+ " and it's not auto selected in the UI ",
																																							ExtentColor.CYAN));

																																} else {

																																	nextGenItemQuantityScreen001
																																			.info(MarkupHelper
																																					.createLabel(
																																							" The option name :  "
																																									+ optionGroupObjectNameTextVk
																																									+ " is not set to default and it's shown in the list of the option group name : "
																																									+ levelsName
																																									+ " and it's auto selected in the UI ",
																																							ExtentColor.CYAN));
																																}

																																FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optJSONArrayOptionGroupsObjectNameReplace
																																						+ "_"
																																						+ optJSONArrayOptionsObjectNameReplace
																																						+ "_"
																																						+ "level_name");

																																String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																		.getText();

																																boolean levelsNameContains = levelsList
																																		.contains(
																																				optionGroupObjectNameOptionLevelsTextVk);

																																Assert.assertEquals(
																																		levelsNameContains,
																																		true,
																																		" Validated that the option levels name from the API and the option levels name from the UI is : "
																																				+ optionGroupObjectNameOptionLevelsTextVk
																																				+ " are same ");

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" Validated that the option levels name from the API and the option levels name from the UI is : "
																																								+ optionGroupObjectNameOptionLevelsTextVk
																																								+ " are same ",
																																						ExtentColor.CYAN));

																																FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optJSONArrayOptionGroupsObjectNameReplace
																																						+ "_"
																																						+ optJSONArrayOptionsObjectNameReplace
																																						+ "_rightarrow");

																																optionGroupObjectNameOptionLevelsForwardArrowVk
																																		.click();

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																						ExtentColor.CYAN));

																															}

																															FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_leftarrow");

																															optionGroupObjectNameOptionLevelsBackwardArrowVk
																																	.click();
																														}
																													}
																													if (optJSONObjectPrice1
																															.optJSONArray(
																																	"option_groups") != null) {

																														JSONArray optionGroups = optJSONObjectPrice1
																																.getJSONArray(
																																		"option_groups");

																														for (int g = 0; g < optionGroups
																																.length(); g++) {
																															JSONObject optionGroup = optionGroups
																																	.getJSONObject(
																																			g);

																															if (optionGroup
																																	.has("option_conditions")) {
																																JSONArray optionConditionsArray = optionGroup
																																		.getJSONArray(
																																				"option_conditions");

																																for (int h = 0; h < optionConditionsArray
																																		.length(); h++) {
																																	JSONArray optionCondition = optionConditionsArray
																																			.getJSONArray(
																																					h);

																																	for (int m = 0; m < optionCondition
																																			.length(); m++) {
																																		JSONObject condition = optionCondition
																																				.getJSONObject(
																																						m);

																																		String optionValue = condition
																																				.getString(
																																						"option_value");
																																		String optionGroupInCondition = condition
																																				.getString(
																																						"option_group");

																																		if (optionGroupObjectNameTextVk
																																				.equals(optionValue)) {

																																			String optionGroupName = optionGroup
																																					.getString(
																																							"name");

																																			String optionGroupNameLowerCase = optionGroupName
																																					.replace(
																																							" ",
																																							"_")
																																					.toLowerCase();

																																			String quantities = optionGroup
																																					.optString(
																																							"quantities");

																																			scrollOptionsGroupDown(
																																					optionGroupName);

																																			FlutterElement optionGroup1Vk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optionGroupNameLowerCase);

																																			optionGroup1Vk
																																					.click();

																																			itemQuantityScroll();

																																			if (optionGroup
																																					.has("options")) {

																																				JSONArray options = optionGroup
																																						.optJSONArray(
																																								"options");

																																				for (int j = 0; j < options
																																						.length(); j++) {

																																					JSONObject optionObject = options
																																							.getJSONObject(
																																									j);

																																					String optionsName = optionObject
																																							.optString(
																																									"name");

																																					String optionsNameLowerCase = optionsName
																																							.replace(
																																									" ",
																																									"_")
																																							.toLowerCase();

																																					String isDefault = optionObject
																																							.optString(
																																									"is_default");

																																					String isDisabled = optionObject
																																							.optString(
																																									"is_disabled");

																																					if (isDisabled == "false") {

																																						if (quantities == "true") {

																																							if (isDefault == "true") {

																																								FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optionGroupNameLowerCase
																																														+ "_"
																																														+ optionsNameLowerCase
																																														+ "_decrement");

																																								optionGroupObjectNameDecrementOptCVk
																																										.click();

																																							}

																																							FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_increment");

																																							optionGroupObjectNameIncrementOptCVk
																																									.click();

																																						} else if (quantities == "false") {

																																							if (isDefault == "true") {

																																								FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optionGroupNameLowerCase
																																														+ "_"
																																														+ optionsNameLowerCase
																																														+ "_checkbox");

																																								optionGroupObjectNameCheckboxOptCVk
																																										.click();

																																							}

																																							FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_checkbox");

																																							optionGroupObjectNameCheckboxOptCVk
																																									.click();

																																							if (optionGroup
																																									.has("option_levels")) {
																																								JSONObject optionLevels = optionGroup
																																										.getJSONObject(
																																												"option_levels");
																																								String optionLevelsName = optionLevels
																																										.getString(
																																												"name");

																																								JSONArray optJSONArrayLevels = optionLevels
																																										.optJSONArray(
																																												"levels");

																																								if (optJSONArrayLevels != null) {

																																									for (int a = 0; a < optJSONArrayLevels
																																											.length(); a++) {

																																										JSONObject jsonObjectLevels = optJSONArrayLevels
																																												.getJSONObject(
																																														a);

																																										levelsList
																																												.clear();

																																										for (int b = 0; b < optJSONArrayLevels
																																												.length(); b++) {

																																											JSONObject jsonObjectLevelss = optJSONArrayLevels
																																													.getJSONObject(
																																															b);

																																											String levelsNames = jsonObjectLevelss
																																													.optString(
																																															"name");

																																											levelsList
																																													.add(levelsNames);

																																										}

																																										String levelsName = jsonObjectLevels
																																												.optString(
																																														"name");

																																										String levelsNameReplace = levelsName
																																												.toLowerCase()
																																												.replace(
																																														" ",
																																														"_");

																																										String levelsDefault = jsonObjectLevels
																																												.optString(
																																														"is_default");

																																										if (levelsDefault
																																												.equalsIgnoreCase(
																																														"true")) {

																																											nextGenItemQuantityScreen001
																																													.info(MarkupHelper
																																															.createLabel(
																																																	" The option name :  "
																																																			+ optionGroupObjectNameTextVk
																																																			+ " is set to default and it's not shown in the list of the option group name : "
																																																			+ levelsName
																																																			+ " and it's not auto selected in the UI ",
																																																	ExtentColor.CYAN));

																																										} else {

																																											nextGenItemQuantityScreen001
																																													.info(MarkupHelper
																																															.createLabel(
																																																	" The option name :  "
																																																			+ optionGroupObjectNameTextVk
																																																			+ " is not set to default and it's shown in the list of the option group name : "
																																																			+ levelsName
																																																			+ " and it's auto selected in the UI ",
																																																	ExtentColor.CYAN));
																																										}

																																										FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																												.byValueKey(
																																														subMenuTrue
																																																.get(n)
																																																.toLowerCase()
																																																.replace(
																																																		" ",
																																																		"_")
																																																+ "_"
																																																+ optJSONArrayOptionGroupsObjectNameReplace
																																																+ "_"
																																																+ optJSONArrayOptionsObjectNameReplace
																																																+ "_"
																																																+ "level_name");

																																										String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																												.getText();

																																										boolean levelsNameContains = levelsList
																																												.contains(
																																														optionGroupObjectNameOptionLevelsTextVk);

																																										Assert.assertEquals(
																																												levelsNameContains,
																																												true,
																																												" Validated that the option levels name from the API and the option levels name from the UI is : "
																																														+ optionGroupObjectNameOptionLevelsTextVk
																																														+ " are same ");

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" Validated that the option levels name from the API and the option levels name from the UI is : "
																																																		+ optionGroupObjectNameOptionLevelsTextVk
																																																		+ " are same ",
																																																ExtentColor.CYAN));

																																										FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																												.byValueKey(
																																														subMenuTrue
																																																.get(n)
																																																.toLowerCase()
																																																.replace(
																																																		" ",
																																																		"_")
																																																+ "_"
																																																+ optJSONArrayOptionGroupsObjectNameReplace
																																																+ "_"
																																																+ optJSONArrayOptionsObjectNameReplace
																																																+ "_rightarrow");

																																										optionGroupObjectNameOptionLevelsForwardArrowVk
																																												.click();

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																																ExtentColor.CYAN));

																																									}

																																									FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_leftarrow");

																																									optionGroupObjectNameOptionLevelsBackwardArrowVk
																																											.click();
																																								}
																																							}

																																							if (optionGroup
																																									.has("max")) {

																																								String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																										.optString(
																																												"max");

																																								int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																										.parseInt(
																																												optJSONArrayOptionGroupsObjectMaximum);

																																								if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																										- 1) {

																																									nextGenItemQuantityScreen001
																																											.info(MarkupHelper
																																													.createLabel(
																																															" Validated that after tapping the max limit of : "
																																																	+ optJSONArrayOptionGroupsObjectMax
																																																	+ " in this option group name : "
																																																	+ optJSONArrayOptionGroupsObjectName
																																																	+ " the below items are hidden ",
																																															ExtentColor.CYAN));

																																									FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_checkbox");

																																									optionGroupObjectNameCheckbox1Vk
																																											.click();

																																								}

																																								if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																																									System.out
																																									.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																																									FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_checkbox");

																																									optionGroupObjectNameCheckbox1Vk
																																											.click();

																																								}

																																							} else {

																																								nextGenItemQuantityScreen001
																																										.info(MarkupHelper
																																												.createLabel(
																																														" There is no maximum condition for this option group : "
																																																+ optJSONArrayOptionGroupsObjectName,
																																														ExtentColor.CYAN));
																																							}

																																						}

																																					}
																																				}

																																				scrollOptionsGroupUpAndClick(
																																						optJSONArrayOptionGroupsObjectName);

																																				FlutterElement optionGroupObjectGroupVk = find
																																						.byValueKey(
																																								subMenuTrue
																																										.get(n)
																																										.toLowerCase()
																																										.replace(
																																												" ",
																																												"_")
																																										+ "_"
																																										+ optJSONArrayOptionGroupsObjectNameReplace);

																																				optionGroupObjectGroupVk
																																						.click();

																																				itemQuantityScroll();
																																			}
																																		}

																																		else {

																																			nextGenItemQuantityScreen001
																																					.info(MarkupHelper
																																							.createLabel(
																																									"No match found for option_value: "
																																											+ optionGroupObjectNameTextVk,
																																									ExtentColor.CYAN));

																																		}
																																	}
																																}

																															}

																														}

																													}
																													if (optJSONArrayOptionGroupsObject
																															.has("max")) {

																														String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																																.optString(
																																		"max");

																														int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																.parseInt(
																																		optJSONArrayOptionGroupsObjectMaximum);

																														if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																- 1) {

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" Validated that after tapping the max limit of : "
																																							+ optJSONArrayOptionGroupsObjectMax
																																							+ " in this option group name : "
																																							+ optJSONArrayOptionGroupsObjectName
																																							+ " the below items are hidden ",
																																					ExtentColor.CYAN));

																															FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_checkbox");

																															optionGroupObjectNameCheckbox1Vk
																																	.click();

																														}
																														if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																															System.out
																															.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																															FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_checkbox");

																															optionGroupObjectNameCheckbox1Vk
																																	.click();

																														}
																													} else {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" There is no maximum condition for this option group : "
																																						+ optJSONArrayOptionGroupsObjectName,
																																				ExtentColor.CYAN));
																													}

																												}
																											}
																										} else {

																											nextGenItemQuantityScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	" The option : "
																																			+ optJSONArrayOptionsObjectName
																																			+ "is disabled and won't be displayed",
																																	ExtentColor.CYAN));
																										}
																									}

																									scrollOptionsGroupUpAndClick(
																											optJSONArrayOptionGroupsObjectName);

																									FlutterElement optionGroupObjectGroupVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															.toLowerCase()
																															.replace(
																																	" ",
																																	"_")
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace);

																									optionGroupObjectGroupVk
																											.click();

																									itemQuantityScroll();

																									FlutterElement optionalRequired1Vk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															.toLowerCase()
																															.replace(
																																	" ",
																																	"_")
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_description");

																									String optionalRequiredText1Vk = optionalRequired1Vk
																											.getText();

																									if (optionalRequiredText1Vk
																											.toLowerCase()
																											.contains(
																													"optional")) {

																										boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																												.toLowerCase()
																												.contains(
																														"optional");

																										Assert.assertEquals(
																												optionalRequiredTextContains1Vk,
																												true,
																												"Validated that the option group : "
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ " is optional ");

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																"Validated that the option group : "
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ " is optional ",
																																ExtentColor.CYAN));

																									}

																									else if (optionalRequiredText1Vk
																											.toLowerCase()
																											.contains(
																													"required")) {
																										boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																												.toLowerCase()
																												.contains(
																														"required");

																										Assert.assertEquals(
																												optionalRequiredTextContains1Vk,
																												true,
																												"Validated that the option group : "
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ " is required or mandatory ");

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																"Validated that the option group : "
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ " is required or mandatory ",
																																ExtentColor.CYAN));

																									}

																									FlutterElement optionGroupObjectNameSelectedOptionsVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															.toLowerCase()
																															.replace(
																																	" ",
																																	"_")
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_selected_options");

																									String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
																											.getText();

																									int countOfCommas = getCountOfCommas(
																											optionGroupObjectNameSelectedOptionsTextVk);

																									if (countOfCommas == 0) {

																										Assert.assertEquals(
																												countOfCommas,
																												0,
																												" Validated that the item is single selected  ");

																									} else if (countOfCommas > 0) {

																										Assert.assertEquals(
																												countOfCommas
																														+ 1,
																												countOfCommas
																														+ 1,
																												" Validated that the item is a multi selected ");

																									}
																								} else {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Options is null for the option groups name : "
																																	+ optJSONArrayOptionGroupsObjectName,
																															ExtentColor.CYAN));
																								}
																							} else {

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" Option groups named : "
																																+ optJSONArrayOptionGroupsObjectName
																																+ " doesn't have options in it ",
																														ExtentColor.CYAN));
																							}

																						} else {

																							nextGenItemQuantityScreen001
																									.info(MarkupHelper
																											.createLabel(
																													" The Option group is null and moving to the next option group of sub menu item name : "
																															+ subMenuTrue
																																	.get(n),
																													ExtentColor.CYAN));
																						}

																					} else {

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" Price name : "
																														+ priceName
																														+ " not equals to the size condition : "
																														+ sizeConditionParam,
																												ExtentColor.CYAN));
																					}

																				}

																			} else {

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Size condition param : "
																										+ sizeConditionParam
																										+ " is not matched with the : "
																										+ optStringSizeNameTextUI,
																								ExtentColor.CYAN));
																			}

																		}

																	}
																} else if (optionGroupsArrayObjectt
																		.has("option_conditions")) {

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					" The option group object doesn't have size conditions "
																							+ optStringSizeNameTextUI,
																					ExtentColor.CYAN));
																}

															}

															scrollSize();

															FlutterElement optionGroupName1Vk = find.byValueKey(
																	subMenuTrue.get(n).toLowerCase().replace(" ", "_")
																			+ "_size");

															optionGroupName1Vk.click();

														}

														scrollSize();

														FlutterElement optionGroupName1Vk = find.byValueKey(
																subMenuTrue.get(n).toLowerCase().replace(" ", "_")
																		+ "_size");

														optionGroupName1Vk.click();

														FlutterElement optionalRequired1Vk = find.byValueKey(
																subMenuTrue.get(n).toLowerCase().replace(" ", "_")
																		+ "_size_description");

														String optionalRequiredText1Vk = optionalRequired1Vk.getText();

														if (optionalRequiredText1Vk.toLowerCase()
																.contains("optional")) {

															boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																	.toLowerCase().contains("optional");

															Assert.assertEquals(optionalRequiredTextContains1Vk, true,
																	"Validated that the option group : "
																			+ optionGroupNameTextVk + " is optional ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	"Validated that the option group : "
																			+ optionGroupNameTextVk + " is optional ",
																	ExtentColor.CYAN));

														}

														else if (optionalRequiredText1Vk.toLowerCase()
																.contains("required")) {
															boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																	.toLowerCase().contains("required");

															Assert.assertEquals(optionalRequiredTextContains1Vk, true,
																	"Validated that the option group : "
																			+ optionGroupNameTextVk
																			+ " is required or mandatory ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	"Validated that the option group : "
																			+ optionGroupNameTextVk
																			+ " is required or mandatory ",
																	ExtentColor.CYAN));

														}

														FlutterElement optionGroupObjectNameSelectedOptionsVk = find
																.byValueKey(subMenuTrue.get(n).toLowerCase()
																		.replace(" ", "_") + "_size_selected_options");

														String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
																.getText();

														int countOfCommas = getCountOfCommas(
																optionGroupObjectNameSelectedOptionsTextVk);

														if (countOfCommas == 0) {

															Assert.assertEquals(countOfCommas, 0,
																	" Validated that the item is single selected  ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	" Validated that the item is single selected  ",
																	ExtentColor.CYAN));

														} else if (countOfCommas > 0) {

															Assert.assertEquals(countOfCommas + 1, subMenuPointsLength1,
																	" Validated that the item is a multi selected  ");

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	" Validated that the item is a multi selected  ",
																	ExtentColor.CYAN));

														}

													} else {

														nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																" The size is lesser or equal to 1 and it won't be displayed for the sub menu item name is : "
																		+ subMenuTrue.get(n),
																ExtentColor.CYAN));

													}
												} else {

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															"  The size is null and moving to the next option group for the sub menu item name is : "
																	+ subMenuTrue.get(n),
															ExtentColor.CYAN));
												}

												if (jsonArraySubMenuItemsLength > 0) {

													jsonObjectActive = jsonArraySubMenuItems.optJSONObject(n);

													stringActive = jsonObjectActive.optString("active");

													int parseIntActivee = Integer.parseInt(stringActive);

													if (canOrderMenu == "true" && parseIntActivee == 1) {

														if (jsonObjectActive.optJSONArray("option_groups") != null) {

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	" Option groups array is available at the index : "
																			+ n + " for the sub menu item : "
																			+ subMenuTrue.get(n),
																	ExtentColor.CYAN));

															jsonArrayOptionGroups = jsonObjectActive
																	.optJSONArray("option_groups");

															if (jsonArrayOptionGroups != null) {

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" option groups array is not null at the index : "
																						+ n
																						+ " for the sub menu item : "
																						+ subMenuTrue.get(n),
																				ExtentColor.CYAN));

															} else {

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" option groups array is null at the index : "
																						+ n
																						+ " for the sub menu item : "
																						+ subMenuTrue.get(n),
																				ExtentColor.CYAN));
															}
														} else {

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	" Option groups array is not available at the index : "
																			+ n + " for the sub menu item : "
																			+ subMenuTrue.get(n),
																	ExtentColor.CYAN));
														}

														stringSubMenuName = jsonObjectActive.optString("name");

														subMenuIsSoldout = jsonObjectActive.optString("is_sold_out");

														optStringAlcohol = jsonObjectActive.optString("alcohol");

														optStringTobacco = jsonObjectActive.optString("tobacco");

														optJSONArrayPrices = optJSONObjectActive.optJSONArray("prices");

													}
												}

												if (optJSONObjectPrice.has("pizza")) {
													JSONObject pizzaObject = optJSONObjectPrice.getJSONObject("pizza");

													for (String pizzaKey : pizzaObject.keySet()) {
														if (pizzaObject.get(pizzaKey) instanceof JSONArray) {
															JSONArray pizzaToppings = pizzaObject
																	.getJSONArray(pizzaKey);
															for (int m = 0; m < pizzaToppings.length(); m++) {
																Object pizzaToppingObject = pizzaToppings.get(m);

																if (pizzaToppingObject instanceof String) {
																	String pizzaTopping = (String) pizzaToppingObject;

																	if (containsTopping(optJSONObjectPrice,
																			pizzaTopping)) {

																		JSONArray toppingsArray = optJSONObjectPrice
																				.getJSONArray("option_groups");

																		toppingsNameMatch.clear();
																		for (int p = 0; p < toppingsArray
																				.length(); p++) {
																			JSONObject toppingObject = toppingsArray
																					.getJSONObject(p);
																			String toppingName = toppingObject
																					.getString("name");

																			if (pizzaTopping.equals(toppingName)) {

																				toppingsNameMatch.add(toppingName);
																			}
																		}
																		if (toppingsNameMatch.size() == 2) {

																			left = toppingsNameMatch.get(0);

																			right = toppingsNameMatch.get(1);

																		} else {

																			left = "Left";

																			right = "Right";

																		}
																	}
																}
															}
														}
													}
												}

												if (jsonObjectActive.optJSONArray("pizza_groups") != null) {

													JSONArray pizzaGroupsArray = jsonObjectActive
															.getJSONArray("pizza_groups");

													for (int j = 0; j < pizzaGroupsArray.length(); j++) {

														JSONObject pizzaGroupObject = pizzaGroupsArray.getJSONObject(j);

														String wholeGroupName = pizzaGroupObject
																.optString("whole_group_name");

														if (jsonObjectActive.getJSONArray("option_groups") != null) {

															JSONArray optionGroupsArray = jsonObjectActive
																	.getJSONArray("option_groups");

															boolean found = false;

															int optionGroupsLength = optionGroupsArray.length();

															for (int k = 0; k < optionGroupsLength; k++) {

																optionGroupObject = optionGroupsArray.getJSONObject(k);

																if (optionGroupObject.has("name")) {

																	optionGroupName = optionGroupObject
																			.getString("name");

																	if (wholeGroupName.equals(optionGroupName)) {

																		if (!optionGroupName
																				.equalsIgnoreCase("Left side")
																				|| !optionGroupName.equalsIgnoreCase(
																						"Right side")) {

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Pizza found! Whole Group Name: "
																									+ wholeGroupName,
																							ExtentColor.CYAN));

																			FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																					.byValueKey(subMenuTrue.get(n)
																							.toLowerCase()
																							.replace(" ", "_")
																							+ "_"
																							+ optionGroupName
																									.toLowerCase()
																									.replace(" ", "_"));

																			String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																					.getText();

																			Assert.assertEquals(optionGroupName,
																					optJSONArrayOptionGroupsObjectNameTextUI,
																					"Validated that the option group name from API is : "
																							+ optionGroupName
																							+ " and the option group name in UI is : "
																							+ optJSONArrayOptionGroupsObjectNameTextUI
																							+ " is same ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that the option group name from API is : "
																									+ optionGroupName
																									+ " and the option group name in UI is : "
																									+ optJSONArrayOptionGroupsObjectNameTextUI
																									+ " is same ",
																							ExtentColor.CYAN));

																			nextGenItemQuantityScreen001
																					.addScreenCaptureFromBase64String(
																							takeScreenshot(driver),
																							"Optional group name : "
																									+ optJSONArrayOptionGroupsObjectNameTextUI
																									+ " Screenshot ");

																			itemQuantityScroll();

																			optJSONArrayOptionGroupsObjectNameUI
																					.click();

																			itemQuantityScroll();

																			if (optionGroupObject.has("options")) {

																				JSONArray optJSONArrayOptions = optionGroupObject
																						.optJSONArray("options");

																				if (optJSONArrayOptions != null) {

																					int optJSONArrayOptionsLength = optJSONArrayOptions
																							.length();

																					for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																						itemQuantityScroll();

																						JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																								.optJSONObject(f);

																						String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																								.optString("name");

																						String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																								.optString("price");

																						double value = Double
																								.parseDouble(
																										optJSONArrayOptionsObjectPrice);

																						DecimalFormat decimalFormat = new DecimalFormat(
																								"0.00");

																						String optJSONArrayOptionsObjectPriceConcat = decimalFormat
																								.format(value);

																						String optStringIsDisabled = optJSONArrayOptionsObject
																								.optString(
																										"is_disabled");

																						String optStringIsDefault = optJSONArrayOptionsObject
																								.optString(
																										"is_default");

																						if (optStringIsDefault
																								.equalsIgnoreCase(
																										"false")) {

																							nextGenItemQuantityScreen001
																									.info(MarkupHelper
																											.createLabel(
																													" The option name :  "
																															+ optJSONArrayOptionsObjectName
																															+ " is not set to default and it's not selected and not shown in the list of the option group name : "
																															+ optionGroupName
																															+ " and it's not auto selected in the UI ",
																													ExtentColor.CYAN));

																						} else {

																							nextGenItemQuantityScreen001
																									.info(MarkupHelper
																											.createLabel(
																													" The option name :  "
																															+ optJSONArrayOptionsObjectName
																															+ " is set to default and it's selected and shown in the list of the option group name : "
																															+ optionGroupName
																															+ " and it's auto selected in the UI ",
																													ExtentColor.CYAN));

																						}

																						if (optStringIsDisabled
																								.equalsIgnoreCase(
																										"false")) {

																							FlutterElement optionGroupObjectNameVk = find
																									.byValueKey(
																											subMenuTrue
																													.get(n)
																													+ "_"
																													+ optionGroupName
																													+ "_"
																													+ optJSONArrayOptionsObjectName);

																							String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																									.getText();

																							Assert.assertEquals(
																									optionGroupObjectNameTextVk,
																									optJSONArrayOptionsObjectName,
																									"Validated that the option group name from API is : "
																											+ optionGroupObjectNameTextVk
																											+ " and the option group name in UI is : "
																											+ optJSONArrayOptionsObjectName
																											+ "in the index : "
																											+ f
																											+ " is same ");

																							nextGenItemQuantityScreen001
																									.info(MarkupHelper
																											.createLabel(
																													"Validated that the option group name from API is : "
																															+ optionGroupObjectNameTextVk
																															+ " and the option group name in UI is : "
																															+ optJSONArrayOptionsObjectName
																															+ "in the index : "
																															+ f
																															+ " is same ",
																													ExtentColor.CYAN));

																							double optJSONArrayOptionsObjectPriceInt = Double
																									.parseDouble(
																											optJSONArrayOptionsObjectPrice);

																							if (optJSONArrayOptionsObjectPriceInt > 0) {

																								FlutterElement optionGroupObjectPriceVk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														+ "_"
																														+ optionGroupName
																														+ "_"
																														+ optJSONArrayOptionsObjectName
																														+ "_"
																														+ optJSONArrayOptionsObjectPrice);

																								String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																										.getText();

																								String optionGroupObjectPriceTextReplaceVk = optionGroupObjectPriceTextVk
																										.replace("+",
																												"")
																										.replace(" ",
																												"");

																								Assert.assertEquals(
																										optionGroupObjectPriceTextReplaceVk,
																										optJSONArrayOptionsObjectPriceConcat
																												.replace(
																														" ",
																														""),
																										"Validated that the option group price from API is : "
																												+ optionGroupObjectPriceTextReplaceVk
																												+ " and the option group price in UI is : "
																												+ optJSONArrayOptionsObjectPriceInt
																												+ "in the index : "
																												+ f
																												+ " is same ");

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														"Validated that the option group price from API is : "
																																+ optionGroupObjectPriceTextReplaceVk
																																+ " and the option group price in UI is : "
																																+ optJSONArrayOptionsObjectPriceInt
																																+ "in the index : "
																																+ f
																																+ " is same ",
																														ExtentColor.CYAN));

																							} else {

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" Price is null for the item : "
																																+ subMenuTrue
																																		.get(n)
																																+ " of option groups : "
																																+ optionGroupName
																																+ " of the option : "
																																+ optJSONArrayOptionsObjectName,
																														ExtentColor.CYAN));

																							}

																							if (pizzaGroupObject.has(
																									"whole_group_name")) {

																								FlutterElement optionGroupObjectWholePizzaVk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														+ "_"
																														+ optionGroupName
																														+ "_"
																														+ optJSONArrayOptionsObjectName
																														+ "_whole");

																								optionGroupObjectWholePizzaVk
																										.click();

																							}

																							else {

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" Whole side customization is not available for the item : "
																																+ optionGroupName,
																														ExtentColor.CYAN));
																							}

																							if (pizzaGroupObject.has(
																									"left_group_name")) {

																								FlutterElement optionGroupObjectLeftPizzaVk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														+ "_"
																														+ optionGroupName
																														+ "_"
																														+ optJSONArrayOptionsObjectName
																														+ "_left");

																								optionGroupObjectLeftPizzaVk
																										.click();

																							} else {

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" Left side customization is not available for the item : "
																																+ optionGroupName,
																														ExtentColor.CYAN));
																							}

																							if (pizzaGroupObject.has(
																									"right_group_name")) {

																								FlutterElement optionGroupObjectRightPizzaVk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														+ "_"
																														+ optionGroupName
																														+ "_"
																														+ optJSONArrayOptionsObjectName
																														+ "_right");

																								optionGroupObjectRightPizzaVk
																										.click();

																							} else {

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" Right side customization is not available for the item : "
																																+ optionGroupName,
																														ExtentColor.CYAN));
																							}

																							if (pizzaGroupObject.has(
																									"allow_doubling")) {

																								String optStringAllowDoublingPizza = pizzaGroupObject
																										.optString(
																												"allow_doubling");

																								if (optStringAllowDoublingPizza
																										.equalsIgnoreCase(
																												"true")) {

																									if (f % 2 != 0) {

																										FlutterElement optionGroupObjectRightPizzaNormalVk = find
																												.byValueKey(
																														subMenuTrue
																																.get(n)
																																+ "_"
																																+ optionGroupName
																																+ "_"
																																+ optJSONArrayOptionsObjectName
																																+ "_normal");

																										optionGroupObjectRightPizzaNormalVk
																												.click();

																									}

																									else {

																										FlutterElement optionGroupObjectRightPizzaDoubleVk = find
																												.byValueKey(
																														subMenuTrue
																																.get(n)
																																+ "_"
																																+ optionGroupName
																																+ "_"
																																+ optJSONArrayOptionsObjectName
																																+ "_double");

																										optionGroupObjectRightPizzaDoubleVk
																												.click();

																									}

																								} else {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Doubling is false for the object group : "
																																	+ optionGroupName,
																															ExtentColor.CYAN));

																								}

																							} else {

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" Allow doubling param is not available for this pizza groups and hence NORMAL AND DOUBLE button won't be available for the item option : "
																																+ optionGroupName,
																														ExtentColor.CYAN));
																							}

																						} else {

																							nextGenItemQuantityScreen001
																									.info(MarkupHelper
																											.createLabel(
																													" The item : "
																															+ optJSONArrayOptionsObjectName
																															+ " in the option group named : "
																															+ optionGroupName
																															+ " is disabled ",
																													ExtentColor.CYAN));
																						}

																					}

																					scrollOptionsGroupUpAndClick(
																							optionGroupName);

																					String optionGroupNameReplace = optionGroupName
																							.toLowerCase()
																							.replace(" ", "_");

																					FlutterElement optionGroupObjectGroupVk = find
																							.byValueKey(subMenuTrue
																									.get(n)
																									.toLowerCase()
																									.replace(" ", "_")
																									+ "_"
																									+ optionGroupNameReplace);

																					optionGroupObjectGroupVk.click();

																					itemQuantityScroll();

																					FlutterElement optionalRequired1Vk = find
																							.byValueKey(subMenuTrue
																									.get(n)
																									.toLowerCase()
																									.replace(" ", "_")
																									+ "_"
																									+ optionGroupNameReplace
																									+ "_description");

																					String optionalRequiredText1Vk = optionalRequired1Vk
																							.getText();

																					if (optionalRequiredText1Vk
																							.toLowerCase()
																							.contains("optional")) {

																						boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																								.toLowerCase()
																								.contains("optional");

																						Assert.assertEquals(
																								optionalRequiredTextContains1Vk,
																								true,
																								"Validated that the option group : "
																										+ optionGroupNameReplace
																										+ " is optional ");

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												"Validated that the option group : "
																														+ optionGroupNameReplace
																														+ " is optional ",
																												ExtentColor.CYAN));

																					}

																					else if (optionalRequiredText1Vk
																							.toLowerCase()
																							.contains("required")) {
																						boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																								.toLowerCase()
																								.contains("required");

																						Assert.assertEquals(
																								optionalRequiredTextContains1Vk,
																								true,
																								"Validated that the option group : "
																										+ optionGroupNameReplace
																										+ " is required or mandatory ");

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												"Validated that the option group : "
																														+ optionGroupNameReplace
																														+ " is required or mandatory ",
																												ExtentColor.CYAN));

																					}

																					FlutterElement optionGroupObjectNameSelectedOptionsVk = find
																							.byValueKey(subMenuTrue
																									.get(n)
																									.toLowerCase()
																									.replace(" ", "_")
																									+ "_"
																									+ optionGroupNameReplace
																									+ "_selected_options");

																					String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
																							.getText();

																					int countOfCommas = getCountOfCommas(
																							optionGroupObjectNameSelectedOptionsTextVk);

																					if (countOfCommas == 0) {

																						Assert.assertEquals(
																								countOfCommas, 0,
																								" Validated that the item is single selected with the selcted option is : "
																										+ optionGroupObjectNameSelectedOptionsTextVk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" Validated that the item is single selected with the selcted option is : "
																														+ optionGroupObjectNameSelectedOptionsTextVk,
																												ExtentColor.CYAN));

																					} else if (countOfCommas > 0) {

																						Assert.assertEquals(
																								countOfCommas + 1,
																								countOfCommas + 1,
																								" Validated that the item is a multi selected ");

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" Validated that the item is a multi selected ",
																												ExtentColor.CYAN));

																					}

																				} else {

																					nextGenItemQuantityScreen001.info(
																							MarkupHelper.createLabel(
																									" The options array is null for the sub menu item : "
																											+ subMenuTrue
																													.get(n),
																									ExtentColor.CYAN));
																				}
																			} else {

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option group doesn't have options array for the sub menu item : "
																										+ subMenuTrue
																												.get(n),
																								ExtentColor.CYAN));
																			}

																		} else {

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Option groups contains : "
																									+ optionGroupName
																									+ " for the sub menu item : "
																									+ subMenuTrue
																											.get(n),
																							ExtentColor.CYAN));
																		}

																	} else if ((!optionGroupName.contains(left)
																			&& !optionGroupName.contains(right))) {

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						" Whole Group Name is not found in option_groups for Pizza "
																								+ subMenuTrue.get(n),
																						ExtentColor.CYAN));

																		if (jsonObjectActive.optJSONArray(
																				"option_groups") != null) {

																			if (jsonArrayOptionGroups != null) {

																				JSONObject optJSONArrayOptionGroupsObject = jsonArrayOptionGroups
																						.optJSONObject(k);

																				if (!optJSONArrayOptionGroupsObject
																						.has("size_conditions")) {

																					if (!optJSONArrayOptionGroupsObject
																							.has("option_conditions")) {

																						String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																								.optString("name");

																						String optJSONArrayOptionGroupsObjectNameReplace = optJSONArrayOptionGroupsObjectName
																								.toLowerCase()
																								.replace(" ", "_");

																						String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																								.optString(
																										"multiselect");

																						long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																								.getLong("min");

																						String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																								.optString(
																										"quantities");

																						if (optJSONArrayOptionGroupsObject
																								.has("max")) {

																							optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																									.getLong("max");

																						} else {

																							optJSONArrayOptionGroupsObjectMax = 999;
																						}

																						FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace);

																						String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																								.getText();

																						Assert.assertEquals(
																								optJSONArrayOptionGroupsObjectName,
																								optJSONArrayOptionGroupsObjectNameTextUI,
																								"Validated that the option group name from API is : "
																										+ optJSONArrayOptionGroupsObjectName
																										+ " and the option group name in UI is : "
																										+ optJSONArrayOptionGroupsObjectNameTextUI
																										+ " is same ");

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												"Validated that the option group name from API is : "
																														+ optJSONArrayOptionGroupsObjectName
																														+ " and the option group name in UI is : "
																														+ optJSONArrayOptionGroupsObjectNameTextUI
																														+ " is same ",
																												ExtentColor.CYAN));

																						nextGenItemQuantityScreen001
																								.addScreenCaptureFromBase64String(
																										takeScreenshot(
																												driver),
																										"Optional group name : "
																												+ optJSONArrayOptionGroupsObjectNameTextUI
																												+ " Screenshot ");

																						scrollOptionsGroupDown(
																								optJSONArrayOptionGroupsObjectName);

																						optJSONArrayOptionGroupsObjectNameUI
																								.click();

																						itemQuantityScroll();

																						if (optJSONArrayOptionGroupsObject
																								.has("options")) {

																							JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																									.optJSONArray(
																											"options");

																							if (optJSONArrayOptions != null) {

																								int optJSONArrayOptionsLength = optJSONArrayOptions
																										.length();

																								for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																									JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																											.optJSONObject(
																													f);

																									String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																											.optString(
																													"name");

																									String optJSONArrayOptionsObjectNameReplace = optJSONArrayOptionsObjectName
																											.toLowerCase()
																											.replace(
																													" ",
																													"_");

																									String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																											.optString(
																													"price");

																									String optStringIsDisabled = optJSONArrayOptionsObject
																											.optString(
																													"is_disabled");

																									String optStringIsDefault = optJSONArrayOptionsObject
																											.optString(
																													"is_default");

																									itemQuantityScroll();

																									if (optStringIsDefault
																											.equalsIgnoreCase(
																													"false")) {

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The option name :  "
																																		+ optJSONArrayOptionsObjectName
																																		+ " is not set to default and it's not shown in the list of the option group name : "
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ " and it's not auto selected in the UI ",
																																ExtentColor.CYAN));

																									} else {

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The option name :  "
																																		+ optJSONArrayOptionsObjectName
																																		+ " is set to default and it's shown in the list of the option group name : "
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ " and it's auto selected in the UI ",
																																ExtentColor.CYAN));

																									}

																									if (optStringIsDisabled
																											.equalsIgnoreCase(
																													"false")) {

																										FlutterElement optionGroupObjectNameVk = find
																												.byValueKey(
																														subMenuTrue
																																.get(n)
																																.toLowerCase()
																																.replace(
																																		" ",
																																		"_")
																																+ "_"
																																+ optJSONArrayOptionGroupsObjectNameReplace
																																+ "_"
																																+ optJSONArrayOptionsObjectNameReplace);

																										String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																												.getText();

																										Assert.assertEquals(
																												optionGroupObjectNameTextVk,
																												optJSONArrayOptionsObjectName,
																												"Validated that the option group name from API is : "
																														+ optionGroupObjectNameTextVk
																														+ " and the option group name in UI is : "
																														+ optJSONArrayOptionsObjectName
																														+ " in the index : "
																														+ f
																														+ " is same ");

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																"Validated that the option group name from API is : "
																																		+ optionGroupObjectNameTextVk
																																		+ " and the option group name in UI is : "
																																		+ optJSONArrayOptionsObjectName
																																		+ " in the index : "
																																		+ f
																																		+ " is same ",
																																ExtentColor.CYAN));

																										double optJSONArrayOptionsObjectPriceInt = Double
																												.parseDouble(
																														optJSONArrayOptionsObjectPrice);

																										if (optJSONArrayOptionsObjectPriceInt > 0) {

																											FlutterElement optionGroupObjectPriceVk = find
																													.byValueKey(
																															subMenuTrue
																																	.get(n)
																																	.toLowerCase()
																																	.replace(
																																			" ",
																																			"_")
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectPrice);

																											String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																													.getText();

																											String optionGroupObjectPriceTextReplaceVk = optionGroupObjectPriceTextVk
																													.replace(
																															"+",
																															"")
																													.replace(
																															" ",
																															"");

																											Assert.assertEquals(
																													optionGroupObjectPriceTextReplaceVk,
																													optJSONArrayOptionsObjectPrice
																															.replace(
																																	" ",
																																	""),
																													"Validated that the option group price from API is : "
																															+ optionGroupObjectPriceTextReplaceVk
																															+ " and the option group price in UI is : "
																															+ optJSONArrayOptionsObjectPriceInt
																															+ "in the index : "
																															+ f
																															+ " is same ");

																											nextGenItemQuantityScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	"Validated that the option group price from API is : "
																																			+ optionGroupObjectPriceTextReplaceVk
																																			+ " and the option group price in UI is : "
																																			+ optJSONArrayOptionsObjectPriceInt
																																			+ "in the index : "
																																			+ f
																																			+ " is same ",
																																	ExtentColor.CYAN));

																										}

																										else {

																											nextGenItemQuantityScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	" Price is null for the item : "
																																			+ subMenuTrue
																																					.get(n)
																																			+ " of option groups : "
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ " of the option : "
																																			+ optJSONArrayOptionsObjectNameReplace,
																																	ExtentColor.CYAN));
																										}

																										if ((optJSONArrayOptionGroupsObjectMin == 0
																												|| !optJSONArrayOptionGroupsObject
																														.has("min"))
																												&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																											nextGenItemQuantityScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	" The option : "
																																			+ optionGroupObjectNameTextVk
																																			+ " is single selection optional field",
																																	ExtentColor.CYAN));

																											if (optJSONArrayOptionGroupsObjectQuantities == "true"
																													&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option : "
																																				+ optionGroupObjectNameTextVk
																																				+ " is single selection optional field has increment decrement button ",
																																		ExtentColor.CYAN));

																												FlutterElement optionCountVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountTextVk = optionCountVk
																														.getText();

																												long optionCountLongVk = Long
																														.parseLong(
																																optionCountTextVk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" Before tapping increment and decrement button the count is : "
																																				+ optionCountLongVk,
																																		ExtentColor.CYAN));

																												if (optStringIsDefault
																														.equalsIgnoreCase(
																																"true")) {

																													FlutterElement optionGroupObjectNameIncrementButtonVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_decrement");

																													optionGroupObjectNameIncrementButtonVk
																															.click();

																												}

																												FlutterElement optionGroupObjectNameIncrementButtonVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_increment");

																												optionGroupObjectNameIncrementButtonVk
																														.click();

																												FlutterElement optionCount1Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountText1Vk = optionCount1Vk
																														.getText();

																												long optionCountLong1Vk = Long
																														.parseLong(
																																optionCountText1Vk);

																												Assert.assertNotEquals(
																														optionCountTextVk,
																														optionCountText1Vk,
																														"Validated that after tapping increment button the count has been increased to : "
																																+ optionCountText1Vk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		"Validated that after tapping increment button the count has been increased to : "
																																				+ optionCountText1Vk,
																																		ExtentColor.CYAN));

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" After tapping increment button the count is : "
																																				+ optionCountLong1Vk,
																																		ExtentColor.CYAN));

																												FlutterElement optionGroupObjectNameDecrementButtonVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_decrement");

																												optionGroupObjectNameDecrementButtonVk
																														.click();

																												FlutterElement optionCount2Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountText2Vk = optionCount2Vk
																														.getText();

																												long optionCountLong2Vk = Long
																														.parseLong(
																																optionCountText2Vk);

																												Assert.assertEquals(
																														optionCountTextVk,
																														optionCountText2Vk,
																														"Validated that after tapping decrement button the count has been decreased to : "
																																+ optionCountText2Vk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" After tapping decrement button the count is : "
																																				+ optionCountLong2Vk,
																																		ExtentColor.CYAN));

																												FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_increment");

																												optionGroupObjectNameIncrementButton1Vk
																														.click();

																												FlutterElement optionCount3Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountText3Vk = optionCount3Vk
																														.getText();

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" After tapping increment button the count is : "
																																				+ optionCountText3Vk,
																																		ExtentColor.CYAN));

																												if (optJSONArrayOptionGroupsObject
																														.has("max")) {

																													String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																															.optString(
																																	"max");

																													int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																															.parseInt(
																																	optJSONArrayOptionGroupsObjectMaximum);

																													if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																															- 1) {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" Validated that after tapping the max limit of : "
																																						+ optJSONArrayOptionGroupsObjectMax
																																						+ " in this option group name : "
																																						+ optJSONArrayOptionGroupsObjectName
																																						+ " the below items are hidden ",
																																				ExtentColor.CYAN));

																														FlutterElement optionGroupObjectNameDecrementButton1Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_decrement");

																														optionGroupObjectNameDecrementButton1Vk
																																.click();
																													}
																													if (f > optJSONArrayOptionsLength
																															- optJSONArrayOptionGroupsObjectMaximumInt) {
																														System.out
																														.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																														FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_increment");

																														optionGroupObjectNameIncrementButton2Vk
																																.click();
																													}
																												} else {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" There is no maximum condition for this option group : "
																																					+ optJSONArrayOptionGroupsObjectName,
																																			ExtentColor.CYAN));
																												}

																											} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																													&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option : "
																																				+ optionGroupObjectNameTextVk
																																				+ " is single selection optional field has checkbox ",
																																		ExtentColor.CYAN));

																												if (optStringIsDefault
																														.equalsIgnoreCase(
																																"true")) {

																													FlutterElement optionGroupObjectNameCheckboxVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_checkbox");

																													optionGroupObjectNameCheckboxVk
																															.click();

																												}

																												FlutterElement optionGroupObjectNameCheckboxVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_checkbox");

																												optionGroupObjectNameCheckboxVk
																														.click();

																												if (optJSONArrayOptionGroupsObject
																														.has("option_levels")) {
																													JSONObject optionLevels = optJSONArrayOptionGroupsObject
																															.getJSONObject(
																																	"option_levels");
																													String optionLevelsName = optionLevels
																															.getString(
																																	"name");

																													JSONArray optJSONArrayLevels = optionLevels
																															.optJSONArray(
																																	"levels");

																													if (optJSONArrayLevels != null) {

																														for (int a = 0; a < optJSONArrayLevels
																																.length(); a++) {

																															JSONObject jsonObjectLevels = optJSONArrayLevels
																																	.getJSONObject(
																																			a);

																															levelsList
																																	.clear();

																															for (int b = 0; b < optJSONArrayLevels
																																	.length(); b++) {

																																JSONObject jsonObjectLevelss = optJSONArrayLevels
																																		.getJSONObject(
																																				b);

																																String levelsNames = jsonObjectLevelss
																																		.optString(
																																				"name");

																																levelsList
																																		.add(levelsNames);

																															}

																															String levelsName = jsonObjectLevels
																																	.optString(
																																			"name");

																															String levelsNameReplace = levelsName
																																	.toLowerCase()
																																	.replace(
																																			" ",
																																			"_");

																															String levelsDefault = jsonObjectLevels
																																	.optString(
																																			"is_default");

																															if (levelsDefault
																																	.equalsIgnoreCase(
																																			"true")) {

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" The option name :  "
																																								+ optionGroupObjectNameTextVk
																																								+ " is set to default and it's not shown in the list of the option group name : "
																																								+ levelsName
																																								+ " and it's not auto selected in the UI ",
																																						ExtentColor.CYAN));

																															} else {

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" The option name :  "
																																								+ optionGroupObjectNameTextVk
																																								+ " is not set to default and it's shown in the list of the option group name : "
																																								+ levelsName
																																								+ " and it's auto selected in the UI ",
																																						ExtentColor.CYAN));
																															}

																															FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_"
																																					+ "level_name");

																															String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																	.getText();

																															boolean levelsNameContains = levelsList
																																	.contains(
																																			optionGroupObjectNameOptionLevelsTextVk);

																															Assert.assertEquals(
																																	levelsNameContains,
																																	true,
																																	" Validated that the option levels name from the API and the option levels name from the UI is : "
																																			+ optionGroupObjectNameOptionLevelsTextVk
																																			+ " are same ");

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" Validated that the option levels name from the API and the option levels name from the UI is : "
																																							+ optionGroupObjectNameOptionLevelsTextVk
																																							+ " are same ",
																																					ExtentColor.CYAN));

																															FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_rightarrow");

																															optionGroupObjectNameOptionLevelsForwardArrowVk
																																	.click();

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																					ExtentColor.CYAN));

																														}

																														FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_leftarrow");

																														optionGroupObjectNameOptionLevelsBackwardArrowVk
																																.click();
																													}
																												}

																												if (optJSONObjectPrice1
																														.optJSONArray(
																																"option_groups") != null) {

																													JSONArray optionGroups = optJSONObjectPrice1
																															.getJSONArray(
																																	"option_groups");

																													for (int g = 0; g < optionGroups
																															.length(); g++) {
																														JSONObject optionGroup = optionGroups
																																.getJSONObject(
																																		g);

																														if (optionGroup
																																.has("option_conditions")) {
																															JSONArray optionConditionsArray = optionGroup
																																	.getJSONArray(
																																			"option_conditions");

																															for (int h = 0; h < optionConditionsArray
																																	.length(); h++) {
																																JSONArray optionCondition = optionConditionsArray
																																		.getJSONArray(
																																				h);

																																for (int m = 0; m < optionCondition
																																		.length(); m++) {
																																	JSONObject condition = optionCondition
																																			.getJSONObject(
																																					m);

																																	String optionValue = condition
																																			.getString(
																																					"option_value");
																																	String optionGroupInCondition = condition
																																			.getString(
																																					"option_group");

																																	if (optionGroupObjectNameTextVk
																																			.equals(optionValue)) {

																																		String optionGroupName = optionGroup
																																				.getString(
																																						"name");

																																		String optionGroupNameLowerCase = optionGroupName
																																				.replace(
																																						" ",
																																						"_")
																																				.toLowerCase();

																																		String quantities = optionGroup
																																				.optString(
																																						"quantities");

																																		scrollOptionsGroupDown(
																																				optionGroupName);

																																		FlutterElement optionGroupVk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optionGroupNameLowerCase);

																																		optionGroupVk
																																				.click();

																																		itemQuantityScroll();

																																		if (optionGroup
																																				.has("options")) {

																																			JSONArray options = optionGroup
																																					.optJSONArray(
																																							"options");

																																			for (int b = 0; b < options
																																					.length(); b++) {

																																				JSONObject optionObject = options
																																						.getJSONObject(
																																								b);

																																				String optionsName = optionObject
																																						.optString(
																																								"name");

																																				String optionsNameLowerCase = optionsName
																																						.replace(
																																								" ",
																																								"_")
																																						.toLowerCase();

																																				String isDefault = optionObject
																																						.optString(
																																								"is_default");

																																				String isDisabled = optionObject
																																						.optString(
																																								"is_disabled");

																																				if (isDisabled == "false") {

																																					if (quantities == "true") {

																																						if (isDefault == "true") {

																																							FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_decrement");

																																							optionGroupObjectNameDecrementOptCVk
																																									.click();

																																						}

																																						FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																								.byValueKey(
																																										subMenuTrue
																																												.get(n)
																																												.toLowerCase()
																																												.replace(
																																														" ",
																																														"_")
																																												+ "_"
																																												+ optionGroupNameLowerCase
																																												+ "_"
																																												+ optionsNameLowerCase
																																												+ "_increment");

																																						optionGroupObjectNameIncrementOptCVk
																																								.click();

																																					} else if (quantities == "false") {

																																						if (isDefault == "true") {

																																							FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_checkbox");

																																							optionGroupObjectNameCheckboxOptCVk
																																									.click();

																																						}

																																						FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																								.byValueKey(
																																										subMenuTrue
																																												.get(n)
																																												.toLowerCase()
																																												.replace(
																																														" ",
																																														"_")
																																												+ "_"
																																												+ optionGroupNameLowerCase
																																												+ "_"
																																												+ optionsNameLowerCase
																																												+ "_checkbox");

																																						optionGroupObjectNameCheckboxOptCVk
																																								.click();

																																						if (optionGroup
																																								.has("option_levels")) {
																																							JSONObject optionLevels = optionGroup
																																									.getJSONObject(
																																											"option_levels");
																																							String optionLevelsName = optionLevels
																																									.getString(
																																											"name");

																																							JSONArray optJSONArrayLevels = optionLevels
																																									.optJSONArray(
																																											"levels");

																																							if (optJSONArrayLevels != null) {

																																								for (int a = 0; a < optJSONArrayLevels
																																										.length(); a++) {

																																									JSONObject jsonObjectLevels = optJSONArrayLevels
																																											.getJSONObject(
																																													a);

																																									levelsList
																																											.clear();

																																									for (int c = 0; c < optJSONArrayLevels
																																											.length(); c++) {

																																										JSONObject jsonObjectLevelss = optJSONArrayLevels
																																												.getJSONObject(
																																														c);

																																										String levelsNames = jsonObjectLevelss
																																												.optString(
																																														"name");

																																										levelsList
																																												.add(levelsNames);

																																									}

																																									String levelsName = jsonObjectLevels
																																											.optString(
																																													"name");

																																									String levelsNameReplace = levelsName
																																											.toLowerCase()
																																											.replace(
																																													" ",
																																													"_");

																																									String levelsDefault = jsonObjectLevels
																																											.optString(
																																													"is_default");

																																									if (levelsDefault
																																											.equalsIgnoreCase(
																																													"true")) {

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" The option name :  "
																																																		+ optionGroupObjectNameTextVk
																																																		+ " is set to default and it's not shown in the list of the option group name : "
																																																		+ levelsName
																																																		+ " and it's not auto selected in the UI ",
																																																ExtentColor.CYAN));

																																									} else {

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" The option name :  "
																																																		+ optionGroupObjectNameTextVk
																																																		+ " is not set to default and it's shown in the list of the option group name : "
																																																		+ levelsName
																																																		+ " and it's auto selected in the UI ",
																																																ExtentColor.CYAN));

																																									}

																																									FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_"
																																															+ "level_name");

																																									String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																											.getText();

																																									boolean levelsNameContains = levelsList
																																											.contains(
																																													optionGroupObjectNameOptionLevelsTextVk);

																																									Assert.assertEquals(
																																											levelsNameContains,
																																											true,
																																											" Validated that the option levels name from the API and the option levels name from the UI is : "
																																													+ optionGroupObjectNameOptionLevelsTextVk
																																													+ " are same ");

																																									nextGenItemQuantityScreen001
																																											.info(MarkupHelper
																																													.createLabel(
																																															" Validated that the option levels name from the API and the option levels name from the UI is : "
																																																	+ optionGroupObjectNameOptionLevelsTextVk
																																																	+ " are same ",
																																															ExtentColor.CYAN));

																																									FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_rightarrow");

																																									optionGroupObjectNameOptionLevelsForwardArrowVk
																																											.click();

																																									nextGenItemQuantityScreen001
																																											.info(MarkupHelper
																																													.createLabel(
																																															" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																															ExtentColor.CYAN));

																																								}

																																								FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optJSONArrayOptionGroupsObjectNameReplace
																																														+ "_"
																																														+ optJSONArrayOptionsObjectNameReplace
																																														+ "_leftarrow");

																																								optionGroupObjectNameOptionLevelsBackwardArrowVk
																																										.click();
																																							}
																																						}

																																						if (optionGroup
																																								.has("max")) {

																																							String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																									.optString(
																																											"max");

																																							int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																									.parseInt(
																																											optJSONArrayOptionGroupsObjectMaximum);

																																							if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																									- 1) {

																																								nextGenItemQuantityScreen001
																																										.info(MarkupHelper
																																												.createLabel(
																																														" Validated that after tapping the max limit of : "
																																																+ optJSONArrayOptionGroupsObjectMax
																																																+ " in this option group name : "
																																																+ optJSONArrayOptionGroupsObjectName
																																																+ " the below items are hidden ",
																																														ExtentColor.CYAN));

																																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optJSONArrayOptionGroupsObjectNameReplace
																																														+ "_"
																																														+ optJSONArrayOptionsObjectNameReplace
																																														+ "_checkbox");

																																								optionGroupObjectNameCheckbox1Vk
																																										.click();

																																							}

																																							if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																																								System.out
																																								.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optJSONArrayOptionGroupsObjectNameReplace
																																														+ "_"
																																														+ optJSONArrayOptionsObjectNameReplace
																																														+ "_checkbox");

																																								optionGroupObjectNameCheckbox1Vk
																																										.click();

																																							}

																																						} else {

																																							nextGenItemQuantityScreen001
																																									.info(MarkupHelper
																																											.createLabel(
																																													" There is no maximum condition for this option group : "
																																															+ optJSONArrayOptionGroupsObjectName,
																																													ExtentColor.CYAN));
																																						}

																																					}

																																				}
																																			}

																																			scrollOptionsGroupUpAndClick(
																																					optJSONArrayOptionGroupsObjectName);

																																			FlutterElement optionGroupObjectGroupVk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optJSONArrayOptionGroupsObjectNameReplace);

																																			optionGroupObjectGroupVk
																																					.click();

																																			itemQuantityScroll();

																																		}
																																	}

																																	else {

																																		nextGenItemQuantityScreen001
																																				.info(MarkupHelper
																																						.createLabel(
																																								"No match found for option_value: "
																																										+ optionGroupObjectNameTextVk,
																																								ExtentColor.CYAN));

																																	}
																																}
																															}

																														}

																													}

																												}

																												if (optJSONArrayOptionGroupsObject
																														.has("max")) {

																													String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																															.optString(
																																	"max");

																													int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																															.parseInt(
																																	optJSONArrayOptionGroupsObjectMaximum);

																													if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																															- 1) {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" Validated that after tapping the max limit of : "
																																						+ optJSONArrayOptionGroupsObjectMax
																																						+ " in this option group name : "
																																						+ optJSONArrayOptionGroupsObjectName
																																						+ " the below items are hidden ",
																																				ExtentColor.CYAN));

																														FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_checkbox");

																														optionGroupObjectNameCheckbox1Vk
																																.click();

																													}
																													if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {

																														System.out
																																.println(
																																		f + " < "
																																				+ optJSONArrayOptionGroupsObjectMaximumInt);

																														FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_checkbox");

																														optionGroupObjectNameCheckbox1Vk
																																.click();

																													}
																												} else {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" There is no maximum condition for this option group : "
																																					+ optJSONArrayOptionGroupsObjectName,
																																			ExtentColor.CYAN));
																												}

																											}
																										} else if (optJSONArrayOptionGroupsObjectMin == 1
																												&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																											nextGenItemQuantityScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	" The option : "
																																			+ optionGroupObjectNameTextVk
																																			+ " is single selection Mandatory field",
																																	ExtentColor.CYAN));

																											if (optJSONArrayOptionGroupsObjectQuantities == "true"
																													&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option : "
																																				+ optionGroupObjectNameTextVk
																																				+ " is single selection Mandatory field has increment decrement button",
																																		ExtentColor.CYAN));

																												FlutterElement optionCountVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountTextVk = optionCountVk
																														.getText();

																												long optionCountLongVk = Long
																														.parseLong(
																																optionCountTextVk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" Before tapping increment and decrement button the count is : "
																																				+ optionCountLongVk,
																																		ExtentColor.CYAN));
																												if (optStringIsDefault
																														.equalsIgnoreCase(
																																"true")) {

																													FlutterElement optionGroupObjectNameIncrementButtonVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_decrement");

																													optionGroupObjectNameIncrementButtonVk
																															.click();

																												}
																												FlutterElement optionGroupObjectNameIncrementButtonVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_increment");

																												optionGroupObjectNameIncrementButtonVk
																														.click();

																												FlutterElement optionCount1Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountText1Vk = optionCount1Vk
																														.getText();

																												long optionCountLong1Vk = Long
																														.parseLong(
																																optionCountText1Vk);

																												Assert.assertNotEquals(
																														optionCountTextVk,
																														optionCountText1Vk,
																														"Validated that after tapping increment button the count has been increased to : "
																																+ optionCountText1Vk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		"Validated that after tapping increment button the count has been increased to : "
																																				+ optionCountText1Vk,
																																		ExtentColor.CYAN));

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" After tapping increment button the count is : "
																																				+ optionCountLong1Vk,
																																		ExtentColor.CYAN));

																												FlutterElement optionGroupObjectNameDecrementButtonVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_decrement");

																												optionGroupObjectNameDecrementButtonVk
																														.click();

																												FlutterElement optionCount2Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountText2Vk = optionCount2Vk
																														.getText();

																												long optionCountLong2Vk = Long
																														.parseLong(
																																optionCountText2Vk);

																												Assert.assertEquals(
																														optionCountTextVk,
																														optionCountText2Vk,
																														"Validated that after tapping decreased button the count has been decreased to : "
																																+ optionCountText2Vk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" After tapping decrement button the count is : "
																																				+ optionCountLong2Vk,
																																		ExtentColor.CYAN));

																												FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_increment");

																												optionGroupObjectNameIncrementButton1Vk
																														.click();

																												FlutterElement optionCount3Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountText3Vk = optionCount3Vk
																														.getText();

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" After tapping increment button the count is : "
																																				+ optionCountText3Vk,
																																		ExtentColor.CYAN));
																												if (optJSONArrayOptionGroupsObject
																														.has("max")) {

																													String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																															.optString(
																																	"max");

																													int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																															.parseInt(
																																	optJSONArrayOptionGroupsObjectMaximum);

																													if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																															- 1) {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" Validated that after tapping the max limit of : "
																																						+ optJSONArrayOptionGroupsObjectMax
																																						+ " in this option group name : "
																																						+ optJSONArrayOptionGroupsObjectName
																																						+ " the below items are hidden ",
																																				ExtentColor.CYAN));

																														FlutterElement optionGroupObjectNameDecrementButton1Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_decrement");

																														optionGroupObjectNameDecrementButton1Vk
																																.click();
																													}
																													if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {

																														System.out
																																.println(
																																		f + " < "
																																				+ optJSONArrayOptionGroupsObjectMaximumInt);

																														FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_increment");

																														optionGroupObjectNameIncrementButton2Vk
																																.click();
																													}
																												} else {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" There is no maximum condition for this option group : "
																																					+ optJSONArrayOptionGroupsObjectName,
																																			ExtentColor.CYAN));
																												}

																											} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																													&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option : "
																																				+ optionGroupObjectNameTextVk
																																				+ " is single selection Mandatory field has checkbox",
																																		ExtentColor.CYAN));
																												if (optStringIsDefault
																														.equalsIgnoreCase(
																																"true")) {

																													FlutterElement optionGroupObjectNameCheckboxVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_checkbox");

																													optionGroupObjectNameCheckboxVk
																															.click();

																												}
																												FlutterElement optionGroupObjectNameCheckboxVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_checkbox");

																												optionGroupObjectNameCheckboxVk
																														.click();

																												if (optJSONArrayOptionGroupsObject
																														.has("option_levels")) {
																													JSONObject optionLevels = optJSONArrayOptionGroupsObject
																															.getJSONObject(
																																	"option_levels");
																													String optionLevelsName = optionLevels
																															.getString(
																																	"name");

																													JSONArray optJSONArrayLevels = optionLevels
																															.optJSONArray(
																																	"levels");

																													if (optJSONArrayLevels != null) {

																														for (int a = 0; a < optJSONArrayLevels
																																.length(); a++) {

																															JSONObject jsonObjectLevels = optJSONArrayLevels
																																	.getJSONObject(
																																			a);

																															levelsList
																																	.clear();

																															for (int b = 0; b < optJSONArrayLevels
																																	.length(); b++) {

																																JSONObject jsonObjectLevelss = optJSONArrayLevels
																																		.getJSONObject(
																																				b);

																																String levelsNames = jsonObjectLevelss
																																		.optString(
																																				"name");

																																levelsList
																																		.add(levelsNames);

																															}

																															String levelsName = jsonObjectLevels
																																	.optString(
																																			"name");

																															String levelsNameReplace = levelsName
																																	.toLowerCase()
																																	.replace(
																																			" ",
																																			"_");

																															String levelsDefault = jsonObjectLevels
																																	.optString(
																																			"is_default");

																															if (levelsDefault
																																	.equalsIgnoreCase(
																																			"true")) {

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" The option name :  "
																																								+ optionGroupObjectNameTextVk
																																								+ " is set to default and it's not shown in the list of the option group name : "
																																								+ levelsName
																																								+ " and it's not auto selected in the UI ",
																																						ExtentColor.CYAN));
																															} else {

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" The option name :  "
																																								+ optionGroupObjectNameTextVk
																																								+ " is not set to default and it's shown in the list of the option group name : "
																																								+ levelsName
																																								+ " and it's auto selected in the UI ",
																																						ExtentColor.CYAN));
																															}

																															FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_"
																																					+ "level_name");

																															String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																	.getText();

																															boolean levelsNameContains = levelsList
																																	.contains(
																																			optionGroupObjectNameOptionLevelsTextVk);

																															Assert.assertEquals(
																																	levelsNameContains,
																																	true,
																																	" Validated that the option levels name from the API and the option levels name from the UI is : "
																																			+ optionGroupObjectNameOptionLevelsTextVk
																																			+ " are same ");

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" Validated that the option levels name from the API and the option levels name from the UI is : "
																																							+ optionGroupObjectNameOptionLevelsTextVk
																																							+ " are same ",
																																					ExtentColor.CYAN));

																															FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_rightarrow");

																															optionGroupObjectNameOptionLevelsForwardArrowVk
																																	.click();

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																					ExtentColor.CYAN));

																														}

																														FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_leftarrow");

																														optionGroupObjectNameOptionLevelsBackwardArrowVk
																																.click();
																													}
																												}

																												if (optJSONObjectPrice1
																														.optJSONArray(
																																"option_groups") != null) {

																													JSONArray optionGroups = optJSONObjectPrice1
																															.getJSONArray(
																																	"option_groups");

																													for (int g = 0; g < optionGroups
																															.length(); g++) {
																														JSONObject optionGroup = optionGroups
																																.getJSONObject(
																																		g);

																														if (optionGroup
																																.has("option_conditions")) {
																															JSONArray optionConditionsArray = optionGroup
																																	.getJSONArray(
																																			"option_conditions");

																															for (int h = 0; h < optionConditionsArray
																																	.length(); h++) {
																																JSONArray optionCondition = optionConditionsArray
																																		.getJSONArray(
																																				h);

																																for (int m = 0; m < optionCondition
																																		.length(); m++) {
																																	JSONObject condition = optionCondition
																																			.getJSONObject(
																																					m);

																																	String optionValue = condition
																																			.getString(
																																					"option_value");
																																	String optionGroupInCondition = condition
																																			.getString(
																																					"option_group");

																																	if (optionGroupObjectNameTextVk
																																			.equals(optionValue)) {

																																		String optionGroupName = optionGroup
																																				.getString(
																																						"name");

																																		String optionGroupNameLowerCase = optionGroupName
																																				.replace(
																																						" ",
																																						"_")
																																				.toLowerCase();

																																		String quantities = optionGroup
																																				.optString(
																																						"quantities");

																																		scrollOptionsGroupDown(
																																				optionGroupName);

																																		FlutterElement optionGroupVk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optionGroupNameLowerCase);

																																		optionGroupVk
																																				.click();

																																		itemQuantityScroll();

																																		if (optionGroup
																																				.has("options")) {

																																			JSONArray options = optionGroup
																																					.optJSONArray(
																																							"options");

																																			for (int c = 0; c < options
																																					.length(); c++) {

																																				JSONObject optionObject = options
																																						.getJSONObject(
																																								c);

																																				String optionsName = optionObject
																																						.optString(
																																								"name");

																																				String optionsNameLowerCase = optionsName
																																						.replace(
																																								" ",
																																								"_")
																																						.toLowerCase();

																																				String isDefault = optionObject
																																						.optString(
																																								"is_default");

																																				String isDisabled = optionObject
																																						.optString(
																																								"is_disabled");

																																				if (isDisabled == "false") {

																																					if (quantities == "true") {

																																						if (isDefault == "true") {

																																							FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_decrement");

																																							optionGroupObjectNameDecrementOptCVk
																																									.click();

																																						}

																																						FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																								.byValueKey(
																																										subMenuTrue
																																												.get(n)
																																												.toLowerCase()
																																												.replace(
																																														" ",
																																														"_")
																																												+ "_"
																																												+ optionGroupNameLowerCase
																																												+ "_"
																																												+ optionsNameLowerCase
																																												+ "_increment");

																																						optionGroupObjectNameIncrementOptCVk
																																								.click();

																																					} else if (quantities == "false") {

																																						if (isDefault == "true") {

																																							FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_checkbox");

																																							optionGroupObjectNameCheckboxOptCVk
																																									.click();

																																						}

																																						FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																								.byValueKey(
																																										subMenuTrue
																																												.get(n)
																																												.toLowerCase()
																																												.replace(
																																														" ",
																																														"_")
																																												+ "_"
																																												+ optionGroupNameLowerCase
																																												+ "_"
																																												+ optionsNameLowerCase
																																												+ "_checkbox");

																																						optionGroupObjectNameCheckboxOptCVk
																																								.click();

																																						if (optionGroup
																																								.has("option_levels")) {
																																							JSONObject optionLevels = optionGroup
																																									.getJSONObject(
																																											"option_levels");
																																							String optionLevelsName = optionLevels
																																									.getString(
																																											"name");

																																							JSONArray optJSONArrayLevels = optionLevels
																																									.optJSONArray(
																																											"levels");

																																							if (optJSONArrayLevels != null) {

																																								for (int a = 0; a < optJSONArrayLevels
																																										.length(); a++) {

																																									JSONObject jsonObjectLevels = optJSONArrayLevels
																																											.getJSONObject(
																																													a);

																																									levelsList
																																											.clear();

																																									for (int b = 0; b < optJSONArrayLevels
																																											.length(); b++) {

																																										JSONObject jsonObjectLevelss = optJSONArrayLevels
																																												.getJSONObject(
																																														b);

																																										String levelsNames = jsonObjectLevelss
																																												.optString(
																																														"name");

																																										levelsList
																																												.add(levelsNames);

																																									}

																																									String levelsName = jsonObjectLevels
																																											.optString(
																																													"name");

																																									String levelsNameReplace = levelsName
																																											.toLowerCase()
																																											.replace(
																																													" ",
																																													"_");

																																									String levelsDefault = jsonObjectLevels
																																											.optString(
																																													"is_default");

																																									if (levelsDefault
																																											.equalsIgnoreCase(
																																													"true")) {

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" The option name :  "
																																																		+ optionGroupObjectNameTextVk
																																																		+ " is set to default and it's not shown in the list of the option group name : "
																																																		+ levelsName
																																																		+ " and it's not auto selected in the UI ",
																																																ExtentColor.CYAN));

																																									} else {

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" The option name :  "
																																																		+ optionGroupObjectNameTextVk
																																																		+ " is not set to default and it's shown in the list of the option group name : "
																																																		+ levelsName
																																																		+ " and it's auto selected in the UI ",
																																																ExtentColor.CYAN));
																																									}

																																									FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_"
																																															+ "level_name");

																																									String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																											.getText();

																																									boolean levelsNameContains = levelsList
																																											.contains(
																																													optionGroupObjectNameOptionLevelsTextVk);

																																									Assert.assertEquals(
																																											levelsNameContains,
																																											true,
																																											" Validated that the option levels name from the API and the option levels name from the UI is : "
																																													+ optionGroupObjectNameOptionLevelsTextVk
																																													+ " are same ");

																																									nextGenItemQuantityScreen001
																																											.info(MarkupHelper
																																													.createLabel(
																																															" Validated that the option levels name from the API and the option levels name from the UI is : "
																																																	+ optionGroupObjectNameOptionLevelsTextVk
																																																	+ " are same ",
																																															ExtentColor.CYAN));

																																									FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_rightarrow");

																																									optionGroupObjectNameOptionLevelsForwardArrowVk
																																											.click();

																																									nextGenItemQuantityScreen001
																																											.info(MarkupHelper
																																													.createLabel(
																																															" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																															ExtentColor.CYAN));

																																								}

																																								FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optJSONArrayOptionGroupsObjectNameReplace
																																														+ "_"
																																														+ optJSONArrayOptionsObjectNameReplace
																																														+ "_leftarrow");

																																								optionGroupObjectNameOptionLevelsBackwardArrowVk
																																										.click();
																																							}
																																						}

																																						if (optionGroup
																																								.has("max")) {

																																							String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																									.optString(
																																											"max");

																																							int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																									.parseInt(
																																											optJSONArrayOptionGroupsObjectMaximum);

																																							if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																									- 1) {

																																								nextGenItemQuantityScreen001
																																										.info(MarkupHelper
																																												.createLabel(
																																														" Validated that after tapping the max limit of : "
																																																+ optJSONArrayOptionGroupsObjectMax
																																																+ " in this option group name : "
																																																+ optJSONArrayOptionGroupsObjectName
																																																+ " the below items are hidden ",
																																														ExtentColor.CYAN));

																																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optJSONArrayOptionGroupsObjectNameReplace
																																														+ "_"
																																														+ optJSONArrayOptionsObjectNameReplace
																																														+ "_checkbox");

																																								optionGroupObjectNameCheckbox1Vk
																																										.click();

																																							}

																																							if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																																								System.out
																																								.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optJSONArrayOptionGroupsObjectNameReplace
																																														+ "_"
																																														+ optJSONArrayOptionsObjectNameReplace
																																														+ "_checkbox");

																																								optionGroupObjectNameCheckbox1Vk
																																										.click();

																																							}

																																						} else {

																																							nextGenItemQuantityScreen001
																																									.info(MarkupHelper
																																											.createLabel(
																																													" There is no maximum condition for this option group : "
																																															+ optJSONArrayOptionGroupsObjectName,
																																													ExtentColor.CYAN));
																																						}

																																					}

																																				}
																																			}

																																			scrollOptionsGroupUpAndClick(
																																					optJSONArrayOptionGroupsObjectName);

																																			FlutterElement optionGroupObjectGroupVk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optJSONArrayOptionGroupsObjectNameReplace);

																																			optionGroupObjectGroupVk
																																					.click();

																																			itemQuantityScroll();
																																		}
																																	}

																																	else {

																																		nextGenItemQuantityScreen001
																																				.info(MarkupHelper
																																						.createLabel(
																																								"No match found for option_value: "
																																										+ optionGroupObjectNameTextVk,
																																								ExtentColor.CYAN));

																																	}
																																}
																															}

																														}

																													}

																												}
																												if (optJSONArrayOptionGroupsObject
																														.has("max")) {

																													String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																															.optString(
																																	"max");

																													int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																															.parseInt(
																																	optJSONArrayOptionGroupsObjectMaximum);

																													if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																															- 1) {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" Validated that after tapping the max limit of : "
																																						+ optJSONArrayOptionGroupsObjectMax
																																						+ " in this option group name : "
																																						+ optJSONArrayOptionGroupsObjectName
																																						+ " the below items are hidden ",
																																				ExtentColor.CYAN));

																														FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_checkbox");

																														optionGroupObjectNameCheckbox1Vk
																																.click();

																													}
																													if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																														System.out
																														.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																														FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_checkbox");

																														optionGroupObjectNameCheckbox1Vk
																																.click();

																													}
																												} else {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" There is no maximum condition for this option group : "
																																					+ optJSONArrayOptionGroupsObjectName,
																																			ExtentColor.CYAN));
																												}
																											}
																										}

																										else if (optJSONArrayOptionGroupsObjectMin == 0
																												&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																											nextGenItemQuantityScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	" The option : "
																																			+ optionGroupObjectNameTextVk
																																			+ " is multi selection optional field",
																																	ExtentColor.CYAN));

																											if (optJSONArrayOptionGroupsObjectQuantities == "true"
																													&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option : "
																																				+ optionGroupObjectNameTextVk
																																				+ " is multi selection optional field has increment decrement button",
																																		ExtentColor.CYAN));

																												FlutterElement optionCountVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountTextVk = optionCountVk
																														.getText();

																												long optionCountLongVk = Long
																														.parseLong(
																																optionCountTextVk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" Before tapping increment and decrement button the count is : "
																																				+ optionCountLongVk,
																																		ExtentColor.CYAN));
																												if (optStringIsDefault
																														.equalsIgnoreCase(
																																"true")) {

																													FlutterElement optionGroupObjectNameIncrementButtonVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_decrement");

																													optionGroupObjectNameIncrementButtonVk
																															.click();

																												}
																												FlutterElement optionGroupObjectNameIncrementButtonVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_increment");

																												optionGroupObjectNameIncrementButtonVk
																														.click();

																												FlutterElement optionCount1Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountText1Vk = optionCount1Vk
																														.getText();

																												long optionCountLong1Vk = Long
																														.parseLong(
																																optionCountText1Vk);

																												Assert.assertNotEquals(
																														optionCountTextVk,
																														optionCountText1Vk,
																														"Validated that after tapping increment button the count has been increased to : "
																																+ optionCountText1Vk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		"Validated that after tapping increment button the count has been increased to : "
																																				+ optionCountText1Vk,
																																		ExtentColor.CYAN));

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" After tapping increment button the count is : "
																																				+ optionCountLong1Vk,
																																		ExtentColor.CYAN));

																												FlutterElement optionGroupObjectNameDecrementButtonVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_decrement");

																												optionGroupObjectNameDecrementButtonVk
																														.click();

																												FlutterElement optionCount2Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountText2Vk = optionCount2Vk
																														.getText();

																												long optionCountLong2Vk = Long
																														.parseLong(
																																optionCountText2Vk);

																												Assert.assertEquals(
																														optionCountTextVk,
																														optionCountText2Vk,
																														"Validated that after tapping decrement button the count has been decreased to : "
																																+ optionCountText2Vk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" After tapping decrement button the count is : "
																																				+ optionCountLong2Vk,
																																		ExtentColor.CYAN));

																												FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_increment");

																												optionGroupObjectNameIncrementButton1Vk
																														.click();

																												FlutterElement optionCount3Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountText3Vk = optionCount3Vk
																														.getText();

																												long optionCountLong3Vk = Long
																														.parseLong(
																																optionCountText3Vk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" After tapping the increment button the count is : "
																																				+ optionCountLong3Vk,
																																		ExtentColor.CYAN));

																												if (optJSONArrayOptionGroupsObject
																														.has("max")) {

																													String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																															.optString(
																																	"max");

																													int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																															.parseInt(
																																	optJSONArrayOptionGroupsObjectMaximum);

																													if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																															- 1) {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" Validated that after tapping the max limit of : "
																																						+ optJSONArrayOptionGroupsObjectMax
																																						+ " in this option group name : "
																																						+ optJSONArrayOptionGroupsObjectName
																																						+ " the below items are hidden ",
																																				ExtentColor.CYAN));

																														FlutterElement optionGroupObjectNameDecrementButton1Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_decrement");

																														optionGroupObjectNameDecrementButton1Vk
																																.click();
																													}
																													if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																														System.out
																														.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																														FlutterElement optionGroupObjectNameIncrementButton3Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_increment");

																														optionGroupObjectNameIncrementButton3Vk
																																.click();
																													}
																												} else {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" There is no maximum condition for this option group : "
																																					+ optJSONArrayOptionGroupsObjectName,
																																			ExtentColor.CYAN));
																												}

																											} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																													&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option : "
																																				+ optionGroupObjectNameTextVk
																																				+ " is multi selection Mandatory field has checkbox",
																																		ExtentColor.CYAN));
																												if (optStringIsDefault
																														.equalsIgnoreCase(
																																"true")) {

																													FlutterElement optionGroupObjectNameCheckboxVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_checkbox");

																													optionGroupObjectNameCheckboxVk
																															.click();

																												}
																												FlutterElement optionGroupObjectNameCheckboxVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_checkbox");

																												optionGroupObjectNameCheckboxVk
																														.click();

																												if (optJSONArrayOptionGroupsObject
																														.has("option_levels")) {
																													JSONObject optionLevels = optJSONArrayOptionGroupsObject
																															.getJSONObject(
																																	"option_levels");
																													String optionLevelsName = optionLevels
																															.getString(
																																	"name");

																													JSONArray optJSONArrayLevels = optionLevels
																															.optJSONArray(
																																	"levels");

																													if (optJSONArrayLevels != null) {

																														for (int a = 0; a < optJSONArrayLevels
																																.length(); a++) {

																															JSONObject jsonObjectLevels = optJSONArrayLevels
																																	.getJSONObject(
																																			a);

																															levelsList
																																	.clear();

																															for (int b = 0; b < optJSONArrayLevels
																																	.length(); b++) {

																																JSONObject jsonObjectLevelss = optJSONArrayLevels
																																		.getJSONObject(
																																				b);

																																String levelsNames = jsonObjectLevelss
																																		.optString(
																																				"name");

																																levelsList
																																		.add(levelsNames);

																															}

																															String levelsName = jsonObjectLevels
																																	.optString(
																																			"name");

																															String levelsNameReplace = levelsName
																																	.toLowerCase()
																																	.replace(
																																			" ",
																																			"_");

																															String levelsDefault = jsonObjectLevels
																																	.optString(
																																			"is_default");

																															if (levelsDefault
																																	.equalsIgnoreCase(
																																			"true")) {

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" The option name :  "
																																								+ optionGroupObjectNameTextVk
																																								+ " is set to default and it's not shown in the list of the option group name : "
																																								+ levelsName
																																								+ " and it's not auto selected in the UI ",
																																						ExtentColor.CYAN));

																															} else {

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" The option name :  "
																																								+ optionGroupObjectNameTextVk
																																								+ " is not set to default and it's shown in the list of the option group name : "
																																								+ levelsName
																																								+ " and it's auto selected in the UI ",
																																						ExtentColor.CYAN));
																															}

																															FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_"
																																					+ "level_name");

																															String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																	.getText();

																															boolean levelsNameContains = levelsList
																																	.contains(
																																			optionGroupObjectNameOptionLevelsTextVk);

																															Assert.assertEquals(
																																	levelsNameContains,
																																	true,
																																	" Validated that the option levels name from the API and the option levels name from the UI is : "
																																			+ optionGroupObjectNameOptionLevelsTextVk
																																			+ " are same ");

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" Validated that the option levels name from the API and the option levels name from the UI is : "
																																							+ optionGroupObjectNameOptionLevelsTextVk
																																							+ " are same ",
																																					ExtentColor.CYAN));

																															FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_rightarrow");

																															optionGroupObjectNameOptionLevelsForwardArrowVk
																																	.click();

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																					ExtentColor.CYAN));

																														}

																														FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_leftarrow");

																														optionGroupObjectNameOptionLevelsBackwardArrowVk
																																.click();
																													}
																												}

																												if (optJSONObjectPrice1
																														.optJSONArray(
																																"option_groups") != null) {

																													JSONArray optionGroups = optJSONObjectPrice1
																															.getJSONArray(
																																	"option_groups");

																													for (int g = 0; g < optionGroups
																															.length(); g++) {
																														JSONObject optionGroup = optionGroups
																																.getJSONObject(
																																		g);

																														if (optionGroup
																																.has("option_conditions")) {
																															JSONArray optionConditionsArray = optionGroup
																																	.getJSONArray(
																																			"option_conditions");

																															for (int h = 0; h < optionConditionsArray
																																	.length(); h++) {
																																JSONArray optionCondition = optionConditionsArray
																																		.getJSONArray(
																																				h);

																																for (int m = 0; m < optionCondition
																																		.length(); m++) {
																																	JSONObject condition = optionCondition
																																			.getJSONObject(
																																					m);

																																	String optionValue = condition
																																			.getString(
																																					"option_value");
																																	String optionGroupInCondition = condition
																																			.getString(
																																					"option_group");

																																	if (optionGroupObjectNameTextVk
																																			.equals(optionValue)) {

																																		String optionGroupName = optionGroup
																																				.getString(
																																						"name");

																																		String optionGroupNameLowerCase = optionGroupName
																																				.replace(
																																						" ",
																																						"_")
																																				.toLowerCase();

																																		String quantities = optionGroup
																																				.optString(
																																						"quantities");

																																		scrollOptionsGroupDown(
																																				optionGroupName);

																																		FlutterElement optionGroupVk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optionGroupNameLowerCase);

																																		optionGroupVk
																																				.click();

																																		itemQuantityScroll();

																																		if (optionGroup
																																				.has("options")) {

																																			JSONArray options = optionGroup
																																					.optJSONArray(
																																							"options");

																																			for (int c = 0; c < options
																																					.length(); c++) {

																																				JSONObject optionObject = options
																																						.getJSONObject(
																																								c);

																																				String optionsName = optionObject
																																						.optString(
																																								"name");

																																				String optionsNameLowerCase = optionsName
																																						.replace(
																																								" ",
																																								"_")
																																						.toLowerCase();

																																				String isDefault = optionObject
																																						.optString(
																																								"is_default");

																																				String isDisabled = optionObject
																																						.optString(
																																								"is_disabled");

																																				if (isDisabled == "false") {

																																					if (quantities == "true") {

																																						if (isDefault == "true") {

																																							FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_decrement");

																																							optionGroupObjectNameDecrementOptCVk
																																									.click();

																																						}

																																						FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																								.byValueKey(
																																										subMenuTrue
																																												.get(n)
																																												.toLowerCase()
																																												.replace(
																																														" ",
																																														"_")
																																												+ "_"
																																												+ optionGroupNameLowerCase
																																												+ "_"
																																												+ optionsNameLowerCase
																																												+ "_increment");

																																						optionGroupObjectNameIncrementOptCVk
																																								.click();

																																					} else if (quantities == "false") {

																																						if (isDefault == "true") {

																																							FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_checkbox");

																																							optionGroupObjectNameCheckboxOptCVk
																																									.click();

																																						}

																																						FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																								.byValueKey(
																																										subMenuTrue
																																												.get(n)
																																												.toLowerCase()
																																												.replace(
																																														" ",
																																														"_")
																																												+ "_"
																																												+ optionGroupNameLowerCase
																																												+ "_"
																																												+ optionsNameLowerCase
																																												+ "_checkbox");

																																						optionGroupObjectNameCheckboxOptCVk
																																								.click();

																																						if (optionGroup
																																								.has("option_levels")) {
																																							JSONObject optionLevels = optionGroup
																																									.getJSONObject(
																																											"option_levels");
																																							String optionLevelsName = optionLevels
																																									.getString(
																																											"name");

																																							JSONArray optJSONArrayLevels = optionLevels
																																									.optJSONArray(
																																											"levels");

																																							if (optJSONArrayLevels != null) {

																																								for (int a = 0; a < optJSONArrayLevels
																																										.length(); a++) {

																																									JSONObject jsonObjectLevels = optJSONArrayLevels
																																											.getJSONObject(
																																													a);

																																									levelsList
																																											.clear();

																																									for (int b = 0; b < optJSONArrayLevels
																																											.length(); b++) {

																																										JSONObject jsonObjectLevelss = optJSONArrayLevels
																																												.getJSONObject(
																																														b);

																																										String levelsNames = jsonObjectLevelss
																																												.optString(
																																														"name");

																																										levelsList
																																												.add(levelsNames);

																																									}

																																									String levelsName = jsonObjectLevels
																																											.optString(
																																													"name");

																																									String levelsNameReplace = levelsName
																																											.toLowerCase()
																																											.replace(
																																													" ",
																																													"_");

																																									String levelsDefault = jsonObjectLevels
																																											.optString(
																																													"is_default");

																																									if (levelsDefault
																																											.equalsIgnoreCase(
																																													"true")) {

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" The option name :  "
																																																		+ optionGroupObjectNameTextVk
																																																		+ " is set to default and it's not shown in the list of the option group name : "
																																																		+ levelsName
																																																		+ " and it's not auto selected in the UI ",
																																																ExtentColor.CYAN));

																																									} else {

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" The option name :  "
																																																		+ optionGroupObjectNameTextVk
																																																		+ " is not set to default and it's shown in the list of the option group name : "
																																																		+ levelsName
																																																		+ " and it's auto selected in the UI ",
																																																ExtentColor.CYAN));
																																									}

																																									FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_"
																																															+ "level_name");

																																									String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																											.getText();

																																									boolean levelsNameContains = levelsList
																																											.contains(
																																													optionGroupObjectNameOptionLevelsTextVk);

																																									Assert.assertEquals(
																																											levelsNameContains,
																																											true,
																																											" Validated that the option levels name from the API and the option levels name from the UI is : "
																																													+ optionGroupObjectNameOptionLevelsTextVk
																																													+ " are same ");

																																									nextGenItemQuantityScreen001
																																											.info(MarkupHelper
																																													.createLabel(
																																															" Validated that the option levels name from the API and the option levels name from the UI is : "
																																																	+ optionGroupObjectNameOptionLevelsTextVk
																																																	+ " are same ",
																																															ExtentColor.CYAN));

																																									FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_rightarrow");

																																									optionGroupObjectNameOptionLevelsForwardArrowVk
																																											.click();

																																									nextGenItemQuantityScreen001
																																											.info(MarkupHelper
																																													.createLabel(
																																															" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																															ExtentColor.CYAN));

																																								}

																																								FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optJSONArrayOptionGroupsObjectNameReplace
																																														+ "_"
																																														+ optJSONArrayOptionsObjectNameReplace
																																														+ "_leftarrow");

																																								optionGroupObjectNameOptionLevelsBackwardArrowVk
																																										.click();
																																							}
																																						}

																																						if (optionGroup
																																								.has("max")) {

																																							String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																									.optString(
																																											"max");

																																							int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																									.parseInt(
																																											optJSONArrayOptionGroupsObjectMaximum);

																																							if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																									- 1) {

																																								nextGenItemQuantityScreen001
																																										.info(MarkupHelper
																																												.createLabel(
																																														" Validated that after tapping the max limit of : "
																																																+ optJSONArrayOptionGroupsObjectMax
																																																+ " in this option group name : "
																																																+ optJSONArrayOptionGroupsObjectName
																																																+ " the below items are hidden ",
																																														ExtentColor.CYAN));

																																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optJSONArrayOptionGroupsObjectNameReplace
																																														+ "_"
																																														+ optJSONArrayOptionsObjectNameReplace
																																														+ "_checkbox");

																																								optionGroupObjectNameCheckbox1Vk
																																										.click();

																																							}

																																							if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																																								System.out
																																								.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optJSONArrayOptionGroupsObjectNameReplace
																																														+ "_"
																																														+ optJSONArrayOptionsObjectNameReplace
																																														+ "_checkbox");

																																								optionGroupObjectNameCheckbox1Vk
																																										.click();

																																							}

																																						} else {

																																							nextGenItemQuantityScreen001
																																									.info(MarkupHelper
																																											.createLabel(
																																													" There is no maximum condition for this option group : "
																																															+ optJSONArrayOptionGroupsObjectName,
																																													ExtentColor.CYAN));
																																						}

																																					}

																																				}
																																			}
																																			scrollOptionsGroupUpAndClick(
																																					optJSONArrayOptionGroupsObjectName);

																																			FlutterElement optionGroupObjectGroupVk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optJSONArrayOptionGroupsObjectNameReplace);

																																			optionGroupObjectGroupVk
																																					.click();

																																			itemQuantityScroll();
																																		}
																																	}

																																	else {

																																		nextGenItemQuantityScreen001
																																				.info(MarkupHelper
																																						.createLabel(
																																								"No match found for option_value: "
																																										+ optionGroupObjectNameTextVk,
																																								ExtentColor.CYAN));

																																	}
																																}
																															}

																														}

																													}

																												}

																												if (optJSONArrayOptionGroupsObject
																														.has("max")) {

																													String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																															.optString(
																																	"max");

																													int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																															.parseInt(
																																	optJSONArrayOptionGroupsObjectMaximum);

																													if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																															- 1) {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" Validated that after tapping the max limit of : "
																																						+ optJSONArrayOptionGroupsObjectMax
																																						+ " in this option group name : "
																																						+ optJSONArrayOptionGroupsObjectName
																																						+ " the below items are hidden ",
																																				ExtentColor.CYAN));

																														FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_checkbox");

																														optionGroupObjectNameCheckbox1Vk
																																.click();

																													}
																													if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																														System.out
																														.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																														FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_checkbox");

																														optionGroupObjectNameCheckbox1Vk
																																.click();

																													}
																												} else {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" There is no maximum condition for this option group : "
																																					+ optJSONArrayOptionGroupsObjectName,
																																			ExtentColor.CYAN));
																												}

																											}

																										} else if (optJSONArrayOptionGroupsObjectMin >= 1
																												&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																											nextGenItemQuantityScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	" The option : "
																																			+ optionGroupObjectNameTextVk
																																			+ " is multi selection mandatory field",
																																	ExtentColor.CYAN));

																											if (optJSONArrayOptionGroupsObjectQuantities == "true"
																													&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option : "
																																				+ optionGroupObjectNameTextVk
																																				+ " is multi selection mandatory field has increment decrement button",
																																		ExtentColor.CYAN));

																												FlutterElement optionCountVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountTextVk = optionCountVk
																														.getText();

																												long optionCountLongVk = Long
																														.parseLong(
																																optionCountTextVk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" Before tapping increment and decrement button the count is : "
																																				+ optionCountLongVk,
																																		ExtentColor.CYAN));
																												if (optStringIsDefault
																														.equalsIgnoreCase(
																																"true")) {

																													FlutterElement optionGroupObjectNameIncrementButtonVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_decrement");

																													optionGroupObjectNameIncrementButtonVk
																															.click();

																												}
																												FlutterElement optionGroupObjectNameIncrementButtonVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_increment");

																												optionGroupObjectNameIncrementButtonVk
																														.click();

																												FlutterElement optionCount1Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountText1Vk = optionCount1Vk
																														.getText();

																												long optionCountLong1Vk = Long
																														.parseLong(
																																optionCountText1Vk);

																												Assert.assertNotEquals(
																														optionCountTextVk,
																														optionCountText1Vk,
																														"Validated that after tapping increment button the count has been increased to : "
																																+ optionCountText1Vk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		"Validated that after tapping increment button the count has been increased to : "
																																				+ optionCountText1Vk,
																																		ExtentColor.CYAN));

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" After tapping increment button the count is : "
																																				+ optionCountLong1Vk,
																																		ExtentColor.CYAN));

																												FlutterElement optionGroupObjectNameDecrementButtonVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_decrement");

																												optionGroupObjectNameDecrementButtonVk
																														.click();

																												FlutterElement optionCount2Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountText2Vk = optionCount2Vk
																														.getText();

																												long optionCountLong2Vk = Long
																														.parseLong(
																																optionCountText2Vk);

																												Assert.assertEquals(
																														optionCountTextVk,
																														optionCountText2Vk,
																														"Validated that after tapping decrement button the count has been decreased to : "
																																+ optionCountText2Vk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" After tapping decrement button the count is : "
																																				+ optionCountLong2Vk,
																																		ExtentColor.CYAN));

																												FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_increment");

																												optionGroupObjectNameIncrementButton1Vk
																														.click();

																												FlutterElement optionCount3Vk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_quantityvalue");

																												String optionCountText3Vk = optionCount3Vk
																														.getText();

																												long optionCountLong3Vk = Long
																														.parseLong(
																																optionCountText3Vk);

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" After tapping the increment button the count is : "
																																				+ optionCountLong3Vk,
																																		ExtentColor.CYAN));

																												if (optJSONArrayOptionGroupsObject
																														.has("max")) {

																													String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																															.optString(
																																	"max");

																													int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																															.parseInt(
																																	optJSONArrayOptionGroupsObjectMaximum);

																													if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																															- 1) {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" Validated that after tapping the max limit of : "
																																						+ optJSONArrayOptionGroupsObjectMax
																																						+ " in this option group name : "
																																						+ optJSONArrayOptionGroupsObjectName
																																						+ " the below items are hidden ",
																																				ExtentColor.CYAN));

																														FlutterElement optionGroupObjectNameDecrementButton1Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_decrement");

																														optionGroupObjectNameDecrementButton1Vk
																																.click();
																													}
																													if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																														System.out
																														.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																														FlutterElement optionGroupObjectNameIncrementButton4Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_increment");

																														optionGroupObjectNameIncrementButton4Vk
																																.click();
																													}
																												} else {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" There is no maximum condition for this option group : "
																																					+ optJSONArrayOptionGroupsObjectName,
																																			ExtentColor.CYAN));
																												}

																											} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																													&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option : "
																																				+ optionGroupObjectNameTextVk
																																				+ " is multi selection Mandatory field has checkbox",
																																		ExtentColor.CYAN));
																												if (optStringIsDefault
																														.equalsIgnoreCase(
																																"true")) {

																													FlutterElement optionGroupObjectNameCheckboxVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace
																																			+ "_"
																																			+ optJSONArrayOptionsObjectNameReplace
																																			+ "_checkbox");

																													optionGroupObjectNameCheckboxVk
																															.click();

																												}
																												FlutterElement optionGroupObjectNameCheckboxVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_checkbox");

																												optionGroupObjectNameCheckboxVk
																														.click();

																												if (optJSONArrayOptionGroupsObject
																														.has("option_levels")) {
																													JSONObject optionLevels = optJSONArrayOptionGroupsObject
																															.getJSONObject(
																																	"option_levels");
																													String optionLevelsName = optionLevels
																															.getString(
																																	"name");

																													JSONArray optJSONArrayLevels = optionLevels
																															.optJSONArray(
																																	"levels");

																													if (optJSONArrayLevels != null) {

																														for (int a = 0; a < optJSONArrayLevels
																																.length(); a++) {

																															JSONObject jsonObjectLevels = optJSONArrayLevels
																																	.getJSONObject(
																																			a);

																															levelsList
																																	.clear();

																															for (int b = 0; b < optJSONArrayLevels
																																	.length(); b++) {

																																JSONObject jsonObjectLevelss = optJSONArrayLevels
																																		.getJSONObject(
																																				b);

																																String levelsNames = jsonObjectLevelss
																																		.optString(
																																				"name");

																																levelsList
																																		.add(levelsNames);

																															}

																															String levelsName = jsonObjectLevels
																																	.optString(
																																			"name");

																															String levelsNameReplace = levelsName
																																	.toLowerCase()
																																	.replace(
																																			" ",
																																			"_");

																															String levelsDefault = jsonObjectLevels
																																	.optString(
																																			"is_default");

																															if (levelsDefault
																																	.equalsIgnoreCase(
																																			"true")) {

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" The option name :  "
																																								+ optionGroupObjectNameTextVk
																																								+ " is set to default and it's not shown in the list of the option group name : "
																																								+ levelsName
																																								+ " and it's not auto selected in the UI ",
																																						ExtentColor.CYAN));

																															} else {

																																nextGenItemQuantityScreen001
																																		.info(MarkupHelper
																																				.createLabel(
																																						" The option name :  "
																																								+ optionGroupObjectNameTextVk
																																								+ " is not set to default and it's shown in the list of the option group name : "
																																								+ levelsName
																																								+ " and it's auto selected in the UI ",
																																						ExtentColor.CYAN));
																															}

																															FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_"
																																					+ "level_name");

																															String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																	.getText();

																															boolean levelsNameContains = levelsList
																																	.contains(
																																			optionGroupObjectNameOptionLevelsTextVk);

																															Assert.assertEquals(
																																	levelsNameContains,
																																	true,
																																	" Validated that the option levels name from the API and the option levels name from the UI is : "
																																			+ optionGroupObjectNameOptionLevelsTextVk
																																			+ " are same ");

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" Validated that the option levels name from the API and the option levels name from the UI is : "
																																							+ optionGroupObjectNameOptionLevelsTextVk
																																							+ " are same ",
																																					ExtentColor.CYAN));

																															FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																	.byValueKey(
																																			subMenuTrue
																																					.get(n)
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_")
																																					+ "_"
																																					+ optJSONArrayOptionGroupsObjectNameReplace
																																					+ "_"
																																					+ optJSONArrayOptionsObjectNameReplace
																																					+ "_rightarrow");

																															optionGroupObjectNameOptionLevelsForwardArrowVk
																																	.click();

																															nextGenItemQuantityScreen001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																					ExtentColor.CYAN));

																														}

																														FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_leftarrow");

																														optionGroupObjectNameOptionLevelsBackwardArrowVk
																																.click();
																													}
																												}

																												if (optJSONObjectPrice1
																														.optJSONArray(
																																"option_groups") != null) {

																													JSONArray optionGroups = optJSONObjectPrice1
																															.getJSONArray(
																																	"option_groups");

																													for (int g = 0; g < optionGroups
																															.length(); g++) {
																														JSONObject optionGroup = optionGroups
																																.getJSONObject(
																																		g);

																														if (optionGroup
																																.has("option_conditions")) {
																															JSONArray optionConditionsArray = optionGroup
																																	.getJSONArray(
																																			"option_conditions");

																															for (int h = 0; h < optionConditionsArray
																																	.length(); h++) {
																																JSONArray optionCondition = optionConditionsArray
																																		.getJSONArray(
																																				h);

																																for (int m = 0; m < optionCondition
																																		.length(); m++) {
																																	JSONObject condition = optionCondition
																																			.getJSONObject(
																																					m);

																																	String optionValue = condition
																																			.getString(
																																					"option_value");
																																	String optionGroupInCondition = condition
																																			.getString(
																																					"option_group");

																																	if (optionGroupObjectNameTextVk
																																			.equals(optionValue)) {

																																		String optionGroupName = optionGroup
																																				.getString(
																																						"name");

																																		String optionGroupNameLowerCase = optionGroupName
																																				.replace(
																																						" ",
																																						"_")
																																				.toLowerCase();

																																		String quantities = optionGroup
																																				.optString(
																																						"quantities");

																																		scrollOptionsGroupDown(
																																				optionGroupName);

																																		FlutterElement optionGroupVk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optionGroupNameLowerCase);

																																		optionGroupVk
																																				.click();

																																		itemQuantityScroll();

																																		if (optionGroup
																																				.has("options")) {

																																			JSONArray options = optionGroup
																																					.optJSONArray(
																																							"options");

																																			for (int c = 0; c < options
																																					.length(); c++) {

																																				JSONObject optionObject = options
																																						.getJSONObject(
																																								j);

																																				String optionsName = optionObject
																																						.optString(
																																								"name");

																																				String optionsNameLowerCase = optionsName
																																						.replace(
																																								" ",
																																								"_")
																																						.toLowerCase();

																																				String isDefault = optionObject
																																						.optString(
																																								"is_default");

																																				String isDisabled = optionObject
																																						.optString(
																																								"is_disabled");

																																				if (isDisabled == "false") {

																																					if (quantities == "true") {

																																						if (isDefault == "true") {

																																							FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_decrement");

																																							optionGroupObjectNameDecrementOptCVk
																																									.click();

																																						}

																																						FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																								.byValueKey(
																																										subMenuTrue
																																												.get(n)
																																												.toLowerCase()
																																												.replace(
																																														" ",
																																														"_")
																																												+ "_"
																																												+ optionGroupNameLowerCase
																																												+ "_"
																																												+ optionsNameLowerCase
																																												+ "_increment");

																																						optionGroupObjectNameIncrementOptCVk
																																								.click();

																																					} else if (quantities == "false") {

																																						if (isDefault == "true") {

																																							FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																									.byValueKey(
																																											subMenuTrue
																																													.get(n)
																																													.toLowerCase()
																																													.replace(
																																															" ",
																																															"_")
																																													+ "_"
																																													+ optionGroupNameLowerCase
																																													+ "_"
																																													+ optionsNameLowerCase
																																													+ "_checkbox");

																																							optionGroupObjectNameCheckboxOptCVk
																																									.click();

																																						}

																																						FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																								.byValueKey(
																																										subMenuTrue
																																												.get(n)
																																												.toLowerCase()
																																												.replace(
																																														" ",
																																														"_")
																																												+ "_"
																																												+ optionGroupNameLowerCase
																																												+ "_"
																																												+ optionsNameLowerCase
																																												+ "_checkbox");

																																						optionGroupObjectNameCheckboxOptCVk
																																								.click();

																																						if (optionGroup
																																								.has("option_levels")) {
																																							JSONObject optionLevels = optionGroup
																																									.getJSONObject(
																																											"option_levels");
																																							String optionLevelsName = optionLevels
																																									.getString(
																																											"name");

																																							JSONArray optJSONArrayLevels = optionLevels
																																									.optJSONArray(
																																											"levels");

																																							if (optJSONArrayLevels != null) {

																																								for (int a = 0; a < optJSONArrayLevels
																																										.length(); a++) {

																																									JSONObject jsonObjectLevels = optJSONArrayLevels
																																											.getJSONObject(
																																													a);

																																									levelsList
																																											.clear();

																																									for (int b = 0; b < optJSONArrayLevels
																																											.length(); b++) {

																																										JSONObject jsonObjectLevelss = optJSONArrayLevels
																																												.getJSONObject(
																																														b);

																																										String levelsNames = jsonObjectLevelss
																																												.optString(
																																														"name");

																																										levelsList
																																												.add(levelsNames);

																																									}

																																									String levelsName = jsonObjectLevels
																																											.optString(
																																													"name");

																																									String levelsNameReplace = levelsName
																																											.toLowerCase()
																																											.replace(
																																													" ",
																																													"_");

																																									String levelsDefault = jsonObjectLevels
																																											.optString(
																																													"is_default");

																																									if (levelsDefault
																																											.equalsIgnoreCase(
																																													"true")) {

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" The option name :  "
																																																		+ optionGroupObjectNameTextVk
																																																		+ " is set to default and it's not shown in the list of the option group name : "
																																																		+ levelsName
																																																		+ " and it's not auto selected in the UI ",
																																																ExtentColor.CYAN));

																																									} else {

																																										nextGenItemQuantityScreen001
																																												.info(MarkupHelper
																																														.createLabel(
																																																" The option name :  "
																																																		+ optionGroupObjectNameTextVk
																																																		+ " is not set to default and it's shown in the list of the option group name : "
																																																		+ levelsName
																																																		+ " and it's auto selected in the UI ",
																																																ExtentColor.CYAN));
																																									}

																																									FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_"
																																															+ "level_name");

																																									String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																											.getText();

																																									boolean levelsNameContains = levelsList
																																											.contains(
																																													optionGroupObjectNameOptionLevelsTextVk);

																																									Assert.assertEquals(
																																											levelsNameContains,
																																											true,
																																											" Validated that the option levels name from the API and the option levels name from the UI is : "
																																													+ optionGroupObjectNameOptionLevelsTextVk
																																													+ " are same ");

																																									nextGenItemQuantityScreen001
																																											.info(MarkupHelper
																																													.createLabel(
																																															" Validated that the option levels name from the API and the option levels name from the UI is : "
																																																	+ optionGroupObjectNameOptionLevelsTextVk
																																																	+ " are same ",
																																															ExtentColor.CYAN));

																																									FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																											.byValueKey(
																																													subMenuTrue
																																															.get(n)
																																															.toLowerCase()
																																															.replace(
																																																	" ",
																																																	"_")
																																															+ "_"
																																															+ optJSONArrayOptionGroupsObjectNameReplace
																																															+ "_"
																																															+ optJSONArrayOptionsObjectNameReplace
																																															+ "_rightarrow");

																																									optionGroupObjectNameOptionLevelsForwardArrowVk
																																											.click();

																																									nextGenItemQuantityScreen001
																																											.info(MarkupHelper
																																													.createLabel(
																																															" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																															ExtentColor.CYAN));

																																								}

																																								FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optJSONArrayOptionGroupsObjectNameReplace
																																														+ "_"
																																														+ optJSONArrayOptionsObjectNameReplace
																																														+ "_leftarrow");

																																								optionGroupObjectNameOptionLevelsBackwardArrowVk
																																										.click();
																																							}
																																						}

																																						if (optionGroup
																																								.has("max")) {

																																							String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																									.optString(
																																											"max");

																																							int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																									.parseInt(
																																											optJSONArrayOptionGroupsObjectMaximum);

																																							if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																									- 1) {

																																								nextGenItemQuantityScreen001
																																										.info(MarkupHelper
																																												.createLabel(
																																														" Validated that after tapping the max limit of : "
																																																+ optJSONArrayOptionGroupsObjectMax
																																																+ " in this option group name : "
																																																+ optJSONArrayOptionGroupsObjectName
																																																+ " the below items are hidden ",
																																														ExtentColor.CYAN));

																																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optJSONArrayOptionGroupsObjectNameReplace
																																														+ "_"
																																														+ optJSONArrayOptionsObjectNameReplace
																																														+ "_checkbox");

																																								optionGroupObjectNameCheckbox1Vk
																																										.click();

																																							}

																																							if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																																								System.out
																																								.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																										.byValueKey(
																																												subMenuTrue
																																														.get(n)
																																														.toLowerCase()
																																														.replace(
																																																" ",
																																																"_")
																																														+ "_"
																																														+ optJSONArrayOptionGroupsObjectNameReplace
																																														+ "_"
																																														+ optJSONArrayOptionsObjectNameReplace
																																														+ "_checkbox");

																																								optionGroupObjectNameCheckbox1Vk
																																										.click();

																																							}

																																						} else {

																																							nextGenItemQuantityScreen001
																																									.info(MarkupHelper
																																											.createLabel(
																																													" There is no maximum condition for this option group : "
																																															+ optJSONArrayOptionGroupsObjectName,
																																													ExtentColor.CYAN));
																																						}

																																					}

																																				}
																																			}

																																			scrollOptionsGroupUpAndClick(
																																					optJSONArrayOptionGroupsObjectName);

																																			FlutterElement optionGroupObjectGroupVk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optJSONArrayOptionGroupsObjectNameReplace);

																																			optionGroupObjectGroupVk
																																					.click();

																																			itemQuantityScroll();
																																		}
																																	}

																																	else {

																																		nextGenItemQuantityScreen001
																																				.info(MarkupHelper
																																						.createLabel(
																																								"No match found for option_value: "
																																										+ optionGroupObjectNameTextVk,
																																								ExtentColor.CYAN));

																																	}
																																}
																															}

																														}

																													}

																												}
																												if (optJSONArrayOptionGroupsObject
																														.has("max")) {

																													String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																															.optString(
																																	"max");

																													int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																															.parseInt(
																																	optJSONArrayOptionGroupsObjectMaximum);

																													if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																															- 1) {

																														nextGenItemQuantityScreen001
																																.info(MarkupHelper
																																		.createLabel(
																																				" Validated that after tapping the max limit of : "
																																						+ optJSONArrayOptionGroupsObjectMax
																																						+ " in this option group name : "
																																						+ optJSONArrayOptionGroupsObjectName
																																						+ " the below items are hidden ",
																																				ExtentColor.CYAN));

																														FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_checkbox");

																														optionGroupObjectNameCheckbox1Vk
																																.click();

																													}
																													if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																														System.out
																														.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																														FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																.byValueKey(
																																		subMenuTrue
																																				.get(n)
																																				.toLowerCase()
																																				.replace(
																																						" ",
																																						"_")
																																				+ "_"
																																				+ optJSONArrayOptionGroupsObjectNameReplace
																																				+ "_"
																																				+ optJSONArrayOptionsObjectNameReplace
																																				+ "_checkbox");

																														optionGroupObjectNameCheckbox1Vk
																																.click();

																													}
																												} else {

																													nextGenItemQuantityScreen001
																															.info(MarkupHelper
																																	.createLabel(
																																			" There is no maximum condition for this option group : "
																																					+ optJSONArrayOptionGroupsObjectName,
																																			ExtentColor.CYAN));
																												}

																											}
																										}
																									} else {

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The option : "
																																		+ optJSONArrayOptionsObjectName
																																		+ "is disabled and won't be displayed",
																																ExtentColor.CYAN));
																									}
																								}

																								scrollOptionsGroupUpAndClick(
																										optJSONArrayOptionGroupsObjectName);

																								FlutterElement optionGroupObjectGroupVk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace);

																								optionGroupObjectGroupVk
																										.click();

																								itemQuantityScroll();

																								FlutterElement optionalRequired1Vk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_description");

																								String optionalRequiredText1Vk = optionalRequired1Vk
																										.getText();

																								if (optionalRequiredText1Vk
																										.toLowerCase()
																										.contains(
																												"optional")) {

																									boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																											.toLowerCase()
																											.contains(
																													"optional");

																									Assert.assertEquals(
																											optionalRequiredTextContains1Vk,
																											true,
																											"Validated that the option group : "
																													+ optJSONArrayOptionGroupsObjectNameReplace
																													+ " is optional ");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															"Validated that the option group : "
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ " is optional ",
																															ExtentColor.CYAN));

																								}

																								else if (optionalRequiredText1Vk
																										.toLowerCase()
																										.contains(
																												"required")) {
																									boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																											.toLowerCase()
																											.contains(
																													"required");

																									Assert.assertEquals(
																											optionalRequiredTextContains1Vk,
																											true,
																											"Validated that the option group : "
																													+ optJSONArrayOptionGroupsObjectNameReplace
																													+ " is required or mandatory ");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															"Validated that the option group : "
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ " is required or mandatory ",
																															ExtentColor.CYAN));

																								}

																								FlutterElement optionGroupObjectNameSelectedOptionsVk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_selected_options");

																								String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
																										.getText();

																								int countOfCommas = getCountOfCommas(
																										optionGroupObjectNameSelectedOptionsTextVk);

																								if (countOfCommas == 0) {

																									Assert.assertEquals(
																											countOfCommas,
																											0,
																											" Validated that the item is single selected  ");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Validated that the item is single selected  ",
																															ExtentColor.CYAN));

																								} else if (countOfCommas > 0) {

																									Assert.assertEquals(
																											countOfCommas
																													+ 1,
																											countOfCommas
																													+ 1,
																											" Validated that the item is a multi selected ");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Validated that the item is a multi selected ",
																															ExtentColor.CYAN));
																								}
																							}
																						}
																					} else {

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" option conditions is not null ",
																												ExtentColor.CYAN));
																					}
																				} else {

																				}

																			} else {

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The Option group is null and moving to the next option group ",
																								ExtentColor.CYAN));
																			}
																		} else {

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" option groups parameter is not available",
																							ExtentColor.CYAN));

																			if (specialInstructionsEnabled == "true") {

																				scrollOptionsGroupDown(
																						specialInstructionsEnabledSubString);

																				FlutterElement itemQuantitySpecialInstructionsTitleVk = find
																						.byValueKey(
																								menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TITLE_VK);

																				String itemQuantitySpecialInstructionsTitleTextVk = itemQuantitySpecialInstructionsTitleVk
																						.getText();

																				String numericOnly = itemQuantitySpecialInstructionsTitleTextVk
																						.replaceAll("[^0-9]", "");

																				Assert.assertEquals(numericOnly,
																						specialInstructionsNotesLimit,
																						" Validated that the character limit for this store from the API is : "
																								+ specialInstructionsNotesLimit
																								+ " and from the UI is : "
																								+ numericOnly
																								+ " are same ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Validated that the character limit for this store from the API is : "
																										+ specialInstructionsNotesLimit
																										+ " and from the UI is : "
																										+ numericOnly
																										+ " are same ",
																								ExtentColor.CYAN));

																				FlutterElement itemQuantitySpecialInstructionsTextFieldVk = find
																						.byValueKey(
																								menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TEXT_FIELD_VK);

																				String testText = " This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field,This is a text which is to find the length of the special instructions text field ";

																				int testTextLength = testText.length();

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Length of the text available before passing it to the text field is : "
																										+ testText
																										+ " and it's length is : "
																										+ testTextLength,
																								ExtentColor.CYAN));

																				itemQuantitySpecialInstructionsTextFieldVk
																						.sendKeys(testText);

																				nextGenItemQuantityScreen001
																						.addScreenCaptureFromBase64String(
																								takeScreenshot(driver),
																								" After entering the value"
																										+ itemQuantityScreenTitleTextVk);

																			} else {

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Special instructions field is not available for the store code : "
																										+ givenStoreCode,
																								ExtentColor.CYAN));
																			}

																		}

																		if (specialInstructionsEnabled == "true") {

																			scrollOptionsGroupDown(
																					specialInstructionsEnabledSubString);

																			FlutterElement itemQuantitySpecialInstructionsTitleVk = find
																					.byValueKey(
																							menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TITLE_VK);

																			String itemQuantitySpecialInstructionsTitleTextVk = itemQuantitySpecialInstructionsTitleVk
																					.getText();

																			String numericOnly = itemQuantitySpecialInstructionsTitleTextVk
																					.replaceAll("[^0-9]", "");

																			Assert.assertEquals(numericOnly,
																					specialInstructionsNotesLimit,
																					" Validated that the character limit for this store from the API is : "
																							+ specialInstructionsNotesLimit
																							+ " and from the UI is : "
																							+ numericOnly
																							+ " are same ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the character limit for this store from the API is : "
																									+ specialInstructionsNotesLimit
																									+ " and from the UI is : "
																									+ numericOnly
																									+ " are same ",
																							ExtentColor.CYAN));

																			FlutterElement itemQuantitySpecialInstructionsTextFieldVk = find
																					.byValueKey(
																							menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TEXT_FIELD_VK);

																			String testText = " This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field,This is a text which is to find the length of the special instructions text field ";

																			int testTextLength = testText.length();

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Length of the text available before passing it to the text field is : "
																									+ testText
																									+ " and it's length is : "
																									+ testTextLength,
																							ExtentColor.CYAN));

																			itemQuantitySpecialInstructionsTextFieldVk
																					.sendKeys(
																							"   This is a text which is to find the length of the special instructions text field ");

																			nextGenItemQuantityScreen001
																					.addScreenCaptureFromBase64String(
																							takeScreenshot(driver),
																							" After entering the value"
																									+ itemQuantityScreenTitleTextVk);

																		} else {

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Special instructions field is not available for the store code : "
																									+ givenStoreCode,
																							ExtentColor.CYAN));
																		}
																	} else {
																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						" Option groups contains : "
																								+ optionGroupName,
																						ExtentColor.CYAN));
																	}

																} else {

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					" Option groups doesn't have the name in the index : ",
																					ExtentColor.CYAN));
																}

															}
														} else {

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	" The item : " + subMenuTrue.get(n)
																			+ " doesn't have option groups ",
																	ExtentColor.CYAN));
														}
													}

												}

												else if (jsonObjectActive.optJSONArray("option_groups") != null) {

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" Pizza groups parameter is not available and it's not a pizza ",
															ExtentColor.CYAN));

													if (jsonArrayOptionGroups != null) {

														for (int e = 0; e < jsonArrayOptionGroups.length(); e++) {

															JSONObject optJSONArrayOptionGroupsObject = jsonArrayOptionGroups
																	.optJSONObject(e);

															if (!optJSONArrayOptionGroupsObject.has("size_conditions")
																	&& !optJSONArrayOptionGroupsObject
																			.has("option_conditions")) {

//																if (!optJSONArrayOptionGroupsObject
//																		.has("option_conditions")) {

																String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																		.optString("name");

																String optJSONArrayOptionGroupsObjectNameReplace = optJSONArrayOptionGroupsObjectName
																		.toLowerCase().replace(" ", "_");

																String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																		.optString("multiselect");

																long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																		.getLong("min");

																String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																		.optString("quantities");

																if (optJSONArrayOptionGroupsObject.has("max")) {

																	optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																			.getLong("max");

																} else {

																	optJSONArrayOptionGroupsObjectMax = 999;
																}

																FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																		.byValueKey(subMenuTrue.get(n).toLowerCase()
																				.replace(" ", "_") + "_"
																				+ optJSONArrayOptionGroupsObjectNameReplace);

																String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																		.getText();

																Assert.assertEquals(optJSONArrayOptionGroupsObjectName,
																		optJSONArrayOptionGroupsObjectNameTextUI,
																		"Validated that the option group name from API is : "
																				+ optJSONArrayOptionGroupsObjectName
																				+ " and the option group name in UI is : "
																				+ optJSONArrayOptionGroupsObjectNameTextUI
																				+ " is same ");

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				"Validated that the option group name from API is : "
																						+ optJSONArrayOptionGroupsObjectName
																						+ " and the option group name in UI is : "
																						+ optJSONArrayOptionGroupsObjectNameTextUI
																						+ " is same ",
																				ExtentColor.CYAN));

																nextGenItemQuantityScreen001
																		.addScreenCaptureFromBase64String(
																				takeScreenshot(driver),
																				"Optional group name : "
																						+ optJSONArrayOptionGroupsObjectNameTextUI
																						+ " Screenshot ");

																scrollOptionsGroupDown(
																		optJSONArrayOptionGroupsObjectName);

																optJSONArrayOptionGroupsObjectNameUI.click();

																itemQuantityScroll();

																if (optJSONArrayOptionGroupsObject.has("options")) {

																	JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																			.optJSONArray("options");

																	if (optJSONArrayOptions != null) {

																		int optJSONArrayOptionsLength = optJSONArrayOptions
																				.length();

																		for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																			JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																					.optJSONObject(f);

																			String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																					.optString("name");

																			String optJSONArrayOptionsObjectNameReplace = optJSONArrayOptionsObjectName
																					.toLowerCase().replace(" ", "_");

																			String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																					.optString("price");

																			double optJSONArrayOptionsObjectPriceDouble = Double
																					.parseDouble(
																							optJSONArrayOptionsObjectPrice);

																			String optStringIsDisabled = optJSONArrayOptionsObject
																					.optString("is_disabled");

																			String optStringIsDefault = optJSONArrayOptionsObject
																					.optString("is_default");

																			itemQuantityScroll();

																			if (optStringIsDefault
																					.equalsIgnoreCase("false")) {

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option name :  "
																										+ optJSONArrayOptionsObjectName
																										+ " is not set to default and it's not shown in the list of the option group name : "
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ " and it's not auto selected in the UI ",
																								ExtentColor.CYAN));

																			} else {

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option name :  "
																										+ optJSONArrayOptionsObjectName
																										+ " is set to default and it's shown in the list of the option group name : "
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ " and it's auto selected in the UI ",
																								ExtentColor.CYAN));

																			}

																			if (optStringIsDisabled
																					.equalsIgnoreCase("false")) {

																				FlutterElement optionGroupObjectNameVk = find
																						.byValueKey(subMenuTrue.get(n)
																								.toLowerCase()
																								.replace(" ", "_") + "_"
																								+ optJSONArrayOptionGroupsObjectNameReplace
																								+ "_"
																								+ optJSONArrayOptionsObjectNameReplace);

																				String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																						.getText();

																				Assert.assertEquals(
																						optionGroupObjectNameTextVk,
																						optJSONArrayOptionsObjectName,
																						"Validated that the option group name from API is : "
																								+ optionGroupObjectNameTextVk
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionsObjectName
																								+ " in the index : " + f
																								+ " is same ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that the option group name from API is : "
																										+ optionGroupObjectNameTextVk
																										+ " and the option group name in UI is : "
																										+ optJSONArrayOptionsObjectName
																										+ " in the index : "
																										+ f
																										+ " is same ",
																								ExtentColor.CYAN));

																				double optJSONArrayOptionsObjectPriceInt = Double
																						.parseDouble(
																								optJSONArrayOptionsObjectPrice);

																				if (optJSONArrayOptionsObjectPriceInt > 0) {

																					FlutterElement optionGroupObjectPriceVk = find
																							.byValueKey(subMenuTrue
																									.get(n)
																									.toLowerCase()
																									.replace(" ", "_")
																									+ "_"
																									+ optJSONArrayOptionGroupsObjectNameReplace
																									+ "_"
																									+ optJSONArrayOptionsObjectNameReplace
																									+ "_"
																									+ optJSONArrayOptionsObjectPrice);

																					String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																							.getText();

																					String optionGroupObjectPriceTextReplaceVk = optionGroupObjectPriceTextVk
																							.replace("+", "")
																							.replace(" ", "");

																					double optionGroupObjectPriceTextReplaceDouble = Double
																							.parseDouble(
																									optionGroupObjectPriceTextReplaceVk);

																					Assert.assertEquals(
																							optionGroupObjectPriceTextReplaceDouble,
																							optJSONArrayOptionsObjectPriceDouble,
																							"Validated that the option group price from API is : "
																									+ optionGroupObjectPriceTextReplaceVk
																									+ " and the option group price in UI is : "
																									+ optJSONArrayOptionsObjectPriceInt
																									+ "in the index : "
																									+ f + " is same ");

																					nextGenItemQuantityScreen001.info(
																							MarkupHelper.createLabel(
																									"Validated that the option group price from API is : "
																											+ optionGroupObjectPriceTextReplaceVk
																											+ " and the option group price in UI is : "
																											+ optJSONArrayOptionsObjectPriceInt
																											+ "in the index : "
																											+ f
																											+ " is same ",
																									ExtentColor.CYAN));

																				}

																				else {

																					nextGenItemQuantityScreen001.info(
																							MarkupHelper.createLabel(
																									" Price is null for the item : "
																											+ subMenuTrue
																													.get(n)
																											+ " of option groups : "
																											+ optJSONArrayOptionGroupsObjectNameReplace
																											+ " of the option : "
																											+ optJSONArrayOptionsObjectNameReplace,
																									ExtentColor.CYAN));
																				}

																				if ((optJSONArrayOptionGroupsObjectMin == 0
																						|| !optJSONArrayOptionGroupsObject
																								.has("min"))
																						&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																					nextGenItemQuantityScreen001.info(
																							MarkupHelper.createLabel(
																									" The option : "
																											+ optionGroupObjectNameTextVk
																											+ " is single selection optional field",
																									ExtentColor.CYAN));

																					if (optJSONArrayOptionGroupsObjectQuantities == "true"
																							&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" The option : "
																														+ optionGroupObjectNameTextVk
																														+ " is single selection optional field has increment decrement button ",
																												ExtentColor.CYAN));

																						FlutterElement optionCountVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountTextVk = optionCountVk
																								.getText();

																						long optionCountLongVk = Long
																								.parseLong(
																										optionCountTextVk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" Before tapping increment and decrement button the count is : "
																														+ optionCountLongVk,
																												ExtentColor.CYAN));

																						FlutterElement optionGroupObjectNameIncrementButtonVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_increment");

																						optionGroupObjectNameIncrementButtonVk
																								.click();

																						FlutterElement optionCount1Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountText1Vk = optionCount1Vk
																								.getText();

																						long optionCountLong1Vk = Long
																								.parseLong(
																										optionCountText1Vk);

																						Assert.assertNotEquals(
																								optionCountTextVk,
																								optionCountText1Vk,
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												"Validated that after tapping increment button the count has been increased to : "
																														+ optionCountText1Vk,
																												ExtentColor.CYAN));

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" After tapping increment button the count is : "
																														+ optionCountLong1Vk,
																												ExtentColor.CYAN));

																						FlutterElement optionGroupObjectNameDecrementButtonVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_decrement");

																						optionGroupObjectNameDecrementButtonVk
																								.click();

																						FlutterElement optionCount2Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountText2Vk = optionCount2Vk
																								.getText();

																						long optionCountLong2Vk = Long
																								.parseLong(
																										optionCountText2Vk);

																						Assert.assertEquals(
																								optionCountTextVk,
																								optionCountText2Vk,
																								"Validated that after tapping decrement button the count has been increased to : "
																										+ optionCountText2Vk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" After tapping decrement button the count is : "
																														+ optionCountLong2Vk,
																												ExtentColor.CYAN));
																						if (optStringIsDefault
																								.equalsIgnoreCase(
																										"true")) {

																							FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																									.byValueKey(
																											subMenuTrue
																													.get(n)
																													.toLowerCase()
																													.replace(
																															" ",
																															"_")
																													+ "_"
																													+ optJSONArrayOptionGroupsObjectNameReplace
																													+ "_"
																													+ optJSONArrayOptionsObjectNameReplace
																													+ "_decrement");

																							optionGroupObjectNameIncrementButton1Vk
																									.click();

																						}
																						FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_increment");

																						optionGroupObjectNameIncrementButton1Vk
																								.click();

																						FlutterElement optionCount3Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountText3Vk = optionCount3Vk
																								.getText();

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" After tapping increment button the count is : "
																														+ optionCountText3Vk,
																												ExtentColor.CYAN));

																					} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																							&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" The option : "
																														+ optionGroupObjectNameTextVk
																														+ " is single selection optional field has checkbox ",
																												ExtentColor.CYAN));
																						if (optStringIsDefault
																								.equalsIgnoreCase(
																										"true")) {

																							FlutterElement optionGroupObjectNameCheckboxVk = find
																									.byValueKey(
																											subMenuTrue
																													.get(n)
																													.toLowerCase()
																													.replace(
																															" ",
																															"_")
																													+ "_"
																													+ optJSONArrayOptionGroupsObjectNameReplace
																													+ "_"
																													+ optJSONArrayOptionsObjectNameReplace
																													+ "_checkbox");

																							optionGroupObjectNameCheckboxVk
																									.click();

																						}
																						FlutterElement optionGroupObjectNameCheckboxVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_checkbox");

																						optionGroupObjectNameCheckboxVk
																								.click();

																						if (optJSONArrayOptionGroupsObject
																								.has("option_levels")) {
																							JSONObject optionLevels = optJSONArrayOptionGroupsObject
																									.getJSONObject(
																											"option_levels");
																							String optionLevelsName = optionLevels
																									.getString("name");

																							JSONArray optJSONArrayLevels = optionLevels
																									.optJSONArray(
																											"levels");

																							if (optJSONArrayLevels != null) {

																								for (int a = 0; a < optJSONArrayLevels
																										.length(); a++) {

																									JSONObject jsonObjectLevels = optJSONArrayLevels
																											.getJSONObject(
																													a);

																									levelsList.clear();

																									for (int j = 0; j < optJSONArrayLevels
																											.length(); j++) {

																										JSONObject jsonObjectLevelss = optJSONArrayLevels
																												.getJSONObject(
																														j);

																										String levelsNames = jsonObjectLevelss
																												.optString(
																														"name");

																										levelsList.add(
																												levelsNames);

																									}

																									String levelsName = jsonObjectLevels
																											.optString(
																													"name");

																									String levelsNameReplace = levelsName
																											.toLowerCase()
																											.replace(
																													" ",
																													"_");

																									String levelsDefault = jsonObjectLevels
																											.optString(
																													"is_default");

																									if (levelsDefault
																											.equalsIgnoreCase(
																													"true")) {

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The option name :  "
																																		+ optionGroupObjectNameTextVk
																																		+ " is set to default and it's shown in the list of the option group name : "
																																		+ levelsName
																																		+ " and it's not auto selected in the UI ",
																																ExtentColor.CYAN));

																									} else {

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The option name :  "
																																		+ optionGroupObjectNameTextVk
																																		+ " is not set to default and it's not shown in the list of the option group name : "
																																		+ levelsName
																																		+ " and it's auto selected in the UI ",
																																ExtentColor.CYAN));
																									}

																									FlutterElement optionGroupObjectNameOptionLevelsVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															.toLowerCase()
																															.replace(
																																	" ",
																																	"_")
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_"
																															+ "level_name");

																									String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																											.getText();

																									boolean levelsNameContains = levelsList
																											.contains(
																													optionGroupObjectNameOptionLevelsTextVk);

																									Assert.assertEquals(
																											levelsNameContains,
																											true,
																											" Validated that the option levels name from the API and the option levels name from the UI is : "
																													+ optionGroupObjectNameOptionLevelsTextVk
																													+ " are same ");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Validated that the option levels name from the API and the option levels name from the UI is : "
																																	+ optionGroupObjectNameOptionLevelsTextVk
																																	+ " are same ",
																															ExtentColor.CYAN));

																									FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															.toLowerCase()
																															.replace(
																																	" ",
																																	"_")
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_rightarrow");

																									optionGroupObjectNameOptionLevelsForwardArrowVk
																											.click();

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																															ExtentColor.CYAN));

																								}

																								FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_leftarrow");

																								optionGroupObjectNameOptionLevelsBackwardArrowVk
																										.click();
																							}
																						}

																						if (optJSONObjectPrice1
																								.optJSONArray(
																										"option_groups") != null) {

																							JSONArray optionGroups = optJSONObjectPrice1
																									.getJSONArray(
																											"option_groups");

																							for (int g = 0; g < optionGroups
																									.length(); g++) {
																								JSONObject optionGroup = optionGroups
																										.getJSONObject(
																												g);

																								if (optionGroup.has(
																										"option_conditions")) {
																									JSONArray optionConditionsArray = optionGroup
																											.getJSONArray(
																													"option_conditions");

																									for (int h = 0; h < optionConditionsArray
																											.length(); h++) {
																										JSONArray optionCondition = optionConditionsArray
																												.getJSONArray(
																														h);

																										for (int m = 0; m < optionCondition
																												.length(); m++) {
																											JSONObject condition = optionCondition
																													.getJSONObject(
																															m);

																											String optionValue = condition
																													.getString(
																															"option_value");
																											String optionGroupInCondition = condition
																													.getString(
																															"option_group");

																											if (optionGroupObjectNameTextVk
																													.equals(optionValue)) {

																												String optionGroupName = optionGroup
																														.getString(
																																"name");

																												String optionGroupNameLowerCase = optionGroupName
																														.replace(
																																" ",
																																"_")
																														.toLowerCase();

																												String quantities = optionGroup
																														.optString(
																																"quantities");

																												scrollOptionsGroupDown(
																														optionGroupName);

																												FlutterElement optionGroupVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optionGroupNameLowerCase);

																												optionGroupVk
																														.click();

																												itemQuantityScroll();

																												if (optionGroup
																														.has("options")) {

																													JSONArray options = optionGroup
																															.optJSONArray(
																																	"options");

																													for (int j = 0; j < options
																															.length(); j++) {

																														JSONObject optionObject = options
																																.getJSONObject(
																																		j);

																														String optionsName = optionObject
																																.optString(
																																		"name");

																														String optionsNameLowerCase = optionsName
																																.replace(
																																		" ",
																																		"_")
																																.toLowerCase();

																														String isDefault = optionObject
																																.optString(
																																		"is_default");

																														String isDisabled = optionObject
																																.optString(
																																		"is_disabled");

																														if (isDisabled == "false") {

																															if (quantities == "true") {

																																if (isDefault == "true") {

																																	FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																			.byValueKey(
																																					subMenuTrue
																																							.get(n)
																																							.toLowerCase()
																																							.replace(
																																									" ",
																																									"_")
																																							+ "_"
																																							+ optionGroupNameLowerCase
																																							+ "_"
																																							+ optionsNameLowerCase
																																							+ "_decrement");

																																	optionGroupObjectNameDecrementOptCVk
																																			.click();

																																}

																																FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optionGroupNameLowerCase
																																						+ "_"
																																						+ optionsNameLowerCase
																																						+ "_increment");

																																optionGroupObjectNameIncrementOptCVk
																																		.click();

																															} else if (quantities == "false") {

																																if (isDefault == "true") {

																																	FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																			.byValueKey(
																																					subMenuTrue
																																							.get(n)
																																							.toLowerCase()
																																							.replace(
																																									" ",
																																									"_")
																																							+ "_"
																																							+ optionGroupNameLowerCase
																																							+ "_"
																																							+ optionsNameLowerCase
																																							+ "_checkbox");

																																	optionGroupObjectNameCheckboxOptCVk
																																			.click();

																																}

																																FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optionGroupNameLowerCase
																																						+ "_"
																																						+ optionsNameLowerCase
																																						+ "_checkbox");

																																optionGroupObjectNameCheckboxOptCVk
																																		.click();

																																if (optionGroup
																																		.has("option_levels")) {
																																	JSONObject optionLevels = optionGroup
																																			.getJSONObject(
																																					"option_levels");
																																	String optionLevelsName = optionLevels
																																			.getString(
																																					"name");

																																	JSONArray optJSONArrayLevels = optionLevels
																																			.optJSONArray(
																																					"levels");

																																	if (optJSONArrayLevels != null) {

																																		for (int a = 0; a < optJSONArrayLevels
																																				.length(); a++) {

																																			JSONObject jsonObjectLevels = optJSONArrayLevels
																																					.getJSONObject(
																																							a);

																																			levelsList
																																					.clear();

																																			for (int b = 0; b < optJSONArrayLevels
																																					.length(); b++) {

																																				JSONObject jsonObjectLevelss = optJSONArrayLevels
																																						.getJSONObject(
																																								b);

																																				String levelsNames = jsonObjectLevelss
																																						.optString(
																																								"name");

																																				levelsList
																																						.add(levelsNames);

																																			}

																																			String levelsName = jsonObjectLevels
																																					.optString(
																																							"name");

																																			String levelsNameReplace = levelsName
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_");

																																			String levelsDefault = jsonObjectLevels
																																					.optString(
																																							"is_default");

																																			if (levelsDefault
																																					.equalsIgnoreCase(
																																							"true")) {

																																				nextGenItemQuantityScreen001
																																						.info(MarkupHelper
																																								.createLabel(
																																										" The option name :  "
																																												+ optionGroupObjectNameTextVk
																																												+ " is set to default and it's not shown in the list of the option group name : "
																																												+ levelsName
																																												+ " and it's not auto selected in the UI ",
																																										ExtentColor.CYAN));

																																			} else {

																																				nextGenItemQuantityScreen001
																																						.info(MarkupHelper
																																								.createLabel(
																																										" The option name :  "
																																												+ optionGroupObjectNameTextVk
																																												+ " is not set to default and it's shown in the list of the option group name : "
																																												+ levelsName
																																												+ " and it's auto selected in the UI ",
																																										ExtentColor.CYAN));
																																			}

																																			FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optJSONArrayOptionGroupsObjectNameReplace
																																									+ "_"
																																									+ optJSONArrayOptionsObjectNameReplace
																																									+ "_"
																																									+ "level_name");

																																			String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																					.getText();

																																			boolean levelsNameContains = levelsList
																																					.contains(
																																							optionGroupObjectNameOptionLevelsTextVk);

																																			Assert.assertEquals(
																																					levelsNameContains,
																																					true,
																																					" Validated that the option levels name from the API and the option levels name from the UI is : "
																																							+ optionGroupObjectNameOptionLevelsTextVk
																																							+ " are same ");

																																			nextGenItemQuantityScreen001
																																					.info(MarkupHelper
																																							.createLabel(
																																									" Validated that the option levels name from the API and the option levels name from the UI is : "
																																											+ optionGroupObjectNameOptionLevelsTextVk
																																											+ " are same ",
																																									ExtentColor.CYAN));

																																			FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optJSONArrayOptionGroupsObjectNameReplace
																																									+ "_"
																																									+ optJSONArrayOptionsObjectNameReplace
																																									+ "_rightarrow");

																																			optionGroupObjectNameOptionLevelsForwardArrowVk
																																					.click();

																																			nextGenItemQuantityScreen001
																																					.info(MarkupHelper
																																							.createLabel(
																																									" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																									ExtentColor.CYAN));

																																		}

																																		FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optJSONArrayOptionGroupsObjectNameReplace
																																								+ "_"
																																								+ optJSONArrayOptionsObjectNameReplace
																																								+ "_leftarrow");

																																		optionGroupObjectNameOptionLevelsBackwardArrowVk
																																				.click();
																																	}
																																}

																																if (optionGroup
																																		.has("max")) {

																																	String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																			.optString(
																																					"max");

																																	int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																			.parseInt(
																																					optJSONArrayOptionGroupsObjectMaximum);

																																	if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																			- 1) {

																																		nextGenItemQuantityScreen001
																																				.info(MarkupHelper
																																						.createLabel(
																																								" Validated that after tapping the max limit of : "
																																										+ optJSONArrayOptionGroupsObjectMax
																																										+ " in this option group name : "
																																										+ optJSONArrayOptionGroupsObjectName
																																										+ " the below items are hidden ",
																																								ExtentColor.CYAN));

																																		FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optJSONArrayOptionGroupsObjectNameReplace
																																								+ "_"
																																								+ optJSONArrayOptionsObjectNameReplace
																																								+ "_checkbox");

																																		optionGroupObjectNameCheckbox1Vk
																																				.click();

																																	}

																																	if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																																		System.out
																																		.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																																		FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optJSONArrayOptionGroupsObjectNameReplace
																																								+ "_"
																																								+ optJSONArrayOptionsObjectNameReplace
																																								+ "_checkbox");

																																		optionGroupObjectNameCheckbox1Vk
																																				.click();

																																	}

																																} else {

																																	nextGenItemQuantityScreen001
																																			.info(MarkupHelper
																																					.createLabel(
																																							" There is no maximum condition for this option group : "
																																									+ optJSONArrayOptionGroupsObjectName,
																																							ExtentColor.CYAN));
																																}

																															}

																														}
																													}

																													scrollOptionsGroupUpAndClick(
																															optJSONArrayOptionGroupsObjectName);

																													FlutterElement optionGroupObjectGroupVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace);

																													optionGroupObjectGroupVk
																															.click();

																													itemQuantityScroll();
																												}
																											}

																											else {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		"No match found for option_value: "
																																				+ optionGroupObjectNameTextVk,
																																		ExtentColor.CYAN));

																											}
																										}
																									}

																								}

																							}

																						}

																						if (optJSONArrayOptionGroupsObject
																								.has("max")) {

																							String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																									.optString("max");

																							int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																									.parseInt(
																											optJSONArrayOptionGroupsObjectMaximum);

																							if (f < optJSONArrayOptionGroupsObjectMaximumInt) {

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" Validated that after tapping the max limit of : "
																																+ optJSONArrayOptionGroupsObjectMax
																																+ " in this option group name : "
																																+ optJSONArrayOptionGroupsObjectName
																																+ " the below items are hidden ",
																														ExtentColor.CYAN));

																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_checkbox");

																								optionGroupObjectNameCheckbox1Vk
																										.click();

																							}
																							if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																								
																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_checkbox");

																								optionGroupObjectNameCheckbox1Vk
																										.click();

																							}
																						} else {

																						}

																					}
																				} else if (optJSONArrayOptionGroupsObjectMin == 1
																						&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																					nextGenItemQuantityScreen001.info(
																							MarkupHelper.createLabel(
																									" The option : "
																											+ optionGroupObjectNameTextVk
																											+ " is single selection Mandatory field",
																									ExtentColor.CYAN));

																					if (optJSONArrayOptionGroupsObjectQuantities == "true"
																							&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {


																						FlutterElement optionCountVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountTextVk = optionCountVk
																								.getText();

																						long optionCountLongVk = Long
																								.parseLong(
																										optionCountTextVk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" Before tapping increment and decrement button the count is : "
																														+ optionCountLongVk,
																												ExtentColor.CYAN));
																						if (optStringIsDefault
																								.equalsIgnoreCase(
																										"true")) {

																							FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																									.byValueKey(
																											subMenuTrue
																													.get(n)
																													.toLowerCase()
																													.replace(
																															" ",
																															"_")
																													+ "_"
																													+ optJSONArrayOptionGroupsObjectNameReplace
																													+ "_"
																													+ optJSONArrayOptionsObjectNameReplace
																													+ "_decrement");

																							optionGroupObjectNameIncrementButton1Vk
																									.click();

																						}
																						FlutterElement optionGroupObjectNameIncrementButtonVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_increment");

																						optionGroupObjectNameIncrementButtonVk
																								.click();

																						FlutterElement optionCount1Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountText1Vk = optionCount1Vk
																								.getText();

																						long optionCountLong1Vk = Long
																								.parseLong(
																										optionCountText1Vk);

																						Assert.assertNotEquals(
																								optionCountTextVk,
																								optionCountText1Vk,
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk);


																						FlutterElement optionGroupObjectNameDecrementButtonVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_decrement");

																						optionGroupObjectNameDecrementButtonVk
																								.click();

																						FlutterElement optionCount2Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountText2Vk = optionCount2Vk
																								.getText();

																						long optionCountLong2Vk = Long
																								.parseLong(
																										optionCountText2Vk);

																						Assert.assertEquals(
																								optionCountTextVk,
																								optionCountText2Vk,
																								"Validated that after tapping decrement button the count has been decreased to : "
																										+ optionCountText2Vk);


																						FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_increment");

																						optionGroupObjectNameIncrementButton1Vk
																								.click();

																						FlutterElement optionCount3Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountText3Vk = optionCount3Vk
																								.getText();


																					} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																							&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

													
																						if (optStringIsDefault
																								.equalsIgnoreCase(
																										"true")) {

																							FlutterElement optionGroupObjectNameCheckboxVk = find
																									.byValueKey(
																											subMenuTrue
																													.get(n)
																													.toLowerCase()
																													.replace(
																															" ",
																															"_")
																													+ "_"
																													+ optJSONArrayOptionGroupsObjectNameReplace
																													+ "_"
																													+ optJSONArrayOptionsObjectNameReplace
																													+ "_checkbox");

																							optionGroupObjectNameCheckboxVk
																									.click();

																						}
																						FlutterElement optionGroupObjectNameCheckboxVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_checkbox");

																						optionGroupObjectNameCheckboxVk
																								.click();

																						if (optJSONArrayOptionGroupsObject
																								.has("option_levels")) {
																							JSONObject optionLevels = optJSONArrayOptionGroupsObject
																									.getJSONObject(
																											"option_levels");
																							String optionLevelsName = optionLevels
																									.getString("name");

																							JSONArray optJSONArrayLevels = optionLevels
																									.optJSONArray(
																											"levels");

																							if (optJSONArrayLevels != null) {

																								for (int a = 0; a < optJSONArrayLevels
																										.length(); a++) {

																									JSONObject jsonObjectLevels = optJSONArrayLevels
																											.getJSONObject(
																													a);

																									levelsList.clear();

																									for (int j = 0; j < optJSONArrayLevels
																											.length(); j++) {

																										JSONObject jsonObjectLevelss = optJSONArrayLevels
																												.getJSONObject(
																														j);

																										String levelsNames = jsonObjectLevelss
																												.optString(
																														"name");

																										levelsList.add(
																												levelsNames);

																									}

																									String levelsName = jsonObjectLevels
																											.optString(
																													"name");

																									String levelsNameReplace = levelsName
																											.toLowerCase()
																											.replace(
																													" ",
																													"_");

																									String levelsDefault = jsonObjectLevels
																											.optString(
																													"is_default");

																									if (levelsDefault
																											.equalsIgnoreCase(
																													"true")) {


																									} else {

																									}

																									FlutterElement optionGroupObjectNameOptionLevelsVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															.toLowerCase()
																															.replace(
																																	" ",
																																	"_")
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_"
																															+ "level_name");

																									String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																											.getText();

																									boolean levelsNameContains = levelsList
																											.contains(
																													optionGroupObjectNameOptionLevelsTextVk);

																									Assert.assertEquals(
																											levelsNameContains,
																											true,
																											" Validated that the option levels name from the API and the option levels name from the UI is : "
																													+ optionGroupObjectNameOptionLevelsTextVk
																													+ " are same ");


																									FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															.toLowerCase()
																															.replace(
																																	" ",
																																	"_")
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_rightarrow");

																									optionGroupObjectNameOptionLevelsForwardArrowVk
																											.click();


																								}

																								FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_leftarrow");

																								optionGroupObjectNameOptionLevelsBackwardArrowVk
																										.click();
																							}
																						}

																						if (optJSONObjectPrice1
																								.optJSONArray(
																										"option_groups") != null) {

																							JSONArray optionGroups = optJSONObjectPrice1
																									.getJSONArray(
																											"option_groups");

																							for (int g = 0; g < optionGroups
																									.length(); g++) {
																								JSONObject optionGroup = optionGroups
																										.getJSONObject(
																												g);

																								if (optionGroup.has(
																										"option_conditions")) {
																									JSONArray optionConditionsArray = optionGroup
																											.getJSONArray(
																													"option_conditions");

																									for (int h = 0; h < optionConditionsArray
																											.length(); h++) {
																										JSONArray optionCondition = optionConditionsArray
																												.getJSONArray(
																														h);

																										for (int m = 0; m < optionCondition
																												.length(); m++) {
																											JSONObject condition = optionCondition
																													.getJSONObject(
																															m);

																											String optionValue = condition
																													.getString(
																															"option_value");
																											String optionGroupInCondition = condition
																													.getString(
																															"option_group");

																											if (optionGroupObjectNameTextVk
																													.equals(optionValue)) {

																												String optionGroupName = optionGroup
																														.getString(
																																"name");

																												String optionGroupNameLowerCase = optionGroupName
																														.replace(
																																" ",
																																"_")
																														.toLowerCase();

																												String quantities = optionGroup
																														.optString(
																																"quantities");

																												scrollOptionsGroupDown(
																														optionGroupName);

																												FlutterElement optionGroupVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optionGroupNameLowerCase);

																												optionGroupVk
																														.click();

																												itemQuantityScroll();

																												if (optionGroup
																														.has("options")) {

																													JSONArray options = optionGroup
																															.optJSONArray(
																																	"options");

																													for (int j = 0; j < options
																															.length(); j++) {

																														JSONObject optionObject = options
																																.getJSONObject(
																																		j);

																														String optionsName = optionObject
																																.optString(
																																		"name");

																														String optionsNameLowerCase = optionsName
																																.replace(
																																		" ",
																																		"_")
																																.toLowerCase();

																														String isDefault = optionObject
																																.optString(
																																		"is_default");

																														String isDisabled = optionObject
																																.optString(
																																		"is_disabled");

																														if (isDisabled == "false") {

																															if (quantities == "true") {

																																if (isDefault == "true") {

																																	FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																			.byValueKey(
																																					subMenuTrue
																																							.get(n)
																																							.toLowerCase()
																																							.replace(
																																									" ",
																																									"_")
																																							+ "_"
																																							+ optionGroupNameLowerCase
																																							+ "_"
																																							+ optionsNameLowerCase
																																							+ "_decrement");

																																	optionGroupObjectNameDecrementOptCVk
																																			.click();

																																}

																																FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optionGroupNameLowerCase
																																						+ "_"
																																						+ optionsNameLowerCase
																																						+ "_increment");

																																optionGroupObjectNameIncrementOptCVk
																																		.click();

																															} else if (quantities == "false") {

																																if (isDefault == "true") {

																																	FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																			.byValueKey(
																																					subMenuTrue
																																							.get(n)
																																							.toLowerCase()
																																							.replace(
																																									" ",
																																									"_")
																																							+ "_"
																																							+ optionGroupNameLowerCase
																																							+ "_"
																																							+ optionsNameLowerCase
																																							+ "_checkbox");

																																	optionGroupObjectNameCheckboxOptCVk
																																			.click();

																																}

																																FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optionGroupNameLowerCase
																																						+ "_"
																																						+ optionsNameLowerCase
																																						+ "_checkbox");

																																optionGroupObjectNameCheckboxOptCVk
																																		.click();

																																if (optionGroup
																																		.has("option_levels")) {
																																	JSONObject optionLevels = optionGroup
																																			.getJSONObject(
																																					"option_levels");
																																	String optionLevelsName = optionLevels
																																			.getString(
																																					"name");

																																	JSONArray optJSONArrayLevels = optionLevels
																																			.optJSONArray(
																																					"levels");

																																	if (optJSONArrayLevels != null) {

																																		for (int a = 0; a < optJSONArrayLevels
																																				.length(); a++) {

																																			JSONObject jsonObjectLevels = optJSONArrayLevels
																																					.getJSONObject(
																																							a);

																																			levelsList
																																					.clear();

																																			for (int b = 0; b < optJSONArrayLevels
																																					.length(); b++) {

																																				JSONObject jsonObjectLevelss = optJSONArrayLevels
																																						.getJSONObject(
																																								b);

																																				String levelsNames = jsonObjectLevelss
																																						.optString(
																																								"name");

																																				levelsList
																																						.add(levelsNames);

																																			}

																																			String levelsName = jsonObjectLevels
																																					.optString(
																																							"name");

																																			String levelsNameReplace = levelsName
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_");

																																			String levelsDefault = jsonObjectLevels
																																					.optString(
																																							"is_default");

																																			if (levelsDefault
																																					.equalsIgnoreCase(
																																							"true")) {

																																			} else {

																																			}

																																			FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optJSONArrayOptionGroupsObjectNameReplace
																																									+ "_"
																																									+ optJSONArrayOptionsObjectNameReplace
																																									+ "_"
																																									+ "level_name");

																																			String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																					.getText();

																																			boolean levelsNameContains = levelsList
																																					.contains(
																																							optionGroupObjectNameOptionLevelsTextVk);

																																			Assert.assertEquals(
																																					levelsNameContains,
																																					true,
																																					" Validated that the option levels name from the API and the option levels name from the UI is : "
																																							+ optionGroupObjectNameOptionLevelsTextVk
																																							+ " are same ");


																																			FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optJSONArrayOptionGroupsObjectNameReplace
																																									+ "_"
																																									+ optJSONArrayOptionsObjectNameReplace
																																									+ "_rightarrow");

																																			optionGroupObjectNameOptionLevelsForwardArrowVk
																																					.click();

																																			nextGenItemQuantityScreen001
																																					.info(MarkupHelper
																																							.createLabel(
																																									" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																									ExtentColor.CYAN));

																																		}

																																		FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optJSONArrayOptionGroupsObjectNameReplace
																																								+ "_"
																																								+ optJSONArrayOptionsObjectNameReplace
																																								+ "_leftarrow");

																																		optionGroupObjectNameOptionLevelsBackwardArrowVk
																																				.click();
																																	}
																																}

																																if (optionGroup
																																		.has("max")) {

																																	String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																			.optString(
																																					"max");

																																	int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																			.parseInt(
																																					optJSONArrayOptionGroupsObjectMaximum);

																																	if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																			- 1) {


																																		FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optJSONArrayOptionGroupsObjectNameReplace
																																								+ "_"
																																								+ optJSONArrayOptionsObjectNameReplace
																																								+ "_checkbox");

																																		optionGroupObjectNameCheckbox1Vk
																																				.click();

																																	}

																																	if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																																		System.out
																																		.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																																		FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optJSONArrayOptionGroupsObjectNameReplace
																																								+ "_"
																																								+ optJSONArrayOptionsObjectNameReplace
																																								+ "_checkbox");

																																		optionGroupObjectNameCheckbox1Vk
																																				.click();

																																	}

																																} else {

																																}

																															}

																														}
																													}

																													scrollOptionsGroupUpAndClick(
																															optJSONArrayOptionGroupsObjectName);

																													FlutterElement optionGroupObjectGroupVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace);

																													optionGroupObjectGroupVk
																															.click();

																													itemQuantityScroll();
																												}
																											}

																											else {

																											}
																										}
																									}

																								}

																							}

																						}

																						if (optJSONArrayOptionGroupsObject
																								.has("max")) {

																							String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																									.optString("max");

																							int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																									.parseInt(
																											optJSONArrayOptionGroupsObjectMaximum);

																							if (f < optJSONArrayOptionGroupsObjectMaximumInt) {


																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_checkbox");

																								optionGroupObjectNameCheckbox1Vk
																										.click();

																							}
																							if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																								
																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_checkbox");

																								optionGroupObjectNameCheckbox1Vk
																										.click();

																							}
																						} else {

																						}

																					}
																				}

																				else if (optJSONArrayOptionGroupsObjectMin == 0
																						&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																					nextGenItemQuantityScreen001.info(
																							MarkupHelper.createLabel(
																									" The option : "
																											+ optionGroupObjectNameTextVk
																											+ " is multi selection optional field",
																									ExtentColor.CYAN));

																					if (optJSONArrayOptionGroupsObjectQuantities == "true"
																							&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																					

																						FlutterElement optionCountVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountTextVk = optionCountVk
																								.getText();

																						long optionCountLongVk = Long
																								.parseLong(
																										optionCountTextVk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" Before tapping increment and decrement button the count is : "
																														+ optionCountLongVk,
																												ExtentColor.CYAN));
																						if (optStringIsDefault
																								.equalsIgnoreCase(
																										"true")) {

																							FlutterElement optionGroupObjectNameIncrementButtonVk = find
																									.byValueKey(
																											subMenuTrue
																													.get(n)
																													.toLowerCase()
																													.replace(
																															" ",
																															"_")
																													+ "_"
																													+ optJSONArrayOptionGroupsObjectNameReplace
																													+ "_"
																													+ optJSONArrayOptionsObjectNameReplace
																													+ "_decrement");

																							optionGroupObjectNameIncrementButtonVk
																									.click();

																						}
																						FlutterElement optionGroupObjectNameIncrementButtonVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_increment");

																						optionGroupObjectNameIncrementButtonVk
																								.click();

																						FlutterElement optionCount1Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountText1Vk = optionCount1Vk
																								.getText();

																						long optionCountLong1Vk = Long
																								.parseLong(
																										optionCountText1Vk);

																						Assert.assertNotEquals(
																								optionCountTextVk,
																								optionCountText1Vk,
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												"Validated that after tapping increment button the count has been increased to : "
																														+ optionCountText1Vk,
																												ExtentColor.CYAN));

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" After tapping increment button the count is : "
																														+ optionCountLong1Vk,
																												ExtentColor.CYAN));

																						FlutterElement optionGroupObjectNameDecrementButtonVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_decrement");

																						optionGroupObjectNameDecrementButtonVk
																								.click();

																						FlutterElement optionCount2Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountText2Vk = optionCount2Vk
																								.getText();

																						long optionCountLong2Vk = Long
																								.parseLong(
																										optionCountText2Vk);

																						Assert.assertEquals(
																								optionCountTextVk,
																								optionCountText2Vk,
																								"Validated that after tapping decrement button the count has been decreased to : "
																										+ optionCountText2Vk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" After tapping decrement button the count is : "
																														+ optionCountLong2Vk,
																												ExtentColor.CYAN));

																						FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_increment");

																						optionGroupObjectNameIncrementButton1Vk
																								.click();

																						FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_increment");

																						optionGroupObjectNameIncrementButton2Vk
																								.click();

																						FlutterElement optionCount3Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountText3Vk = optionCount3Vk
																								.getText();

																						long optionCountLong3Vk = Long
																								.parseLong(
																										optionCountText3Vk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" After tapping the increment button twice count is : "
																														+ optionCountLong3Vk,
																												ExtentColor.CYAN));

																					} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																							&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" The option : "
																														+ optionGroupObjectNameTextVk
																														+ " is multi selection Mandatory field has checkbox",
																												ExtentColor.CYAN));
																						if (optStringIsDefault
																								.equalsIgnoreCase(
																										"true")) {

																							FlutterElement optionGroupObjectNameCheckboxVk = find
																									.byValueKey(
																											subMenuTrue
																													.get(n)
																													.toLowerCase()
																													.replace(
																															" ",
																															"_")
																													+ "_"
																													+ optJSONArrayOptionGroupsObjectNameReplace
																													+ "_"
																													+ optJSONArrayOptionsObjectNameReplace
																													+ "_checkbox");

																							optionGroupObjectNameCheckboxVk
																									.click();

																						}
																						FlutterElement optionGroupObjectNameCheckboxVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_checkbox");

																						optionGroupObjectNameCheckboxVk
																								.click();

																						if (optJSONArrayOptionGroupsObject
																								.has("option_levels")) {
																							JSONObject optionLevels = optJSONArrayOptionGroupsObject
																									.getJSONObject(
																											"option_levels");
																							String optionLevelsName = optionLevels
																									.getString("name");

																							JSONArray optJSONArrayLevels = optionLevels
																									.optJSONArray(
																											"levels");

																							if (optJSONArrayLevels != null) {

																								for (int a = 0; a < optJSONArrayLevels
																										.length(); a++) {

																									JSONObject jsonObjectLevels = optJSONArrayLevels
																											.getJSONObject(
																													a);

																									levelsList.clear();

																									for (int j = 0; j < optJSONArrayLevels
																											.length(); j++) {

																										JSONObject jsonObjectLevelss = optJSONArrayLevels
																												.getJSONObject(
																														j);

																										String levelsNames = jsonObjectLevelss
																												.optString(
																														"name");

																										levelsList.add(
																												levelsNames);

																									}

																									String levelsName = jsonObjectLevels
																											.optString(
																													"name");

																									String levelsNameReplace = levelsName
																											.toLowerCase()
																											.replace(
																													" ",
																													"_");

																									String levelsDefault = jsonObjectLevels
																											.optString(
																													"is_default");

																									if (levelsDefault
																											.equalsIgnoreCase(
																													"true")) {


																									} else {

																									}

																									FlutterElement optionGroupObjectNameOptionLevelsVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															.toLowerCase()
																															.replace(
																																	" ",
																																	"_")
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_"
																															+ "level_name");

																									String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																											.getText();

																									boolean levelsNameContains = levelsList
																											.contains(
																													optionGroupObjectNameOptionLevelsTextVk);

																									Assert.assertEquals(
																											levelsNameContains,
																											true,
																											" Validated that the option levels name from the API and the option levels name from the UI is : "
																													+ optionGroupObjectNameOptionLevelsTextVk
																													+ " are same ");


																									FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															.toLowerCase()
																															.replace(
																																	" ",
																																	"_")
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_rightarrow");

																									optionGroupObjectNameOptionLevelsForwardArrowVk
																											.click();


																								}

																								FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_leftarrow");

																								optionGroupObjectNameOptionLevelsBackwardArrowVk
																										.click();
																							}
																						}

																						if (optJSONObjectPrice1
																								.optJSONArray(
																										"option_groups") != null) {

																							JSONArray optionGroups = optJSONObjectPrice1
																									.getJSONArray(
																											"option_groups");

																							for (int g = 0; g < optionGroups
																									.length(); g++) {
																								JSONObject optionGroup = optionGroups
																										.getJSONObject(
																												g);

																								if (optionGroup.has(
																										"option_conditions")) {
																									JSONArray optionConditionsArray = optionGroup
																											.getJSONArray(
																													"option_conditions");

																									for (int h = 0; h < optionConditionsArray
																											.length(); h++) {
																										JSONArray optionCondition = optionConditionsArray
																												.getJSONArray(
																														h);

																										for (int m = 0; m < optionCondition
																												.length(); m++) {
																											JSONObject condition = optionCondition
																													.getJSONObject(
																															m);

																											String optionValue = condition
																													.getString(
																															"option_value");
																											String optionGroupInCondition = condition
																													.getString(
																															"option_group");

																											if (optionGroupObjectNameTextVk
																													.equals(optionValue)) {

																												String optionGroupName = optionGroup
																														.getString(
																																"name");

																												String optionGroupNameLowerCase = optionGroupName
																														.replace(
																																" ",
																																"_")
																														.toLowerCase();

																												String quantities = optionGroup
																														.optString(
																																"quantities");

																												scrollOptionsGroupDown(
																														optionGroupName);

																												FlutterElement optionGroupVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optionGroupNameLowerCase);

																												optionGroupVk
																														.click();

																												itemQuantityScroll();

																												if (optionGroup
																														.has("options")) {

																													JSONArray options = optionGroup
																															.optJSONArray(
																																	"options");

																													for (int j = 0; j < options
																															.length(); j++) {

																														JSONObject optionObject = options
																																.getJSONObject(
																																		j);

																														String optionsName = optionObject
																																.optString(
																																		"name");

																														String optionsNameLowerCase = optionsName
																																.replace(
																																		" ",
																																		"_")
																																.toLowerCase();

																														String isDefault = optionObject
																																.optString(
																																		"is_default");

																														String isDisabled = optionObject
																																.optString(
																																		"is_disabled");

																														if (isDisabled == "false") {

																															if (quantities == "true") {

																																if (isDefault == "true") {

																																	FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																			.byValueKey(
																																					subMenuTrue
																																							.get(n)
																																							.toLowerCase()
																																							.replace(
																																									" ",
																																									"_")
																																							+ "_"
																																							+ optionGroupNameLowerCase
																																							+ "_"
																																							+ optionsNameLowerCase
																																							+ "_decrement");

																																	optionGroupObjectNameDecrementOptCVk
																																			.click();

																																}

																																FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optionGroupNameLowerCase
																																						+ "_"
																																						+ optionsNameLowerCase
																																						+ "_increment");

																																optionGroupObjectNameIncrementOptCVk
																																		.click();

																															} else if (quantities == "false") {

																																if (isDefault == "true") {

																																	FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																			.byValueKey(
																																					subMenuTrue
																																							.get(n)
																																							.toLowerCase()
																																							.replace(
																																									" ",
																																									"_")
																																							+ "_"
																																							+ optionGroupNameLowerCase
																																							+ "_"
																																							+ optionsNameLowerCase
																																							+ "_checkbox");

																																	optionGroupObjectNameCheckboxOptCVk
																																			.click();

																																}

																																FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optionGroupNameLowerCase
																																						+ "_"
																																						+ optionsNameLowerCase
																																						+ "_checkbox");

																																optionGroupObjectNameCheckboxOptCVk
																																		.click();

																																if (optionGroup
																																		.has("option_levels")) {
																																	JSONObject optionLevels = optionGroup
																																			.getJSONObject(
																																					"option_levels");
																																	String optionLevelsName = optionLevels
																																			.getString(
																																					"name");

																																	JSONArray optJSONArrayLevels = optionLevels
																																			.optJSONArray(
																																					"levels");

																																	if (optJSONArrayLevels != null) {

																																		for (int a = 0; a < optJSONArrayLevels
																																				.length(); a++) {

																																			JSONObject jsonObjectLevels = optJSONArrayLevels
																																					.getJSONObject(
																																							a);

																																			levelsList
																																					.clear();

																																			for (int b = 0; b < optJSONArrayLevels
																																					.length(); b++) {

																																				JSONObject jsonObjectLevelss = optJSONArrayLevels
																																						.getJSONObject(
																																								b);

																																				String levelsNames = jsonObjectLevelss
																																						.optString(
																																								"name");

																																				levelsList
																																						.add(levelsNames);

																																			}

																																			String levelsName = jsonObjectLevels
																																					.optString(
																																							"name");

																																			String levelsNameReplace = levelsName
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_");

																																			String levelsDefault = jsonObjectLevels
																																					.optString(
																																							"is_default");

																																			if (levelsDefault
																																					.equalsIgnoreCase(
																																							"true")) {

																																				nextGenItemQuantityScreen001
																																						.info(MarkupHelper
																																								.createLabel(
																																										" The option name :  "
																																												+ optionGroupObjectNameTextVk
																																												+ " is set to default and it's not shown in the list of the option group name : "
																																												+ levelsName
																																												+ " and it's not auto selected in the UI ",
																																										ExtentColor.CYAN));

																																			} else {

																																				nextGenItemQuantityScreen001
																																						.info(MarkupHelper
																																								.createLabel(
																																										" The option name :  "
																																												+ optionGroupObjectNameTextVk
																																												+ " is not set to default and it's shown in the list of the option group name : "
																																												+ levelsName
																																												+ " and it's auto selected in the UI ",
																																										ExtentColor.CYAN));
																																			}

																																			FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optJSONArrayOptionGroupsObjectNameReplace
																																									+ "_"
																																									+ optJSONArrayOptionsObjectNameReplace
																																									+ "_"
																																									+ "level_name");

																																			String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																					.getText();

																																			boolean levelsNameContains = levelsList
																																					.contains(
																																							optionGroupObjectNameOptionLevelsTextVk);

																																			Assert.assertEquals(
																																					levelsNameContains,
																																					true,
																																					" Validated that the option levels name from the API and the option levels name from the UI is : "
																																							+ optionGroupObjectNameOptionLevelsTextVk
																																							+ " are same ");

																																			nextGenItemQuantityScreen001
																																					.info(MarkupHelper
																																							.createLabel(
																																									" Validated that the option levels name from the API and the option levels name from the UI is : "
																																											+ optionGroupObjectNameOptionLevelsTextVk
																																											+ " are same ",
																																									ExtentColor.CYAN));

																																			FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optJSONArrayOptionGroupsObjectNameReplace
																																									+ "_"
																																									+ optJSONArrayOptionsObjectNameReplace
																																									+ "_rightarrow");

																																			optionGroupObjectNameOptionLevelsForwardArrowVk
																																					.click();

																																			nextGenItemQuantityScreen001
																																					.info(MarkupHelper
																																							.createLabel(
																																									" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																									ExtentColor.CYAN));

																																		}

																																		FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optJSONArrayOptionGroupsObjectNameReplace
																																								+ "_"
																																								+ optJSONArrayOptionsObjectNameReplace
																																								+ "_leftarrow");

																																		optionGroupObjectNameOptionLevelsBackwardArrowVk
																																				.click();
																																	}
																																}

																																if (optionGroup
																																		.has("max")) {

																																	String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																			.optString(
																																					"max");

																																	int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																			.parseInt(
																																					optJSONArrayOptionGroupsObjectMaximum);

																																	if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																			- 1) {

																																		nextGenItemQuantityScreen001
																																				.info(MarkupHelper
																																						.createLabel(
																																								" Validated that after tapping the max limit of : "
																																										+ optJSONArrayOptionGroupsObjectMax
																																										+ " in this option group name : "
																																										+ optJSONArrayOptionGroupsObjectName
																																										+ " the below items are hidden ",
																																								ExtentColor.CYAN));

																																		FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optJSONArrayOptionGroupsObjectNameReplace
																																								+ "_"
																																								+ optJSONArrayOptionsObjectNameReplace
																																								+ "_checkbox");

																																		optionGroupObjectNameCheckbox1Vk
																																				.click();

																																	}

																																	if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																																		System.out
																																		.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																																		FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optJSONArrayOptionGroupsObjectNameReplace
																																								+ "_"
																																								+ optJSONArrayOptionsObjectNameReplace
																																								+ "_checkbox");

																																		optionGroupObjectNameCheckbox1Vk
																																				.click();

																																	}

																																} else {

																																	nextGenItemQuantityScreen001
																																			.info(MarkupHelper
																																					.createLabel(
																																							" There is no maximum condition for this option group : "
																																									+ optJSONArrayOptionGroupsObjectName,
																																							ExtentColor.CYAN));
																																}

																															}

																														}
																													}

																													scrollOptionsGroupUpAndClick(
																															optJSONArrayOptionGroupsObjectName);

																													FlutterElement optionGroupObjectGroupVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace);

																													optionGroupObjectGroupVk
																															.click();

																													itemQuantityScroll();
																												}
																											}

																											else {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		"No match found for option_value: "
																																				+ optionGroupObjectNameTextVk,
																																		ExtentColor.CYAN));

																											}
																										}
																									}

																								}

																							}

																						}
																						if (optJSONArrayOptionGroupsObject
																								.has("max")) {

																							String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																									.optString("max");

																							int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																									.parseInt(
																											optJSONArrayOptionGroupsObjectMaximum);

																							if (f < optJSONArrayOptionGroupsObjectMaximumInt) {

																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_checkbox");

																								optionGroupObjectNameCheckbox1Vk
																										.click();

																							}
																							if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																								
																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_checkbox");

																								optionGroupObjectNameCheckbox1Vk
																										.click();

																							}
																						} else {

																							nextGenItemQuantityScreen001
																									.info(MarkupHelper
																											.createLabel(
																													" There is no maximum condition for this option group : "
																															+ optJSONArrayOptionGroupsObjectName,
																													ExtentColor.CYAN));
																						}

																					}

																				} else if (optJSONArrayOptionGroupsObjectMin >= 1
																						&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																					nextGenItemQuantityScreen001.info(
																							MarkupHelper.createLabel(
																									" The option : "
																											+ optionGroupObjectNameTextVk
																											+ " is multi selection mandatory field",
																									ExtentColor.CYAN));

																					if (optJSONArrayOptionGroupsObjectQuantities == "true"
																							&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" The option : "
																														+ optionGroupObjectNameTextVk
																														+ " is multi selection mandatory field has increment decrement button",
																												ExtentColor.CYAN));

																						FlutterElement optionCountVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountTextVk = optionCountVk
																								.getText();

																						long optionCountLongVk = Long
																								.parseLong(
																										optionCountTextVk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" Before tapping increment and decrement button the count is : "
																														+ optionCountLongVk,
																												ExtentColor.CYAN));
																						if (optStringIsDefault
																								.equalsIgnoreCase(
																										"true")) {

																							FlutterElement optionGroupObjectNameIncrementButtonVk = find
																									.byValueKey(
																											subMenuTrue
																													.get(n)
																													.toLowerCase()
																													.replace(
																															" ",
																															"_")
																													+ "_"
																													+ optJSONArrayOptionGroupsObjectNameReplace
																													+ "_"
																													+ optJSONArrayOptionsObjectNameReplace
																													+ "_decrement");

																							optionGroupObjectNameIncrementButtonVk
																									.click();

																						}
																						FlutterElement optionGroupObjectNameIncrementButtonVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_increment");

																						optionGroupObjectNameIncrementButtonVk
																								.click();

																						FlutterElement optionCount1Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountText1Vk = optionCount1Vk
																								.getText();

																						long optionCountLong1Vk = Long
																								.parseLong(
																										optionCountText1Vk);

																						Assert.assertNotEquals(
																								optionCountTextVk,
																								optionCountText1Vk,
																								"Validated that after tapping increment button the count has been increased to : "
																										+ optionCountText1Vk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												"Validated that after tapping increment button the count has been increased to : "
																														+ optionCountText1Vk,
																												ExtentColor.CYAN));

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" After tapping increment button the count is : "
																														+ optionCountLong1Vk,
																												ExtentColor.CYAN));

																						FlutterElement optionGroupObjectNameDecrementButtonVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_decrement");

																						optionGroupObjectNameDecrementButtonVk
																								.click();

																						FlutterElement optionCount2Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountText2Vk = optionCount2Vk
																								.getText();

																						long optionCountLong2Vk = Long
																								.parseLong(
																										optionCountText2Vk);

																						Assert.assertEquals(
																								optionCountTextVk,
																								optionCountText2Vk,
																								"Validated that after tapping decrement button the count has been decreased to : "
																										+ optionCountText2Vk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" After tapping decrement button the count is : "
																														+ optionCountLong2Vk,
																												ExtentColor.CYAN));

																						FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_increment");

																						optionGroupObjectNameIncrementButton1Vk
																								.click();

																						FlutterElement optionGroupObjectNameIncrementButton2Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_increment");

																						optionGroupObjectNameIncrementButton2Vk
																								.click();

																						FlutterElement optionCount3Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_quantityvalue");

																						String optionCountText3Vk = optionCount3Vk
																								.getText();

																						long optionCountLong3Vk = Long
																								.parseLong(
																										optionCountText3Vk);

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" After tapping the increment button twice count is : "
																														+ optionCountLong3Vk,
																												ExtentColor.CYAN));

																					} else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																							&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" The option : "
																														+ optionGroupObjectNameTextVk
																														+ " is multi selection Mandatory field has checkbox",
																												ExtentColor.CYAN));
																						if (optStringIsDefault
																								.equalsIgnoreCase(
																										"true")) {

																							FlutterElement optionGroupObjectNameCheckboxVk = find
																									.byValueKey(
																											subMenuTrue
																													.get(n)
																													.toLowerCase()
																													.replace(
																															" ",
																															"_")
																													+ "_"
																													+ optJSONArrayOptionGroupsObjectNameReplace
																													+ "_"
																													+ optJSONArrayOptionsObjectNameReplace
																													+ "_checkbox");

																							optionGroupObjectNameCheckboxVk
																									.click();

																						}
																						FlutterElement optionGroupObjectNameCheckboxVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ "_"
																										+ optJSONArrayOptionsObjectNameReplace
																										+ "_checkbox");

																						optionGroupObjectNameCheckboxVk
																								.click();

																						if (optJSONArrayOptionGroupsObject
																								.has("option_levels")) {
																							JSONObject optionLevels = optJSONArrayOptionGroupsObject
																									.getJSONObject(
																											"option_levels");
																							String optionLevelsName = optionLevels
																									.getString("name");

																							JSONArray optJSONArrayLevels = optionLevels
																									.optJSONArray(
																											"levels");

																							if (optJSONArrayLevels != null) {

																								for (int a = 0; a < optJSONArrayLevels
																										.length(); a++) {

																									JSONObject jsonObjectLevels = optJSONArrayLevels
																											.getJSONObject(
																													a);

																									levelsList.clear();

																									for (int j = 0; j < optJSONArrayLevels
																											.length(); j++) {

																										JSONObject jsonObjectLevelss = optJSONArrayLevels
																												.getJSONObject(
																														j);

																										String levelsNames = jsonObjectLevelss
																												.optString(
																														"name");

																										levelsList.add(
																												levelsNames);

																									}

																									String levelsName = jsonObjectLevels
																											.optString(
																													"name");

																									String levelsNameReplace = levelsName
																											.toLowerCase()
																											.replace(
																													" ",
																													"_");

																									String levelsDefault = jsonObjectLevels
																											.optString(
																													"is_default");

																									if (levelsDefault
																											.equalsIgnoreCase(
																													"true")) {

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The option name :  "
																																		+ optionGroupObjectNameTextVk
																																		+ " is set to default and it's not shown in the list of the option group name : "
																																		+ levelsName
																																		+ " and it's not auto selected in the UI ",
																																ExtentColor.CYAN));

																									} else {

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The option name :  "
																																		+ optionGroupObjectNameTextVk
																																		+ " is not set to default and it's shown in the list of the option group name : "
																																		+ levelsName
																																		+ " and it's auto selected in the UI ",
																																ExtentColor.CYAN));
																									}

																									FlutterElement optionGroupObjectNameOptionLevelsVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															.toLowerCase()
																															.replace(
																																	" ",
																																	"_")
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_"
																															+ "level_name");

																									String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																											.getText();

																									boolean levelsNameContains = levelsList
																											.contains(
																													optionGroupObjectNameOptionLevelsTextVk);

																									Assert.assertEquals(
																											levelsNameContains,
																											true,
																											" Validated that the option levels name from the API and the option levels name from the UI is : "
																													+ optionGroupObjectNameOptionLevelsTextVk
																													+ " are same ");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Validated that the option levels name from the API and the option levels name from the UI is : "
																																	+ optionGroupObjectNameOptionLevelsTextVk
																																	+ " are same ",
																															ExtentColor.CYAN));

																									FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															.toLowerCase()
																															.replace(
																																	" ",
																																	"_")
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_rightarrow");

																									optionGroupObjectNameOptionLevelsForwardArrowVk
																											.click();

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																															ExtentColor.CYAN));

																								}

																								FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_leftarrow");

																								optionGroupObjectNameOptionLevelsBackwardArrowVk
																										.click();
																							}
																						}

																						if (optJSONObjectPrice1
																								.optJSONArray(
																										"option_groups") != null) {

																							JSONArray optionGroups = optJSONObjectPrice1
																									.getJSONArray(
																											"option_groups");

																							for (int g = 0; g < optionGroups
																									.length(); g++) {
																								JSONObject optionGroup = optionGroups
																										.getJSONObject(
																												g);

																								if (optionGroup.has(
																										"option_conditions")) {
																									JSONArray optionConditionsArray = optionGroup
																											.getJSONArray(
																													"option_conditions");

																									for (int h = 0; h < optionConditionsArray
																											.length(); h++) {
																										JSONArray optionCondition = optionConditionsArray
																												.getJSONArray(
																														h);

																										for (int m = 0; m < optionCondition
																												.length(); m++) {
																											JSONObject condition = optionCondition
																													.getJSONObject(
																															m);

																											String optionValue = condition
																													.getString(
																															"option_value");
																											String optionGroupInCondition = condition
																													.getString(
																															"option_group");

																											if (optionGroupObjectNameTextVk
																													.equals(optionValue)) {

																												String optionGroupName = optionGroup
																														.getString(
																																"name");

																												String optionGroupNameLowerCase = optionGroupName
																														.replace(
																																" ",
																																"_")
																														.toLowerCase();

																												String quantities = optionGroup
																														.optString(
																																"quantities");

																												scrollOptionsGroupDown(
																														optionGroupName);

																												FlutterElement optionGroupVk = find
																														.byValueKey(
																																subMenuTrue
																																		.get(n)
																																		.toLowerCase()
																																		.replace(
																																				" ",
																																				"_")
																																		+ "_"
																																		+ optionGroupNameLowerCase);

																												optionGroupVk
																														.click();

																												itemQuantityScroll();

																												if (optionGroup
																														.has("options")) {

																													JSONArray options = optionGroup
																															.optJSONArray(
																																	"options");

																													for (int j = 0; j < options
																															.length(); j++) {

																														JSONObject optionObject = options
																																.getJSONObject(
																																		j);

																														String optionsName = optionObject
																																.optString(
																																		"name");

																														String optionsNameLowerCase = optionsName
																																.replace(
																																		" ",
																																		"_")
																																.toLowerCase();

																														String isDefault = optionObject
																																.optString(
																																		"is_default");

																														String isDisabled = optionObject
																																.optString(
																																		"is_disabled");

																														if (isDisabled == "false") {

																															if (quantities == "true") {

																																if (isDefault == "true") {

																																	FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																			.byValueKey(
																																					subMenuTrue
																																							.get(n)
																																							.toLowerCase()
																																							.replace(
																																									" ",
																																									"_")
																																							+ "_"
																																							+ optionGroupNameLowerCase
																																							+ "_"
																																							+ optionsNameLowerCase
																																							+ "_decrement");

																																	optionGroupObjectNameDecrementOptCVk
																																			.click();

																																}

																																FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optionGroupNameLowerCase
																																						+ "_"
																																						+ optionsNameLowerCase
																																						+ "_increment");

																																optionGroupObjectNameIncrementOptCVk
																																		.click();

																															} else if (quantities == "false") {

																																if (isDefault == "true") {

																																	FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																			.byValueKey(
																																					subMenuTrue
																																							.get(n)
																																							.toLowerCase()
																																							.replace(
																																									" ",
																																									"_")
																																							+ "_"
																																							+ optionGroupNameLowerCase
																																							+ "_"
																																							+ optionsNameLowerCase
																																							+ "_checkbox");

																																	optionGroupObjectNameCheckboxOptCVk
																																			.click();

																																}

																																FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																		.byValueKey(
																																				subMenuTrue
																																						.get(n)
																																						.toLowerCase()
																																						.replace(
																																								" ",
																																								"_")
																																						+ "_"
																																						+ optionGroupNameLowerCase
																																						+ "_"
																																						+ optionsNameLowerCase
																																						+ "_checkbox");

																																optionGroupObjectNameCheckboxOptCVk
																																		.click();

																																if (optionGroup
																																		.has("option_levels")) {
																																	JSONObject optionLevels = optionGroup
																																			.getJSONObject(
																																					"option_levels");
																																	String optionLevelsName = optionLevels
																																			.getString(
																																					"name");

																																	JSONArray optJSONArrayLevels = optionLevels
																																			.optJSONArray(
																																					"levels");

																																	if (optJSONArrayLevels != null) {

																																		for (int a = 0; a < optJSONArrayLevels
																																				.length(); a++) {

																																			JSONObject jsonObjectLevels = optJSONArrayLevels
																																					.getJSONObject(
																																							a);

																																			levelsList
																																					.clear();

																																			for (int b = 0; b < optJSONArrayLevels
																																					.length(); b++) {

																																				JSONObject jsonObjectLevelss = optJSONArrayLevels
																																						.getJSONObject(
																																								b);

																																				String levelsNames = jsonObjectLevelss
																																						.optString(
																																								"name");

																																				levelsList
																																						.add(levelsNames);

																																			}

																																			String levelsName = jsonObjectLevels
																																					.optString(
																																							"name");

																																			String levelsNameReplace = levelsName
																																					.toLowerCase()
																																					.replace(
																																							" ",
																																							"_");

																																			String levelsDefault = jsonObjectLevels
																																					.optString(
																																							"is_default");

																																			if (levelsDefault
																																					.equalsIgnoreCase(
																																							"true")) {

																																				nextGenItemQuantityScreen001
																																						.info(MarkupHelper
																																								.createLabel(
																																										" The option name :  "
																																												+ optionGroupObjectNameTextVk
																																												+ " is set to default and it's not shown in the list of the option group name : "
																																												+ levelsName
																																												+ " and it's not auto selected in the UI ",
																																										ExtentColor.CYAN));

																																			} else {

																																				nextGenItemQuantityScreen001
																																						.info(MarkupHelper
																																								.createLabel(
																																										" The option name :  "
																																												+ optionGroupObjectNameTextVk
																																												+ " is not set to default and it's shown in the list of the option group name : "
																																												+ levelsName
																																												+ " and it's auto selected in the UI ",
																																										ExtentColor.CYAN));
																																			}

																																			FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optJSONArrayOptionGroupsObjectNameReplace
																																									+ "_"
																																									+ optJSONArrayOptionsObjectNameReplace
																																									+ "_"
																																									+ "level_name");

																																			String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																					.getText();

																																			boolean levelsNameContains = levelsList
																																					.contains(
																																							optionGroupObjectNameOptionLevelsTextVk);

																																			Assert.assertEquals(
																																					levelsNameContains,
																																					true,
																																					" Validated that the option levels name from the API and the option levels name from the UI is : "
																																							+ optionGroupObjectNameOptionLevelsTextVk
																																							+ " are same ");

																																			nextGenItemQuantityScreen001
																																					.info(MarkupHelper
																																							.createLabel(
																																									" Validated that the option levels name from the API and the option levels name from the UI is : "
																																											+ optionGroupObjectNameOptionLevelsTextVk
																																											+ " are same ",
																																									ExtentColor.CYAN));

																																			FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																					.byValueKey(
																																							subMenuTrue
																																									.get(n)
																																									.toLowerCase()
																																									.replace(
																																											" ",
																																											"_")
																																									+ "_"
																																									+ optJSONArrayOptionGroupsObjectNameReplace
																																									+ "_"
																																									+ optJSONArrayOptionsObjectNameReplace
																																									+ "_rightarrow");

																																			optionGroupObjectNameOptionLevelsForwardArrowVk
																																					.click();

																																			nextGenItemQuantityScreen001
																																					.info(MarkupHelper
																																							.createLabel(
																																									" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																									ExtentColor.CYAN));

																																		}

																																		FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optJSONArrayOptionGroupsObjectNameReplace
																																								+ "_"
																																								+ optJSONArrayOptionsObjectNameReplace
																																								+ "_leftarrow");

																																		optionGroupObjectNameOptionLevelsBackwardArrowVk
																																				.click();
																																	}
																																}

																																if (optionGroup
																																		.has("max")) {

																																	String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																			.optString(
																																					"max");

																																	int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																			.parseInt(
																																					optJSONArrayOptionGroupsObjectMaximum);

																																	if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																			- 1) {

																																		nextGenItemQuantityScreen001
																																				.info(MarkupHelper
																																						.createLabel(
																																								" Validated that after tapping the max limit of : "
																																										+ optJSONArrayOptionGroupsObjectMax
																																										+ " in this option group name : "
																																										+ optJSONArrayOptionGroupsObjectName
																																										+ " the below items are hidden ",
																																								ExtentColor.CYAN));

																																		FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optJSONArrayOptionGroupsObjectNameReplace
																																								+ "_"
																																								+ optJSONArrayOptionsObjectNameReplace
																																								+ "_checkbox");

																																		optionGroupObjectNameCheckbox1Vk
																																				.click();

																																	}

																																	if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																																		System.out
																																		.println(f+" < "+optJSONArrayOptionGroupsObjectMaximumInt);
																																		FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																				.byValueKey(
																																						subMenuTrue
																																								.get(n)
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_")
																																								+ "_"
																																								+ optJSONArrayOptionGroupsObjectNameReplace
																																								+ "_"
																																								+ optJSONArrayOptionsObjectNameReplace
																																								+ "_checkbox");

																																		optionGroupObjectNameCheckbox1Vk
																																				.click();

																																	}

																																} else {

																																	nextGenItemQuantityScreen001
																																			.info(MarkupHelper
																																					.createLabel(
																																							" There is no maximum condition for this option group : "
																																									+ optJSONArrayOptionGroupsObjectName,
																																							ExtentColor.CYAN));
																																}

																															}

																														}
																													}

																													scrollOptionsGroupUpAndClick(
																															optJSONArrayOptionGroupsObjectName);

																													FlutterElement optionGroupObjectGroupVk = find
																															.byValueKey(
																																	subMenuTrue
																																			.get(n)
																																			.toLowerCase()
																																			.replace(
																																					" ",
																																					"_")
																																			+ "_"
																																			+ optJSONArrayOptionGroupsObjectNameReplace);

																													optionGroupObjectGroupVk
																															.click();

																													itemQuantityScroll();
																												}
																											}

																											else {

																												nextGenItemQuantityScreen001
																														.info(MarkupHelper
																																.createLabel(
																																		"No match found for option_value: "
																																				+ optionGroupObjectNameTextVk,
																																		ExtentColor.CYAN));

																											}
																										}
																									}

																								}

																							}

																						}

																						if (optJSONArrayOptionGroupsObject
																								.has("max")) {

																							String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																									.optString("max");

																							int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																									.parseInt(
																											optJSONArrayOptionGroupsObjectMaximum);

																							if (f < optJSONArrayOptionGroupsObjectMaximumInt) {

																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_checkbox");

																								optionGroupObjectNameCheckbox1Vk
																										.click();

																							}
																							if (f > optJSONArrayOptionsLength
																																- optJSONArrayOptionGroupsObjectMaximumInt) {
																								
																								FlutterElement optionGroupObjectNameCheckbox1Vk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														.toLowerCase()
																														.replace(
																																" ",
																																"_")
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_checkbox");

																								optionGroupObjectNameCheckbox1Vk
																										.click();

																							}
																						} else {

																							nextGenItemQuantityScreen001
																									.info(MarkupHelper
																											.createLabel(
																													" There is no maximum condition for this option group : "
																															+ optJSONArrayOptionGroupsObjectName,
																													ExtentColor.CYAN));
																						}
																					}
																				}
																			} else {

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" The option : "
																										+ optJSONArrayOptionsObjectName
																										+ "is disabled and won't be displayed",
																								ExtentColor.CYAN));
																			}

																		}

																		scrollOptionsGroupUpAndClick(
																				optJSONArrayOptionGroupsObjectName);

																		FlutterElement optionGroupObjectGroupVk = find
																				.byValueKey(subMenuTrue.get(n)
																						.toLowerCase().replace(" ", "_")
																						+ "_"
																						+ optJSONArrayOptionGroupsObjectNameReplace);

																		optionGroupObjectGroupVk.click();

																		itemQuantityScroll();

																		FlutterElement optionalRequired1Vk = find
																				.byValueKey(subMenuTrue.get(n)
																						.toLowerCase().replace(" ", "_")
																						+ "_"
																						+ optJSONArrayOptionGroupsObjectNameReplace
																						+ "_description");

																		String optionalRequiredText1Vk = optionalRequired1Vk
																				.getText();

																		if (optionalRequiredText1Vk.toLowerCase()
																				.contains("optional")) {

																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.toLowerCase().contains("optional");

																			Assert.assertEquals(
																					optionalRequiredTextContains1Vk,
																					true,
																					"Validated that the option group : "
																							+ optJSONArrayOptionGroupsObjectNameReplace
																							+ " is optional ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that the option group : "
																									+ optJSONArrayOptionGroupsObjectNameReplace
																									+ " is optional ",
																							ExtentColor.CYAN));

																		}

																		else if (optionalRequiredText1Vk.toLowerCase()
																				.contains("required")) {
																			boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																					.toLowerCase().contains("required");

																			Assert.assertEquals(
																					optionalRequiredTextContains1Vk,
																					true,
																					"Validated that the option group : "
																							+ optJSONArrayOptionGroupsObjectNameReplace
																							+ " is required or mandatory ");

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							"Validated that the option group : "
																									+ optJSONArrayOptionGroupsObjectNameReplace
																									+ " is required or mandatory ",
																							ExtentColor.CYAN));

																		}

																		FlutterElement optionGroupObjectNameSelectedOptionsVk = find
																				.byValueKey(subMenuTrue.get(n)
																						.toLowerCase().replace(" ", "_")
																						+ "_"
																						+ optJSONArrayOptionGroupsObjectNameReplace
																						+ "_selected_options");

																		String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
																				.getText();

																		int countOfCommas = getCountOfCommas(
																				optionGroupObjectNameSelectedOptionsTextVk);

																		if (countOfCommas == 0) {

																			Assert.assertEquals(countOfCommas, 0,
																					" Validated that the item is single selected with the selected options groups are : "
																							+ optionGroupObjectNameSelectedOptionsTextVk);

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the item is single selected with the selected options groups are : "
																									+ optionGroupObjectNameSelectedOptionsTextVk,
																							ExtentColor.CYAN));

																		} else if (countOfCommas > 0) {

																			Assert.assertEquals(countOfCommas + 1,
																					countOfCommas + 1,
																					" Validated that the item is a multi selected with the selected options groups are : "
																							+ optionGroupObjectNameSelectedOptionsTextVk);
																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Validated that the item is a multi selected with the selected options groups are : "
																									+ optionGroupObjectNameSelectedOptionsTextVk,
																							ExtentColor.CYAN));

																		}
																	}
																}

															} else {

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Size conditions is not null for the option group : "
																						+ optJSONArrayOptionGroupsObject,
																				ExtentColor.CYAN));
															}

														}
													} else {

														nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																" The Option group is null and moving to the next option group for the sub menu item : "
																		+ subMenuTrue.get(n),
																ExtentColor.CYAN));
													}

												} else {

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" option groups parameter is not available for the sub menu item : "
																	+ subMenuTrue.get(n),
															ExtentColor.CYAN));

												}

												if (specialInstructionsEnabled == "true") {

													scrollOptionsGroupDown(specialInstructionsEnabledSubString);

													FlutterElement itemQuantitySpecialInstructionsTitleVk = find
															.byValueKey(
																	menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TITLE_VK);

													String itemQuantitySpecialInstructionsTitleTextVk = itemQuantitySpecialInstructionsTitleVk
															.getText();

													String numericOnly = itemQuantitySpecialInstructionsTitleTextVk
															.replaceAll("[^0-9]", "");

													Assert.assertEquals(numericOnly, specialInstructionsNotesLimit,
															" Validated that the character limit for this store from the API is : "
																	+ specialInstructionsNotesLimit
																	+ " and from the UI is : " + numericOnly
																	+ " are same ");

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" Validated that the character limit for this store from the API is : "
																	+ specialInstructionsNotesLimit
																	+ " and from the UI is : " + numericOnly
																	+ " are same ",
															ExtentColor.CYAN));

													FlutterElement itemQuantitySpecialInstructionsTextFieldVk = find
															.byValueKey(
																	menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TEXT_FIELD_VK);

													String testText = " This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field,This is a text which is to find the length of the special instructions text field ";

													int testTextLength = testText.length();

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" Length of the text available before passing it to the text field is : "
																	+ testText + " and it's length is : "
																	+ testTextLength,
															ExtentColor.CYAN));

													itemQuantitySpecialInstructionsTextFieldVk.sendKeys(testText);

													nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
															takeScreenshot(driver), " After entering the value"
																	+ itemQuantityScreenTitleTextVk);

												} else {

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" Special instructions field is not available for the store code : "
																	+ givenStoreCode,
															ExtentColor.CYAN));
												}
												if (t % 2 != 0) {

													FlutterElement buyNowButtonVk = find.byValueKey(
															menuScreenLocators.ITEM_QUANTITY_SCREEN_BUY_NOW_BUTTON_VK);

													String buyNowButtonTextVk = buyNowButtonVk.getText();

													buyNowButtonVk.click();

													String basketHeaderTitleText = commonMethods
															.stringsReader(basketLocators.BASKET_HEADER_TITLE);

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" Validated that after tapping the : " + buyNowButtonTextVk
																	+ " button, it navigates to the basket screen with the title : "
																	+ basketHeaderTitleText,
															ExtentColor.CYAN));

													find.byValueKey(basketLocators.BASKET_SCREEN_BACK_ICON_VKL).click();

													FlutterElement menuScreenTitle1Vk = find
															.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

													String menuScreenTitleText1Vk = menuScreenTitle1Vk.getText();

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" Validated that after tapping the basket screen back icon, it navigates to the menu screen with the title : "
																	+ menuScreenTitleText1Vk,
															ExtentColor.CYAN));

												} else {

													FlutterElement addToBasketButtonVk = find.byValueKey(
															menuScreenLocators.ITEM_QUANTITY_SCREEN_ADD_TO_BASKET_BUTTON_VK);

													String addToBasketButtonTextVk = addToBasketButtonVk.getText();

													addToBasketButtonVk.click();

													FlutterElement menuScreenTitle1Vk = find
															.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

													String menuScreenTitleText1Vk = menuScreenTitle1Vk.getText();

													nextGenItemQuantityScreen001.info(MarkupHelper
															.createLabel(" Validated that after tapping the "
																	+ addToBasketButtonTextVk
																	+ " button, it navigates to the menu screen with the title : "
																	+ menuScreenTitleText1Vk, ExtentColor.CYAN));

												}

												FlutterElement reviewButtonVk = find.byValueKey(
														menuScreenLocators.MENU_SCREEN_REVIEW_BASKET_BUTTON_VK);

												String reviewButtonTextVk = reviewButtonVk.getText();

												reviewButtonVk.click();

												String basketHeaderTitleText1 = commonMethods
														.stringsReader(basketLocators.BASKET_HEADER_TITLE);

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" Validated that after tapping the : " + reviewButtonTextVk
																+ " button, it navigates to the basket screen with the title : "
																+ basketHeaderTitleText1,
														ExtentColor.CYAN));
//
//												FlutterElement buyNowButtonVk = find.byValueKey(
//														menuScreenLocators.ITEM_QUANTITY_SCREEN_BUY_NOW_BUTTON_VK);
//
//												buyNowButtonVk.click();

												Basket.ngaBasket(OrderType, OrderTime);

//												FlutterElement itemQuantityScreenBackIconVk = find.byValueKey(
//														menuScreenLocators.ITEM_QUANTITY_SCREEN_BACK_ICON_VK);
//
//												itemQuantityScreenBackIconVk.click();

											} else {

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(1500);

												FlutterElement subMenuScreenSoldOutVk = find
														.byValueKey("sub_menu_sold_out_item_" + n);

												String subMenuScreenSoldOutTextVk = subMenuScreenSoldOutVk.getText();

												boolean subMenuScreenSoldOutTextContainsVk = subMenuScreenSoldOutTextVk
														.contains(subMenuScreenSoldOutTextVk);

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The item : " + subMenuTrue.get(n)
																+ " in the sub menu is sold out and showing the text as : "
																+ subMenuScreenSoldOutTextVk
																+ " and won't be processed further and clearing the pop-up ",
														ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver),
														" The item : " + subMenuTrue.get(n)
																+ " in the sub menu is sold out and showing the text as : "
																+ subMenuScreenSoldOutTextVk
																+ " and won't be processed further and clearing the pop-up ");

												Assert.assertEquals(subMenuScreenSoldOutTextContainsVk, true,
														" Validated that the item : " + subMenuTrue.get(n)
																+ " in the index : " + n + " contains the text : "
																+ subMenuScreenSoldOutTextVk);

												nextGenItemQuantityScreen001.info(MarkupHelper
														.createLabel(" Validated that the item : " + subMenuTrue.get(n)
																+ " in the index : " + n + " contains the text : "
																+ subMenuScreenSoldOutTextVk, ExtentColor.CYAN));

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver),
														" Validated that the item : " + optStringSubMenuName
																+ " in the index : " + n + " contains the text : "
																+ subMenuScreenSoldOutTextVk);

												subMenuScreenItemVk.click();

												FlutterElement subMenuSoldOutPopupTitleVk = find.byValueKey(
														menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_TITLE_VK);

												String subMenuSoldOutPopupTitleTextVk = subMenuSoldOutPopupTitleVk
														.getText();

												nextGenSubMenuScreen001
														.info(MarkupHelper.createLabel(
																" The sold out alert popup title is : "
																		+ subMenuSoldOutPopupTitleTextVk,
																ExtentColor.CYAN));

												FlutterElement subMenuSoldOutPopupDescriptionVk = find.byValueKey(
														menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_DESCRIPTION_VK);

												String subMenuSoldOutPopupDescriptionTextVk = subMenuSoldOutPopupDescriptionVk
														.getText();

												boolean subMenuSoldOutPopupDescriptionTextContainsVk = subMenuSoldOutPopupDescriptionTextVk
														.contains("sold out");

												Assert.assertEquals(subMenuSoldOutPopupDescriptionTextContainsVk, true,
														" Validated that the pop-up contains the text sold out");

												nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
														" Validated that the pop-up contains the text sold out",
														ExtentColor.CYAN));

												FlutterElement subMenuSoldOutPopupOkayButtonVk = find.byValueKey(
														menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_OKAY_BUTTON_VK);

												subMenuSoldOutPopupOkayButtonVk.click();
											}
										}

									} else {

										commonMethods.switchContext("FLUTTER");

										Thread.sleep(1500);

										nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
												" As the sub menu item size is : " + subMenuTrueSize
														+ " There is no list to show and navigating to the menu screen for the next item in the menu ",
												ExtentColor.CYAN));

										nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
												" Sub Menu screen " + itemName);

										FlutterElement subMenuScreenBackIconVk = find
												.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);

										subMenuScreenBackIconVk.click();

									}

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(1500);

//									FlutterElement subMenuScreenBackIconVk = find
//											.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);
//
//									subMenuScreenBackIconVk.click();

								} else {

									nextGenMenuScreen001.info(MarkupHelper.createLabel(
											" The items in the array is lesser than 0 for the menu : " + itemName,
											ExtentColor.CYAN));

									nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" The items in the array is lesser than 0 for the menu : " + itemName);
								}

							}

							break;
						}

					}
				}
			}

			// Check if the current object has the "contents" property and it is an array
			if (hierarchyObject.has("contents") && hierarchyObject.get("contents") instanceof JSONArray) {
				JSONArray contentsArray = hierarchyObject.getJSONArray("contents");

				// Recursive call to process the contents array
				processHierarchyAndRetrieveNames(contentsArray, menuArray, OrderType, OrderTime);

//				FlutterElement backIcon = find.byValueKey(menuScreenLocators.VK_CATEGORY_GROUPS_SCREEN_BACK_ICON);
//
//				backIcon.click();

			}

		}

	}

	private static boolean containsTopping(JSONObject item, String pizzaTopping) {

		JSONArray optionGroups = item.getJSONArray("option_groups");

		// Loop through option_groups and check if pizzaTopping matches the "name"
		for (int k = 0; k < optionGroups.length(); k++) {
			JSONObject optionGroup = optionGroups.getJSONObject(k);
			String options = optionGroup.optString("name");
			if (options.equals(pizzaTopping)) {
				return true;
			}

		}

		return false;
	}

	private static int getCountOfCommas(String input) {
		int count = 0;

		for (int i = 0; i < input.length(); i++) {
			if (input.charAt(i) == ',') {
				count++;
			}
		}

		return count;
	}

	private static void itemQuantityScroll() throws InterruptedException {
		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		IOSTouchAction IOSTouchAction2 = new IOSTouchAction(driver);
		IOSTouchAction2.press(PointOption.point(200, 700)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
				.moveTo(PointOption.point(200, 600)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(3000);

	}

	private static void optionGroupsObjectScroll() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1200);

		IOSTouchAction IOSTouchAction3 = new IOSTouchAction(driver);
		IOSTouchAction3.press(PointOption.point(200, 700)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
				.moveTo(PointOption.point(200, 500)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static void subMenuScroll() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1200);

		IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
		IOSTouchAction1.press(PointOption.point(200, 600)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
				.moveTo(PointOption.point(200, 530)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static void menuScroll() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1200);

		IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
		IOSTouchAction1.press(PointOption.point(200, 600)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
				.moveTo(PointOption.point(200, 550)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static void scrollSize() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		By targetElementLocator = By
				.xpath("//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'size'" + ")]");
		boolean elementFound = false;
		while (!elementFound) {
			try {
				WebElement element = driver.findElement(targetElementLocator);

				if (element.isDisplayed()) {
					IOSTouchAction IOSTouchAction4 = new IOSTouchAction(driver);
					IOSTouchAction4.press(PointOption.point(150, 550))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 650)).release().perform();

					try {
						elementFound = true;

					} catch (Exception clickException) {
						IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
						IOSTouchAction.press(PointOption.point(150, 550))
								.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
								.moveTo(PointOption.point(150, 650)).release().perform();
					}
				} else {
					IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
					IOSTouchAction.press(PointOption.point(150, 550))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 650)).release().perform();
				}
			} catch (NoSuchElementException e2) {
				IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
				IOSTouchAction.press(PointOption.point(150, 550))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3))).moveTo(PointOption.point(150, 650))
						.release().perform();
			}

		}
		if (!elementFound) {
		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static void scrollOptionsGroupUpAndClick(String input) throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		By targetElementLocator = By
				.xpath("//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'" + input.toLowerCase() + "'" + ")]");
		boolean elementFound = false;
		while (!elementFound) {
			try {
				WebElement element = driver.findElement(targetElementLocator);

				if (element.isDisplayed()) {
					IOSTouchAction IOSTouchAction4 = new IOSTouchAction(driver);
					IOSTouchAction4.press(PointOption.point(150, 550))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 650)).release().perform();

					try {
						elementFound = true;

					} catch (Exception clickException) {
						IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
						IOSTouchAction.press(PointOption.point(150, 550))
								.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
								.moveTo(PointOption.point(150, 650)).release().perform();
					}
				} else {
					IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
					IOSTouchAction.press(PointOption.point(150, 550))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 650)).release().perform();
				}
			} catch (NoSuchElementException e2) {
				IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
				IOSTouchAction.press(PointOption.point(150, 550))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3))).moveTo(PointOption.point(150, 650))
						.release().perform();
			}

		}
		if (!elementFound) {
		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static void scrollOptionsGroupDown(String input) throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		By targetElementLocator = By
				.xpath("//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'" + input.toLowerCase() + "'" + ")]");
		boolean elementFound = false;
		while (!elementFound) {
			try {
				WebElement element = driver.findElement(targetElementLocator);

				if (element.isDisplayed()) {
					IOSTouchAction IOSTouchAction4 = new IOSTouchAction(driver);
					IOSTouchAction4.press(PointOption.point(150, 650))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 550)).release().perform();

					try {
						elementFound = true;

					} catch (Exception clickException) {
						IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
						IOSTouchAction.press(PointOption.point(150, 650))
								.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
								.moveTo(PointOption.point(150, 550)).release().perform();
					}
				} else {
					IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
					IOSTouchAction.press(PointOption.point(150, 650))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 550)).release().perform();
				}
			} catch (NoSuchElementException e2) {
				IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
				IOSTouchAction.press(PointOption.point(150, 650))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3))).moveTo(PointOption.point(150, 550))
						.release().perform();
			}

		}
		if (!elementFound) {
		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}
}