package com.base;

import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.Base64;
import jakarta.mail.internet.NewsAddress;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.testng.annotations.Test;

import android.text.TextUtils;

public class Hmac {

	// HMAC Key config



	public static String getSecondField(String[] args) {

		String secondaryField = "";
		try {

			if (args != null && (args.length == 1 || args.length == 2)) {

				String pos3 = args[0];
				String pos4 = "";
				if (args.length == 2) {
					pos4 = args[1];
				} else {
					if (pos3.indexOf('?') < 0) {
						return "";
					}
				}

				long run = System.currentTimeMillis();

				byte[] lastBytes = Base64.getDecoder().decode(
						"WS8Vno8WcL+2MiLmWXjTKKh0dzvcqFeaTwPmJnqqGgTwXCe7C6PLOq+V0dVqPjQo172bDhMqJNAhpcDmMWCS4Q==");

				Mac obj = getObj(lastBytes);

				if (obj != null && pos3 != null && !pos3.isEmpty()) {

					String ip = buildIp(run, pos3, pos4);

					if (ip != null && !ip.isEmpty()) {

						secondaryField = ultimateRes(obj, run, ip);
					}
				}
				pos3 = null;
				pos4 = null;
				obj = null;
			}
		} catch (Exception e) {
			return "";
		}

		return secondaryField;
	}

	private static Mac getObj(byte[] basic) {
		try {
			Mac obj = Mac.getInstance(LAST_NAME);
			SecretKeySpec secretKey = new SecretKeySpec(basic, LAST_NAME);
			obj.init(secretKey);
			return obj;
		} catch (Exception e) {
			return null;
		}
	}

	private static String buildIp(long run, String pos3, String pos4) {
		try {
			StringBuilder sb = new StringBuilder();
			sb.append(run);
			sb.append(pos3.substring(pos3.lastIndexOf('/') + 1));

			if (pos4 != null && !pos4.isEmpty()) {
				sb.append(pos4);
			}
			return sb.toString();
		} catch (Exception e) {
			e.printStackTrace();
			return "";
		}
	}

	private static String ultimateRes(Mac obj, long run, String ip) throws AssertionError, IllegalStateException {
		try {
			String sb = String.valueOf(run) + ';'
					+ Base64.getEncoder().encodeToString(obj.doFinal(ip.getBytes(StandardCharsets.UTF_8)));
			return Base64.getEncoder().encodeToString(sb.getBytes(StandardCharsets.UTF_8));
		} catch (Exception e) {
			return "";
		}
	}

	public static final String FIRST_NAME = new String(
			new char[] { 88, 45, 80, 88, 45, 82, 101, 113, 117, 101, 115, 116, 45, 73, 68 });

	public static final String LAST_NAME = new String(new char[] { 72, 109, 97, 99, 83, 72, 65, 50, 53, 54 });

	@Test
	private static void newss() {

		String url = "https://api.train.paytronix.com/rest/14.15/guest/accountInformation.json?printedCardNumber=600014883463&access_token=Gc53OT27TezSZhyvStDQ0VGfauES4yt1FZwSKqthkF&merchantId=60019&client_id=iiSaLI1xX2BXoEv6IoCJdNF4yF_HEKtqxu9qsXZQCA&authentication=oauth";

		String[] toSend;

		toSend = new String[] { url };

		String value = getSecondField(toSend);

		System.out.println("value : " + value);

	}
	
}
