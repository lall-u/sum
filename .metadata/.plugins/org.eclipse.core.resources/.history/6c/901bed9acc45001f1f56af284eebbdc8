package com.features;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.AppLaunchAndLandingScreenLocators;
import com.locators.AppRatingLocators;
import com.locators.BottomBarNavigationLocator;
import com.locators.DashBoardLocators;
import com.locators.LocationLocators;
import com.locators.MyAccountLocators;
import com.locators.OLOLocators;
import com.locators.OrderNowLocators;
import com.locators.SideDrawerLocators;
import com.locators.SignInLocators;
import com.locators.TransactionHistoryLocators;

import io.appium.java_client.TouchAction;
import io.appium.java_client.ios.IOSTouchAction;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;

public class NGALocationListLoggedIn extends BaseClass {

	static SignInLocators signInLocator = new SignInLocators();
	static CommonMethods commonMethods = new CommonMethods();
	static LocationLocators locationLocators = new LocationLocators();
	static DashBoardLocators dashBoardLocators = new DashBoardLocators();
	static SideDrawerLocators sideDrawerLocators = new SideDrawerLocators();
	static OrderNowLocators orderNowLocators = new OrderNowLocators();
	static BottomBarNavigationLocator bottomBarNavigationLocators = new BottomBarNavigationLocator();

	static AppRatingLocators appRating = new AppRatingLocators();
	static SignInLocators signInLocators = new SignInLocators();
	static AppLaunchAndLandingScreenLocators appLaunchAndLandingScreenLocators = new AppLaunchAndLandingScreenLocators();
	static MyAccountLocators myAccountLocators = new MyAccountLocators();
	public static String isLocationEnabled = "true";
	static TransactionHistoryLocators transactionHistoryLocators = new TransactionHistoryLocators();
	static OLOLocators oloLocators = new OLOLocators();
	static List<String> list = new ArrayList<String>();
	static ReOrder reOrder = new ReOrder();
	static SplitPayment splitPayment = new SplitPayment();
	static SinglePayment singlePayment = new SinglePayment();
	static FavouriteOrder favouriteOrder = new FavouriteOrder();
	static Address address = new Address();

	final static ArrayList<JSONObject> jList = new ArrayList<>();

	public static String componentList;
	public static String accessTokenGen;
	public static String printedCardNumberResponse;
	public static String firstnameResponse;
	public static String lastnameResponse;
	public static String salutationResponse;
	public static String welcomeResponse;
	public static String welcomeResponseDefault;
	public static String usernameResponse;
	public static StringBuilder welcomeString;
	public static StringBuilder welcomeDefault;
	public static StringBuilder pointTrackHead;
	public static StringBuilder actualSubHeader;
	public static StringBuilder responseHeader;
	public static StringBuilder actualHeader;
	public static String availableHeader;
	public static String availableViewall;
	public static StringBuilder actualWelcome;
	public static String pointTrackerHeader;
	public static String pointTrackerSubHeader;
	public static int walletMaximum;
	public static String pointBalance1;
	public static String finalPointValue;
	public static JSONArray resultArray;
	public static String pullMessageResponse;
	public static String pullMessageHeaderResponse;
	public static String barcodeAlttextResponse;
	public static String barcodeHeaderResponse;
	public static String scannableLoyaltyCardHeaderText;
	public static String mobilephoneResponse;
	public static String codeSourceResponse;
	public static String primaryCardNumbersResponse;
	public static String phoneNumberResponse;
	public static StringBuilder barcodeHeaderString;
	public static String pointTrackerHeaderAltResponse;
	public static String codeTypeResponse;
	public static String dateResponse;
	public static String messageDescriptionResponse;
	public static String formattedDate;
	public static String expirationTimeResponse;
	public static String shortCardNumberResponse;
	public static String storeCodeResponse;
	public static String storeNameResponse;
	public static String corpExpirationTimeResponse;
	public static String corpShortCardNumberResponse;
	public static String corpStoreCodeResponse;
	public static String corpStoreNameResponse;
	public static String contentValue;

	public static int walletCode;
	public static int walletCdn;
	public static JSONArray perksCdn;
	public static String cardTemplateCdn;
	public static String tierCdn;
	public static JSONArray perks;
	public static String cardTemplate;
	public static String tier;
	public static String activeDate;
	public static String expiryDate;
	public static String favoriteStore;
	public static String storeGroup;
	public static String imageUrl1;
	public static String imageAltText;
	public static Response cdnResponse;

	public static WebElement imagecomponent;

	public static String preCheckInAltTextResponse;
	public static String preCheckInTextResponse;
	public static String postCheckInTextResponse;
	public static String codeTypeCheckInResponse;
	public static String codeSourceCheckInResponse;
	public static StringBuilder preCheckInTextString;
	public static StringBuilder postCheckInTextString;
	public static String checkInStoreNameResponse;
	public static String checkInStoreCodeResponse;
	public static String availableRewardsHeader;
	public static String availableRewardsViewAll;
	public static String availableRewardsAltText;
	public static StringBuilder availableRewardsViewAllString;
	public static StringBuilder availableRewardsHeaderString;

	public static String storeShortCode;
	public static String userName;
	public static String passWord;
	public static String merchantId;
	public static String cardTemplateCode;
	public static String storeGroupCode;
	public static String clientId;
	public static String integrationDetail;
	static String storeCode;
	static String authorizationGrant;
	static String merchantid;
	static String key = "6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
	static String provider = "px";
	static String recentlyOrderedName;
	static String Restaurant_Id;

	static String authentication = "oauth";

	static String[] welcomeConfig = { "{salutation}", "{firstName}", "{lastName}", "{username}" };

	static String thirdPartyIntegration = "lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97";

	static String response_type = "code";

	static String scope = "user_read user_write account_read account_write";

	static String corpStoreCode;

	static String authentication1 = "anonymous";

	static String integrationDetail1 = "os=iOS%7Cosversion=16.6%7Cdevice=iPhone%7CmerchantId=60019%7Cintegrator=Paytronix%7Cversion=REST:14.15%20-%20API:23.21.20231010%20-%20APP:2023101001";

	static String favStoreCode;
	static String favStoreName;
	static String optStringFavEmpty;

	static String get0;

	static String get1;

	static String get2;

	static int size;

	static String date;

	static String substring;

	static String DateApi;

	static String Date;

	static String orderId;

	static String takeoutOrderTypeText;
	static String curbsideOrderTypeText;
	static String deliveryOrderTypeText;

	static String asapOrderTimeText;
	static String laterOrderTimeText;

	static Boolean takeoutResponse;
	static String takeoutLabelResponse;
	static Boolean laterOrder;
	static String laterOrderTextDisplayed;

	static Boolean hideTakeout;
	static boolean curbsideOrderTypeResponse;
	static boolean deliveryOrderTypeResponse;

	static boolean asapOrder;
	static String asapOrderTextDisplayed;

	public void ngaLocationListTakeoutLaterConfigured() throws Exception {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName().toLowerCase();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Prasanna Venkatesh").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfigured001 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfigured001");
		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfigured002 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfigured002");
		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfigured003 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfigured003");

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		String localConfigTakeoutText = takeoutFlowConfiguration.get(20);
		String laterLocalConfigText = takeoutFlowConfiguration.get(24);
		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);
		String bottomConfiguration = storeName.get(34);
		String sideDrawerConfiguration = storeName.get(35);

		Thread.sleep(6000);

		FlutterFinder find = new FlutterFinder(driver);
		CommonMethods.switchContext("FLUTTER");

		Thread.sleep(6000);
		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);
		String dashboardTitleVkText = dashboardTitleVk.getText();
		System.out.println(dashboardTitleVkText);

		if (sideDrawerConfiguration.equalsIgnoreCase("Yes")) {

			CommonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find
					.byValueKey(dashBoardLocators.DASHBOARD_SIDE_DRAWER_BUTTON_VKL);
			dashboardSideDrawerButtonVk.click();

			// To tap the Order now menu in the side drawer by searching the menu.

			CommonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "location");

			CommonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerLocationButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_LOCATION_BUTTON_VKL);
			String sideDrawerLocationButtonTextVk = sideDrawerLocationButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithTakeoutLaterConfigured001.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured001 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerLocationButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithTakeoutLaterConfigured001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified that order now is configured in side drawer");

			commonMethods.checkAndClickTheElement(sideDrawerLocationButtonVk);

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the order now screen.

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithTakeoutLaterConfigured002.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithTakeoutLaterConfigured002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured003
			 * @author Ganeshkumarselvaraj
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithTakeoutLaterConfigured003.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : "
							+ dashboardTitleVkText,
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			CommonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "location");

			CommonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerLocationButtonVk);

		} else {

			System.out.println("Verified that ordering flow via sideDrawer is not configured as yes");

		}

		try {

			if (bottomConfiguration.equalsIgnoreCase("Yes")) {
				CommonMethods.switchContext("NATIVE_APP");

				Thread.sleep(15000);

				WebElement bottomBarOrderNow = driver
						.findElement(By.xpath(OrderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));
				// To check Order now is displayed in the buttom bar.
				if (bottomBarOrderNow.isDisplayed()) {
					System.out.println("Order now is displayed");
					String bottomBarOrderNowText = bottomBarOrderNow.getText();

					bottomBarOrderNow.click();
					// To print the informations using node in the extent report.
					nextGenOrderNowFlowWithTakeoutLaterConfigured001.info(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithTakeoutLaterConfigured001 - Validated that Order now button is present in bottom bar navigation bar with the text name as : "
									+ bottomBarOrderNowText,
							ExtentColor.CYAN));
					nextGenOrderNowFlowWithTakeoutLaterConfigured001.addScreenCaptureFromBase64String(
							takeScreenshot(driver), "Verified that Location is configured in bottom bar");

					Thread.sleep(40000);

					try {
						WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));
						if (dontAllowId.isDisplayed()) {
							dontAllowId.click();
						}
					} catch (Exception e) {
						System.out.println("Native Popup not aappears");
					}

					// To get the Order now screen title.
					CommonMethods.switchContext("FLUTTER");

					FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
					String locationTitleText = locationTitle.getText();

					nextGenOrderNowFlowWithTakeoutLaterConfigured002.addScreenCaptureFromBase64String(
							takeScreenshot(driver), "Verified user navigated to the location list screen.");
					nextGenOrderNowFlowWithTakeoutLaterConfigured002.info(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithTakeoutLaterConfigured002 - Verified that user navigated to the location list screen and the title is : "
									+ locationTitleText,
							ExtentColor.CYAN));

					FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
					commonMethods.checkAndClickTheElement(locationBackIcon);

					Thread.sleep(6000);

//				nextGenOrderNowFlowWithTakeoutLaterConfigured003.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
					nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : "
									+ dashboardTitleVkText,
							ExtentColor.CYAN));
					System.out.println("Button tapping");

					CommonMethods.switchContext("NATIVE_APP");
					Thread.sleep(8000);
					bottomBarOrderNow.click();
					CommonMethods.switchContext("FLUTTER");

				} else {

					System.out.println("Verified that ordering flow via bottomBar is not configured as yes");

				}

			}
			String orderId = APIMethods.orderId();

			System.out.println("Orders API success");

			Response takeOutConfig = APIMethods.takeOutResponse();
			JSONObject storeResponse1 = new JSONObject(takeOutConfig.body().asString());
			if (storeResponse1.has("name")) {
				asapOrder = storeResponse1.optBoolean("advance_only");
				laterOrder = storeResponse1.optBoolean("use_eta");
				takeoutResponse = storeResponse1.optBoolean("takeout");
				takeoutLabelResponse = storeResponse1.optString("takeout_label").toLowerCase();
				JSONObject curbsideResponse = storeResponse1.optJSONObject("curbside");

				hideTakeout = curbsideResponse.optBoolean("hide_takeout");

				curbsideOrderTypeResponse = curbsideResponse.optBoolean("en");
				deliveryOrderTypeResponse = storeResponse1.optBoolean("delivery");
				System.out.println(" takeout Response & Label Text : " + takeoutResponse + hideTakeout + " & "
						+ takeoutLabelResponse);
			}

			System.out.println("API success");

			boolean locationListStoreSelection = commonMethods.locationListStoreSelection(desiredStoreName);

			CommonMethods.switchContext("FLUTTER");

			Thread.sleep(5000);

			FlutterElement storeInfoTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);
			String storeInfoScreenTitleText = storeInfoTitleVk.getText();

//			nextGenOrderNowFlowWithTakeoutLaterConfigured003.addScreenCaptureFromBase64String(takeScreenshot(driver),
//					"Verified that user navigated to the store info screen");

			nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithTakeoutLaterConfigured003 - Verified that user navigated to the StoreInfo screen : "
							+ storeInfoScreenTitleText,
					ExtentColor.CYAN));

			Thread.sleep(5000);

			FlutterElement storeInfoScreenOrderNowIconVk = find
					.byValueKey(locationLocators.STOREINFO_SCREEN_ORDERNOWICON_VKL);
			storeInfoScreenOrderNowIconVk.click();

			if (locationListStoreSelection) {

				System.out.println("Store successfully found and clicked the store.");

				if (takeoutResponse && hideTakeout == false) {

					try {

						CommonMethods.switchContext("NATIVE_APP");

						Thread.sleep(10000);

						WebElement takeoutPopup = driver
								.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

						if (takeoutPopup.isDisplayed()) {

							CommonMethods.switchContext("FLUTTER");

							FlutterElement takeoutText = find.byValueKey(OrderNowLocators.ORDERTYPE_TAKEOUT_VKL);

							takeoutOrderTypeText = takeoutText.getText().toLowerCase();

							if (!takeoutLabelResponse.isEmpty()) {

								commonMethods.assertvalidation("takeout Label Text", takeoutLabelResponse,
										takeoutOrderTypeText, nextGenOrderNowFlowWithTakeoutLaterConfigured003);
								takeoutText.click();

								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
												+ takeoutOrderTypeText + " " + " response text is : "
												+ takeoutLabelResponse + " matching.",
										ExtentColor.CYAN));

							} else {

								commonMethods.assertvalidation("takeout Label Text", localConfigTakeoutText,
										takeoutOrderTypeText, nextGenOrderNowFlowWithTakeoutLaterConfigured003);
								takeoutText.click();

								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
												+ takeoutOrderTypeText + " " + " response text is : "
												+ localConfigTakeoutText + " matching.",
										ExtentColor.CYAN));
							}

							if (laterOrder) {

								try {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									WebElement laterLabel = driver
											.findElement(By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

									if (laterLabel.isDisplayed()) {

										CommonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTextDisplayed = laterLabel1.getText();

										commonMethods.assertvalidation("later Label Text", laterLocalConfigText,
												laterOrderTextDisplayed,
												nextGenOrderNowFlowWithTakeoutLaterConfigured003);

										System.out.println(
												"Verified that later is displayed in the order type popup and displayed texts is "
														+ laterLocalConfigText + " " + " response text is : "
														+ laterOrderTextDisplayed + " matching.");

										nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that later is displayed in the order type popup and displayed texts is "
														+ laterLocalConfigText + " " + " response text is : "
														+ laterOrderTextDisplayed + " matching.",
												ExtentColor.CYAN));
										nextGenOrderNowFlowWithTakeoutLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver));

										laterLabel1.click();

										Thread.sleep(5000);

									}

								} catch (Exception e2) {
									System.out.println(
											"Verified that respected store has takeout order and later order type only.");

									Thread.sleep(5000);

								}

							} else {

								System.out.println("Later orders is not configured for the takeout order Type.");

								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 -Verified that Later orders is not configured for the takeout order Type and response is : "
												+ laterOrder,
										ExtentColor.CYAN));

								Thread.sleep(5000);
								FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
								bottombarHome.click();

							}

						}

					} catch (Exception e) {

						if (laterOrder) {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								WebElement laterLabel = driver
										.findElement(By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								if (laterLabel.isDisplayed()) {

									FlutterElement laterLabel1 = find.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

									laterOrderTextDisplayed = laterLabel1.getText();

									commonMethods.assertvalidation("later Label Text", laterLocalConfigText,
											laterOrderTextDisplayed, nextGenOrderNowFlowWithTakeoutLaterConfigured003);

									laterLabel1.click();

									Thread.sleep(5000);

								}

							} catch (Exception e2) {

								System.out.println(
										"Verified that respected store has takeout order and later order type only.");

								Thread.sleep(5000);

							}

						} else {

							System.out.println("Later type of orders is not configured for the takeout order Type.");

							nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithTakeoutLaterConfigured003 -Verified that Later orders is not configured for the takeout order Type and response is : "
											+ laterOrder,
									ExtentColor.CYAN));

							Thread.sleep(5000);
							FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
							bottombarHome.click();

						}
					}

					integratedMethods(takeoutOrderTypeText, laterOrderTimeText);

				} else {
					System.out.println("Takeout not configured");

					if (curbsideOrderTypeResponse || deliveryOrderTypeResponse) {

						Thread.sleep(5000);
						try {
							CommonMethods.switchContext("NATIVE_APP");
							Thread.sleep(5000);
							WebElement orderTypeCloseIconXpath = driver
									.findElement(By.xpath(OrderNowLocators.ORDERTYPE_POPUP_XPATH));
							CommonMethods.switchContext("FLUTTER");
							if (orderTypeCloseIconXpath.isDisplayed()) {

								Thread.sleep(2000);
								FlutterElement orderTypeCloseIconVk = find
										.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);
								orderTypeCloseIconVk.click();
								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that curbside label is not displayed on the order type popup ",
										ExtentColor.CYAN));

								Thread.sleep(5000);
								FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
								bottombarHome.click();

							}

						} catch (Exception e) {
							CommonMethods.switchContext("NATIVE_APP");
							Thread.sleep(3000);
							WebElement orderTypeCloseIconXpath = driver
									.findElement(By.xpath(OrderNowLocators.ORDERTIME_POPUP_XPATH));
							if (orderTypeCloseIconXpath.isDisplayed()) {
								CommonMethods.switchContext("FLUTTER");
								Thread.sleep(2000);
								FlutterElement orderTypeCloseIconVk = find
										.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);
								orderTypeCloseIconVk.click();
								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that When would you like your order popup displayed where as app close the popup ",
										ExtentColor.CYAN));

								System.out.println(
										" Verified that When would you like your order popup displayed where as app close the popup ");

								Thread.sleep(5000);
								FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
								bottombarHome.click();
							}
						}
					} else {

						System.out.println("Verified that respective store : " + desiredStoreName
								+ " has no order type or Not accepting any order right now.");

						Thread.sleep(8000);

						FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
						bottombarHome.click();

					}

				}

			} else {

				System.out.println(
						"Verified that respective store is not found in the location list and store is not clicked");

				nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that respective store is not found in the location list and store is not clicked",
						ExtentColor.CYAN));

				Thread.sleep(8000);

				FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
				bottombarHome.click();

			}

		} catch (Exception e) {

			System.out.println(
					"Verified that OrderNow is not displayed in the bottom bar whereas order now is configured in the App level.");

			nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that OrderNow is not displayed in the bottom bar whereas order now is configured in the App level. ",
					ExtentColor.CYAN));

			CommonMethods.switchContext("FLUTTER");

			Thread.sleep(10000);
			// Locator need to verify for the below code.

			FlutterElement alertDescription = find.byValueKey(orderNowLocators.LOCATION_LIST_ALERT_DESCRIPTION_VKL);
			String locationListErrorAlertDisplayed = alertDescription.getText();

			System.out.println(locationListErrorAlertDisplayed);
			FlutterElement alertOkayButton = find.byValueKey(orderNowLocators.LOCATION_LIST_ALERT_OKAY_BUTTON_VKL);
			alertOkayButton.click();

			Thread.sleep(8000);

			FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
			bottombarHome.click();

		}

	}

	public static void ngaLocationListTakeoutAsapConfigured() throws Exception {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName().toLowerCase();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Prasanna Venkatesh").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfigured001 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfigured001");
		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfigured002 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfigured002");
		ExtentTest nextGenOrderNowFlowWithTakeoutLaterConfigured003 = test
				.createNode("nextGenOrderNowFlowWithTakeoutLaterConfigured003");

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		String localConfigTakeoutText = takeoutFlowConfiguration.get(20);
		String asapLocalConfigText = takeoutFlowConfiguration.get(23);
		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);
		String bottomConfiguration = storeName.get(74);
		String sideDrawerConfiguration = storeName.get(75);

		Thread.sleep(6000);

		FlutterFinder find = new FlutterFinder(driver);
		CommonMethods.switchContext("FLUTTER");

		Thread.sleep(6000);
		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);
		String dashboardTitleVkText = dashboardTitleVk.getText();
		System.out.println(dashboardTitleVkText);

		if (sideDrawerConfiguration.equalsIgnoreCase("Yes")) {

			CommonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find
					.byValueKey(dashBoardLocators.DASHBOARD_SIDE_DRAWER_BUTTON_VKL);
			dashboardSideDrawerButtonVk.click();

			// To tap the Order now menu in the side drawer by searching the menu.

			CommonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "location");

			CommonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerLocationButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_LOCATION_BUTTON_VKL);
			String sideDrawerLocationButtonTextVk = sideDrawerLocationButtonVk.getText();

			Thread.sleep(6000);

			nextGenOrderNowFlowWithTakeoutLaterConfigured001.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured001 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerLocationButtonTextVk,
					ExtentColor.CYAN));
			nextGenOrderNowFlowWithTakeoutLaterConfigured001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified that order now is configured in side drawer");

			commonMethods.checkAndClickTheElement(sideDrawerLocationButtonVk);

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the order now screen.

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenOrderNowFlowWithTakeoutLaterConfigured002.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the order now screen.");
			nextGenOrderNowFlowWithTakeoutLaterConfigured002.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured003
			 * @author Ganeshkumarselvaraj
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenOrderNowFlowWithTakeoutLaterConfigured003.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"Verified user navigated to the Dashboard screen.");
			nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : "
							+ dashboardTitleVkText,
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			CommonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "location");

			CommonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerLocationButtonVk);

		} else {

			System.out.println("Verified that ordering flow via sideDrawer is not configured as yes");

		}

		try {

			if (bottomConfiguration.equalsIgnoreCase("Yes")) {
				CommonMethods.switchContext("NATIVE_APP");

				Thread.sleep(15000);

				WebElement bottomBarOrderNow = driver
						.findElement(By.xpath(OrderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));
				// To check Order now is displayed in the buttom bar.
				if (bottomBarOrderNow.isDisplayed()) {
					System.out.println("Order now is displayed");
					String bottomBarOrderNowText = bottomBarOrderNow.getText();

					bottomBarOrderNow.click();
					// To print the informations using node in the extent report.
					nextGenOrderNowFlowWithTakeoutLaterConfigured001.info(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithTakeoutLaterConfigured001 - Validated that Order now button is present in bottom bar navigation bar with the text name as : "
									+ bottomBarOrderNowText,
							ExtentColor.CYAN));
					nextGenOrderNowFlowWithTakeoutLaterConfigured001.addScreenCaptureFromBase64String(
							takeScreenshot(driver), "Verified that Location is configured in bottom bar");

					Thread.sleep(40000);

					try {
						WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));
						if (dontAllowId.isDisplayed()) {
							dontAllowId.click();
						}
					} catch (Exception e) {
						System.out.println("Native Popup not aappears");
					}

					// To get the Order now screen title.
					CommonMethods.switchContext("FLUTTER");

					FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
					String locationTitleText = locationTitle.getText();

					nextGenOrderNowFlowWithTakeoutLaterConfigured002.addScreenCaptureFromBase64String(
							takeScreenshot(driver), "Verified user navigated to the location list screen.");
					nextGenOrderNowFlowWithTakeoutLaterConfigured002.info(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithTakeoutLaterConfigured002 - Verified that user navigated to the location list screen and the title is : "
									+ locationTitleText,
							ExtentColor.CYAN));

					FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
					commonMethods.checkAndClickTheElement(locationBackIcon);

					Thread.sleep(6000);

//				nextGenOrderNowFlowWithTakeoutLaterConfigured003.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
					nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
							"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : "
									+ dashboardTitleVkText,
							ExtentColor.CYAN));
					System.out.println("Button tapping");

					CommonMethods.switchContext("NATIVE_APP");
					Thread.sleep(8000);
					bottomBarOrderNow.click();
					CommonMethods.switchContext("FLUTTER");

				} else {

					System.out.println("Verified that ordering flow via bottomBar is not configured as yes");

				}

			}
			String orderId = APIMethods.orderId();

			System.out.println("Orders API success");

			Response takeOutConfig = APIMethods.takeOutResponse();
			JSONObject storeResponse1 = new JSONObject(takeOutConfig.body().asString());
			if (storeResponse1.has("name")) {
				asapOrder = storeResponse1.optBoolean("advance_only");
				takeoutResponse = storeResponse1.optBoolean("takeout");
				takeoutLabelResponse = storeResponse1.optString("takeout_label").toLowerCase();
				JSONObject curbsideResponse = storeResponse1.optJSONObject("curbside");

				hideTakeout = curbsideResponse.optBoolean("hide_takeout");

				curbsideOrderTypeResponse = curbsideResponse.optBoolean("en");
				deliveryOrderTypeResponse = storeResponse1.optBoolean("delivery");
				System.out.println(" takeout Response & Label Text : " + takeoutResponse + hideTakeout + " & "
						+ takeoutLabelResponse);
			}

			System.out.println("API success");

			boolean locationListStoreSelection = commonMethods.locationListStoreSelection(desiredStoreName);

			CommonMethods.switchContext("FLUTTER");

			Thread.sleep(5000);

			FlutterElement storeInfoTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);
			String storeInfoScreenTitleText = storeInfoTitleVk.getText();

//			nextGenOrderNowFlowWithTakeoutLaterConfigured003.addScreenCaptureFromBase64String(takeScreenshot(driver),
//					"Verified that user navigated to the store info screen");

			nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithTakeoutLaterConfigured003 - Verified that user navigated to the StoreInfo screen : "
							+ storeInfoScreenTitleText,
					ExtentColor.CYAN));

			Thread.sleep(5000);

			FlutterElement storeInfoScreenOrderNowIconVk = find
					.byValueKey(locationLocators.STOREINFO_SCREEN_ORDERNOWICON_VKL);
			storeInfoScreenOrderNowIconVk.click();

			if (locationListStoreSelection) {

				System.out.println("Store successfully found and clicked the store.");

				if (takeoutResponse && hideTakeout == false) {

					try {

						CommonMethods.switchContext("NATIVE_APP");

						Thread.sleep(10000);

						WebElement takeoutPopup = driver
								.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

						if (takeoutPopup.isDisplayed()) {

							CommonMethods.switchContext("FLUTTER");

							FlutterElement takeoutText = find.byValueKey(OrderNowLocators.ORDERTYPE_TAKEOUT_VKL);

							takeoutOrderTypeText = takeoutText.getText().toLowerCase();

							if (!takeoutLabelResponse.isEmpty()) {

								commonMethods.assertvalidation("takeout Label Text", takeoutLabelResponse,
										takeoutOrderTypeText, nextGenOrderNowFlowWithTakeoutLaterConfigured003);
								takeoutText.click();

								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
												+ takeoutOrderTypeText + " " + " response text is : "
												+ takeoutLabelResponse + " matching.",
										ExtentColor.CYAN));

							} else {

								commonMethods.assertvalidation("takeout Label Text", localConfigTakeoutText,
										takeoutOrderTypeText, nextGenOrderNowFlowWithTakeoutLaterConfigured003);
								takeoutText.click();

								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
												+ takeoutOrderTypeText + " " + " response text is : "
												+ localConfigTakeoutText + " matching.",
										ExtentColor.CYAN));
							}

							if (asapOrder == false) {

								try {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									WebElement asapLabel = driver
											.findElement(By.xpath(OrderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

									if (asapLabel.isDisplayed()) {

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTextDisplayed = asapLabel1.getText();

										commonMethods.assertvalidation("asap Label Text", asapLocalConfigText,
												asapOrderTextDisplayed,
												nextGenOrderNowFlowWithTakeoutLaterConfigured003);

										System.out.println(
												"Verified that asap is displayed in the order type popup and displayed texts is "
														+ asapLocalConfigText + " " + " response text is : "
														+ asapOrderTextDisplayed + " matching.");

										nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
												"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that asap is displayed in the order type popup and displayed texts is "
														+ asapLocalConfigText + " " + " response text is : "
														+ asapOrderTextDisplayed + " matching.",
												ExtentColor.CYAN));
										nextGenOrderNowFlowWithTakeoutLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver));

										asapLabel1.click();

										Thread.sleep(5000);

									}

								} catch (Exception e2) {
									System.out.println(
											"Verified that respected store has takeout order and asap order type only.");

									Thread.sleep(5000);

								}

							} else {

								System.out.println("Asap orders is not configured for the takeout order Type.");

								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 -Verified that Asap orders is not configured for the takeout order Type and response is : "
												+ asapOrder,
										ExtentColor.CYAN));

								Thread.sleep(5000);
								FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
								bottombarHome.click();

							}

						}

					} catch (Exception e) {

						if (asapOrder == false) {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								WebElement asapLabel = driver
										.findElement(By.xpath(OrderNowLocators.ORDER_NOW_GUEST_ASAP_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								if (asapLabel.isDisplayed()) {

									FlutterElement asapLabel1 = find.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

									asapOrderTextDisplayed = asapLabel1.getText();

									commonMethods.assertvalidation("asap Label Text", asapLocalConfigText,
											laterOrderTextDisplayed, nextGenOrderNowFlowWithTakeoutLaterConfigured003);

									asapLabel1.click();

									Thread.sleep(5000);

								}

							} catch (Exception e2) {

								System.out.println(
										"Verified that respected store has takeout order and asap order type only.");

								Thread.sleep(5000);

							}

						} else {

							System.out.println("Asap type of orders is not configured for the takeout order Type.");

							nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
									"nextGenOrderNowFlowWithTakeoutLaterConfigured003 -Verified that Asap orders is not configured for the takeout order Type and response is : "
											+ laterOrder,
									ExtentColor.CYAN));

							Thread.sleep(5000);
							FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
							bottombarHome.click();

						}
					}

					integratedMethods(takeoutOrderTypeText, laterOrderTimeText);

				} else {
					System.out.println("Takeout not configured");

					if (curbsideOrderTypeResponse || deliveryOrderTypeResponse) {

						Thread.sleep(5000);
						try {
							CommonMethods.switchContext("NATIVE_APP");
							Thread.sleep(5000);
							WebElement orderTypeCloseIconXpath = driver
									.findElement(By.xpath(OrderNowLocators.ORDERTYPE_POPUP_XPATH));
							CommonMethods.switchContext("FLUTTER");
							if (orderTypeCloseIconXpath.isDisplayed()) {

								Thread.sleep(2000);
								FlutterElement orderTypeCloseIconVk = find
										.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);
								orderTypeCloseIconVk.click();
								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that curbside label is not displayed on the order type popup ",
										ExtentColor.CYAN));

								Thread.sleep(5000);
								FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
								bottombarHome.click();

							}

						} catch (Exception e) {
							CommonMethods.switchContext("NATIVE_APP");
							Thread.sleep(3000);
							WebElement orderTypeCloseIconXpath = driver
									.findElement(By.xpath(OrderNowLocators.ORDERTIME_POPUP_XPATH));
							if (orderTypeCloseIconXpath.isDisplayed()) {
								CommonMethods.switchContext("FLUTTER");
								Thread.sleep(2000);
								FlutterElement orderTypeCloseIconVk = find
										.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);
								orderTypeCloseIconVk.click();
								nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that When would you like your order popup displayed where as app close the popup ",
										ExtentColor.CYAN));

								System.out.println(
										" Verified that When would you like your order popup displayed where as app close the popup ");

								Thread.sleep(5000);
								FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
								bottombarHome.click();
							}
						}
					} else {

						System.out.println("Verified that respective store : " + desiredStoreName
								+ " has no order type or Not accepting any order right now.");

						Thread.sleep(8000);

						FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
						bottombarHome.click();

					}

				}

			} else {

				System.out.println(
						"Verified that respective store is not found in the location list and store is not clicked");

				nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that respective store is not found in the location list and store is not clicked",
						ExtentColor.CYAN));

				Thread.sleep(8000);

				FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
				bottombarHome.click();

			}

		} catch (Exception e) {

			System.out.println(
					"Verified that OrderNow is not displayed in the bottom bar whereas order now is configured in the App level.");

			nextGenOrderNowFlowWithTakeoutLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithTakeoutLaterConfigured003 - Verified that OrderNow is not displayed in the bottom bar whereas order now is configured in the App level. ",
					ExtentColor.CYAN));

			CommonMethods.switchContext("FLUTTER");

			Thread.sleep(10000);
			// Locator need to verify for the below code.

			FlutterElement alertDescription = find.byValueKey(orderNowLocators.LOCATION_LIST_ALERT_DESCRIPTION_VKL);
			String locationListErrorAlertDisplayed = alertDescription.getText();

			System.out.println(locationListErrorAlertDisplayed);
			FlutterElement alertOkayButton = find.byValueKey(orderNowLocators.LOCATION_LIST_ALERT_OKAY_BUTTON_VKL);
			alertOkayButton.click();

			Thread.sleep(8000);

			FlutterElement bottombarHome = find.byValueKey(OrderNowLocators.BOTTOM_BAR_HOME);
			bottombarHome.click();

		}

	}

	public static void ngaLocationListCurbsideAsapBottomBarConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.appConfiguration();
		String merchantId = curbsideFlowConfiguration.get(8);
		String storeCode = curbsideFlowConfiguration.get(13);

		String localConfigCurbsideText = commonMethods
				.stringsReader(OrderNowLocators.LOCAL_CONFIGURATION_CURBSIDE_TEXT);

		String asapText = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_ASAP_TEXT);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenLocationListFlowWithCurbsideAsapConfigured_001 = test
				.createNode("nextGenLocationListFlowWithCurbsideAsapConfigured_001");
		ExtentTest nextGenLocationListFlowWithCurbsideAsapConfigured_002 = test
				.createNode("nextGenLocationListFlowWithCurbsideAsapConfigured_002");
		ExtentTest nextGenLocationListFlowWithCurbsideAsapConfigured_003 = test
				.createNode("nextGenLocationListFlowWithCurbsideAsapConfigured_003");

		// To get the dashboard title text

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		// To check whether ordernow is present in the bottom bar.

		// To check whether ordernow is present in the bottom bar.

		try {

			CommonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(OrderNowLocators.LOGGEDIN_BOTTOMBAR_LOCATIONLIST_XPATHL));

			// To check Order now is displayed in the buttom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenLocationListFlowWithCurbsideAsapConfigured_001.info(MarkupHelper.createLabel(
						"nextGenLocationListFlowWithCurbsideAsapConfigured_001 - Validated that Order now button is present in bottom bar navigation bar with the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenLocationListFlowWithCurbsideAsapConfigured_001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that OrderNow is configured in bottom bar");

				bottomBarOrderNow.click();

				try {

					CommonMethods.switchContext("NATIVE_APP");

					Thread.sleep(11000);

					WebElement dontAllowId = driver.findElement(
							By.id("com.android.permissioncontroller:id/permission_deny_and_dont_ask_again_button"));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {
					// TODO: handle exception

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenLocationListFlowWithCurbsideAsapConfigured_002
				 * @author Ganeshkumarselvaraj
				 */

				// To get the Order now screen title.

				CommonMethods.switchContext("FLUTTER");

				Thread.sleep(5000);

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenLocationListFlowWithCurbsideAsapConfigured_002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the location list screen.");
				nextGenLocationListFlowWithCurbsideAsapConfigured_002.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithLocationOffLoggedIn002 - Verified that user navigated to the location list screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenLocationListFlowWithCurbsideAsapConfigured_003
				 * @author Ganeshkumarselvaraj
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				nextGenLocationListFlowWithCurbsideAsapConfigured_003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				nextGenLocationListFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithLocationOffLoggedIn003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : ",
						ExtentColor.CYAN));

				CommonMethods.switchContext("NATIVE_APP");

				Thread.sleep(3000);

				WebElement bottomBarOrderNow1 = driver
						.findElement(By.xpath(OrderNowLocators.LOGGEDIN_BOTTOMBAR_LOCATIONLIST_XPATHL));

				bottomBarOrderNow1.click();

				CommonMethods.switchContext("FLUTTER");

//
			}

			Thread.sleep(5000);

			orderId = APIMethods.orderId();
//
//			/**
//			 * @Class_Name Location
//			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
//			 * @Description Ensure that user navigated to dashboard screen while tapping the
//			 *              backicon in the ordernow screen.
//			 * @TestID nextGenOrderNowFlowWithLocationOffLoggedIn003
//			 * @author Ganeshkumarselvaraj
//			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				String asapOrder = storeResponse.optString("advance_only");
				String laterOrder = storeResponse.optString("use_eta");

				JSONObject curbsideObject = storeResponse.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenOrderNowFlowWithLocationOffLoggedIn003
				 * @author Ganeshkumarselvaraj
				 */

				try {

					Thread.sleep(5000);

					commonMethods.scrollDownAndClick(desiredStoreName);

					try {

						FlutterElement storeInfoTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);
						String storeInfoScreenTitleText = storeInfoTitleVk.getText();

						nextGenLocationListFlowWithCurbsideAsapConfigured_003.addScreenCaptureFromBase64String(
								takeScreenshot(driver), "Verified that user navigated to the store info screen");

						nextGenLocationListFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that user navigated to the StoreInfo screen : "
										+ storeInfoScreenTitleText,
								ExtentColor.CYAN));

						FlutterElement storeInfoScreenOrderNowIconVk = find
								.byValueKey(locationLocators.STOREINFO_SCREEN_ORDERNOWICON_VKL);
						storeInfoScreenOrderNowIconVk.click();

					} catch (Exception e) {

						nextGenLocationListFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that the user not navigated to the StoreInfo screen ",
								ExtentColor.CYAN));

					}

					// To verify the Configured order type.

					if (curbsideResponse.equalsIgnoreCase("true")) {

						if (!curbsideResponseLabelText.isEmpty()) {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();
								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									curbsideText1.click();

									nextGenLocationListFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									curbsideText.click();

									nextGenLocationListFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();
								boolean equalsIgnoreCase = localConfigCurbsideText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									curbsideText1.click();

									nextGenLocationListFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ localConfigCurbsideText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									curbsideText.click();

									nextGenLocationListFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ localConfigCurbsideText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenLocationListFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
										"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the app level.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenLocationListFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
								"nextGenOrderNowFlowWithLocationOffLoggedIn003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the app level.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenLocationListFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
							"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenLocationListFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the App level",
					ExtentColor.CYAN));
		}

	}

	public static void ngaLocationListCurbsideAsapSideDrawerConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.appConfiguration();
		merchantId = curbsideFlowConfiguration.get(8);
		String storeCode = curbsideFlowConfiguration.get(13);

		String localConfigCurbsideText = commonMethods
				.stringsReader(OrderNowLocators.LOCAL_CONFIGURATION_CURBSIDE_TEXT);

		String asapText = commonMethods.stringsReader(orderNowLocators.LOCAL_CONFIGURATION_ASAP_TEXT);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenLocationListFlowWithCurbsideAsapConfigured_001 = test
				.createNode("nextGenLocationListFlowWithCurbsideAsapConfigured_001");
		ExtentTest nextGenLocationListFlowWithCurbsideAsapConfigured_002 = test
				.createNode("nextGenLocationListFlowWithCurbsideAsapConfigured_002");
		ExtentTest nextGenLocationListFlowWithCurbsideAsapConfigured_003 = test
				.createNode("nextGenLocationListFlowWithCurbsideAsapConfigured_003");

		// To get the dashboard title text

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		try {

			CommonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find.byValueKey(sideDrawerLocators.SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			CommonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			CommonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenLocationListFlowWithCurbsideAsapConfigured_001.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideAsapConfigured_001 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenLocationListFlowWithCurbsideAsapConfigured_001.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			Thread.sleep(5000);

			try {

				CommonMethods.switchContext("NATIVE_APP");

				Thread.sleep(11000);

				WebElement dontAllowId = driver.findElement(
						By.id("com.android.permissioncontroller:id/permission_deny_and_dont_ask_again_button"));

				if (dontAllowId.isDisplayed()) {

					dontAllowId.click();

				}

			}

			catch (Exception e) {
				// TODO: handle exception

				System.out.println("Native Popup not aappears");

			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenLocationListFlowWithCurbsideAsapConfigured_002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the order now screen.

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenLocationListFlowWithCurbsideAsapConfigured_002.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the order now screen.");
			nextGenLocationListFlowWithCurbsideAsapConfigured_002.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideAsapConfigured_002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenLocationListFlowWithCurbsideAsapConfigured_003
			 * @author Ganeshkumarselvaraj
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenLocationListFlowWithCurbsideAsapConfigured_003.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
			nextGenLocationListFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : ",
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			CommonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElement(driver, "ORDER NOW");

			CommonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

//				// Need to verify the store details in the map icon and list view are same

//			commonMethods.checkAndClickTheElement(locationScreenStoreMapIconButton);
			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				String asapOrder = storeResponse.optString("advance_only");
				String laterOrder = storeResponse.optString("use_eta");

				String deliveryResponse = storeResponse.optString("delivery");
				String deliveryResponseLabelText = storeResponse.optString("delivery_label");

				String takeoutResponse = storeResponse.optString("takeout");
				String takeoutResponseLabelText = storeResponse.optString("takeout_label");

				JSONObject curbsideObject = storeResponse.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				try {

					Thread.sleep(3000);

					commonMethods.scrollDownAndClick(desiredStoreName);

					try {

						FlutterElement storeInfoTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);
						String storeInfoScreenTitleText = storeInfoTitleVk.getText();

						nextGenLocationListFlowWithCurbsideAsapConfigured_003.addScreenCaptureFromBase64String(
								takeScreenshot(driver), "Verified that user navigated to the store info screen");

						nextGenLocationListFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that user navigated to the StoreInfo screen : "
										+ storeInfoScreenTitleText,
								ExtentColor.CYAN));

						FlutterElement storeInfoScreenOrderNowIconVk = find
								.byValueKey(locationLocators.STOREINFO_SCREEN_ORDERNOWICON_VKL);
						storeInfoScreenOrderNowIconVk.click();

					} catch (Exception e) {

						nextGenLocationListFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that the user not navigated to the StoreInfo screen ",
								ExtentColor.CYAN));

					}

					// To verify the Configured order type.

					if (curbsideResponse.equalsIgnoreCase("true")) {

						if (!curbsideResponseLabelText.isEmpty()) {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									CommonMethods.switchContext("NATIVE_APP");

									curbsideText1.click();

									nextGenLocationListFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									curbsideText.click();

									nextGenLocationListFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = localConfigCurbsideText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									CommonMethods.switchContext("NATIVE_APP");

									curbsideText1.click();

									nextGenLocationListFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ localConfigCurbsideText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									curbsideText.click();

									nextGenLocationListFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ localConfigCurbsideText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

											Thread.sleep(6000);

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(5000);

											integratedMethods(curbsideOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey("available_order_type_close_button");

											closeIcon.click();
										}

									} catch (Exception e) {
										// Asap working fine.

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenLocationListFlowWithCurbsideAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenLocationListFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
										"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the app level.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenLocationListFlowWithCurbsideAsapConfigured_003.info(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the app level.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenLocationListFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
							"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenLocationListFlowWithCurbsideAsapConfigured_003.fail(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideAsapConfigured_003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the App level",
					ExtentColor.CYAN));
		}

	}

	public static void ngaLocationListCurbsideLaterBottomBarConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.appConfiguration();
		merchantId = curbsideFlowConfiguration.get(8);
		String storeCode = curbsideFlowConfiguration.get(13);

		String localConfigCurbsideText = commonMethods
				.stringsReader(OrderNowLocators.LOCAL_CONFIGURATION_CURBSIDE_TEXT);

		String laterText = commonMethods.stringsReader(OrderNowLocators.LOCAL_CONFIGURATION_LATER_TEXT);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenLocationListFlowWithCurbsideLaterConfigured001 = test
				.createNode("nextGenLocationListFlowWithCurbsideLaterConfigured001");
		ExtentTest nextGenLocationListFlowWithCurbsideLaterConfigured002 = test
				.createNode("nextGenLocationListFlowWithCurbsideLaterConfigured002");
		ExtentTest nextGenLocationListFlowWithCurbsideLaterConfigured003 = test
				.createNode("nextGenLocationListFlowWithCurbsideLaterConfigured003");

		// To check whether ordernow is present in the bottom bar.

		// To check whether ordernow is present in the bottom bar.

		try {

			CommonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(OrderNowLocators.LOGGEDIN_BOTTOMBAR_LOCATIONLIST_XPATHL));

			// To check Order now is displayed in the buttom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenLocationListFlowWithCurbsideLaterConfigured001.info(MarkupHelper.createLabel(
						"nextGenLocationListFlowWithCurbsideLaterConfigured001 - Validated that Order now button is present in bottom bar navigation bar with the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenLocationListFlowWithCurbsideLaterConfigured001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();

				try {

					CommonMethods.switchContext("NATIVE_APP");

					Thread.sleep(11000);

					WebElement dontAllowId = driver.findElement(
							By.id("com.android.permissioncontroller:id/permission_deny_and_dont_ask_again_button"));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {
					// TODO: handle exception

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenLocationListFlowWithCurbsideLaterConfigured
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenLocationListFlowWithCurbsideLaterConfigured002
				 * @author Ganeshkumarselvaraj
				 */

				// To get the Order now screen title.

				CommonMethods.switchContext("FLUTTER");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenLocationListFlowWithCurbsideLaterConfigured002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the location list screen.");
				nextGenLocationListFlowWithCurbsideLaterConfigured002.info(MarkupHelper.createLabel(
						"nextGenLocationListFlowWithCurbsideLaterConfigured002 - Verified that user navigated to the location list screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenLocationListFlowWithCurbsideLaterConfigured
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenLocationListFlowWithCurbsideLaterConfigured003
				 * @author Ganeshkumarselvaraj
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				nextGenLocationListFlowWithCurbsideLaterConfigured003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
						"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : ",
						ExtentColor.CYAN));

				CommonMethods.switchContext("NATIVE_APP");

				bottomBarOrderNow.click();

				CommonMethods.switchContext("FLUTTER");

//	
			}

			Thread.sleep(5000);

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenLocationListFlowWithCurbsideLaterConfigured
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the ordernow screen.
			 * @TestID nextGenLocationListFlowWithCurbsideLaterConfigured003
			 * @author Ganeshkumarselvaraj
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				String laterOrder = storeResponse.optString("use_eta");

				JSONObject curbsideObject = storeResponse.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				Restaurant_Id = storeResponse.optString("id");

				System.out.println("Restaurant Id is : " + Restaurant_Id);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenLocationListFlowWithCurbsideLaterConfigured
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenLocationListFlowWithCurbsideLaterConfigured003
				 * @author Ganeshkumarselvaraj
				 */

				try {

					Thread.sleep(11000);

					commonMethods.scrollDownAndClick(desiredStoreName);

					try {

						CommonMethods.switchContext("FLUTTER");

						FlutterElement storeInfoTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);
						String storeInfoScreenTitleText = storeInfoTitleVk.getText();

						nextGenLocationListFlowWithCurbsideLaterConfigured003.addScreenCaptureFromBase64String(
								takeScreenshot(driver), "Verified that user navigated to the store info screen");

						nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that user navigated to the StoreInfo screen : "
										+ storeInfoScreenTitleText,
								ExtentColor.CYAN));

						FlutterElement storeInfoScreenOrderNowIconVk = find
								.byValueKey(locationLocators.STOREINFO_SCREEN_ORDERNOWICON_VKL);
						storeInfoScreenOrderNowIconVk.click();

					} catch (Exception e) {

						nextGenLocationListFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that the user not navigated to the StoreInfo screen ",
								ExtentColor.CYAN));

					}

					// To verify the Configured order type.

					if (curbsideResponse.equalsIgnoreCase("true")) {

						if (!curbsideResponseLabelText.isEmpty()) {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									curbsideText1.click();

									nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									curbsideText.click();

									nextGenLocationListFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(5000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(4000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(4000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the App level",
															ExtentColor.CYAN));
										}

									} catch (Exception e) {
										// Asap working fine.

										nextGenLocationListFlowWithCurbsideLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the App level",
														ExtentColor.CYAN));
									}

								}

							} catch (Exception E) {

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(5000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(4000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the App level",
															ExtentColor.CYAN));
										}

									} catch (Exception e) {
										// Asap working fine.

										nextGenLocationListFlowWithCurbsideLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the App level",
														ExtentColor.CYAN));
									}

								}
							}

						} else {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = localConfigCurbsideText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									curbsideText1.click();

									nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ localConfigCurbsideText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									curbsideText.click();

									nextGenLocationListFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ localConfigCurbsideText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(5000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(4000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(4000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the App level",
															ExtentColor.CYAN));
										}

									} catch (Exception e) {
										// Asap working fine.

										nextGenLocationListFlowWithCurbsideLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the App level",
														ExtentColor.CYAN));
									}

								}

							} catch (Exception e) {

								nextGenLocationListFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
										"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that curbside lable is not displayed in the screen where as curbside is configured in the app level.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out later is not configured.
						nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that curbside lable is not displayed in the screen where as curbside is configured in the app level.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenLocationListFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
							"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenLocationListFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Location List is not displayed in the bottom bar where as Location List is configured in the App level",
					ExtentColor.CYAN));
		}

	}

	public static void ngaLocationListCurbsideLaterSideDrawerConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> curbsideFlowConfiguration = bass.appConfiguration();
		merchantId = curbsideFlowConfiguration.get(8);
		String storeCode = curbsideFlowConfiguration.get(13);

		String localConfigCurbsideText = commonMethods
				.stringsReader(OrderNowLocators.LOCAL_CONFIGURATION_CURBSIDE_TEXT);

		String laterText = commonMethods.stringsReader(OrderNowLocators.LOCAL_CONFIGURATION_LATER_TEXT);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenLocationListFlowWithCurbsideLaterConfigured002 = test
				.createNode("nextGenLocationListFlowWithCurbsideLaterConfigured002");
		ExtentTest nextGenLocationListFlowWithCurbsideLaterConfigured003 = test
				.createNode("nextGenLocationListFlowWithCurbsideLaterConfigured003");

		// To check whether ordernow is present in the bottom bar.

		try {

			CommonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find
					.byValueKey(dashBoardLocators.DASHBOARD_SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			CommonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "LOCATIONS");

			CommonMethods.switchContext("FLUTTER");

			FlutterElement sideDrawerLocationButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_LOCATION_BUTTON_VKL);

			nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Validated that Location button is present in side drawer ",
					ExtentColor.CYAN));
			nextGenLocationListFlowWithCurbsideLaterConfigured003.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified that Location button is present in side drawer");

			sideDrawerLocationButtonVk.click();

			CommonMethods.switchContext("NATIVE_APP");

			Thread.sleep(11000);

			try {

				WebElement dontAllowId = driver.findElement(
						By.id("com.android.permissioncontroller:id/permission_deny_and_dont_ask_again_button"));

				if (dontAllowId.isDisplayed()) {

					dontAllowId.click();

				}

			}

			catch (Exception e) {
				// TODO: handle exception

				System.out.println("Native Popup not appears");

			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenLocationListFlowWithCurbsideLaterConfigured
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenLocationListFlowWithCurbsideLaterConfigured002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the order now screen.

			CommonMethods.switchContext("FLUTTER");

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenLocationListFlowWithCurbsideLaterConfigured002.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the order now screen.");
			nextGenLocationListFlowWithCurbsideLaterConfigured002.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideLaterConfigured002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenLocationListFlowWithCurbsideLaterConfigured
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenLocationListFlowWithCurbsideLaterConfigured003
			 * @author Ganeshkumarselvaraj
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenLocationListFlowWithCurbsideLaterConfigured003.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
			nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : ",
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			CommonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "LOCATIONS");

			CommonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerLocationButtonVk);

			orderId = APIMethods.orderId();

//	//			commonMethods.checkAndClickTheElement(locationScreenStoreMapIconButton);
			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				String asapOrder = storeResponse.optString("advance_only");
				String laterOrder = storeResponse.optString("use_eta");

				JSONObject curbsideObject = storeResponse.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				Restaurant_Id = storeResponse.optString("id");

				System.out.println("Restaurant Id is : " + Restaurant_Id);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				/**
				 * @Class_Name OLORecentlyOrdered
				 * @Method_Name recentlyOrdered
				 * @Description Verifying the recently ordered store in location list screen
				 * @TestID recentlyOrdered001
				 * @author Lalith Kishore Ravi
				 */

				Thread.sleep(6000);

				try {

					Thread.sleep(11000);

					commonMethods.scrollDownAndClick(desiredStoreName);

					try {

						FlutterElement storeInfoTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);
						String storeInfoScreenTitleText = storeInfoTitleVk.getText();

						nextGenLocationListFlowWithCurbsideLaterConfigured003.addScreenCaptureFromBase64String(
								takeScreenshot(driver), "Verified that user navigated to the store info screen");

						nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that user navigated to the StoreInfo screen : "
										+ storeInfoScreenTitleText,
								ExtentColor.CYAN));

						FlutterElement storeInfoScreenOrderNowIconVk = find
								.byValueKey(locationLocators.STOREINFO_SCREEN_ORDERNOWICON_VKL);
						storeInfoScreenOrderNowIconVk.click();

					} catch (Exception e) {

						nextGenLocationListFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that the user not navigated to the StoreInfo screen ",
								ExtentColor.CYAN));

					}

					// To verify the Configured order type.

					if (curbsideResponse.equalsIgnoreCase("true")) {

						if (!curbsideResponseLabelText.isEmpty()) {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = curbsideResponseLabelText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									curbsideText1.click();

									nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									curbsideText.click();

									nextGenLocationListFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ curbsideResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(5000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(4000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(4000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the App level",
															ExtentColor.CYAN));
										}

									} catch (Exception e) {
										// Asap working fine.

										nextGenLocationListFlowWithCurbsideLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the App level",
														ExtentColor.CYAN));
									}

								}

							} catch (Exception E) {

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(5000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(4000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(4000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the App level",
															ExtentColor.CYAN));
										}

									} catch (Exception e) {
										// Asap working fine.

										nextGenLocationListFlowWithCurbsideLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the App level",
														ExtentColor.CYAN));
									}

								}
							}

						} else {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement curbsideText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_CURBSIDE_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement curbsideText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_CURBSIDE_VKL);

								curbsideOrderTypeText = curbsideText1.getText();

								boolean equalsIgnoreCase = localConfigCurbsideText
										.equalsIgnoreCase(curbsideOrderTypeText);

								if (equalsIgnoreCase == true) {

									CommonMethods.switchContext("NATIVE_APP");

									curbsideText.click();

									nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ localConfigCurbsideText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									curbsideText.click();

									nextGenLocationListFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ curbsideOrderTypeText + " response text is : "
													+ localConfigCurbsideText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}
								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(5000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(4000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actaul text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(4000);

											integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

										}

									} catch (Exception e) {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(4000);

										integratedMethods(curbsideOrderTypeText, laterOrderTimeText);

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_GUEST_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenLocationListFlowWithCurbsideLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the App level",
															ExtentColor.CYAN));
										}

									} catch (Exception e) {
										// Asap working fine.

										nextGenLocationListFlowWithCurbsideLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that later label is not displayed in the screen where later is not configured in the App level",
														ExtentColor.CYAN));
									}

								}

							} catch (Exception e) {

								nextGenLocationListFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
										"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that curbside lable is not displayed in the screen where as curbside is configured in the app level.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out later is not configured.
						nextGenLocationListFlowWithCurbsideLaterConfigured003.info(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that curbside lable is not displayed in the screen where as curbside is configured in the app level.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenLocationListFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
							"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenLocationListFlowWithCurbsideLaterConfigured003.fail(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideLaterConfigured003 - Verified that Location List is not displayed in the side drawer where as Location List is configured in the App level",
					ExtentColor.CYAN));
		}

	}

	public static void ngaLocationListDeliveryAsapBottomBarConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		String localConfigDeliveryText = deliveryFlowConfiguration.get(37);

		merchantId = deliveryFlowConfiguration.get(8);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		storeCode = deliveryFlowConfiguration.get(13);

		Thread.sleep(6000);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenLocationListFlowWithDeliveryAsapConfigured_001 = test
				.createNode("nextGenLocationListFlowWithDeliveryAsapConfigured_001");
		ExtentTest nextGenLocationListFlowWithDeliveryAsapConfigured_002 = test
				.createNode("nextGenLocationListFlowWithDeliveryAsapConfigured_002");
		ExtentTest nextGenLocationListFlowWithDeliveryAsapConfigured_003 = test
				.createNode("nextGenLocationListFlowWithDeliveryAsapConfigured_003");

//		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);
//
//		String dashboardTitleVkText = dashboardTitleVk.getText();
//
//		System.out.println(dashboardTitleVkText);
		orderId = APIMethods.orderId();

		System.err.println(orderId);
		// To check whether order now is present in the bottom bar.

		try {

			CommonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(OrderNowLocators.LOGGEDIN_BOTTOMBAR_LOCATIONLIST_XPATHL));

			// To check Order now is displayed in the bottom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenLocationListFlowWithDeliveryAsapConfigured_001.info(MarkupHelper.createLabel(
						"nextGenLocationListFlowWithDeliveryAsapConfigured_001 - Validated that Order now button is present in bottom bar navigation bar with the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenLocationListFlowWithDeliveryAsapConfigured_001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();

				CommonMethods.switchContext("NATIVE_APP");

				Thread.sleep(16000);

				try {

					Thread.sleep(5000);

					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenLocationListFlowWithDeliveryAsapConfigured_002
				 * @author Ganeshkumarselvaraj
				 */

				// To get the Order now screen title.

				CommonMethods.switchContext("FLUTTER");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenLocationListFlowWithDeliveryAsapConfigured_002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the location list screen.");
				nextGenLocationListFlowWithDeliveryAsapConfigured_002.info(MarkupHelper.createLabel(
						"nextGenLocationListFlowWithDeliveryAsapConfigured_002 - Verified that user navigated to the location list screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenLocationListFlowWithDeliveryAsapConfigured_003
				 * @author Ganeshkumarselvaraj
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

//				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
//				commonMethods.checkAndClickTheElement(locationBackIcon);
//
//				Thread.sleep(6000);
//
//				nextGenLocationListFlowWithDeliveryAsapConfigured_003.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
//				nextGenLocationListFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
//						"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : ",
//						ExtentColor.CYAN));
//
//				commonMethods.switchContext("NATIVE_APP");
//
//				Thread.sleep(3000);
//
//				WebElement bottomBarOrderNow1 = driver
//						.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_LOCATIONLIST_XPATHL));
//
//				bottomBarOrderNow1.click();
//
//				commonMethods.switchContext("FLUTTER");
			}
//		
			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();
				}

				try {

					commonMethods.scrollDownAndClick(desiredStoreName);

					find.byValueKey(locationLocators.STOREINFO_SCREEN_ORDERNOWTEXT_VKL).click();

					// To verify the Configured order type.

					if (deliveryResponse.equalsIgnoreCase("true")) {
						System.err.println("--->>> delresp1 : " + deliveryResponseLabelText);

						if (!deliveryResponseLabelText.isEmpty()) {
							System.err.println("--->>> delresp2 : " + deliveryResponseLabelText);

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = deliveryResponseLabelText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									CommonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenLocationListFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									deliveryText.click();

									nextGenLocationListFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								/////////////////////////////////////////////////////////////// ADDRESS SCRIPT
								/////////////////////////////////////////////////////////////// ////////////////////////////

								Thread.sleep(5000);

								Address.addresss();

								Thread.sleep(5000);

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = localConfigDeliveryText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									deliveryText1.click();

									nextGenLocationListFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Delivery is displayed in the order type popup and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ localConfigDeliveryText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenLocationListFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Delivery is displayed in the order type popup and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ localConfigDeliveryText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								Address.addresss();

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenLocationListFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
										"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenLocationListFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenLocationListFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
							"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}

		} catch (Exception e) {

			nextGenLocationListFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the App level",
					ExtentColor.CYAN));
		}

	}

	public static void ngaLocationListDeliveryAsapSideDrawerConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		String localConfigDeliveryText = deliveryFlowConfiguration.get(37);

		merchantId = deliveryFlowConfiguration.get(8);

		storeCode = deliveryFlowConfiguration.get(13);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		ExtentTest nextGenLocationListFlowWithDeliveryAsapConfigured_002 = test
				.createNode("nextGenLocationListFlowWithDeliveryAsapConfigured_002");
		ExtentTest nextGenLocationListFlowWithDeliveryAsapConfigured_003 = test
				.createNode("nextGenLocationListFlowWithDeliveryAsapConfigured_003");

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		try {

			CommonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find
					.byValueKey(dashBoardLocators.DASHBOARD_SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the location menu in the side drawer by searching the menu.

			CommonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "LOCATIONS");

			CommonMethods.switchContext("FLUTTER");

			FlutterElement sideDrawerLocationButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_LOCATION_BUTTON_VKL);

			nextGenLocationListFlowWithDeliveryAsapConfigured_002.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryAsapConfigured_002 - Validated that Location button is present in side drawer ",
					ExtentColor.CYAN));
			nextGenLocationListFlowWithDeliveryAsapConfigured_002.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified that Location button is present in side drawer");

			sideDrawerLocationButtonVk.click();

			CommonMethods.switchContext("NATIVE_APP");

			Thread.sleep(16000);

			try {

				WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

				if (dontAllowId.isDisplayed()) {

					commonMethods.checkAndClickTheElement(dontAllowId);

				}
			} catch (Exception e) {

				System.out.println("Native Popup not appears");

			}

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to location screen while tapping the
			 *              location button via sidedrawer or bottom bar.
			 * @TestID nextGenLocationListFlowWithDeliveryAsapConfigured_002
			 * @author Ganeshkumarselvaraj
			 */

			// To get the title of the location screen.
			CommonMethods.switchContext("FLUTTER");

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenLocationListFlowWithDeliveryAsapConfigured_002.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the location screen.");
			nextGenLocationListFlowWithDeliveryAsapConfigured_002.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryAsapConfigured_002 - Verified that user navigated to the location screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the location screen.
			 * @TestID nextGenLocationListFlowWithDeliveryAsapConfigured_003
			 * @author Ganeshkumarselvaraj
			 */

//			// To get back from the location screeen.
//			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
//			commonMethods.checkAndClickTheElement(locationlistBackIcon);
//
//			Thread.sleep(6000);
//
//			nextGenLocationListFlowWithDeliveryAsapConfigured_003.addScreenCaptureFromBase64String(
//					takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
//			nextGenLocationListFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
//					"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that user navigated to the dashboard screen while tapping the backicon in location screen and the Dashboard title is : ",
//					ExtentColor.CYAN));
//
//			Thread.sleep(6000);

			// To tap the location menu in the side drawer by searching in the side
			// drawer menu list.

//			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);
//
//			commonMethods.switchContext("NATIVE_APP");
//
//			commonMethods.clickSideDrawerElement(driver, "LOCATIONS");
//
//			commonMethods.switchContext("FLUTTER");
//
//			commonMethods.checkAndClickTheElement(sideDrawerLocationButtonVk);

//	
			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse1.has("name")) {

				String asapOrder = storeResponse1.optString("advance_only");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				List<String> odFlow = bass.odFlow();

				String asapText = odFlow.get(16);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				try {

					commonMethods.scrollDownAndClick(desiredStoreName);

					find.byValueKey(locationLocators.STOREINFO_SCREEN_ORDERNOWTEXT_VKL).click();

					// To verify the Configured order type.

					if (deliveryResponse.equalsIgnoreCase("true")) {
						System.err.println("--->>> delresp1 : " + deliveryResponseLabelText);

						if (!deliveryResponseLabelText.isEmpty()) {
							System.err.println("--->>> delresp2 : " + deliveryResponseLabelText);

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = deliveryResponseLabelText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									CommonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenLocationListFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Desired store is displayed in the location and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									deliveryText.click();

									nextGenLocationListFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Desired store is displayed in the location and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								/////////////////////////////////////////////////////////////// ADDRESS SCRIPT
								/////////////////////////////////////////////////////////////// ////////////////////////////

								Thread.sleep(5000);

								Address.addresss();

								Thread.sleep(5000);

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = localConfigDeliveryText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									deliveryText1.click();

									nextGenLocationListFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Delivery is displayed in the order type popup and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ localConfigDeliveryText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenLocationListFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Delivery is displayed in the order type popup and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ localConfigDeliveryText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								Address.addresss();

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, asapOrderTimeText);

										}

									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(OrderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenLocationListFlowWithDeliveryAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenLocationListFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
										"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenLocationListFlowWithDeliveryAsapConfigured_003.info(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenLocationListFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
							"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}

		} catch (Exception e) {

			nextGenLocationListFlowWithDeliveryAsapConfigured_003.fail(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryAsapConfigured_003 - Verified that location is not displayed in the bottom bar where as location is configured in the App level",
					ExtentColor.CYAN));
		}

	}

	public static void ngaLocationListDeliveryLaterBottomBarConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		merchantId = deliveryFlowConfiguration.get(8);

		storeCode = deliveryFlowConfiguration.get(13);

		String localConfigDeliveryText = deliveryFlowConfiguration.get(37);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenLocationListFlowWithDeliveryLaterConfigured001 = test
				.createNode("nextGenLocationListFlowWithDeliveryLaterConfigured001");
		ExtentTest nextGenLocationListFlowWithDeliveryLaterConfigured002 = test
				.createNode("nextGenLocationListFlowWithDeliveryLaterConfigured002");
		ExtentTest nextGenLocationListFlowWithDeliveryLaterConfigured003 = test
				.createNode("nextGenLocationListFlowWithDeliveryLaterConfigured003");

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		// To check whether ordernow is present in the bottom bar.

		try {

			CommonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(OrderNowLocators.LOGGEDIN_BOTTOMBAR_LOCATIONLIST_XPATHL));

			// To check Order now is displayed in the buttom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenLocationListFlowWithDeliveryLaterConfigured001.info(MarkupHelper.createLabel(
						"nextGenLocationListFlowWithDeliveryLaterConfigured001 - Validated that Order now button is present in bottom bar navigation bar with the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenLocationListFlowWithDeliveryLaterConfigured001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();

				try {

					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenLocationListFlowWithDeliveryLaterConfigured
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenLocationListFlowWithDeliveryLaterConfigured002
				 * @author Ganeshkumarselvaraj
				 */

				// To get the Order now screen title.

				CommonMethods.switchContext("FLUTTER");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenLocationListFlowWithDeliveryLaterConfigured002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the location list screen.");
				nextGenLocationListFlowWithDeliveryLaterConfigured002.info(MarkupHelper.createLabel(
						"nextGenLocationListFlowWithDeliveryLaterConfigured002 - Verified that user navigated to the location list screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenLocationListFlowWithDeliveryLaterConfigured
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenLocationListFlowWithDeliveryLaterConfigured003
				 * @author Ganeshkumarselvaraj
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

//				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
//				commonMethods.checkAndClickTheElement(locationBackIcon);
//
//				Thread.sleep(6000);
//
//				nextGenLocationListFlowWithDeliveryLaterConfigured003.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
//				nextGenLocationListFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
//						"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : ",
//						ExtentColor.CYAN));
//
//				commonMethods.switchContext("NATIVE_APP");
//
//				Thread.sleep(3000);
//
//				WebElement bottomBarOrderNow1 = driver
//						.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_LOCATIONLIST_XPATHL));
//
//				bottomBarOrderNow1.click();
//
//				commonMethods.switchContext("FLUTTER");

			}

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

			if (storeResponse1.has("name")) {

				String laterOrder = storeResponse1.optString("use_eta");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				System.out.println(" delivery label text : " + deliveryResponseLabelText);

				List<String> odFlow = bass.odFlow();

				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfigured
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenLocationListFlowWithDeliveryLaterConfigured003
				 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
				 */

				Thread.sleep(15000);

				commonMethods.scrollDownAndClick(desiredStoreName);

				// To verify the Configured order type.

				if (deliveryResponse.equalsIgnoreCase("true")) {

					if (!deliveryResponseLabelText.isEmpty()) {

						try {

							CommonMethods.switchContext("NATIVE_APP");

							Thread.sleep(6000);

							WebElement deliveryText = driver
									.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

							CommonMethods.switchContext("FLUTTER");

							FlutterElement deliveryText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_DELIVERY_VKL);

							deliveryOrderTypeText = deliveryText1.getText();

							boolean equalsIgnoreCase = deliveryResponseLabelText
									.equalsIgnoreCase(deliveryOrderTypeText);

							if (equalsIgnoreCase == true) {

								CommonMethods.switchContext("NATIVE_APP");

								deliveryText.click();

								nextGenLocationListFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the order now and displayed texts is "
												+ deliveryOrderTypeText + " response text is : "
												+ deliveryResponseLabelText + " matching.",
										ExtentColor.CYAN));

								Thread.sleep(3000);

								// Text matches

							} else {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								deliveryText.click();

								nextGenLocationListFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
										"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the order now and displayed texts is "
												+ deliveryOrderTypeText + " response text is : "
												+ deliveryResponseLabelText + "  not matching.",
										ExtentColor.CYAN));

								Thread.sleep(3000);

							}

							Address.addresss();

							if (laterOrder.equalsIgnoreCase("true")) {

								try {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									WebElement laterLabel = driver.findElement(
											By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

									CommonMethods.switchContext("FLUTTER");

									FlutterElement laterLabel1 = find.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

									laterOrderTimeText = laterLabel1.getText();

									boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

									if (laterLabelComparison == true) {

										laterLabel1.click();

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that alert appears");

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																+ laterText + "later config text : "
																+ laterOrderTimeText + "matching",
														ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

									} else {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										// To fail that later label text is not matching

										laterLabel.click();

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that alert appears");

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.fail(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																+ laterText + "later config text : "
																+ laterOrderTimeText + " not matching",
														ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
									}

								} catch (Exception e) {

									try {

										CommonMethods.switchContext("NATIVE_APP");
										Thread.sleep(5000);

										WebElement asapTextXpath = driver
												.findElement(By.xpath(OrderNowLocators.ORDER_ASAP_TEXT_VKL));

										if (asapTextXpath.isDisplayed()) {

											FlutterElement closeIcon = find
													.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.fail(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
														ExtentColor.CYAN));

									} catch (Exception e1) {

										System.out.println(
												" Later is only displayed where as Later is only configured on the back end ");

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
														ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
									}
								}

							} else {

								CommonMethods.switchContext("NATIVE_APP");

								try {

									Thread.sleep(6000);

									WebElement laterLabel = driver.findElement(
											By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

									if (laterLabel.isDisplayed()) {
										// To fail the test case.

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that later is displayed in the screen.");
										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.fail(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
														ExtentColor.CYAN));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement closeIcon = find
												.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

										closeIcon.click();

									}

								} catch (Exception e) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										WebElement menuText = driver
												.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

										System.out.println(menuText);

										System.out.println(
												"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
														ExtentColor.CYAN));

									} catch (Exception e2) {

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
														ExtentColor.CYAN));

									}

								}

							}

						} catch (Exception E) {

							if (laterOrder.equalsIgnoreCase("true")) {

								try {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									WebElement laterLabel = driver.findElement(
											By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

									CommonMethods.switchContext("FLUTTER");

									FlutterElement laterLabel1 = find.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

									laterOrderTimeText = laterLabel1.getText();

									boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

									if (laterLabelComparison == true) {

										laterLabel1.click();

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that alert appears");

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																+ laterText + "later config text : "
																+ laterOrderTimeText + "matching",
														ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

									} else {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										// To fail that later label text is not matching

										laterLabel.click();

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that alert appears");

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.fail(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																+ laterText + "later config text : "
																+ laterOrderTimeText + " not matching",
														ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
									}

								} catch (Exception e) {

									try {

										CommonMethods.switchContext("NATIVE_APP");
										Thread.sleep(5000);

										WebElement asapTextXpath = driver
												.findElement(By.xpath(OrderNowLocators.ORDER_ASAP_TEXT_VKL));

										if (asapTextXpath.isDisplayed()) {

											FlutterElement closeIcon = find
													.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.fail(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
														ExtentColor.CYAN));

									} catch (Exception e1) {

										System.out.println(
												" Later is only displayed where as Later is only configured on the back end ");

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
														ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
									}
								}

							} else {

								CommonMethods.switchContext("NATIVE_APP");

								try {

									Thread.sleep(6000);

									WebElement laterLabel = driver.findElement(
											By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

									if (laterLabel.isDisplayed()) {
										// To fail the test case.

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that later is displayed in the screen.");
										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.fail(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
														ExtentColor.CYAN));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement closeIcon = find
												.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

										closeIcon.click();

									}

								} catch (Exception e) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										WebElement menuText = driver
												.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

										System.out.println(menuText);

										System.out.println(
												"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
														ExtentColor.CYAN));

									} catch (Exception e2) {

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
														ExtentColor.CYAN));

									}

								}

							}
						}

					} else {

						try {

							CommonMethods.switchContext("NATIVE_APP");

							Thread.sleep(6000);

							WebElement deliveryText = driver
									.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

							CommonMethods.switchContext("FLUTTER");

							FlutterElement deliveryText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_DELIVERY_VKL);

							deliveryOrderTypeText = deliveryText1.getText();

							boolean equalsIgnoreCase = localConfigDeliveryText.equalsIgnoreCase(deliveryOrderTypeText);

							if (equalsIgnoreCase == true) {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								deliveryText.click();

								nextGenLocationListFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
										"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the order now and displayed texts is "
												+ deliveryOrderTypeText + " response text is : "
												+ localConfigDeliveryText + " matching.",
										ExtentColor.CYAN));

								// Text matches

							} else {

								CommonMethods.switchContext("NATIVE_APP");

								deliveryText.click();

								nextGenLocationListFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
										"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the order now and displayed texts is "
												+ deliveryOrderTypeText + " response text is : "
												+ localConfigDeliveryText + " not matching.",
										ExtentColor.CYAN));

								// text mismatches

							}

							Address.addresss();

							if (laterOrder.equalsIgnoreCase("true")) {

								try {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									WebElement laterLabel = driver.findElement(
											By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

									CommonMethods.switchContext("FLUTTER");

									FlutterElement laterLabel1 = find.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

									laterOrderTimeText = laterLabel1.getText();

									boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

									if (laterLabelComparison == true) {

										laterLabel1.click();

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that alert appears");

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																+ laterText + "later config text : "
																+ laterOrderTimeText + "matching",
														ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

									} else {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										// To fail that later label text is not matching

										laterLabel.click();

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that alert appears");

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.fail(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																+ laterText + "later config text : "
																+ laterOrderTimeText + " not matching",
														ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
									}

								} catch (Exception e) {

									try {

										CommonMethods.switchContext("NATIVE_APP");
										Thread.sleep(5000);

										WebElement asapTextXpath = driver
												.findElement(By.xpath(OrderNowLocators.ORDER_ASAP_TEXT_VKL));

										if (asapTextXpath.isDisplayed()) {

											FlutterElement closeIcon = find
													.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.fail(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
														ExtentColor.CYAN));

									} catch (Exception e1) {

										System.out.println(
												" Later is only displayed where as Later is only configured on the back end ");

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
														ExtentColor.CYAN));

										integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
									}
								}

							} else {

								CommonMethods.switchContext("NATIVE_APP");

								try {

									Thread.sleep(6000);

									WebElement laterLabel = driver.findElement(
											By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

									if (laterLabel.isDisplayed()) {
										// To fail the test case.

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.addScreenCaptureFromBase64String(takeScreenshot(driver),
														"Verfied that later is displayed in the screen.");
										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.fail(MarkupHelper.createLabel(
														"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
														ExtentColor.CYAN));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement closeIcon = find
												.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

										closeIcon.click();

									}

								} catch (Exception e) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										WebElement menuText = driver
												.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

										System.out.println(menuText);

										System.out.println(
												"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
														ExtentColor.CYAN));

									} catch (Exception e2) {

										nextGenLocationListFlowWithDeliveryLaterConfigured003
												.info(MarkupHelper.createLabel(
														"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
														ExtentColor.CYAN));

									}

								}

							}

						} catch (Exception e) {

							nextGenLocationListFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
									"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
									ExtentColor.CYAN));
						}

					}

				} else {

					// take out later is not configured.
					nextGenLocationListFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
							"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the back end.",
							ExtentColor.CYAN));

				}

			}
		} catch (Exception e) {

			nextGenLocationListFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the back end",
					ExtentColor.CYAN));
		}

	}

	public static void ngaLocationListDeliveryLaterSideDrawerConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> deliveryFlowConfiguration = bass.appConfiguration();

		merchantId = deliveryFlowConfiguration.get(8);

		storeCode = deliveryFlowConfiguration.get(13);

		String localConfigDeliveryText = deliveryFlowConfiguration.get(37);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);

		Thread.sleep(6000);

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenLocationListFlowWithDeliveryLaterConfigured001 = test
				.createNode("nextGenLocationListFlowWithDeliveryLaterConfigured001");
		ExtentTest nextGenLocationListFlowWithDeliveryLaterConfigured003 = test
				.createNode("nextGenLocationListFlowWithDeliveryLaterConfigured003");

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		try {

			CommonMethods.switchContext("FLUTTER");

			Thread.sleep(6000);

			// To tap the side drawer botton.

			FlutterElement dashboardSideDrawerButtonVk = find
					.byValueKey(dashBoardLocators.DASHBOARD_SIDE_DRAWER_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			// To tap the Order now menu in the side drawer by searching the menu.

			CommonMethods.switchContext("NATIVE_APP");

			commonMethods.clickSideDrawerElementIos(driver, "LOCATIONS");

			CommonMethods.switchContext("FLUTTER");

			// To tap tha order now in the side drawer.

			FlutterElement sideDrawerOrderNowButtonVk = find
					.byValueKey(sideDrawerLocators.SIDEDRAWER_ORDERNOW_BUTTON_VKL);
			String sideDrawerOrderNowButtonTextVk = sideDrawerOrderNowButtonVk.getText();

			Thread.sleep(6000);

			nextGenLocationListFlowWithDeliveryLaterConfigured001.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryLaterConfigured001 - Validated that order now button is present in side Drawer with the text name as : "
							+ sideDrawerOrderNowButtonTextVk,
					ExtentColor.CYAN));
			nextGenLocationListFlowWithDeliveryLaterConfigured001.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified that order now is configured in bottom bar");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfigured
			 * @Description Ensure that user navigated to order now screen while tapping the
			 *              order now button via sidedrawer or bottom bar.
			 * @TestID nextGenOrderNowFlowWithDeliveryLaterConfigured002
			 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
			 */

			// To get the title of the order now screen.

			FlutterElement locationlistTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
			String locationlistTitleText = locationlistTitle.getText();
			System.out.println(locationlistTitleText);

			nextGenLocationListFlowWithDeliveryLaterConfigured001.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the order now screen.");
			nextGenLocationListFlowWithDeliveryLaterConfigured001.info(MarkupHelper.createLabel(
					"nextGenOrderNowFlowWithDeliveryLaterConfigured002 - Verified that user navigated to the order now screen and the title is : "
							+ locationlistTitleText,
					ExtentColor.CYAN));

			commonMethods.elementFoundOrNotDontAllowNativePopUp();

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfigured
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the order now screen.
			 * @TestID nextGenLocationListFlowWithDeliveryLaterConfigured003
			 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
			 */

			// To get back from the order now screeen.
			FlutterElement locationlistBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
			commonMethods.checkAndClickTheElement(locationlistBackIcon);

			Thread.sleep(6000);

			nextGenLocationListFlowWithDeliveryLaterConfigured003.addScreenCaptureFromBase64String(
					takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
			nextGenLocationListFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that user navigated to the dashboard screen while tapping the backicon in order now screen and the Dashboard title is : "
							+ dashboardTitleVkText,
					ExtentColor.CYAN));

			Thread.sleep(6000);

			// To tap the order now menu in the side drawer by searching in the side
			// drawer menu list.

			commonMethods.checkAndClickTheElement(dashboardSideDrawerButtonVk);

			CommonMethods.switchContext("NATIVE_APP");

			Thread.sleep(3000);

			commonMethods.clickSideDrawerElementIos(driver, "LOCATIONS");

			CommonMethods.switchContext("FLUTTER");

			commonMethods.checkAndClickTheElement(sideDrawerOrderNowButtonVk);

			orderId = APIMethods.orderId();

			/**
			 * @Class_Name Location
			 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
			 * @Description Ensure that user navigated to dashboard screen while tapping the
			 *              backicon in the ordernow screen.
			 * @TestID nextGenOrderNowFlowWithDeliveryAsapConfigured_003
			 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse1 = parameterRequest1.get("");

			JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

			if (storeResponse1.has("name")) {
				String laterOrder = storeResponse1.optString("use_eta");

				String deliveryResponse = storeResponse1.optString("delivery");
				String deliveryResponseLabelText = storeResponse1.optString("delivery_label");

				System.out.println(" delivery label text : " + deliveryResponseLabelText);

				List<String> odFlow = bass.odFlow();

				String laterText = odFlow.get(17);

				List<String> appConfiguration = bass.appConfiguration();

				userName = appConfiguration.get(6);
				passWord = appConfiguration.get(7);
				merchantId = appConfiguration.get(8);
				cardTemplateCode = appConfiguration.get(9);
				storeGroupCode = appConfiguration.get(10);
				clientId = appConfiguration.get(11);
				integrationDetail = appConfiguration.get(12);
				storeCode = appConfiguration.get(13);

				boolean favRecentOrderFeature = commonMethods
						.features("favourite_and_recent_order_order_now_location_list");

				if (favRecentOrderFeature == true) {

					favouriteOrder.favouriteRecentOrder();

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithDeliveryLaterConfigured
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenLocationListFlowWithDeliveryLaterConfigured003
				 * @author Ganeshkumarselvaraj & Lalith Kishore Ravi
				 */

				try {

					System.out.println(" tapping the store ");

					commonMethods.scrollDownAndClick(desiredStoreName);

					// To verify the Configured order type.

					if (deliveryResponse.equalsIgnoreCase("true")) {

						if (!deliveryResponseLabelText.isEmpty()) {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = deliveryResponseLabelText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									CommonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenLocationListFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryResponseLabelText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									deliveryText.click();

									nextGenLocationListFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the order now and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ deliveryResponseLabelText + "  not matching.",
											ExtentColor.CYAN));

								}

								/////////////////////////////////////////////////////////////// ADDRESS SCRIPT
								/////////////////////////////////////////////////////////////// ////////////////////////////

								Thread.sleep(5000);

								Address.addresss();

								Thread.sleep(5000);

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(OrderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										}
									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(OrderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
										}
									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}
							}

						} else {

							try {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement deliveryText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_DELIVERY_TEXT_XPATHL));

								CommonMethods.switchContext("FLUTTER");

								FlutterElement deliveryText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_DELIVERY_VKL);

								deliveryOrderTypeText = deliveryText1.getText();

								boolean equalsIgnoreCase = localConfigDeliveryText
										.equalsIgnoreCase(deliveryOrderTypeText);

								if (equalsIgnoreCase == true) {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									deliveryText.click();

									nextGenLocationListFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ localConfigDeliveryText + " matching.",
											ExtentColor.CYAN));

									// Text matches

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									deliveryText.click();

									nextGenLocationListFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
											"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Desired store is displayed in the location list and displayed texts is "
													+ deliveryOrderTypeText + " response text is : "
													+ localConfigDeliveryText + " not matching.",
											ExtentColor.CYAN));

									// text mismatches

								}

								Address.addresss();

								if (laterOrder.equalsIgnoreCase("true")) {

									try {

										CommonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										CommonMethods.switchContext("FLUTTER");

										FlutterElement laterLabel1 = find
												.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

										laterOrderTimeText = laterLabel1.getText();

										boolean laterLabelComparison = laterText.equalsIgnoreCase(laterOrderTimeText);

										if (laterLabelComparison == true) {

											laterLabel1.click();

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + "matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										} else {

											CommonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that later label text is not matching

											laterLabel.click();

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that Alert appears when user taps the later button and the later actual text :"
																	+ laterText + "later config text : "
																	+ laterOrderTimeText + " not matching",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);
										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement asapTextXpath = driver
													.findElement(By.xpath(OrderNowLocators.ORDER_ASAP_TEXT_VKL));

											if (asapTextXpath.isDisplayed()) {

												FlutterElement closeIcon = find
														.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

												closeIcon.click();

											}

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is not displayed where as Later is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											System.out.println(
													" Later is only displayed where as Later is only configured on the back end ");

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that Later is only displayed where as Later is only configured on the back end  ",
															ExtentColor.CYAN));

											integratedMethods(deliveryOrderTypeText, laterOrderTimeText);

										}
									}

								} else {

									CommonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement laterLabel = driver.findElement(
												By.xpath(OrderNowLocators.ORDER_NOW_LOGGEDIN_LATER_TEXT_XPATHL));

										if (laterLabel.isDisplayed()) {
											// To fail the test case.

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that later is displayed in the screen.");
											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.fail(MarkupHelper.createLabel(
															"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that later label is displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));

											CommonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(OrderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

										}

									} catch (Exception e) {

										try {

											CommonMethods.switchContext("NATIVE_APP");

											WebElement menuText = driver
													.findElement(By.xpath("//android.view.View[@content-desc='Menu']"));

											System.out.println(menuText);

											System.out.println(
													"Later is not displayed where as Later is not configured on the back end but ASAP is configured");

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that ASAP is only configured and Later label is not displayed in the screen where Later is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e2) {

											nextGenLocationListFlowWithDeliveryLaterConfigured003
													.info(MarkupHelper.createLabel(
															"nextGenOrderNowFlowWithTakeoutLaterConfigured_003 - Verified that later label is not displayed in the screen where later is not configured in the back end",
															ExtentColor.CYAN));
										}

									}

								}

							} catch (Exception e) {

								nextGenLocationListFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
										"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the app level.",
										ExtentColor.CYAN));
							}

						}

					} else {

						// take out later is not configured.
						nextGenLocationListFlowWithDeliveryLaterConfigured003.info(MarkupHelper.createLabel(
								"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that delivery lable is not displayed in the screen where as delivery is configured in the app level.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenLocationListFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
							"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenLocationListFlowWithDeliveryLaterConfigured003.fail(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryLaterConfigured003 - Verified that ordernow is not displayed in the side drawer where as order now is configured in the App level",
					ExtentColor.CYAN));
		}

	}

	private static void integratedMethods(String orderType, String orderTime) throws Throwable {

		boolean jkCafeRecommendedMenuEnabledorNot = commonMethods.jkCafeRecommendedMenuEnabledorNot();

		APIMethods.orderId();

		BaseClass baseClass = new BaseClass();

		List<String> menuItem = baseClass.menuItem();

		String string = menuItem.get(1);

		int pos = Integer.parseInt(string);

		String string1 = menuItem.get(2);

		int position = Integer.parseInt(string1);

		String strings = menuItem.get(3);

		int pos1 = Integer.parseInt(strings);

		String strings1 = menuItem.get(4);

		int position1 = Integer.parseInt(strings1);

		if (jkCafeRecommendedMenuEnabledorNot == true) {

			pos1 = pos1 + 1;
			pos = pos + 1;
			position = position + 1;
			position1 = position1 + 1;
		}

		List<String> deliveryOrderTypeWithOrderTime = APIMethods.deliveryOrderTypeWithOrderTime();

		boolean deliveryAsap = deliveryOrderTypeWithOrderTime.contains("ASAP");

		List<String> curbsideOrderTypeWithOrderTime = APIMethods.curbsideOrderTypeWithOrderTime();

		boolean curbsideAsap = curbsideOrderTypeWithOrderTime.contains("ASAP");

		List<String> takeoutOrderTypeWithOrderTime = APIMethods.takeoutOrderTypeWithOrderTime();

		boolean takeoutAsap = takeoutOrderTypeWithOrderTime.contains("ASAP");

		if (deliveryAsap == false) {

			reOrder.laterCapacityManagement();

		} else if (takeoutAsap == false || curbsideAsap == false) {

			CapacityManagement.ngaCapacityManagement();
		}

		MenuApi.menuApi(pos, position, orderId);

		double discountValue = Basket.ngaBasket(orderType, orderTime, orderId);

//		Basket.deleteItem(orderId);

		Thread.sleep(6000);

		Checkout.ngaCheckout(orderId);

		singlePayment.singlePaymentFlowLoggedIn(orderId, discountValue);

		splitPayment.splitPaymentFlowLoggedIn(orderId, discountValue);

		Thread.sleep(3000);
	}

}
