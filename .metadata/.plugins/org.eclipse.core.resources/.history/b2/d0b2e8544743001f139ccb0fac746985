package com.features;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.AppLaunchAndLandingScreenLocators;
import com.locators.AppRatingLocators;
import com.locators.BasketLocators;
import com.locators.BottomBarNavigationLocator;
import com.locators.DashBoardLocators;
import com.locators.LocationLocators;
import com.locators.MyAccountLocators;
import com.locators.OLOLocators;
import com.locators.OrderNowLocators;
import com.locators.SideDrawerLocators;
import com.locators.SignInLocators;
import com.locators.TransactionHistoryLocators;

import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.remote.MobileCapabilityType;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;

public class Basket extends BaseClass {

	static SignInLocators signInLocator = new SignInLocators();
	static CommonMethods commonMethods = new CommonMethods();
	static LocationLocators locationLocators = new LocationLocators();
	static DashBoardLocators dashBoardLocators = new DashBoardLocators();
	static SideDrawerLocators sideDrawerLocators = new SideDrawerLocators();
	static OrderNowLocators orderNowLocators = new OrderNowLocators();
	static BottomBarNavigationLocator bottomBarNavigationLocators = new BottomBarNavigationLocator();

	static AppRatingLocators appRating = new AppRatingLocators();
	static SignInLocators signInLocators = new SignInLocators();
	static AppLaunchAndLandingScreenLocators appLaunchAndLandingScreenLocators = new AppLaunchAndLandingScreenLocators();
	static MyAccountLocators myAccountLocators = new MyAccountLocators();
	public static String isLocationEnabled = "true";
	static TransactionHistoryLocators transactionHistoryLocators = new TransactionHistoryLocators();
	static BasketLocators basketLocators = new BasketLocators();
	static OLOLocators oloLocators = new OLOLocators();

	public static String userName;
	public static String passWord;
	public static String merchantId;
	public static String cardTemplateCode;
	public static String storeGroupCode;
	public static String clientId;
	public static String integrationDetail;
	static String storeCode;
	static boolean takeoutRes;
	static boolean curbsideRes;
	static boolean deliveryRes;

	static String whenPopupTimeText;
	static boolean asapLabelComparison;
	static boolean laterLabelComparison;
	static String lead;
	static String defaultLaterDate;
	static String formattedDate1;
	static List<String> list = new ArrayList<String>();

	final static ArrayList<JSONObject> jList = new ArrayList<>();

	public static String componentList;
	public static String accessTokenGen;
	public static String printedCardNumberResponse;
	public static String firstnameResponse;
	public static String lastnameResponse;
	public static String salutationResponse;
	public static String welcomeResponse;
	public static String welcomeResponseDefault;
	public static String usernameResponse;
	public static StringBuilder welcomeString;
	public static StringBuilder welcomeDefault;
	public static StringBuilder pointTrackHead;
	public static StringBuilder actualSubHeader;
	public static StringBuilder responseHeader;
	public static StringBuilder actualHeader;
	public static String availableHeader;
	public static String availableViewall;
	public static StringBuilder actualWelcome;
	public static String pointTrackerHeader;
	public static String pointTrackerSubHeader;
	public static int walletMaximum;
	public static String pointBalance1;
	public static String finalPointValue;
	public static JSONArray resultArray;
	public static String pullMessageResponse;
	public static String pullMessageHeaderResponse;
	public static String barcodeAlttextResponse;
	public static String barcodeHeaderResponse;
	public static String scannableLoyaltyCardHeaderText;
	public static String mobilephoneResponse;
	public static String codeSourceResponse;
	public static String primaryCardNumbersResponse;
	public static String phoneNumberResponse;
	public static StringBuilder barcodeHeaderString;
	public static String pointTrackerHeaderAltResponse;
	public static String codeTypeResponse;
	public static String dateResponse;
	public static String messageDescriptionResponse;
	public static String formattedDate;
	public static String expirationTimeResponse;
	public static String shortCardNumberResponse;
	public static String storeCodeResponse;
	public static String storeNameResponse;
	public static String corpExpirationTimeResponse;
	public static String corpShortCardNumberResponse;
	public static String corpStoreCodeResponse;
	public static String corpStoreNameResponse;
	public static String contentValue;

	public static int walletCode;
	public static int walletCdn;
	public static JSONArray perksCdn;
	public static String cardTemplateCdn;
	public static String tierCdn;
	public static JSONArray perks;
	public static String cardTemplate;
	public static String tier;
	public static String activeDate;
	public static String expiryDate;
	public static String favoriteStore;
	public static String storeGroup;
	public static String imageUrl1;
	public static String imageAltText;
	public static Response cdnResponse;

	public static WebElement imagecomponent;

	public static String preCheckInAltTextResponse;
	public static String preCheckInTextResponse;
	public static String postCheckInTextResponse;
	public static String codeTypeCheckInResponse;
	public static String codeSourceCheckInResponse;
	public static StringBuilder preCheckInTextString;
	public static StringBuilder postCheckInTextString;
	public static String checkInStoreNameResponse;
	public static String checkInStoreCodeResponse;
	public static String availableRewardsHeader;
	public static String availableRewardsViewAll;
	public static String availableRewardsAltText;
	public static StringBuilder availableRewardsViewAllString;
	public static StringBuilder availableRewardsHeaderString;

	public static String storeShortCode;

	static String authorizationGrant;
	static String merchantid;
	static String key = "6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
	static String provider = "px";
	static String recentlyOrderedName;
	static String Restaurant_Id;

	static String authentication = "oauth";

	static String[] welcomeConfig = { "{salutation}", "{firstName}", "{lastName}", "{username}" };

	static String thirdPartyIntegration = "lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97";

	static String response_type = "code";

	static String scope = "user_read user_write account_read account_write";

	static String corpStoreCode;

	static String authentication1 = "anonymous";

	static String integrationDetail1 = "os=iOS%7Cosversion=16.6%7Cdevice=iPhone%7CmerchantId=60019%7Cintegrator=Paytronix%7Cversion=REST:14.15%20-%20API:23.21.20231010%20-%20APP:2023101001";

	static String favStoreCode;
	static String favStoreName;
	static String optStringFavEmpty;

	static String get0;

	static String get1;

	static String get2;

	static int size;

	static String date;

	static String substring;

	static String DateApi;

	static String Date;

	static Date date1;

	static String dropdownSelectedTime;

	static String substringLaterTimeSelection;

	static String defaultSubString;

	static String defaultOrderTypeText;

	static String defaultWhenTimeText;

	public static String basketScreenCouponText;

//	static String OrderType = "Takeout";
//
//	static String OrderTime = "Later";

//	String OrderType, String OrderTime, String orderId;

//	String OrderType, String OrderTime

	@Test

	public static double ngaBasket(String OrderType, String OrderTime, String orderId) throws Exception {

//		DesiredCapabilities cap = new DesiredCapabilities();
//		cap.setCapability(MobileCapabilityType.DEVICE_NAME, "Samsung");
//		cap.setCapability("platformName", "Android");
//		cap.setCapability(MobileCapabilityType.PLATFORM_VERSION, "12");
//		cap.setCapability(MobileCapabilityType.UDID, "emulator-5554");
//		cap.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
//		cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 10000);
//		cap.setCapability("appPackage", "com.paytronix.nexgenfl");
//		cap.setCapability("appActivity", "com.paytronix.nexgenfl.MainActivity");
//
//		driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);
//		System.out.println("App Launched Successfully");

		FlutterFinder find = new FlutterFinder(driver);
//
//		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

		// Thread.sleep(20000);

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Prasanna Venkatesh").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bc = new BaseClass();
		List<String> appConfiguration = bc.appConfiguration();

		CommonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		String basketHeaderTitleText = commonMethods.stringsReader(basketLocators.BASKET_HEADER_TITLE);

		String basketWhenTitleText = commonMethods.stringsReader(basketLocators.WHEN_TIME_TITLE_TEXT);

		String basketOrderTypeTitleText = commonMethods.stringsReader(basketLocators.ORDER_TYPE_TITLE_TEXT);

		String takeoutOrderTypePopupText = commonMethods.stringsReader(basketLocators.TAKEOUT_LOCAL_CONFIG_TEXT);

		String curbsideOrderTypePopupText = commonMethods.stringsReader(basketLocators.CURBSIDE_LOCAL_CONFIG_TEXT);

		String deliveryOrderTypePopupText = commonMethods.stringsReader(basketLocators.DELIVERY_LOCAL_CONFIG_TEXT);

		String asapPopupText = commonMethods.stringsReader(basketLocators.ASAP_LOCAL_CONFIG_TEXT);

		String laterPopupText = commonMethods.stringsReader(basketLocators.LATER_LOCAL_CONFIG_TEXT);

		String applyPopupText = commonMethods.stringsReader(basketLocators.ALERT_POPUP_APPLY_BUTTON);

		String cancelPopupText = commonMethods.stringsReader(basketLocators.ALERT_POPUP_CANCEL_BUTTON);

		merchantId = appConfiguration.get(8);

		storeCode = appConfiguration.get(13);

		List<String> storeName = bc.odFlow();

		String desiredStoreName = storeName.get(15);

		System.out.println("Basket Screen Appears");

		CommonMethods.switchContext("FLUTTER");
		Thread.sleep(2000);

//		FlutterElement buyNowButton = find.byValueKey("item_quantity_screen_buy_now_button");
//		buyNowButton.click();

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenBasket = test.createNode("nextGenBasket");

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest = requestingHttp.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse = parameterRequest.get("");

		JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
		if (storeResponse.has("name")) {

			String asapOrder = storeResponse.optString("advance_only");
			String laterOrder = storeResponse.optString("use_eta");

			System.out.println("use eta is : " + laterOrder);

			String deliveryResponse = storeResponse.optString("delivery");
			String deliveryResponseLabelText = storeResponse.optString("delivery_label");

			String takeoutResponse = storeResponse.optString("takeout");
			String takeoutResponseLabelText = storeResponse.optString("takeout_label");

			System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);

			JSONObject curbsideObject = storeResponse.optJSONObject("curbside");
			String curbsideResponse = curbsideObject.optString("en");
			String curbsideResponseLabelText = curbsideObject.optString("label_text");

			String canOrderResponse = storeResponse.optString("can_order");
			String deliveryNowResponse = storeResponse.optString("delivery_now");

			System.out.println(" canOrderResponse is : " + canOrderResponse);
			System.out.println(" deliveryNowResponse is : " + deliveryNowResponse);

			lead = storeResponse.optString("lead");

			System.out.println(" the lead time is : " + lead);

			CommonMethods.switchContext("FLUTTER");

			FlutterElement basketHeaderTextVk = find.byValueKey(basketLocators.BASKET_HEADER_TEXT_VKL);

			String basketHeaderText = basketHeaderTextVk.getText();

			Assert.assertEquals(basketHeaderText.toLowerCase(), basketHeaderTitleText.toLowerCase(),
					"Validated the basket header text");

			System.out.println("Validated the basket header text");

			FlutterElement basketOrderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

			String basketOrderTypeText = basketOrderTypeTextVk.getText();

			Assert.assertEquals(basketOrderTypeText, basketOrderTypeTitleText,
					"Validated the basket order type title text");

			System.out.println("Validated the basket order type title text");

			FlutterElement orderTypeVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);
			orderTypeVk.click();

			if (takeoutResponse.equalsIgnoreCase("true")) {

				if (!takeoutResponseLabelText.isEmpty()) {

					System.out.println("Verified takeout order type is configured");

					FlutterElement takeoutText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_TAKEOUT_VKL);

					String takeoutActualText = takeoutText1.getText();

					takeoutRes = takeoutResponseLabelText.equalsIgnoreCase(takeoutActualText);

//					Assert.assertEquals(takeoutRes, true,
//							"Verified both takeout response and takeout actual text are same");

					if (takeoutRes == true) {

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype response text and actual text are same  ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype response text and actual text are same ",
								ExtentColor.CYAN));

//						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
//								"Verified takeout order type is displayed");

					} else {

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype response text and actual text are not matching ",
								ExtentColor.CYAN));

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype response text and actual text are not matching  ");

					}

				} else {

					System.out.println("Verified takeout order type is configured");

					FlutterElement takeoutText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_TAKEOUT_VKL);

					String takeoutActualText = takeoutText1.getText();

					takeoutRes = takeoutOrderTypePopupText.equalsIgnoreCase(takeoutActualText);

//					Assert.assertEquals(takeoutRes, true,
//							"Verified both takeout response and takeout actual text are same");

					if (takeoutRes == true) {

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype local config text and actual text are same  ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype local config text and actual text are same ",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified takeout order type is displayed");

					} else {

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype local config text and actual text are not matching ",
								ExtentColor.CYAN));

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype local config text and actual text are not matching  ");

					}

				}

			} else {

				nextGenBasket.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is not configured in the back end.",
						ExtentColor.CYAN));

				System.out.println(
						" nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is not configured in the back end. ");

			}

			////////////////// curbside //////////////

			if (curbsideResponse.equalsIgnoreCase("true")) {

				System.out.println("prasanna ...Venkat");

				if (!curbsideResponseLabelText.isEmpty()) {

					System.out.println("Verified curbside order type is configured");

					CommonMethods.switchContext("FLUTTER");

					Thread.sleep(2000);

					FlutterElement curbsideText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_CURBSIDE_VKL);

					String curbsideActualText = curbsideText1.getText();

					curbsideRes = curbsideResponseLabelText.equalsIgnoreCase(curbsideActualText);

//					Assert.assertEquals(curbsideRes, true,
//							"Verified both curbside response and curbside actual text are same");

					if (curbsideRes == true) {

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype response text and actual text are same ",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified curbside order type is displayed ");

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype response text and actual text are same  ");

					} else {

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype response text and actual text are not matching ",
								ExtentColor.CYAN));

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype response text and actual text are not matching  ");

					}

				} else {

					System.out.println("Verified curbside order type is configured");

					FlutterElement curbsideText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_CURBSIDE_VKL);

					String curbsideActualText = curbsideText1.getText();

					curbsideRes = curbsideOrderTypePopupText.equalsIgnoreCase(curbsideActualText);

//					Assert.assertEquals(curbsideRes, true,
//							"Verified both curbside response and curbside actual text are same");

					if (curbsideRes == true) {

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype local config text and actual text are same ",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified curbside order type is displayed ");

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype local config text and actual text are same  ");

					} else {

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype local config text and actual text are not matching ",
								ExtentColor.CYAN));

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype local config text and actual text are not matching  ");

					}

				}

			} else {

				nextGenBasket.info(MarkupHelper.createLabel(
						"nextGenBasket - Verified that curbside lable is not displayed in the screen where as curbside is not configured in the back end.",
						ExtentColor.CYAN));

				System.out.println(
						" nextGenBasket - Verified that curbside lable is not displayed in the screen where as curbside is not configured in the back end. ");

			}

			//////////////// Delivery ///////////////

			if (deliveryResponse.equalsIgnoreCase("true")) {

				if (!deliveryResponseLabelText.isEmpty()) {

					System.out.println("Verified delivery order type is configured");

					FlutterElement deliveryText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_DELIVERY_VKL);

					String deliveryActualText = deliveryText1.getText();

					deliveryRes = deliveryResponseLabelText.equalsIgnoreCase(deliveryActualText);

					System.err.println("The Delivery Res is : " + deliveryRes);

//					Assert.assertEquals(deliveryRes, true,
//							"Verified both delivery response and delivery actual text are same");

					if (deliveryRes == true) {

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype response text and actual text are same  ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype response text and actual text are same ",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified delivery order type is displayed");

					} else {

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype response text and actual text are not matching ",
								ExtentColor.CYAN));

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype response text and actual text are not matching  ");

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified delivery order type is displayed");

					}

				} else {

					System.out.println("Verified delivery order type is configured");

					FlutterElement deliveryText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_DELIVERY_VKL);

					String deliveryActualText = deliveryText1.getText();

					deliveryRes = deliveryOrderTypePopupText.equalsIgnoreCase(deliveryActualText);

//					Assert.assertEquals(deliveryRes, true,
//							"Verified both delivery response and delivery actual text are same");

					if (deliveryRes == true) {

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype local config text and actual text are same  ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype local config text and actual text are same ",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified delivery order type is displayed");

					} else {

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype local config text and actual text are not matching ",
								ExtentColor.CYAN));

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype local config text and actual text are not matching  ");

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified delivery order type is displayed");

					}

				}

			} else {

				nextGenBasket.info(MarkupHelper.createLabel(
						"nextGenBasket - Verified that delivery lable is not displayed in the screen where as delivery is not configured in the back end.",
						ExtentColor.CYAN));

				System.out.println(
						" nextGenBasket - Verified that delivery lable is not displayed in the screen where as delivery is not configured in the back end. ");

			}

			FlutterElement cancelButtonVk = find.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

			cancelButtonVk.click();

			FlutterElement defaultOrderTypeTextVk = find.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

			defaultOrderTypeText = defaultOrderTypeTextVk.getText();

			System.out.println("Default Order Type Text is : " + defaultOrderTypeText);

			if (OrderType.toLowerCase().contains(defaultOrderTypeText.toLowerCase())) {

				System.out.println(" Verified the selected order type is displayed in the basket deafult order type ");

				if (defaultOrderTypeText.contains("out")) {

					System.out.println(" Verified takeout order type is displayed");

					nextGenBasket.info(MarkupHelper.createLabel(
							"nextGenBasket - Verified the selected takeout order type is displayed in the basket deafult order type field and that ordertype text is : "
									+ defaultOrderTypeText,
							ExtentColor.CYAN));

					nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
							"Verified the selected takeout order type is displayed in the basket deafult order type ");

					if (curbsideRes == true) {

						Thread.sleep(5000);

						FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

						orderTypeTextVk.click();

						FlutterElement orderTypePopupCurbsideCheckboxVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_CURBSIDE_CHECKBOX_VKL);
						orderTypePopupCurbsideCheckboxVk.click();

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						applyButtonVk.click();

						FlutterElement defaultOrderTypeTextVk1 = find
								.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

						defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

						Assert.assertEquals(defaultOrderTypeText.toLowerCase(), "curbside",
								"Verified curbside is displayed in the default ordertype");

						System.out.println(
								"Verified curbside is displayed in the default ordertype after switch to the curbside ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified curbside is displayed in the default ordertype after change the curbside order type and that order type text is "
										+ defaultOrderTypeText,
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Verified curbside is displayed in the default ordertype after change the curbside order type");

						FlutterElement basketWhenTextVk = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

						String basketWhenText = basketWhenTextVk.getText();

						Assert.assertEquals(basketWhenText, basketWhenTitleText,
								"Validated the basket when title text");

						basketWhenTextVk.click();

						///////////////////// OrderTime//////////////////////////////

						if (asapOrder.equalsIgnoreCase("false") && canOrderResponse.equalsIgnoreCase("true")
								&& OrderTime != null) {

							System.err.println(" canOrderResponse ");

							CommonMethods.switchContext("FLUTTER");

							FlutterElement asapLabel1 = find.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

							String asaplabelText = asapLabel1.getText();

							asapLabelComparison = asapPopupText.equalsIgnoreCase(asaplabelText);

							if (asapLabelComparison == true) {

								System.out.println(" Verified asap is displayed ");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified asap is displayed where as asap is configured on the back end ",
										ExtentColor.CYAN));

							} else {

								System.out.println(" Verified asap is not displayed ");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified asap is not displayed where as asap is not configured on the back end ",
										ExtentColor.CYAN));
							}

							if (laterOrder.equalsIgnoreCase("true")) {

								CommonMethods.switchContext("FLUTTER");

								FlutterElement laterLabel1 = find.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

								String laterlabelText = laterLabel1.getText();

								laterLabelComparison = laterPopupText.equalsIgnoreCase(laterlabelText);

								if (laterLabelComparison == true) {

									System.out.println(" Verified later is displayed ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is displayed where as later is configured on the back end ",
											ExtentColor.CYAN));

								} else {

									System.out.println(" Verified later is not displayed ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is not displayed where as later is not configured on the back end ",
											ExtentColor.CYAN));

								}

							} else {

								System.out.println(" Verified later is not configured ");

							}

							FlutterElement cancelButtonVk1 = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

							cancelButtonVk1.click();

							FlutterElement defaultWhenTimeTextVk = find
									.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

							defaultWhenTimeText = defaultWhenTimeTextVk.getText();

							if (OrderTime.toLowerCase().contains("asap")) {

								if (defaultWhenTimeText.toLowerCase().contains("asap")) {

									System.out.println(" Verified ASAP time is displayed");

									String asapLeadTime = asapPopupText + " (" + lead + " mins estimated)";

									System.out.println("asap lead time " + asapLeadTime);

									if (defaultWhenTimeText.equalsIgnoreCase(asapLeadTime)) {

										System.out.println(
												" Verified user selected ASAP field is displayed in the Basket when field ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket - Verified user selected ASAP field is displayed in the Basket when field and text is : "
														+ asapLeadTime,
												ExtentColor.CYAN));

										if (laterLabelComparison == true) {

											FlutterElement whenTimeText = find
													.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

											whenTimeText.click();

											FlutterElement orderTimeLaterCheckBoxVk = find
													.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);

											FlutterElement orderTimeLaterVk = find
													.byValueKey(basketLocators.ORDER_TIME_LATER_BUTTON_VKL);

											String orderTimeLaterButtonText = orderTimeLaterVk.getText();

											Assert.assertEquals(orderTimeLaterButtonText, laterPopupText,
													" Validated the later button text ");

											orderTimeLaterCheckBoxVk.click();

											FlutterElement applyButtonVk1 = find
													.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//										String applyButtonText = applyButtonVk.getText();
											//
//										Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

											applyButtonVk1.click();

											if (defaultOrderTypeText.contains("very")) {

												Basket.ngaDeliveryCapacityManagement();

											} else {

												Basket.ngaCapacityManagement();

											}

											CommonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement defaultWhenTimeTextVk1 = find
													.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

											String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

											if (defaultWhenTimeText1.toLowerCase().contains("asap")) {

												///// fail/////

												System.out.println(
														" The asap is displayed but user switched into later order ");

												nextGenBasket.fail(MarkupHelper.createLabel(
														"nextGenBasket - Verified that the asap is displayed but user switched into later order ",
														ExtentColor.CYAN));

											} else {

												System.out.println(
														"Verified that the later order is displayed and text is : "
																+ defaultWhenTimeText1);

												nextGenBasket.info(MarkupHelper.createLabel(
														"nextGenBasket - Verified that the later order is displayed and text is : "
																+ defaultWhenTimeText1,
														ExtentColor.CYAN));

											}

											FlutterElement whenTimeText1 = find
													.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

											whenTimeText1.click();
											FlutterElement orderTimeAsapButtonVk = find
													.byValueKey(basketLocators.ORDER_TIME_POPUP_ASAP_CHECKBOX_VKL);

											orderTimeAsapButtonVk.click();

											applyButtonVk.click();

										} else {

											System.out.println(
													" Verified later is not configured only asap is configured ");

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap is displayed later is not displayed where as later is not configured on the back end ",
													ExtentColor.CYAN));

											FlutterElement whenTimeText = find
													.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

											whenTimeText.click();

											FlutterElement cancelButtonVk2 = find
													.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//										String cancelButtonText = cancelButtonVk1.getText();
											//
//										Assert.assertEquals(cancelButtonText, cancelPopupText,
//												" Validated the cancel button text ");

											cancelButtonVk2.click();

										}

									}
								} else {

									///// fail////
									System.out.println(
											" Verified later is configured but user selected the asap time but later is displayed");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is displayed but user selected the asap order time when   ",
											ExtentColor.CYAN));
								}

							} else {

								System.out.println(" Verified later time is displayed");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified later time is displayed ", ExtentColor.CYAN));

								nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
										" Verified later time is displayed  ");

								SimpleDateFormat inputFormat = new SimpleDateFormat("dd, EEEE, dd MMMM yyyy, 'Today'");

								System.out.println("apppeaarr");

								// Parse the input string to a Date object
								Date parsedDate = inputFormat.parse(CapacityManagement.formattedDate1);

								System.out.println("pppppp");

								// Define the desired output format

								SimpleDateFormat outputFormat1 = new SimpleDateFormat("MMM dd", Locale.ENGLISH);

								defaultLaterDate = outputFormat1.format(parsedDate);

								System.out.println("Default Later Date :" + defaultLaterDate);

								String laterTimeSelection = defaultLaterDate + " @ "
										+ CapacityManagement.dropdownSelectedTime;

								System.out.println(" laterTimeSelection is : " + laterTimeSelection);

								FlutterElement defaultWhenTimeTextVk1 = find
										.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

								String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

								if (defaultWhenTimeText1.contains(laterTimeSelection)) {

									System.out.println(
											" Verified user selected later time field is displayed in the Basket when field ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified user selected later time field is displayed in the Basket when field ",
											ExtentColor.CYAN));

									if (asapLabelComparison == true) {

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement orderTimeAsapCheckboxVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_ASAP_CHECKBOX_VKL);
										orderTimeAsapCheckboxVk.click();

										FlutterElement orderTimeAsapVk = find
												.byValueKey(basketLocators.ORDER_TIME_ASAP_BUTTON_VKL);

										String orderTimeAsapButtonText = orderTimeAsapVk.getText();

										Assert.assertEquals(orderTimeAsapButtonText, asapPopupText,
												" Validated the asap button text ");

										FlutterElement applyButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//									String applyButtonText = applyButtonVk.getText();
										//
//									Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

										applyButtonVk1.click();

										Thread.sleep(5000);

										FlutterElement defaultWhenTimeTextVk2 = find
												.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

										String defaultWhenTimeText2 = defaultWhenTimeTextVk2.getText();

										if (defaultWhenTimeText2.toLowerCase().contains("asap")) {

											System.out.println(
													" Verified asap order is displayed in the default order time field after switch to the asap and text is : "
															+ defaultWhenTimeText2);

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap order is displayed in the default order time field after switch to the asap and text is : \"\n"
															+ defaultWhenTimeText2,
													ExtentColor.CYAN));

										} else {

											///// fail/////

											System.out.println(
													" The later is displayed but user switched into asap order ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket - Verified the later is displayed but user switched into asap order  ",
													ExtentColor.CYAN));

										}

										Thread.sleep(5000);

										FlutterElement whenTimeText1 = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText1.click();
										FlutterElement orderTimeLaterButtonVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);
										orderTimeLaterButtonVk.click();

										applyButtonVk.click();

										if (defaultOrderTypeText.contains("very")) {

											Basket.ngaDeliveryCapacityManagement();

										} else {

											Basket.ngaCapacityManagement();

										}

										System.out.println(" Verified user switched to the default ordertime ");

										CommonMethods.switchContext("FLUTTER");

									} else {

										System.out.println(
												" Verified asap is not displayed where as asap is not configured only later is configured ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket -  Verified asap is not displayed where as asap is not configured only later is configured ",
												ExtentColor.CYAN));

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement cancelButtonVk3 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//									String cancelButtonText = cancelButtonVk1.getText();
										//
//									Assert.assertEquals(cancelButtonText, cancelPopupText, " Validated the cancel button text ");

										cancelButtonVk3.click();

									}
								} else {

									////// fail /////

									System.out.println(" Verified asap is displayed in the default order time field ");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verified asap is displayed in the default order time field where as user selected the later time when selecting the store ",
											ExtentColor.CYAN));

								}
							}

						} else {

							System.err.println("asap or later is only displayed");

							CommonMethods.switchContext("FLUTTER");

							Thread.sleep(2000);

							FlutterElement orderTimeCancelButtonVk = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

							orderTimeCancelButtonVk.click();

							FlutterElement defaultWhenTimeTextVk = find
									.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

							defaultWhenTimeText = defaultWhenTimeTextVk.getText();

							defaultWhenTimeTextVk.click();

							if (asapOrder.equalsIgnoreCase("false") && canOrderResponse.equalsIgnoreCase("true")
									&& laterOrder.equalsIgnoreCase("false")) {

								System.err.println(" later is not displayed or not configured ");

								try {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									WebElement asapOrderTimeTextXpath = driver
											.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

									String asapOrderTimeText = asapOrderTimeTextXpath.getText();

									System.err.println(" asap text is : " + asapOrderTimeText);

									if (asapOrderTimeText.toLowerCase().contains("asap")) {

										System.out.println("....... asap is displayed .......");

										try {

											WebElement laterOrderTime = driver
													.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_LATER_XPATH));

											if (laterOrderTime.isDisplayed()) {

												System.err.println(
														" Verified both asap and later order time is displayed where as later is not configured on back end ");

												nextGenBasket.fail(MarkupHelper.createLabel(
														"nextGenBasket - Verified both asap and later order time is displayed where as later is not configured on back end ",
														ExtentColor.CYAN));

											}

										} catch (Exception e) {
											// TODO: handle exception

											System.out.println("Element not found");

											System.out.println(" Verified asap is only displayed ");

											nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
													" nextGenBasket - Verified asap is only displayed where as asap is only configured on back end ");

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap is only displayed where as asap is only configured on back end ",
													ExtentColor.CYAN));

										}

										System.out.println("...... Verified asap is only displayed .....");

										CommonMethods.switchContext("FLUTTER");

										Thread.sleep(2000);

										FlutterElement orderTimeCancelButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

										orderTimeCancelButtonVk1.click();

									}

								} catch (Exception e) {
									// TODO: handle exception

									//////////////////////////// fail ////////////////

									System.out.println(
											" Verified asap is not displayed where as asap is configured on the back end ");

									nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" Verified asap is not displayed where as asap is configured on the back end ");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket -  Verified asap is not displayed where as asap is configured on the back end  ",
											ExtentColor.CYAN));

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								}

							} else {

								System.err.println(" later is displayed or configured ");

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								if (driver.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_LATER_XPATH)).isDisplayed()) {

									System.out.println(" ////// later Identified ///// ");

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									try {

										WebElement asapOrderTime = driver
												.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

										if (asapOrderTime.isDisplayed()) {

											/////////////// fail ////////

											System.err.println(
													" Verified both asap and later order time is displayed where as asap is not configured on back end ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket -  Verified both asap and later order time is displayed where as asap is not configured on back end ",
													ExtentColor.CYAN));

										}

									} catch (Exception e) {
										// TODO: handle exception

										System.out.println("Element not found");

										System.out.println(
												" Verified later is displayed where as later is only configures on the back end ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket -  Verified later is displayed where as later is only configures on the back end",
												ExtentColor.CYAN));

									}

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									System.out.println(" ////// later Identified ///// ");

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								} else {

									///////////// fail /////

									System.out.println(
											" Verfied later is not displayed where as later is configured on the back end ");

									nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
											"Verfied later is not displayed where as later is configured on the back end");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verfied later is not displayed where as later is configured on the back end ",
											ExtentColor.CYAN));

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								}

							}

						}

					} else {
						System.out.println(" Verified curbside ordertype is not configured ");

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified curbside order type is not displayed in the basket order type popup where as curbside is not configured",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Verified curbside is not displayed in the default ordertype after change the curbside order type");
					}

					if (deliveryRes == true) {

						System.err.println("Delivery");

						Thread.sleep(5000);

						CommonMethods.switchContext("FLUTTER");

						FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

						orderTypeTextVk.click();

						FlutterElement orderTypePopupDeliveryCheckboxVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_DELIVERY_CHECKBOX_VKL);
						orderTypePopupDeliveryCheckboxVk.click();

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						applyButtonVk.click();

						CommonMethods.switchContext("NATIVE_APP");

						Thread.sleep(10000);

						try {

							System.err.println("loggedIn User");

							WebElement addNewAddress = driver
									.findElement(By.xpath("//*[contains(@content-desc,'add new')]"));

							if (addNewAddress.isDisplayed()) {

								System.err.println("loggedIn User Address Script Executed");

								Address.addresss();

							} else {
								System.out.println("Address Not Appeared");
							}

						} catch (Exception e) {

							System.err.println("GuestIn User");

							AddressGuest.addresss();

						}

						Thread.sleep(5000);

						CommonMethods.switchContext("FLUTTER");

						FlutterElement defaultOrderTypeTextVk1 = find
								.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

						defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

//						Assert.assertEquals(defaultOrderTypeText.toLowerCase(), "delivery",
//								"Verified delivery is displayed in the default ordertype");

						System.out.println(
								"Verified delivery is displayed in the default ordertype after switch to the delivery ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified delivery is displayed in the default ordertype after change the delivery order type and that order type text is "
										+ defaultOrderTypeText,
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Verified delivery is displayed in the default ordertype after change the delivery order type");

						FlutterElement basketWhenTextVk = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

						String basketWhenText = basketWhenTextVk.getText();

						Assert.assertEquals(basketWhenText, basketWhenTitleText,
								"Validated the basket when title text");

						basketWhenTextVk.click();

						///////////////////// OrderTime//////////////////////////////

						if (asapOrder.equalsIgnoreCase("false") && deliveryNowResponse.equalsIgnoreCase("true")
								&& OrderTime != null) {

							System.err.println(" canOrderResponse ");

							CommonMethods.switchContext("FLUTTER");

							FlutterElement asapLabel1 = find.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

							String asaplabelText = asapLabel1.getText();

							asapLabelComparison = asapPopupText.equalsIgnoreCase(asaplabelText);

							if (asapLabelComparison == true) {

								System.out.println(" Verified asap is displayed ");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified asap is displayed where as asap is configured on the back end ",
										ExtentColor.CYAN));

							} else {

								System.out.println(" Verified asap is not displayed ");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified asap is not displayed where as asap is not configured on the back end ",
										ExtentColor.CYAN));
							}

							if (laterOrder.equalsIgnoreCase("true")) {

								CommonMethods.switchContext("FLUTTER");

								FlutterElement laterLabel1 = find.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

								String laterlabelText = laterLabel1.getText();

								laterLabelComparison = laterPopupText.equalsIgnoreCase(laterlabelText);

								if (laterLabelComparison == true) {

									System.out.println(" Verified later is displayed ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is displayed where as later is configured on the back end ",
											ExtentColor.CYAN));

								} else {

									System.out.println(" Verified later is not displayed ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is not displayed where as later is not configured on the back end ",
											ExtentColor.CYAN));

								}

							} else {

								System.out.println(" Verified later is not configured ");

							}

							FlutterElement cancelButtonVk1 = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

							cancelButtonVk1.click();

//							WebElement defaultWhenTimeTextVk = driver
//									.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

							FlutterElement defaultWhenTimeTextVk = find.byValueKey("delivery_key_asap");
//
							defaultWhenTimeText = defaultWhenTimeTextVk.getText();

							System.err.println("defaultWhenTimeText is : " + defaultWhenTimeText);

							if (OrderTime.toLowerCase().contains("asap")) {

								if (defaultWhenTimeText.toLowerCase().contains("asap")) {

									System.out.println(" Verified ASAP time is displayed");

									String asapLeadTime = asapPopupText + " (" + lead + " mins estimated)";

									System.out.println("asap lead time " + asapLeadTime);

									Thread.sleep(20000);

//									if (defaultWhenTimeText.contains(asapLeadTime)) {
//
//										System.out.println(
//												" Verified user selected ASAP field is displayed in the Basket when field ");
//
//										nextGenBasket.info(MarkupHelper.createLabel(
//												"nextGenBasket - Verified user selected ASAP field is displayed in the Basket when field and text is : "
//														+ asapLeadTime,
//												ExtentColor.CYAN));
//
									if (laterLabelComparison == true) {

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement orderTimeLaterCheckBoxVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);

										FlutterElement orderTimeLaterVk = find
												.byValueKey(basketLocators.ORDER_TIME_LATER_BUTTON_VKL);

										String orderTimeLaterButtonText = orderTimeLaterVk.getText();

										Assert.assertEquals(orderTimeLaterButtonText, laterPopupText,
												" Validated the later button text ");

										orderTimeLaterCheckBoxVk.click();

										FlutterElement applyButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//										String applyButtonText = applyButtonVk.getText();
										//
//										Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

										applyButtonVk1.click();

										if (defaultOrderTypeText.contains("very")) {

											Basket.ngaDeliveryCapacityManagement();

										} else {

											Basket.ngaCapacityManagement();

										}

										CommonMethods.switchContext("FLUTTER");

										Thread.sleep(2000);

										FlutterElement defaultWhenTimeTextVk1 = find.byValueKey("delivery_key_asap");

										String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

										if (defaultWhenTimeText1.toLowerCase().contains("asap")) {

											///// fail/////

											System.out.println(
													" The asap is displayed but user switched into later order ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket - Verified that the asap is displayed but user switched into later order ",
													ExtentColor.CYAN));

										} else {

											System.out
													.println("Verified that the later order is displayed and text is : "
															+ defaultWhenTimeText1);

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified that the later order is displayed and text is : "
															+ defaultWhenTimeText1,
													ExtentColor.CYAN));

										}

										FlutterElement whenTimeText1 = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText1.click();
										FlutterElement orderTimeAsapButtonVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_ASAP_CHECKBOX_VKL);

										orderTimeAsapButtonVk.click();

										applyButtonVk.click();

									} else {

										System.out
												.println(" Verified later is not configured only asap is configured ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket - Verified asap is displayed later is not displayed where as later is not configured on the back end ",
												ExtentColor.CYAN));

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement cancelButtonVk2 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//										String cancelButtonText = cancelButtonVk1.getText();
										//
//										Assert.assertEquals(cancelButtonText, cancelPopupText,
//												" Validated the cancel button text ");

										cancelButtonVk2.click();

									}

//									}
								} else {

									///// fail////
									System.out.println(
											" Verified later is configured but user selected the asap time but later is displayed");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is displayed but user selected the asap order time when   ",
											ExtentColor.CYAN));
								}

							} else {

								System.out.println(" Verified later time is displayed");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified later time is displayed ", ExtentColor.CYAN));

								nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
										" Verified later time is displayed  ");

								SimpleDateFormat inputFormat = new SimpleDateFormat("dd, EEEE, dd MMMM yyyy, 'Today'");

								System.out.println("apppeaarr");

								// Parse the input string to a Date object
								Date parsedDate = inputFormat.parse(CapacityManagement.formattedDate1);

								System.out.println("pppppp");

								// Define the desired output format

								SimpleDateFormat outputFormat1 = new SimpleDateFormat("MMM dd", Locale.ENGLISH);

								defaultLaterDate = outputFormat1.format(parsedDate);

								System.out.println("Default Later Date :" + defaultLaterDate);

								String laterTimeSelection = defaultLaterDate + " @ "
										+ CapacityManagement.dropdownSelectedTime;

								System.out.println(" laterTimeSelection is : " + laterTimeSelection);

								FlutterElement defaultWhenTimeTextVk1 = find.byValueKey("delivery_key_asap");

								String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

								if (defaultWhenTimeText1.contains(laterTimeSelection)) {

									System.out.println(
											" Verified user selected later time field is displayed in the Basket when field ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified user selected later time field is displayed in the Basket when field ",
											ExtentColor.CYAN));

									if (asapLabelComparison == true) {

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement orderTimeAsapCheckboxVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_ASAP_CHECKBOX_VKL);
										orderTimeAsapCheckboxVk.click();

										FlutterElement orderTimeAsapVk = find
												.byValueKey(basketLocators.ORDER_TIME_ASAP_BUTTON_VKL);

										String orderTimeAsapButtonText = orderTimeAsapVk.getText();

										Assert.assertEquals(orderTimeAsapButtonText, asapPopupText,
												" Validated the asap button text ");

										FlutterElement applyButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//									String applyButtonText = applyButtonVk.getText();
										//
//									Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

										applyButtonVk1.click();

										Thread.sleep(5000);

										FlutterElement defaultWhenTimeTextVk2 = find.byValueKey("delivery_key_asap");

										String defaultWhenTimeText2 = defaultWhenTimeTextVk2.getText();

										if (defaultWhenTimeText2.toLowerCase().contains("asap")) {

											System.out.println(
													" Verified asap order is displayed in the default order time field after switch to the asap and text is : "
															+ defaultWhenTimeText2);

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap order is displayed in the default order time field after switch to the asap and text is : \"\n"
															+ defaultWhenTimeText2,
													ExtentColor.CYAN));

										} else {

											///// fail/////

											System.out.println(
													" The later is displayed but user switched into asap order ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket - Verified the later is displayed but user switched into asap order  ",
													ExtentColor.CYAN));

										}

										FlutterElement whenTimeText1 = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText1.click();
										FlutterElement orderTimeLaterButtonVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);
										orderTimeLaterButtonVk.click();

										applyButtonVk.click();

										if (defaultOrderTypeText.contains("very")) {

											Basket.ngaDeliveryCapacityManagement();

										} else {

											Basket.ngaCapacityManagement();

										}

										System.out.println(" Verified user switched to the default ordertime ");

										CommonMethods.switchContext("FLUTTER");

									} else {

										System.out.println(
												" Verified asap is not displayed where as asap is not configured only later is configured ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket -  Verified asap is not displayed where as asap is not configured only later is configured ",
												ExtentColor.CYAN));

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement cancelButtonVk3 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//									String cancelButtonText = cancelButtonVk1.getText();
										//
//									Assert.assertEquals(cancelButtonText, cancelPopupText, " Validated the cancel button text ");

										cancelButtonVk3.click();

									}
								} else {

									////// fail /////

									System.out.println(" Verified asap is displayed in the default order time field ");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verified asap is displayed in the default order time field where as user selected the later time when selecting the store ",
											ExtentColor.CYAN));

								}
							}

						} else {

							System.err.println("asap or later is only displayed");

							CommonMethods.switchContext("FLUTTER");

							Thread.sleep(2000);

							FlutterElement orderTimeCancelButtonVk = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

							orderTimeCancelButtonVk.click();

							FlutterElement defaultWhenTimeTextVk = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

//							defaultWhenTimeText = defaultWhenTimeTextVk.getText();

							defaultWhenTimeTextVk.click();

							if (asapOrder.equalsIgnoreCase("false") && deliveryNowResponse.equalsIgnoreCase("true")
									&& laterOrder.equalsIgnoreCase("false")) {

								System.err.println(" later is not displayed or not configured ");

								try {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									WebElement asapOrderTimeTextXpath = driver
											.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

									String asapOrderTimeText = asapOrderTimeTextXpath.getText();

									System.err.println(" asap text is : " + asapOrderTimeText);

									if (asapOrderTimeText.toLowerCase().contains("asap")) {

										System.out.println("....... asap is displayed .......");

										try {

											WebElement laterOrderTime = driver
													.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_LATER_XPATH));

											if (laterOrderTime.isDisplayed()) {

												System.err.println(
														" Verified both asap and later order time is displayed where as later is not configured on back end ");

												nextGenBasket.fail(MarkupHelper.createLabel(
														"nextGenBasket - Verified both asap and later order time is displayed where as later is not configured on back end ",
														ExtentColor.CYAN));

											}

										} catch (Exception e) {
											// TODO: handle exception

											System.out.println("Element not found");

											System.out.println(" Verified asap is only displayed ");

											nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
													" nextGenBasket - Verified asap is only displayed where as asap is only configured on back end ");

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap is only displayed where as asap is only configured on back end ",
													ExtentColor.CYAN));

										}

										System.out.println("...... Verified asap is only displayed .....");

										CommonMethods.switchContext("FLUTTER");

										Thread.sleep(2000);

										FlutterElement orderTimeCancelButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

										orderTimeCancelButtonVk1.click();

									}

								} catch (Exception e) {
									// TODO: handle exception

									//////////////////////////// fail ////////////////

									System.out.println(
											" Verified asap is not displayed where as asap is configured on the back end ");

									nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" Verified asap is not displayed where as asap is configured on the back end ");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket -  Verified asap is not displayed where as asap is configured on the back end  ",
											ExtentColor.CYAN));

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								}

							} else {

								System.err.println(" later is displayed or configured ");

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								if (driver.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_LATER_XPATH)).isDisplayed()) {

									System.out.println(" ////// later Identified ///// ");

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									try {

										WebElement asapOrderTime = driver
												.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

										if (asapOrderTime.isDisplayed()) {

											/////////////// fail ////////

											System.err.println(
													" Verified both asap and later order time is displayed where as asap is not configured on back end ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket -  Verified both asap and later order time is displayed where as asap is not configured on back end ",
													ExtentColor.CYAN));

										}

									} catch (Exception e) {
										// TODO: handle exception

										System.out.println("Element not found");

										System.out.println(
												" Verified later is displayed where as later is only configures on the back end ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket -  Verified later is displayed where as later is only configures on the back end",
												ExtentColor.CYAN));

									}

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									System.out.println(" ////// later Identified ///// ");

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								} else {

									///////////// fail /////

									System.out.println(
											" Verfied later is not displayed where as later is configured on the back end ");

									nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
											"Verfied later is not displayed where as later is configured on the back end");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verfied later is not displayed where as later is configured on the back end ",
											ExtentColor.CYAN));

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								}

							}

						}

					} else {
						System.out.println(" Verified delivery ordertype is not configured ");

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified delivery order type is not displayed in the basket order type popup where as delivery is not configured",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Verified delivery is not displayed in the default ordertype after change the delivery order type");

					}

					FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

					orderTypeTextVk.click();

					FlutterElement orderTypePopupDeliveryCheckboxVk = find
							.byValueKey(basketLocators.ORDER_TYPE_POPUP_TAKEOUT_CHECKBOX_VKL);
					orderTypePopupDeliveryCheckboxVk.click();

					FlutterElement applyButtonVk = find.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

					applyButtonVk.click();

					FlutterElement defaultOrderTypeTextVk1 = find
							.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

					defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

				} else {

					System.out.println(" Verified takeout is not displayed ");

				}

				if (defaultOrderTypeText.contains("side")) {

					System.out.println(" Verified curbside order type is displayed");

					nextGenBasket.info(MarkupHelper.createLabel(
							"nextGenBasket - Verified the selected curbside order type is displayed in the basket deafult order type field and that ordertype text is : "
									+ defaultOrderTypeText,
							ExtentColor.CYAN));

					nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
							"Verified the selected curbside order type is displayed in the basket deafult order type ");

					if (takeoutRes == true) {

						FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

						orderTypeTextVk.click();

						FlutterElement orderTypePopupTakeoutCheckboxVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_TAKEOUT_CHECKBOX_VKL);
						orderTypePopupTakeoutCheckboxVk.click();

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						applyButtonVk.click();

						FlutterElement defaultOrderTypeTextVk1 = find
								.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

						defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

						Assert.assertEquals(defaultOrderTypeText.toLowerCase(), "takeout",
								"Verified takeout is displayed in the default ordertype");

						System.out.println(
								"Verified takeout is displayed in the default ordertype after switch to the takeout ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified takeout is displayed in the default ordertype after change the takeout order type and that order type text is "
										+ defaultOrderTypeText,
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Verified takeout is displayed in the default ordertype after change the takeout order type");

						FlutterElement basketWhenTextVk = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

						String basketWhenText = basketWhenTextVk.getText();

						Assert.assertEquals(basketWhenText, basketWhenTitleText,
								"Validated the basket when title text");

						basketWhenTextVk.click();

						//////////////////////// order Time ///////////

						if (asapOrder.equalsIgnoreCase("false") && canOrderResponse.equalsIgnoreCase("true")
								&& OrderTime != null) {

							System.err.println(" canOrderResponse ");

							System.err.println("asap or later is only displayed");

							CommonMethods.switchContext("FLUTTER");

							FlutterElement asapLabel1 = find.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

							String asaplabelText = asapLabel1.getText();

							asapLabelComparison = asapPopupText.equalsIgnoreCase(asaplabelText);

							if (asapLabelComparison == true) {

								System.out.println(" Verified asap is displayed ");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified asap is displayed where as asap is configured on the back end ",
										ExtentColor.CYAN));

							} else {

								System.out.println(" Verified asap is not displayed ");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified asap is not displayed where as asap is not configured on the back end ",
										ExtentColor.CYAN));
							}

							if (laterOrder.equalsIgnoreCase("true")) {

								CommonMethods.switchContext("FLUTTER");

								FlutterElement laterLabel1 = find.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

								String laterlabelText = laterLabel1.getText();

								laterLabelComparison = laterPopupText.equalsIgnoreCase(laterlabelText);

								if (laterLabelComparison == true) {

									System.out.println(" Verified later is displayed ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is displayed where as later is configured on the back end ",
											ExtentColor.CYAN));

								} else {

									System.out.println(" Verified later is not displayed ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is not displayed where as later is not configured on the back end ",
											ExtentColor.CYAN));

								}

							} else {

								System.out.println(" Verified later is not configured ");

							}

							FlutterElement cancelButtonVk1 = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

							cancelButtonVk1.click();

							FlutterElement defaultWhenTimeTextVk = find
									.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

							defaultWhenTimeText = defaultWhenTimeTextVk.getText();

							if (OrderTime.toLowerCase().contains("asap")) {

								if (defaultWhenTimeText.toLowerCase().contains("asap")) {

									System.out.println(" Verified ASAP time is displayed");

									String asapLeadTime = asapPopupText + " (" + lead + " mins estimated)";

									System.out.println("asap lead time " + asapLeadTime);

									if (defaultWhenTimeText.equalsIgnoreCase(asapLeadTime)) {

										System.out.println(
												" Verified user selected ASAP field is displayed in the Basket when field ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket - Verified user selected ASAP field is displayed in the Basket when field and text is : "
														+ asapLeadTime,
												ExtentColor.CYAN));

										if (laterLabelComparison == true) {

											FlutterElement whenTimeText = find
													.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

											whenTimeText.click();

											FlutterElement orderTimeLaterCheckBoxVk = find
													.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);

											FlutterElement orderTimeLaterVk = find
													.byValueKey(basketLocators.ORDER_TIME_LATER_BUTTON_VKL);

											String orderTimeLaterButtonText = orderTimeLaterVk.getText();

											Assert.assertEquals(orderTimeLaterButtonText, laterPopupText,
													" Validated the later button text ");

											orderTimeLaterCheckBoxVk.click();

											FlutterElement applyButtonVk1 = find
													.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//										String applyButtonText = applyButtonVk.getText();
											//
//										Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

											applyButtonVk1.click();

											if (defaultOrderTypeText.contains("very")) {

												Basket.ngaDeliveryCapacityManagement();

											} else {

												Basket.ngaCapacityManagement();

											}

											CommonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement defaultWhenTimeTextVk1 = find
													.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

											String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

											if (defaultWhenTimeText1.toLowerCase().contains("asap")) {

												///// fail/////

												System.out.println(
														" The asap is displayed but user switched into later order ");

												nextGenBasket.fail(MarkupHelper.createLabel(
														"nextGenBasket - Verified that the asap is displayed but user switched into later order ",
														ExtentColor.CYAN));

											} else {

												System.out.println(
														"Verified that the later order is displayed and text is : "
																+ defaultWhenTimeText1);

												nextGenBasket.info(MarkupHelper.createLabel(
														"nextGenBasket - Verified that the later order is displayed and text is : "
																+ defaultWhenTimeText1,
														ExtentColor.CYAN));

											}

											FlutterElement whenTimeText1 = find
													.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

											whenTimeText1.click();
											FlutterElement orderTimeAsapButtonVk = find
													.byValueKey(basketLocators.ORDER_TIME_POPUP_ASAP_CHECKBOX_VKL);

											orderTimeAsapButtonVk.click();

											applyButtonVk.click();

										} else {

											System.out.println(
													" Verified later is not configured only asap is configured ");

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap is displayed later is not displayed where as later is not configured on the back end ",
													ExtentColor.CYAN));

											FlutterElement whenTimeText = find
													.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

											whenTimeText.click();

											FlutterElement cancelButtonVk2 = find
													.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//										String cancelButtonText = cancelButtonVk1.getText();
											//
//										Assert.assertEquals(cancelButtonText, cancelPopupText,
//												" Validated the cancel button text ");

											cancelButtonVk2.click();

										}

									}
								} else {

									///// fail////
									System.out.println(
											" Verified later is configured but user selected the asap time but later is displayed");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is displayed but user selected the asap order time when   ",
											ExtentColor.CYAN));
								}

							} else {

								System.out.println(" Verified later time is displayed");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified later time is displayed ", ExtentColor.CYAN));

								nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
										" Verified later time is displayed  ");

								SimpleDateFormat inputFormat = new SimpleDateFormat("dd, EEEE, dd MMMM yyyy, 'Today'");

								System.out.println("apppeaarr");

								// Parse the input string to a Date object
								Date parsedDate = inputFormat.parse(CapacityManagement.formattedDate1);

								System.out.println("pppppp");

								// Define the desired output format

								SimpleDateFormat outputFormat1 = new SimpleDateFormat("MMM dd", Locale.ENGLISH);

								defaultLaterDate = outputFormat1.format(parsedDate);

								System.out.println("Default Later Date :" + defaultLaterDate);

								String laterTimeSelection = defaultLaterDate + " @ "
										+ CapacityManagement.dropdownSelectedTime;

								System.out.println(" laterTimeSelection is : " + laterTimeSelection);

								FlutterElement defaultWhenTimeTextVk1 = find
										.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

								String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

								if (defaultWhenTimeText1.contains(laterTimeSelection)) {

									System.out.println(
											" Verified user selected later time field is displayed in the Basket when field ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified user selected later time field is displayed in the Basket when field ",
											ExtentColor.CYAN));

									if (asapLabelComparison == true) {

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement orderTimeAsapCheckboxVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_ASAP_CHECKBOX_VKL);
										orderTimeAsapCheckboxVk.click();

										FlutterElement orderTimeAsapVk = find
												.byValueKey(basketLocators.ORDER_TIME_ASAP_BUTTON_VKL);

										String orderTimeAsapButtonText = orderTimeAsapVk.getText();

										Assert.assertEquals(orderTimeAsapButtonText, asapPopupText,
												" Validated the asap button text ");

										FlutterElement applyButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//									String applyButtonText = applyButtonVk.getText();
										//
//									Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

										applyButtonVk1.click();

										Thread.sleep(5000);

										FlutterElement defaultWhenTimeTextVk2 = find
												.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

										String defaultWhenTimeText2 = defaultWhenTimeTextVk2.getText();

										if (defaultWhenTimeText2.toLowerCase().contains("asap")) {

											System.out.println(
													" Verified asap order is displayed in the default order time field after switch to the asap and text is : "
															+ defaultWhenTimeText2);

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap order is displayed in the default order time field after switch to the asap and text is : \"\n"
															+ defaultWhenTimeText2,
													ExtentColor.CYAN));

										} else {

											///// fail/////

											System.out.println(
													" The later is displayed but user switched into asap order ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket - Verified the later is displayed but user switched into asap order  ",
													ExtentColor.CYAN));

										}

										FlutterElement whenTimeText1 = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText1.click();
										FlutterElement orderTimeLaterButtonVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);
										orderTimeLaterButtonVk.click();

										applyButtonVk.click();

										if (defaultOrderTypeText.contains("very")) {

											Basket.ngaDeliveryCapacityManagement();

										} else {

											Basket.ngaCapacityManagement();

										}

										System.out.println(" Verified user switched to the default ordertime ");

									} else {

										System.out.println(
												" Verified asap is not displayed where as asap is not configured only later is configured ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket -  Verified asap is not displayed where as asap is not configured only later is configured ",
												ExtentColor.CYAN));

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement cancelButtonVk3 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//									String cancelButtonText = cancelButtonVk1.getText();
										//
//									Assert.assertEquals(cancelButtonText, cancelPopupText, " Validated the cancel button text ");

										cancelButtonVk3.click();

									}
								} else {

									////// fail /////

									System.out.println(" Verified asap is displayed in the default order time field ");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verified asap is displayed in the default order time field where as user selected the later time when selecting the store ",
											ExtentColor.CYAN));

								}
							}

						} else {

							System.err.println("asap or later is only displayed");

							CommonMethods.switchContext("FLUTTER");

							Thread.sleep(2000);

							FlutterElement orderTimeCancelButtonVk = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

							orderTimeCancelButtonVk.click();

							FlutterElement defaultWhenTimeTextVk = find
									.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

							defaultWhenTimeText = defaultWhenTimeTextVk.getText();

							defaultWhenTimeTextVk.click();

							if (asapOrder.equalsIgnoreCase("false") && canOrderResponse.equalsIgnoreCase("true")
									&& laterOrder.equalsIgnoreCase("false")) {

								System.err.println(" later is not displayed or not configured ");

								try {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									WebElement asapOrderTimeTextXpath = driver
											.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

									String asapOrderTimeText = asapOrderTimeTextXpath.getText();

									System.err.println(" asap text is : " + asapOrderTimeText);

									if (asapOrderTimeText.toLowerCase().contains("asap")) {

										System.out.println("....... asap is displayed .......");

										try {

											WebElement laterOrderTime = driver
													.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_LATER_XPATH));

											if (laterOrderTime.isDisplayed()) {

												System.err.println(
														" Verified both asap and later order time is displayed where as later is not configured on back end ");

												nextGenBasket.fail(MarkupHelper.createLabel(
														"nextGenBasket - Verified both asap and later order time is displayed where as later is not configured on back end ",
														ExtentColor.CYAN));

											}

										} catch (Exception e) {
											// TODO: handle exception

											System.out.println("Element not found");

											System.out.println(" Verified asap is only displayed ");

											nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
													" nextGenBasket - Verified asap is only displayed where as asap is only configured on back end ");

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap is only displayed where as asap is only configured on back end ",
													ExtentColor.CYAN));

										}

										System.out.println("...... Verified asap is only displayed .....");

										CommonMethods.switchContext("FLUTTER");

										Thread.sleep(2000);

										FlutterElement orderTimeCancelButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

										orderTimeCancelButtonVk1.click();

									}

								} catch (Exception e) {
									// TODO: handle exception

									//////////////////////////// fail ////////////////

									System.out.println(
											" Verified asap is not displayed where as asap is configured on the back end ");

									nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" Verified asap is not displayed where as asap is configured on the back end ");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket -  Verified asap is not displayed where as asap is configured on the back end  ",
											ExtentColor.CYAN));

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								}

							} else {

								System.err.println(" later is displayed or configured ");

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								if (driver.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_LATER_XPATH)).isDisplayed()) {

									System.out.println(" ////// later Identified ///// ");

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									try {

										WebElement asapOrderTime = driver
												.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

										if (asapOrderTime.isDisplayed()) {

											/////////////// fail ////////

											System.err.println(
													" Verified both asap and later order time is displayed where as asap is not configured on back end ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket -  Verified both asap and later order time is displayed where as asap is not configured on back end ",
													ExtentColor.CYAN));

										}

									} catch (Exception e) {
										// TODO: handle exception

										System.out.println("Element not found");

										System.out.println(
												" Verified later is displayed where as later is only configures on the back end ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket -  Verified later is displayed where as later is only configures on the back end",
												ExtentColor.CYAN));

									}

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									System.out.println(" ////// later Identified ///// ");

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								} else {

									///////////// fail /////

									System.out.println(
											" Verfied later is not displayed where as later is configured on the back end ");

									nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
											"Verfied later is not displayed where as later is configured on the back end");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verfied later is not displayed where as later is configured on the back end ",
											ExtentColor.CYAN));

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								}

							}

						}

					} else {
						System.out.println(" Verified takeout ordertype is not configured ");

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified takeout order type is not displayed in the basket order type popup where as takeout is not configured",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Verified takeout is not displayed in the default ordertype after change the takeout order type");
					}

					if (deliveryRes == true) {

						System.err.println("Delivery Response");

						Thread.sleep(5000);

						CommonMethods.switchContext("FLUTTER");

						FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

						orderTypeTextVk.click();

						FlutterElement orderTypePopupDeliveryCheckboxVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_DELIVERY_CHECKBOX_VKL);
						orderTypePopupDeliveryCheckboxVk.click();

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						applyButtonVk.click();

						CommonMethods.switchContext("NATIVE_APP");

						Thread.sleep(10000);

						try {

							System.err.println("loggedIn User");

							WebElement addNewAddress = driver
									.findElement(By.xpath("//*[contains(@content-desc,'add new')]"));

							if (addNewAddress.isDisplayed()) {

								System.err.println("loggedIn User Address Script Executed");

								Address.addresss();

							} else {
								System.out.println("Address Not Appeared");
							}

						} catch (Exception e) {

							System.err.println("GuestIn User");

							AddressGuest.addresss();

						}

						CommonMethods.switchContext("FLUTTER");

						FlutterElement defaultOrderTypeTextVk1 = find
								.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

						defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

//						Assert.assertEquals(defaultOrderTypeText.toLowerCase(), "delivery",
//								"Verified delivery is displayed in the default ordertype");

						System.out.println(
								"Verified delivery is displayed in the default ordertype after switch to the delivery ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified delivery is displayed in the default ordertype after change the delivery order type and that order type text is "
										+ defaultOrderTypeText,
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Verified delivery is displayed in the default ordertype after change the delivery order type");

						FlutterElement basketWhenTextVk = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

						String basketWhenText = basketWhenTextVk.getText();

						Assert.assertEquals(basketWhenText, basketWhenTitleText,
								"Validated the basket when title text");

						basketWhenTextVk.click();

						//////////////////////// order Time ///////////

						if (asapOrder.equalsIgnoreCase("false") && deliveryNowResponse.equalsIgnoreCase("true")
								&& OrderTime != null) {

							System.err.println(" canOrderResponse ");

							CommonMethods.switchContext("FLUTTER");

							FlutterElement asapLabel1 = find.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

							String asaplabelText = asapLabel1.getText();

							asapLabelComparison = asapPopupText.equalsIgnoreCase(asaplabelText);

							if (asapLabelComparison == true) {

								System.out.println(" Verified asap is displayed ");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified asap is displayed where as asap is configured on the back end ",
										ExtentColor.CYAN));

							} else {

								System.out.println(" Verified asap is not displayed ");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified asap is not displayed where as asap is not configured on the back end ",
										ExtentColor.CYAN));
							}

							if (laterOrder.equalsIgnoreCase("true")) {

								CommonMethods.switchContext("FLUTTER");

								FlutterElement laterLabel1 = find.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

								String laterlabelText = laterLabel1.getText();

								laterLabelComparison = laterPopupText.equalsIgnoreCase(laterlabelText);

								if (laterLabelComparison == true) {

									System.out.println(" Verified later is displayed ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is displayed where as later is configured on the back end ",
											ExtentColor.CYAN));

								} else {

									System.out.println(" Verified later is not displayed ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is not displayed where as later is not configured on the back end ",
											ExtentColor.CYAN));

								}

							} else {

								System.out.println(" Verified later is not configured ");

							}

							FlutterElement cancelButtonVk1 = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

							cancelButtonVk1.click();

//							WebElement defaultWhenTimeTextVk = driver
//									.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

							FlutterElement defaultWhenTimeTextVk = find.byValueKey("delivery_key_asap");
//
							defaultWhenTimeText = defaultWhenTimeTextVk.getText();

							System.err.println("defaultWhenTimeText is : " + defaultWhenTimeText);

							if (OrderTime.toLowerCase().contains("asap")) {

								if (defaultWhenTimeText.toLowerCase().contains("asap")) {

									System.out.println(" Verified ASAP time is displayed");

									String asapLeadTime = asapPopupText + " (" + lead + " mins estimated)";

									System.out.println("asap lead time " + asapLeadTime);

									Thread.sleep(20000);

//									if (defaultWhenTimeText.contains(asapLeadTime)) {
//
//										System.out.println(
//												" Verified user selected ASAP field is displayed in the Basket when field ");
//
//										nextGenBasket.info(MarkupHelper.createLabel(
//												"nextGenBasket - Verified user selected ASAP field is displayed in the Basket when field and text is : "
//														+ asapLeadTime,
//												ExtentColor.CYAN));
//
									if (laterLabelComparison == true) {

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement orderTimeLaterCheckBoxVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);

										FlutterElement orderTimeLaterVk = find
												.byValueKey(basketLocators.ORDER_TIME_LATER_BUTTON_VKL);

										String orderTimeLaterButtonText = orderTimeLaterVk.getText();

										Assert.assertEquals(orderTimeLaterButtonText, laterPopupText,
												" Validated the later button text ");

										orderTimeLaterCheckBoxVk.click();

										FlutterElement applyButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//										String applyButtonText = applyButtonVk.getText();
										//
//										Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

										applyButtonVk1.click();

										if (defaultOrderTypeText.contains("very")) {

											Basket.ngaDeliveryCapacityManagement();

										} else {

											Basket.ngaCapacityManagement();

										}

										CommonMethods.switchContext("FLUTTER");

										Thread.sleep(2000);

										FlutterElement defaultWhenTimeTextVk1 = find.byValueKey("delivery_key_asap");

										String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

										if (defaultWhenTimeText1.toLowerCase().contains("asap")) {

											///// fail/////

											System.out.println(
													" The asap is displayed but user switched into later order ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket - Verified that the asap is displayed but user switched into later order ",
													ExtentColor.CYAN));

										} else {

											System.out
													.println("Verified that the later order is displayed and text is : "
															+ defaultWhenTimeText1);

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified that the later order is displayed and text is : "
															+ defaultWhenTimeText1,
													ExtentColor.CYAN));

										}

										FlutterElement whenTimeText1 = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText1.click();
										FlutterElement orderTimeAsapButtonVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_ASAP_CHECKBOX_VKL);

										orderTimeAsapButtonVk.click();

										applyButtonVk.click();

									} else {

										System.out
												.println(" Verified later is not configured only asap is configured ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket - Verified asap is displayed later is not displayed where as later is not configured on the back end ",
												ExtentColor.CYAN));

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement cancelButtonVk2 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//										String cancelButtonText = cancelButtonVk1.getText();
										//
//										Assert.assertEquals(cancelButtonText, cancelPopupText,
//												" Validated the cancel button text ");

										cancelButtonVk2.click();

									}

//									}
								} else {

									///// fail////
									System.out.println(
											" Verified later is configured but user selected the asap time but later is displayed");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is displayed but user selected the asap order time when   ",
											ExtentColor.CYAN));
								}

							} else {

								System.out.println(" Verified later time is displayed");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified later time is displayed ", ExtentColor.CYAN));

								nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
										" Verified later time is displayed  ");

								SimpleDateFormat inputFormat = new SimpleDateFormat("dd, EEEE, dd MMMM yyyy, 'Today'");

								System.out.println("apppeaarr");

								// Parse the input string to a Date object
								Date parsedDate = inputFormat.parse(CapacityManagement.formattedDate1);

								System.out.println("pppppp");

								// Define the desired output format

								SimpleDateFormat outputFormat1 = new SimpleDateFormat("MMM dd", Locale.ENGLISH);

								defaultLaterDate = outputFormat1.format(parsedDate);

								System.out.println("Default Later Date :" + defaultLaterDate);

								String laterTimeSelection = defaultLaterDate + " @ "
										+ CapacityManagement.dropdownSelectedTime;

								System.out.println(" laterTimeSelection is : " + laterTimeSelection);

								FlutterElement defaultWhenTimeTextVk1 = find.byValueKey("delivery_key_asap");

								String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

								if (defaultWhenTimeText1.contains(laterTimeSelection)) {

									System.out.println(
											" Verified user selected later time field is displayed in the Basket when field ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified user selected later time field is displayed in the Basket when field ",
											ExtentColor.CYAN));

									if (asapLabelComparison == true) {

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement orderTimeAsapCheckboxVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_ASAP_CHECKBOX_VKL);
										orderTimeAsapCheckboxVk.click();

										FlutterElement orderTimeAsapVk = find
												.byValueKey(basketLocators.ORDER_TIME_ASAP_BUTTON_VKL);

										String orderTimeAsapButtonText = orderTimeAsapVk.getText();

										Assert.assertEquals(orderTimeAsapButtonText, asapPopupText,
												" Validated the asap button text ");

										FlutterElement applyButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//									String applyButtonText = applyButtonVk.getText();
										//
//									Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

										applyButtonVk1.click();

										Thread.sleep(5000);

										FlutterElement defaultWhenTimeTextVk2 = find.byValueKey("delivery_key_asap");

										String defaultWhenTimeText2 = defaultWhenTimeTextVk2.getText();

										if (defaultWhenTimeText2.toLowerCase().contains("asap")) {

											System.out.println(
													" Verified asap order is displayed in the default order time field after switch to the asap and text is : "
															+ defaultWhenTimeText2);

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap order is displayed in the default order time field after switch to the asap and text is : \"\n"
															+ defaultWhenTimeText2,
													ExtentColor.CYAN));

										} else {

											///// fail/////

											System.out.println(
													" The later is displayed but user switched into asap order ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket - Verified the later is displayed but user switched into asap order  ",
													ExtentColor.CYAN));

										}

										FlutterElement whenTimeText1 = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText1.click();
										FlutterElement orderTimeLaterButtonVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);
										orderTimeLaterButtonVk.click();

										applyButtonVk.click();

										if (defaultOrderTypeText.contains("very")) {

											Basket.ngaDeliveryCapacityManagement();

										} else {

											Basket.ngaCapacityManagement();

										}

										System.out.println(" Verified user switched to the default ordertime ");

										CommonMethods.switchContext("FLUTTER");

									} else {

										System.out.println(
												" Verified asap is not displayed where as asap is not configured only later is configured ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket -  Verified asap is not displayed where as asap is not configured only later is configured ",
												ExtentColor.CYAN));

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement cancelButtonVk3 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//									String cancelButtonText = cancelButtonVk1.getText();
										//
//									Assert.assertEquals(cancelButtonText, cancelPopupText, " Validated the cancel button text ");

										cancelButtonVk3.click();

									}
								} else {

									////// fail /////

									System.out.println(" Verified asap is displayed in the default order time field ");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verified asap is displayed in the default order time field where as user selected the later time when selecting the store ",
											ExtentColor.CYAN));

								}
							}

						} else {

							System.err.println("asap or later is only displayed");

							CommonMethods.switchContext("FLUTTER");

							Thread.sleep(2000);

							FlutterElement orderTimeCancelButtonVk = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

							orderTimeCancelButtonVk.click();

							FlutterElement defaultWhenTimeTextVk = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

//							defaultWhenTimeText = defaultWhenTimeTextVk.getText();

							defaultWhenTimeTextVk.click();

							if (asapOrder.equalsIgnoreCase("false") && deliveryNowResponse.equalsIgnoreCase("true")
									&& laterOrder.equalsIgnoreCase("false")) {

								System.err.println(" later is not displayed or not configured ");

								try {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									WebElement asapOrderTimeTextXpath = driver
											.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

									String asapOrderTimeText = asapOrderTimeTextXpath.getText();

									System.err.println(" asap text is : " + asapOrderTimeText);

									if (asapOrderTimeText.toLowerCase().contains("asap")) {

										System.out.println("....... asap is displayed .......");

										try {

											WebElement laterOrderTime = driver
													.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_LATER_XPATH));

											if (laterOrderTime.isDisplayed()) {

												System.err.println(
														" Verified both asap and later order time is displayed where as later is not configured on back end ");

												nextGenBasket.fail(MarkupHelper.createLabel(
														"nextGenBasket - Verified both asap and later order time is displayed where as later is not configured on back end ",
														ExtentColor.CYAN));

											}

										} catch (Exception e) {
											// TODO: handle exception

											System.out.println("Element not found");

											System.out.println(" Verified asap is only displayed ");

											nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
													" nextGenBasket - Verified asap is only displayed where as asap is only configured on back end ");

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap is only displayed where as asap is only configured on back end ",
													ExtentColor.CYAN));

										}

										System.out.println("...... Verified asap is only displayed .....");

										CommonMethods.switchContext("FLUTTER");

										Thread.sleep(2000);

										FlutterElement orderTimeCancelButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

										orderTimeCancelButtonVk1.click();

									}

								} catch (Exception e) {
									// TODO: handle exception

									//////////////////////////// fail ////////////////

									System.out.println(
											" Verified asap is not displayed where as asap is configured on the back end ");

									nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" Verified asap is not displayed where as asap is configured on the back end ");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket -  Verified asap is not displayed where as asap is configured on the back end  ",
											ExtentColor.CYAN));

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								}

							} else {

								System.err.println(" later is displayed or configured ");

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								if (driver.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_LATER_XPATH)).isDisplayed()) {

									System.out.println(" ////// later Identified ///// ");

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									try {

										WebElement asapOrderTime = driver
												.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

										if (asapOrderTime.isDisplayed()) {

											/////////////// fail ////////

											System.err.println(
													" Verified both asap and later order time is displayed where as asap is not configured on back end ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket -  Verified both asap and later order time is displayed where as asap is not configured on back end ",
													ExtentColor.CYAN));

										}

									} catch (Exception e) {
										// TODO: handle exception

										System.out.println("Element not found");

										System.out.println(
												" Verified later is displayed where as later is only configures on the back end ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket -  Verified later is displayed where as later is only configures on the back end",
												ExtentColor.CYAN));

									}

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									System.out.println(" ////// later Identified ///// ");

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								} else {

									///////////// fail /////

									System.out.println(
											" Verfied later is not displayed where as later is configured on the back end ");

									nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
											"Verfied later is not displayed where as later is configured on the back end");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verfied later is not displayed where as later is configured on the back end ",
											ExtentColor.CYAN));

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								}

							}

						}

					} else {
						System.out.println(" Verified delivery ordertype is not configured ");

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified delivery order type is not displayed in the basket order type popup where as delivery is not configured",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Verified delivery is not displayed in the default ordertype after change the delivery order type");

					}

					FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

					orderTypeTextVk.click();

					FlutterElement orderTypePopupDeliveryCheckboxVk = find
							.byValueKey(basketLocators.ORDER_TYPE_POPUP_CURBSIDE_CHECKBOX_VKL);
					orderTypePopupDeliveryCheckboxVk.click();

					FlutterElement applyButtonVk = find.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

					applyButtonVk.click();

					FlutterElement defaultOrderTypeTextVk1 = find
							.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

					defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

				} else {

					System.out.println(" Verified curbside is not displayed ");

				}

				if (defaultOrderTypeText.contains("very")) {

					System.out.println(" Verified delivery order type is displayed");

					nextGenBasket.info(MarkupHelper.createLabel(
							"nextGenBasket - Verified the selected takeout order type is displayed in the basket deafult order type field and that ordertype text is : "
									+ defaultOrderTypeText,
							ExtentColor.CYAN));

					nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
							"Verified the selected takeout order type is displayed in the basket deafult order type ");

					if (takeoutRes == true) {

						FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

						orderTypeTextVk.click();

						FlutterElement orderTypePopupTakeoutCheckboxVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_TAKEOUT_CHECKBOX_VKL);
						orderTypePopupTakeoutCheckboxVk.click();

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						applyButtonVk.click();

						FlutterElement defaultOrderTypeTextVk1 = find
								.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

						defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

//						Assert.assertEquals(defaultOrderTypeText.toLowerCase(), "take out",
//								"Verified takeout is displayed in the default ordertype");

						System.out.println(
								"Verified takeout is displayed in the default ordertype after switch to the takeout ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified takeout is displayed in the default ordertype after change the takeout order type and that order type text is "
										+ defaultOrderTypeText,
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Verified takeout is displayed in the default ordertype after change the takeout order type");

						FlutterElement basketWhenTextVk = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

						String basketWhenText = basketWhenTextVk.getText();

						Assert.assertEquals(basketWhenText, basketWhenTitleText,
								"Validated the basket when title text");

						basketWhenTextVk.click();

						////////////// order Time ///////

						if (asapOrder.equalsIgnoreCase("false") && canOrderResponse.equalsIgnoreCase("true")
								&& OrderTime != null) {

							System.err.println(" canOrderResponse ");

							System.err.println("asap or later is only displayed");

							CommonMethods.switchContext("FLUTTER");

							FlutterElement asapLabel1 = find.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

							String asaplabelText = asapLabel1.getText();

							asapLabelComparison = asapPopupText.equalsIgnoreCase(asaplabelText);

							if (asapLabelComparison == true) {

								System.out.println(" Verified asap is displayed ");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified asap is displayed where as asap is configured on the back end ",
										ExtentColor.CYAN));

							} else {

								System.out.println(" Verified asap is not displayed ");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified asap is not displayed where as asap is not configured on the back end ",
										ExtentColor.CYAN));
							}

							if (laterOrder.equalsIgnoreCase("true")) {

								CommonMethods.switchContext("FLUTTER");

								FlutterElement laterLabel1 = find.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

								String laterlabelText = laterLabel1.getText();

								laterLabelComparison = laterPopupText.equalsIgnoreCase(laterlabelText);

								if (laterLabelComparison == true) {

									System.out.println(" Verified later is displayed ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is displayed where as later is configured on the back end ",
											ExtentColor.CYAN));

								} else {

									System.out.println(" Verified later is not displayed ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is not displayed where as later is not configured on the back end ",
											ExtentColor.CYAN));

								}

							} else {

								System.out.println(" Verified later is not configured ");

							}

							FlutterElement cancelButtonVk1 = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

							cancelButtonVk1.click();

							FlutterElement defaultWhenTimeTextVk = find
									.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

							defaultWhenTimeText = defaultWhenTimeTextVk.getText();

							if (OrderTime.toLowerCase().contains("asap")) {

								if (defaultWhenTimeText.toLowerCase().contains("asap")) {

									System.out.println(" Verified ASAP time is displayed");

									String asapLeadTime = asapPopupText + " (" + lead + " mins estimated)";

									System.out.println("asap lead time " + asapLeadTime);

									if (defaultWhenTimeText.equalsIgnoreCase(asapLeadTime)) {

										System.out.println(
												" Verified user selected ASAP field is displayed in the Basket when field ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket - Verified user selected ASAP field is displayed in the Basket when field and text is : "
														+ asapLeadTime,
												ExtentColor.CYAN));

										if (laterLabelComparison == true) {

											FlutterElement whenTimeText = find
													.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

											whenTimeText.click();

											FlutterElement orderTimeLaterCheckBoxVk = find
													.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);

											FlutterElement orderTimeLaterVk = find
													.byValueKey(basketLocators.ORDER_TIME_LATER_BUTTON_VKL);

											String orderTimeLaterButtonText = orderTimeLaterVk.getText();

											Assert.assertEquals(orderTimeLaterButtonText, laterPopupText,
													" Validated the later button text ");

											orderTimeLaterCheckBoxVk.click();

											FlutterElement applyButtonVk1 = find
													.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//										String applyButtonText = applyButtonVk.getText();
											//
//										Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

											applyButtonVk1.click();

											if (defaultOrderTypeText.contains("very")) {

												Basket.ngaDeliveryCapacityManagement();

											} else {

												Basket.ngaCapacityManagement();

											}

											CommonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement defaultWhenTimeTextVk1 = find
													.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

											String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

											if (defaultWhenTimeText1.toLowerCase().contains("asap")) {

												///// fail/////

												System.out.println(
														" The asap is displayed but user switched into later order ");

												nextGenBasket.fail(MarkupHelper.createLabel(
														"nextGenBasket - Verified that the asap is displayed but user switched into later order ",
														ExtentColor.CYAN));

											} else {

												System.out.println(
														"Verified that the later order is displayed and text is : "
																+ defaultWhenTimeText1);

												nextGenBasket.info(MarkupHelper.createLabel(
														"nextGenBasket - Verified that the later order is displayed and text is : "
																+ defaultWhenTimeText1,
														ExtentColor.CYAN));

											}

											FlutterElement whenTimeText1 = find
													.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

											whenTimeText1.click();
											FlutterElement orderTimeAsapButtonVk = find
													.byValueKey(basketLocators.ORDER_TIME_POPUP_ASAP_CHECKBOX_VKL);

											orderTimeAsapButtonVk.click();

											applyButtonVk.click();

										} else {

											System.out.println(
													" Verified later is not configured only asap is configured ");

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap is displayed later is not displayed where as later is not configured on the back end ",
													ExtentColor.CYAN));

											FlutterElement whenTimeText = find
													.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

											whenTimeText.click();

											FlutterElement cancelButtonVk2 = find
													.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//										String cancelButtonText = cancelButtonVk1.getText();
											//
//										Assert.assertEquals(cancelButtonText, cancelPopupText,
//												" Validated the cancel button text ");

											cancelButtonVk2.click();

										}

									}
								} else {

									///// fail////
									System.out.println(
											" Verified later is configured but user selected the asap time but later is displayed");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is displayed but user selected the asap order time when   ",
											ExtentColor.CYAN));
								}

							} else {

								System.out.println(" Verified later time is displayed");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified later time is displayed ", ExtentColor.CYAN));

								nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
										" Verified later time is displayed  ");

								SimpleDateFormat inputFormat = new SimpleDateFormat("dd, EEEE, dd MMMM yyyy, 'Today'");

								System.out.println("apppeaarr");

								// Parse the input string to a Date object
								Date parsedDate = inputFormat.parse(CapacityManagement.formattedDate1);

								System.out.println("pppppp");

								// Define the desired output format

								SimpleDateFormat outputFormat1 = new SimpleDateFormat("MMM dd", Locale.ENGLISH);

								defaultLaterDate = outputFormat1.format(parsedDate);

								System.out.println("Default Later Date :" + defaultLaterDate);

								String laterTimeSelection = defaultLaterDate + " @ "
										+ CapacityManagement.dropdownSelectedTime;

								System.out.println(" laterTimeSelection is : " + laterTimeSelection);

								FlutterElement defaultWhenTimeTextVk1 = find
										.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

								String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

								if (defaultWhenTimeText1.contains(laterTimeSelection)) {

									System.out.println(
											" Verified user selected later time field is displayed in the Basket when field ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified user selected later time field is displayed in the Basket when field ",
											ExtentColor.CYAN));

									if (asapLabelComparison == true) {

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement orderTimeAsapCheckboxVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_ASAP_CHECKBOX_VKL);
										orderTimeAsapCheckboxVk.click();

										FlutterElement orderTimeAsapVk = find
												.byValueKey(basketLocators.ORDER_TIME_ASAP_BUTTON_VKL);

										String orderTimeAsapButtonText = orderTimeAsapVk.getText();

										Assert.assertEquals(orderTimeAsapButtonText, asapPopupText,
												" Validated the asap button text ");

										FlutterElement applyButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//									String applyButtonText = applyButtonVk.getText();
										//
//									Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

										applyButtonVk1.click();

										Thread.sleep(5000);

										FlutterElement defaultWhenTimeTextVk2 = find
												.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

										String defaultWhenTimeText2 = defaultWhenTimeTextVk2.getText();

										if (defaultWhenTimeText2.toLowerCase().contains("asap")) {

											System.out.println(
													" Verified asap order is displayed in the default order time field after switch to the asap and text is : "
															+ defaultWhenTimeText2);

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap order is displayed in the default order time field after switch to the asap and text is : \"\n"
															+ defaultWhenTimeText2,
													ExtentColor.CYAN));

										} else {

											///// fail/////

											System.out.println(
													" The later is displayed but user switched into asap order ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket - Verified the later is displayed but user switched into asap order  ",
													ExtentColor.CYAN));

										}

										FlutterElement whenTimeText1 = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText1.click();
										FlutterElement orderTimeLaterButtonVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);
										orderTimeLaterButtonVk.click();

										applyButtonVk.click();

										if (defaultOrderTypeText.contains("very")) {

											Basket.ngaDeliveryCapacityManagement();

										} else {

											Basket.ngaCapacityManagement();

										}

										System.out.println(" Verified user switched to the default ordertime ");

									} else {

										System.out.println(
												" Verified asap is not displayed where as asap is not configured only later is configured ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket -  Verified asap is not displayed where as asap is not configured only later is configured ",
												ExtentColor.CYAN));

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement cancelButtonVk3 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//									String cancelButtonText = cancelButtonVk1.getText();
										//
//									Assert.assertEquals(cancelButtonText, cancelPopupText, " Validated the cancel button text ");

										cancelButtonVk3.click();

									}
								} else {

									////// fail /////

									System.out.println(" Verified asap is displayed in the default order time field ");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verified asap is displayed in the default order time field where as user selected the later time when selecting the store ",
											ExtentColor.CYAN));

								}
							}

						} else {

							System.err.println("asap or later is only displayed");

							CommonMethods.switchContext("FLUTTER");

							Thread.sleep(2000);

							FlutterElement orderTimeCancelButtonVk = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

							orderTimeCancelButtonVk.click();

							FlutterElement defaultWhenTimeTextVk = find
									.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

							defaultWhenTimeText = defaultWhenTimeTextVk.getText();

							defaultWhenTimeTextVk.click();

							if (asapOrder.equalsIgnoreCase("false") && canOrderResponse.equalsIgnoreCase("true")
									&& laterOrder.equalsIgnoreCase("false")) {

								System.err.println(" later is not displayed or not configured ");

								try {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									WebElement asapOrderTimeTextXpath = driver
											.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

									String asapOrderTimeText = asapOrderTimeTextXpath.getText();

									System.err.println(" asap text is : " + asapOrderTimeText);

									if (asapOrderTimeText.toLowerCase().contains("asap")) {

										System.out.println("....... asap is displayed .......");

										try {

											WebElement laterOrderTime = driver
													.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_LATER_XPATH));

											if (laterOrderTime.isDisplayed()) {

												System.err.println(
														" Verified both asap and later order time is displayed where as later is not configured on back end ");

												nextGenBasket.fail(MarkupHelper.createLabel(
														"nextGenBasket - Verified both asap and later order time is displayed where as later is not configured on back end ",
														ExtentColor.CYAN));

											}

										} catch (Exception e) {
											// TODO: handle exception

											System.out.println("Element not found");

											System.out.println(" Verified asap is only displayed ");

											nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
													" nextGenBasket - Verified asap is only displayed where as asap is only configured on back end ");

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap is only displayed where as asap is only configured on back end ",
													ExtentColor.CYAN));

										}

										System.out.println("...... Verified asap is only displayed .....");

										CommonMethods.switchContext("FLUTTER");

										Thread.sleep(2000);

										FlutterElement orderTimeCancelButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

										orderTimeCancelButtonVk1.click();

									}

								} catch (Exception e) {
									// TODO: handle exception

									//////////////////////////// fail ////////////////

									System.out.println(
											" Verified asap is not displayed where as asap is configured on the back end ");

									nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" Verified asap is not displayed where as asap is configured on the back end ");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket -  Verified asap is not displayed where as asap is configured on the back end  ",
											ExtentColor.CYAN));

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								}

							} else {

								System.err.println(" later is displayed or configured ");

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								if (driver.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_LATER_XPATH)).isDisplayed()) {

									System.out.println(" ////// later Identified ///// ");

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									try {

										WebElement asapOrderTime = driver
												.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

										if (asapOrderTime.isDisplayed()) {

											/////////////// fail ////////

											System.err.println(
													" Verified both asap and later order time is displayed where as asap is not configured on back end ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket -  Verified both asap and later order time is displayed where as asap is not configured on back end ",
													ExtentColor.CYAN));

										}

									} catch (Exception e) {
										// TODO: handle exception

										System.out.println("Element not found");

										System.out.println(
												" Verified later is displayed where as later is only configures on the back end ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket -  Verified later is displayed where as later is only configures on the back end",
												ExtentColor.CYAN));

									}

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									System.out.println(" ////// later Identified ///// ");

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								} else {

									///////////// fail /////

									System.out.println(
											" Verfied later is not displayed where as later is configured on the back end ");

									nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
											"Verfied later is not displayed where as later is configured on the back end");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verfied later is not displayed where as later is configured on the back end ",
											ExtentColor.CYAN));

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								}

							}

						}

					} else {
						System.out.println(" Verified takeout ordertype is not configured ");

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified takeout order type is not displayed in the basket order type popup where as takeout is not configured",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Verified takeout is not displayed in the default ordertype after change the takeout order type");
					}

					if (curbsideRes == true) {

						Thread.sleep(5000);

						FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

						orderTypeTextVk.click();

						FlutterElement orderTypePopupCurbsideCheckboxVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_CURBSIDE_CHECKBOX_VKL);
						orderTypePopupCurbsideCheckboxVk.click();

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						applyButtonVk.click();

						FlutterElement defaultOrderTypeTextVk1 = find
								.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

						defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

//						Assert.assertEquals(defaultOrderTypeText.toLowerCase(), "curbside",
//								"Verified curbside is displayed in the default ordertype");

						System.out.println(
								"Verified curbside is displayed in the default ordertype after switch to the curbside ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified curbside is displayed in the default ordertype after change the curbside order type and that order type text is "
										+ defaultOrderTypeText,
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Verified curbside is displayed in the default ordertype after change the curbside order type");

						FlutterElement basketWhenTextVk = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

						String basketWhenText = basketWhenTextVk.getText();

						Assert.assertEquals(basketWhenText, basketWhenTitleText,
								"Validated the basket when title text");

						basketWhenTextVk.click();

						////////////// order Time /////

						if (asapOrder.equalsIgnoreCase("false") && canOrderResponse.equalsIgnoreCase("true")
								&& OrderTime != null) {

							System.err.println(" canOrderResponse ");

							System.err.println("asap or later is only displayed");

							CommonMethods.switchContext("FLUTTER");

							FlutterElement asapLabel1 = find.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

							String asaplabelText = asapLabel1.getText();

							asapLabelComparison = asapPopupText.equalsIgnoreCase(asaplabelText);

							if (asapLabelComparison == true) {

								System.out.println(" Verified asap is displayed ");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified asap is displayed where as asap is configured on the back end ",
										ExtentColor.CYAN));

							} else {

								System.out.println(" Verified asap is not displayed ");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified asap is not displayed where as asap is not configured on the back end ",
										ExtentColor.CYAN));
							}

							if (laterOrder.equalsIgnoreCase("true")) {

								CommonMethods.switchContext("FLUTTER");

								FlutterElement laterLabel1 = find.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

								String laterlabelText = laterLabel1.getText();

								laterLabelComparison = laterPopupText.equalsIgnoreCase(laterlabelText);

								if (laterLabelComparison == true) {

									System.out.println(" Verified later is displayed ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is displayed where as later is configured on the back end ",
											ExtentColor.CYAN));

								} else {

									System.out.println(" Verified later is not displayed ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is not displayed where as later is not configured on the back end ",
											ExtentColor.CYAN));

								}

							} else {

								System.out.println(" Verified later is not configured ");

							}

							FlutterElement cancelButtonVk1 = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

							cancelButtonVk1.click();

							FlutterElement defaultWhenTimeTextVk = find
									.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

							defaultWhenTimeText = defaultWhenTimeTextVk.getText();

							if (OrderTime.toLowerCase().contains("asap")) {

								if (defaultWhenTimeText.toLowerCase().contains("asap")) {

									System.out.println(" Verified ASAP time is displayed");

									String asapLeadTime = asapPopupText + " (" + lead + " mins estimated)";

									System.out.println("asap lead time " + asapLeadTime);

									if (defaultWhenTimeText.equalsIgnoreCase(asapLeadTime)) {

										System.out.println(
												" Verified user selected ASAP field is displayed in the Basket when field ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket - Verified user selected ASAP field is displayed in the Basket when field and text is : "
														+ asapLeadTime,
												ExtentColor.CYAN));

										if (laterLabelComparison == true) {

											FlutterElement whenTimeText = find
													.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

											whenTimeText.click();

											FlutterElement orderTimeLaterCheckBoxVk = find
													.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);

											FlutterElement orderTimeLaterVk = find
													.byValueKey(basketLocators.ORDER_TIME_LATER_BUTTON_VKL);

											String orderTimeLaterButtonText = orderTimeLaterVk.getText();

											Assert.assertEquals(orderTimeLaterButtonText, laterPopupText,
													" Validated the later button text ");

											orderTimeLaterCheckBoxVk.click();

											FlutterElement applyButtonVk1 = find
													.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//										String applyButtonText = applyButtonVk.getText();
											//
//										Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

											applyButtonVk1.click();

											if (defaultOrderTypeText.contains("very")) {

												Basket.ngaDeliveryCapacityManagement();

											} else {

												Basket.ngaCapacityManagement();

											}

											CommonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement defaultWhenTimeTextVk1 = find
													.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

											String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

											if (defaultWhenTimeText1.toLowerCase().contains("asap")) {

												///// fail/////

												System.out.println(
														" The asap is displayed but user switched into later order ");

												nextGenBasket.fail(MarkupHelper.createLabel(
														"nextGenBasket - Verified that the asap is displayed but user switched into later order ",
														ExtentColor.CYAN));

											} else {

												System.out.println(
														"Verified that the later order is displayed and text is : "
																+ defaultWhenTimeText1);

												nextGenBasket.info(MarkupHelper.createLabel(
														"nextGenBasket - Verified that the later order is displayed and text is : "
																+ defaultWhenTimeText1,
														ExtentColor.CYAN));

											}

											FlutterElement whenTimeText1 = find
													.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

											whenTimeText1.click();
											FlutterElement orderTimeAsapButtonVk = find
													.byValueKey(basketLocators.ORDER_TIME_POPUP_ASAP_CHECKBOX_VKL);

											orderTimeAsapButtonVk.click();

											applyButtonVk.click();

										} else {

											System.out.println(
													" Verified later is not configured only asap is configured ");

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap is displayed later is not displayed where as later is not configured on the back end ",
													ExtentColor.CYAN));

											FlutterElement whenTimeText = find
													.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

											whenTimeText.click();

											FlutterElement cancelButtonVk2 = find
													.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//										String cancelButtonText = cancelButtonVk1.getText();
											//
//										Assert.assertEquals(cancelButtonText, cancelPopupText,
//												" Validated the cancel button text ");

											cancelButtonVk2.click();

										}

									}
								} else {

									///// fail////
									System.out.println(
											" Verified later is configured but user selected the asap time but later is displayed");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verified later is displayed but user selected the asap order time when   ",
											ExtentColor.CYAN));
								}

							} else {

								System.out.println(" Verified later time is displayed");

								nextGenBasket.info(MarkupHelper.createLabel(
										"nextGenBasket - Verified later time is displayed ", ExtentColor.CYAN));

								nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
										" Verified later time is displayed  ");

								SimpleDateFormat inputFormat = new SimpleDateFormat("dd, EEEE, dd MMMM yyyy, 'Today'");

								System.out.println("apppeaarr");

								// Parse the input string to a Date object
								Date parsedDate = inputFormat.parse(CapacityManagement.formattedDate1);

								System.out.println("pppppp");

								// Define the desired output format

								SimpleDateFormat outputFormat1 = new SimpleDateFormat("MMM dd", Locale.ENGLISH);

								defaultLaterDate = outputFormat1.format(parsedDate);

								System.out.println("Default Later Date :" + defaultLaterDate);

								String laterTimeSelection = defaultLaterDate + " @ "
										+ CapacityManagement.dropdownSelectedTime;

								System.out.println(" laterTimeSelection is : " + laterTimeSelection);

								FlutterElement defaultWhenTimeTextVk1 = find
										.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

								String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

								if (defaultWhenTimeText1.contains(laterTimeSelection)) {

									System.out.println(
											" Verified user selected later time field is displayed in the Basket when field ");

									nextGenBasket.info(MarkupHelper.createLabel(
											"nextGenBasket - Verified user selected later time field is displayed in the Basket when field ",
											ExtentColor.CYAN));

									if (asapLabelComparison == true) {

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement orderTimeAsapCheckboxVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_ASAP_CHECKBOX_VKL);
										orderTimeAsapCheckboxVk.click();

										FlutterElement orderTimeAsapVk = find
												.byValueKey(basketLocators.ORDER_TIME_ASAP_BUTTON_VKL);

										String orderTimeAsapButtonText = orderTimeAsapVk.getText();

										Assert.assertEquals(orderTimeAsapButtonText, asapPopupText,
												" Validated the asap button text ");

										FlutterElement applyButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//									String applyButtonText = applyButtonVk.getText();
										//
//									Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

										applyButtonVk1.click();

										Thread.sleep(5000);

										FlutterElement defaultWhenTimeTextVk2 = find
												.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

										String defaultWhenTimeText2 = defaultWhenTimeTextVk2.getText();

										if (defaultWhenTimeText2.toLowerCase().contains("asap")) {

											System.out.println(
													" Verified asap order is displayed in the default order time field after switch to the asap and text is : "
															+ defaultWhenTimeText2);

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap order is displayed in the default order time field after switch to the asap and text is : \"\n"
															+ defaultWhenTimeText2,
													ExtentColor.CYAN));

										} else {

											///// fail/////

											System.out.println(
													" The later is displayed but user switched into asap order ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket - Verified the later is displayed but user switched into asap order  ",
													ExtentColor.CYAN));

										}

										FlutterElement whenTimeText1 = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText1.click();
										FlutterElement orderTimeLaterButtonVk = find
												.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);
										orderTimeLaterButtonVk.click();

										applyButtonVk.click();

										if (defaultOrderTypeText.contains("very")) {

											Basket.ngaDeliveryCapacityManagement();

										} else {

											Basket.ngaCapacityManagement();

										}

										System.out.println(" Verified user switched to the default ordertime ");

									} else {

										System.out.println(
												" Verified asap is not displayed where as asap is not configured only later is configured ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket -  Verified asap is not displayed where as asap is not configured only later is configured ",
												ExtentColor.CYAN));

										FlutterElement whenTimeText = find
												.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

										whenTimeText.click();

										FlutterElement cancelButtonVk3 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//									String cancelButtonText = cancelButtonVk1.getText();
										//
//									Assert.assertEquals(cancelButtonText, cancelPopupText, " Validated the cancel button text ");

										cancelButtonVk3.click();

									}
								} else {

									////// fail /////

									System.out.println(" Verified asap is displayed in the default order time field ");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verified asap is displayed in the default order time field where as user selected the later time when selecting the store ",
											ExtentColor.CYAN));

								}
							}

						} else {

							System.err.println("asap or later is only displayed");

							CommonMethods.switchContext("FLUTTER");

							Thread.sleep(2000);

							FlutterElement orderTimeCancelButtonVk = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

							orderTimeCancelButtonVk.click();

							FlutterElement defaultWhenTimeTextVk = find
									.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

							defaultWhenTimeText = defaultWhenTimeTextVk.getText();

							defaultWhenTimeTextVk.click();

							if (asapOrder.equalsIgnoreCase("false") && canOrderResponse.equalsIgnoreCase("true")
									&& laterOrder.equalsIgnoreCase("false")) {

								System.err.println(" later is not displayed or not configured ");

								try {

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									WebElement asapOrderTimeTextXpath = driver
											.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

									String asapOrderTimeText = asapOrderTimeTextXpath.getText();

									System.err.println(" asap text is : " + asapOrderTimeText);

									if (asapOrderTimeText.toLowerCase().contains("asap")) {

										System.out.println("....... asap is displayed .......");

										try {

											WebElement laterOrderTime = driver
													.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_LATER_XPATH));

											if (laterOrderTime.isDisplayed()) {

												System.err.println(
														" Verified both asap and later order time is displayed where as later is not configured on back end ");

												nextGenBasket.fail(MarkupHelper.createLabel(
														"nextGenBasket - Verified both asap and later order time is displayed where as later is not configured on back end ",
														ExtentColor.CYAN));

											}

										} catch (Exception e) {
											// TODO: handle exception

											System.out.println("Element not found");

											System.out.println(" Verified asap is only displayed ");

											nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
													" nextGenBasket - Verified asap is only displayed where as asap is only configured on back end ");

											nextGenBasket.info(MarkupHelper.createLabel(
													"nextGenBasket - Verified asap is only displayed where as asap is only configured on back end ",
													ExtentColor.CYAN));

										}

										System.out.println("...... Verified asap is only displayed .....");

										CommonMethods.switchContext("FLUTTER");

										Thread.sleep(2000);

										FlutterElement orderTimeCancelButtonVk1 = find
												.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

										orderTimeCancelButtonVk1.click();

									}

								} catch (Exception e) {
									// TODO: handle exception

									//////////////////////////// fail ////////////////

									System.out.println(
											" Verified asap is not displayed where as asap is configured on the back end ");

									nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" Verified asap is not displayed where as asap is configured on the back end ");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket -  Verified asap is not displayed where as asap is configured on the back end  ",
											ExtentColor.CYAN));

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								}

							} else {

								System.err.println(" later is displayed or configured ");

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								if (driver.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_LATER_XPATH)).isDisplayed()) {

									System.out.println(" ////// later Identified ///// ");

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(5000);

									try {

										WebElement asapOrderTime = driver
												.findElement(By.xpath(basketLocators.BASKET_SCREEN_CHECKOUT_ASAP_XPATH));

										if (asapOrderTime.isDisplayed()) {

											/////////////// fail ////////

											System.err.println(
													" Verified both asap and later order time is displayed where as asap is not configured on back end ");

											nextGenBasket.fail(MarkupHelper.createLabel(
													"nextGenBasket -  Verified both asap and later order time is displayed where as asap is not configured on back end ",
													ExtentColor.CYAN));

										}

									} catch (Exception e) {
										// TODO: handle exception

										System.out.println("Element not found");

										System.out.println(
												" Verified later is displayed where as later is only configures on the back end ");

										nextGenBasket.info(MarkupHelper.createLabel(
												"nextGenBasket -  Verified later is displayed where as later is only configures on the back end",
												ExtentColor.CYAN));

									}

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									System.out.println(" ////// later Identified ///// ");

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								} else {

									///////////// fail /////

									System.out.println(
											" Verfied later is not displayed where as later is configured on the back end ");

									nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
											"Verfied later is not displayed where as later is configured on the back end");

									nextGenBasket.fail(MarkupHelper.createLabel(
											"nextGenBasket - Verfied later is not displayed where as later is configured on the back end ",
											ExtentColor.CYAN));

									CommonMethods.switchContext("FLUTTER");

									Thread.sleep(2000);

									FlutterElement orderTimeCancelButtonVk1 = find
											.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

									orderTimeCancelButtonVk1.click();

								}

							}

						}

					} else {
						System.out.println(" Verified curbside ordertype is not configured ");

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified curbside order type is not displayed in the basket order type popup where as curbside is not configured",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								" Verified curbside is not displayed in the default ordertype after change the curbside order type");

					}

					FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

					orderTypeTextVk.click();

					FlutterElement orderTypePopupDeliveryCheckboxVk = find
							.byValueKey(basketLocators.ORDER_TYPE_POPUP_DELIVERY_CHECKBOX_VKL);
					orderTypePopupDeliveryCheckboxVk.click();

					FlutterElement applyButtonVk = find.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

					applyButtonVk.click();

					CommonMethods.switchContext("NATIVE_APP");

					Thread.sleep(3000);

					try {

						WebElement addNewAddress = driver
								.findElement(By.xpath("//*[contains(@content-desc,'add new')]"));

						if (addNewAddress.isDisplayed()) {

							Address.addresss();

						} else {
							System.out.println("Address Not Appeared");
						}

					} catch (Exception e) {

						AddressGuest.basketAddress();

					}

					Thread.sleep(5000);

					CommonMethods.switchContext("FLUTTER");

					Thread.sleep(3000);

					FlutterElement defaultOrderTypeTextVk1 = find
							.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

					defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

				} else {

					System.out.println(" Verified delivery is not displayed ");

				}

			} else {

				System.out.println("The selected order type and Default order type text are not same");

				nextGenBasket.fail(MarkupHelper.createLabel(
						"nextGenBasket - Verified that the selected order type  and Basket default order type text are not same",
						ExtentColor.CYAN));

			}

		}

		CommonMethods.switchContext("FLUTTER");
		Thread.sleep(5000);
		FlutterElement addMoreItemsButton = find.byValueKey(basketLocators.BASKET_ADD_MORE_ITEMS_TEXT_VK);
		String text = addMoreItemsButton.getText();
		System.out.println(text);
		addMoreItemsButton.click();

		CommonMethods.switchContext("FLUTTER");

		Thread.sleep(2000);

		FlutterElement backIcon = find.byValueKey(basketLocators.BASKET_SCREEN_BACK_ICON_VKL);

		backIcon.click();

		double ngaCouponDicountValue = Coupon.ngaCoupon(orderId);

		CommonMethods.switchContext("FLUTTER");

		Thread.sleep(10000);

		basketScreenCouponText = find.byValueKey("basket_screen_apply_coupon").getText();

		System.out.println("the text is : " + basketScreenCouponText);

		return ngaCouponDicountValue;

	}

	@Test

	public static void ngaDeliveryBasket(String OrderType, String OrderTime, String orderId) throws Exception {

//		DesiredCapabilities cap = new DesiredCapabilities();
//		cap.setCapability(MobileCapabilityType.DEVICE_NAME, "Samsung");
//		cap.setCapability("platformName", "Android");
//		cap.setCapability(MobileCapabilityType.PLATFORM_VERSION, "12");
//		cap.setCapability(MobileCapabilityType.UDID, "emulator-5554");
//		cap.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
//		cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 10000);
//		cap.setCapability("appPackage", "com.paytronix.nexgenfl");
//		cap.setCapability("appActivity", "com.paytronix.nexgenfl.MainActivity");
//
//		driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);

		Thread.sleep(20000);

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Prasanna Venkatesh").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bc = new BaseClass();
		List<String> appConfiguration = bc.appConfiguration();

		String basketHeaderTitleText = commonMethods.stringsReader(basketLocators.BASKET_HEADER_TITLE);

		System.err.println(basketHeaderTitleText);

		String basketWhenTitleText = commonMethods.stringsReader(basketLocators.WHEN_TIME_TITLE_TEXT);

		String basketOrderTypeTitleText = commonMethods.stringsReader(basketLocators.ORDER_TYPE_TITLE_TEXT);

		String takeoutOrderTypePopupText = commonMethods.stringsReader(basketLocators.TAKEOUT_LOCAL_CONFIG_TEXT);

		String curbsideOrderTypePopupText = commonMethods.stringsReader(basketLocators.CURBSIDE_LOCAL_CONFIG_TEXT);

		String deliveryOrderTypePopupText = commonMethods.stringsReader(basketLocators.DELIVERY_LOCAL_CONFIG_TEXT);

		String asapPopupText = commonMethods.stringsReader(basketLocators.ASAP_LOCAL_CONFIG_TEXT);

		String laterPopupText = commonMethods.stringsReader(basketLocators.LATER_LOCAL_CONFIG_TEXT);

		String applyPopupText = commonMethods.stringsReader(basketLocators.ALERT_POPUP_APPLY_BUTTON);

		String cancelPopupText = commonMethods.stringsReader(basketLocators.ALERT_POPUP_CANCEL_BUTTON);

		merchantId = appConfiguration.get(8);

		storeCode = appConfiguration.get(13);

		System.out.println("Basket Screen Appears");

		CommonMethods.switchContext("FLUTTER");
		Thread.sleep(2000);

		FlutterElement buyNowButton = find.byValueKey("item_quantity_screen_buy_now_button");
		buyNowButton.click();

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenBasket = test.createNode("nextGenBasket");

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest = requestingHttp.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse = parameterRequest.get("");

		JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
		if (storeResponse.has("name")) {

			String asapOrder = storeResponse.optString("advance_only");
			String laterOrder = storeResponse.optString("use_eta");

			String deliveryResponse = storeResponse.optString("delivery");
			String deliveryResponseLabelText = storeResponse.optString("delivery_label");

			String takeoutResponse = storeResponse.optString("takeout");
			String takeoutResponseLabelText = storeResponse.optString("takeout_label");

			System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);

			JSONObject curbsideObject = storeResponse.optJSONObject("curbside");
			String curbsideResponse = curbsideObject.optString("en");
			String curbsideResponseLabelText = curbsideObject.optString("label_text");

			lead = storeResponse.optString("lead");

			System.out.println(" the lead time is : " + lead);

			// if (takeoutResponse.equalsIgnoreCase("true") &&
			// curbsideResponse.equalsIgnoreCase("true")
//					&& curbsideResponse.equalsIgnoreCase("true")) {
//
//				if (!takeoutResponseLabelText.isEmpty() && !curbsideResponseLabelText.isEmpty()
//						&& !deliveryResponseLabelText.isEmpty()) {
//
//					System.out.println("Verified all order types are configured");
//
//					commonMethods.switchContext("FLUTTER");
//
//					FlutterElement orderTypeVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT);
//					orderTypeVk.click();
//
//					FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);
//
//					FlutterElement curbsideText1 = find.byValueKey(orderNowLocators.ORDERTYPE_CURBSIDE_VKL);
//
//					FlutterElement deliveryText1 = find.byValueKey(orderNowLocators.ORDERTYPE_DELIVERY_VKL);
//
//					String takeoutActualText = takeoutText1.getText();
//					String curbsideActualText = curbsideText1.getText();
//					String deliveryActualText = deliveryText1.getText();
//
//					boolean takeoutRes = takeoutResponseLabelText.equalsIgnoreCase(takeoutActualText);
//					boolean curbsideRes = curbsideResponseLabelText.equalsIgnoreCase(curbsideActualText);
//					boolean deliveryRes = deliveryResponseLabelText.equalsIgnoreCase(deliveryActualText);
//
//					Assert.assertEquals(takeoutRes, true,
//							"Verified both takeout response and takeout actual text are same");
//					Assert.assertEquals(curbsideRes, true,
//							"Verified both curbside response and curbside actual text are same");
//					Assert.assertEquals(deliveryRes, true,
//							"Verified both delivery response and delivery actual text are same");
//
//					if (takeoutRes == true && curbsideRes == true && deliveryRes == true) {
//
//						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
//								"Verified all order types are displayed");
//
//						nextGenBasket.info(MarkupHelper.createLabel(
//								"nextGenBasket - Verified that Alert appears when user taps the ordertype and all ordertypes are configured and ordertypes response text and actual text are same ",
//								ExtentColor.CYAN));
//
//					} else {
//						
//						nextGenBasket.fail(MarkupHelper.createLabel(
//								"nextGenBasket - Verified that Alert appears when user taps the ordertype and all ordertypes are configured and ordertypes response text and actual text are not matching ",
//								ExtentColor.CYAN));
//						
//					}
//
//				} else if(takeoutResponseLabelText.isEmpty() && !curbsideResponseLabelText.isEmpty()
//						&& !deliveryResponseLabelText.isEmpty()) {
//					
//					
//					
//					
//				}
//
//			}  

			CommonMethods.switchContext("FLUTTER");

			FlutterElement basketHeaderTextVk = find.byValueKey(basketLocators.BASKET_HEADER_TEXT_VKL);

			String basketHeaderText = basketHeaderTextVk.getText();

			Assert.assertEquals(basketHeaderText.toLowerCase(), basketHeaderTitleText.toLowerCase(),
					"Validated the basket header text");

			System.out.println("Validated the basket header text");

			FlutterElement basketOrderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

			String basketOrderTypeText = basketOrderTypeTextVk.getText();

			Assert.assertEquals(basketOrderTypeText, basketOrderTypeTitleText,
					"Validated the basket order type title text");

			System.out.println("Validated the basket order type title text");

			FlutterElement orderTypeVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);
			orderTypeVk.click();

			if (takeoutResponse.equalsIgnoreCase("true")) {

				if (!takeoutResponseLabelText.isEmpty()) {

					System.out.println("Verified takeout order type is configured");

					FlutterElement takeoutText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_TAKEOUT_VKL);

					String takeoutActualText = takeoutText1.getText();

					takeoutRes = takeoutResponseLabelText.equalsIgnoreCase(takeoutActualText);

					Assert.assertEquals(takeoutRes, true,
							"Verified both takeout response and takeout actual text are same");

					if (takeoutRes == true) {

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype response text and actual text are same  ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype response text and actual text are same ",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified takeout order type is displayed");

					} else {

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype response text and actual text are not matching ",
								ExtentColor.CYAN));

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype response text and actual text are not matching  ");

					}

				} else {

					System.out.println("Verified takeout order type is configured");

					FlutterElement takeoutText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_TAKEOUT_VKL);

					String takeoutActualText = takeoutText1.getText();

					takeoutRes = takeoutOrderTypePopupText.equalsIgnoreCase(takeoutActualText);

					Assert.assertEquals(takeoutRes, true,
							"Verified both takeout response and takeout actual text are same");

					if (takeoutRes == true) {

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype local config text and actual text are same  ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype local config text and actual text are same ",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified takeout order type is displayed");

					} else {

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype local config text and actual text are not matching ",
								ExtentColor.CYAN));

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and takeout ordertype is configured and takeout ordertype local config text and actual text are not matching  ");

					}

				}

			} else {

				nextGenBasket.info(MarkupHelper.createLabel(
						"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is not configured in the back end.",
						ExtentColor.CYAN));

				System.out.println(
						" nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is not configured in the back end. ");

			}

			////////////////// curbside //////////////

			if (curbsideResponse.equalsIgnoreCase("true")) {

				System.out.println("prasanna ...Venkat");

				if (!curbsideResponseLabelText.isEmpty()) {

					System.out.println("Verified curbside order type is configured");

					CommonMethods.switchContext("FLUTTER");

					Thread.sleep(2000);

					FlutterElement curbsideText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_CURBSIDE_VKL);

					String curbsideActualText = curbsideText1.getText();

					curbsideRes = curbsideResponseLabelText.equalsIgnoreCase(curbsideActualText);

					Assert.assertEquals(curbsideRes, true,
							"Verified both curbside response and curbside actual text are same");

					if (curbsideRes == true) {

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype response text and actual text are same ",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified curbside order type is displayed ");

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype response text and actual text are same  ");

					} else {

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype response text and actual text are not matching ",
								ExtentColor.CYAN));

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype response text and actual text are not matching  ");

					}

				} else {

					System.out.println("Verified curbside order type is configured");

					FlutterElement curbsideText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_CURBSIDE_VKL);

					String curbsideActualText = curbsideText1.getText();

					curbsideRes = curbsideOrderTypePopupText.equalsIgnoreCase(curbsideActualText);

					Assert.assertEquals(curbsideRes, true,
							"Verified both curbside response and curbside actual text are same");

					if (curbsideRes == true) {

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype local config text and actual text are same ",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified curbside order type is displayed ");

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype local config text and actual text are same  ");

					} else {

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype local config text and actual text are not matching ",
								ExtentColor.CYAN));

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and curbside ordertype is configured and curbside ordertype local config text and actual text are not matching  ");

					}

				}

			} else {

				nextGenBasket.info(MarkupHelper.createLabel(
						"nextGenBasket - Verified that curbside lable is not displayed in the screen where as curbside is not configured in the back end.",
						ExtentColor.CYAN));

				System.out.println(
						" nextGenBasket - Verified that curbside lable is not displayed in the screen where as curbside is not configured in the back end. ");

			}

			//////////////// Delivery ///////////////

			if (deliveryResponse.equalsIgnoreCase("true")) {

				if (!deliveryResponseLabelText.isEmpty()) {

					System.out.println("Verified delivery order type is configured");

					FlutterElement deliveryText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_DELIVERY_VKL);

					String deliveryActualText = deliveryText1.getText();

					deliveryRes = deliveryResponseLabelText.equalsIgnoreCase(deliveryActualText);

					Assert.assertEquals(deliveryRes, true,
							"Verified both delivery response and delivery actual text are same");

					if (deliveryRes == true) {

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype response text and actual text are same  ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype response text and actual text are same ",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified delivery order type is displayed");

					} else {

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype response text and actual text are not matching ",
								ExtentColor.CYAN));

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype response text and actual text are not matching  ");

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified delivery order type is displayed");

					}

				} else {

					System.out.println("Verified delivery order type is configured");

					FlutterElement deliveryText1 = find.byValueKey(OrderNowLocators.ORDERTYPE_DELIVERY_VKL);

					String deliveryActualText = deliveryText1.getText();

					deliveryRes = deliveryOrderTypePopupText.equalsIgnoreCase(deliveryActualText);

					Assert.assertEquals(deliveryRes, true,
							"Verified both delivery response and delivery actual text are same");

					if (deliveryRes == true) {

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype local config text and actual text are same  ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype local config text and actual text are same ",
								ExtentColor.CYAN));

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified delivery order type is displayed");

					} else {

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype local config text and actual text are not matching ",
								ExtentColor.CYAN));

						System.out.println(
								" nextGenBasket - Verified that Alert appears when user taps the ordertype and delivery ordertype is configured and delivery ordertype local config text and actual text are not matching  ");

						nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified delivery order type is displayed");

					}

				}

			} else {

				nextGenBasket.info(MarkupHelper.createLabel(
						"nextGenBasket - Verified that delivery lable is not displayed in the screen where as delivery is not configured in the back end.",
						ExtentColor.CYAN));

				System.out.println(
						" nextGenBasket - Verified that delivery lable is not displayed in the screen where as delivery is not configured in the back end. ");

			}

			FlutterElement cancelButtonVk = find.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

			cancelButtonVk.click();

			FlutterElement defaultOrderTypeTextVk = find.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

			defaultOrderTypeText = defaultOrderTypeTextVk.getText();

			System.out.println("Default Order Type Text is : " + defaultOrderTypeText);

			if (OrderType.toLowerCase().equalsIgnoreCase(defaultOrderTypeText.toLowerCase())) {

				System.out.println(" Verified the selected order type is displayed in the basket deafult order type ");

				if (defaultOrderTypeText.contains("out")) {

					System.out.println(" Verified takeout order type is displayed");

					nextGenBasket.info(MarkupHelper.createLabel(
							"nextGenBasket - Verified the selected takeout order type is displayed in the basket deafult order type field and that ordertype text is : "
									+ defaultOrderTypeText,
							ExtentColor.CYAN));

					nextGenBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
							"Verified the selected takeout order type is displayed in the basket deafult order type ");

					if (curbsideRes == true) {

						Thread.sleep(5000);

						FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

						orderTypeTextVk.click();

						FlutterElement orderTypePopupCurbsideCheckboxVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_CURBSIDE_CHECKBOX_VKL);
						orderTypePopupCurbsideCheckboxVk.click();

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						applyButtonVk.click();

						FlutterElement defaultOrderTypeTextVk1 = find
								.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

						defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

						Assert.assertEquals(defaultOrderTypeText.toLowerCase(), "curbside",
								"Verified curbside is displayed in the default ordertype");

						System.out.println(
								"Verified curbside is displayed in the default ordertype after switch to the curbside ");

						nextGenBasket.info(MarkupHelper.createLabel(
								"nextGenBasket - Verified curbside is displayed in the default ordertype after change the curbside order type and that order type text is "
										+ defaultOrderTypeText,
								ExtentColor.CYAN));

					} else {
						System.out.println(" Verified curbside ordertype is not configured ");

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified curbside order type is not displayed in the basket order type popup where as curbside is not configured",
								ExtentColor.CYAN));
					}

					if (deliveryRes == true) {

						FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

						orderTypeTextVk.click();

						FlutterElement orderTypePopupDeliveryCheckboxVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_DELIVERY_CHECKBOX_VKL);
						orderTypePopupDeliveryCheckboxVk.click();

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						applyButtonVk.click();

						AddressGuest.addresss();

						FlutterElement defaultOrderTypeTextVk1 = find
								.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

						Thread.sleep(5000);

						defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

						Assert.assertEquals(defaultOrderTypeText.toLowerCase(), "delivery",
								"Verified delivery is displayed in the default ordertype");

						System.out.println(
								"Verified delivery is displayed in the default ordertype after switch to the delivery ");

					} else {
						System.out.println(" Verified delivery ordertype is not configured ");

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified delivery order type is not displayed in the basket order type popup where as delivery is not configured",
								ExtentColor.CYAN));

					}

					FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

					orderTypeTextVk.click();

					FlutterElement orderTypePopupDeliveryCheckboxVk = find
							.byValueKey(basketLocators.ORDER_TYPE_POPUP_TAKEOUT_CHECKBOX_VKL);
					orderTypePopupDeliveryCheckboxVk.click();

					FlutterElement applyButtonVk = find.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

					applyButtonVk.click();

				} else {

					System.out.println(" Verified takeout is not displayed ");

				}

				if (defaultOrderTypeText.contains("side")) {

					System.out.println(" Verified curbside order type is displayed");

					if (takeoutRes == true) {

						FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

						orderTypeTextVk.click();

						FlutterElement orderTypePopupTakeoutCheckboxVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_TAKEOUT_CHECKBOX_VKL);
						orderTypePopupTakeoutCheckboxVk.click();

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						applyButtonVk.click();

						FlutterElement defaultOrderTypeTextVk1 = find
								.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

						defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

						Assert.assertEquals(defaultOrderTypeText.toLowerCase(), "takeout",
								"Verified takeout is displayed in the default ordertype");

						System.out.println(
								"Verified takeout is displayed in the default ordertype after switch to the takeout ");

					} else {
						System.out.println(" Verified curbside ordertype is not configured ");

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified curbside order type is not displayed in the basket order type popup where as curbside is not configured",
								ExtentColor.CYAN));
					}

					if (deliveryRes == true) {

						FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

						orderTypeTextVk.click();

						FlutterElement orderTypePopupDeliveryCheckboxVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_DELIVERY_CHECKBOX_VKL);
						orderTypePopupDeliveryCheckboxVk.click();

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						applyButtonVk.click();

						Address.addresss();

						FlutterElement defaultOrderTypeTextVk1 = find
								.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

						defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

						Assert.assertEquals(defaultOrderTypeText.toLowerCase(), "delivery",
								"Verified delivery is displayed in the default ordertype");

						System.out.println(
								"Verified delivery is displayed in the default ordertype after switch to the delivery ");

					} else {
						System.out.println(" Verified delivery ordertype is not configured ");

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified delivery order type is not displayed in the basket order type popup where as delivery is not configured",
								ExtentColor.CYAN));

					}

					FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

					orderTypeTextVk.click();

					FlutterElement orderTypePopupDeliveryCheckboxVk = find
							.byValueKey(basketLocators.ORDER_TYPE_POPUP_CURBSIDE_CHECKBOX_VKL);
					orderTypePopupDeliveryCheckboxVk.click();

					FlutterElement applyButtonVk = find.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

					applyButtonVk.click();

				} else {

					System.out.println(" Verified curbside is not displayed ");

				}

				if (defaultOrderTypeText.contains("very")) {

					System.out.println(" Verified delivery order type is displayed");

					if (takeoutRes == true) {

						FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

						orderTypeTextVk.click();

						FlutterElement orderTypePopupTakeoutCheckboxVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_TAKEOUT_CHECKBOX_VKL);
						orderTypePopupTakeoutCheckboxVk.click();

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						applyButtonVk.click();

						FlutterElement defaultOrderTypeTextVk1 = find
								.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

						defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

						Assert.assertEquals(defaultOrderTypeText.toLowerCase(), "takeout",
								"Verified takeout is displayed in the default ordertype");

						System.out.println(
								"Verified takeout is displayed in the default ordertype after switch to the takeout ");

					} else {
						System.out.println(" Verified takeout ordertype is not configured ");

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified takeout order type is not displayed in the basket order type popup where as takeout is not configured",
								ExtentColor.CYAN));
					}

					if (curbsideRes == true) {

						FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

						orderTypeTextVk.click();

						FlutterElement orderTypePopupCurbsideCheckboxVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_CURBSIDE_CHECKBOX_VKL);
						orderTypePopupCurbsideCheckboxVk.click();

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						applyButtonVk.click();

						FlutterElement defaultOrderTypeTextVk1 = find
								.byValueKey(basketLocators.DEFAULT_ORDER_TYPE_TEXT_VKL);

						defaultOrderTypeText = defaultOrderTypeTextVk1.getText();

						Assert.assertEquals(defaultOrderTypeText.toLowerCase(), "curbside",
								"Verified curbside is displayed in the default ordertype");

						System.out.println(
								"Verified curbside is displayed in the default ordertype after switch to the curbside ");

					} else {
						System.out.println(" Verified curbside ordertype is not configured ");

						nextGenBasket.fail(MarkupHelper.createLabel(
								"nextGenBasket - Verified curbside order type is not displayed in the basket order type popup where as curbside is not configured",
								ExtentColor.CYAN));

					}

					FlutterElement orderTypeTextVk = find.byValueKey(basketLocators.ORDER_TYPE_TEXT_VKL);

					orderTypeTextVk.click();

					FlutterElement orderTypePopupDeliveryCheckboxVk = find
							.byValueKey(basketLocators.ORDER_TYPE_POPUP_DELIVERY_CHECKBOX_VKL);
					orderTypePopupDeliveryCheckboxVk.click();

					FlutterElement applyButtonVk = find.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

					applyButtonVk.click();

				} else {

					System.out.println(" Verified delivery is not displayed ");

				}

			} else {

				System.out.println("The selected order type and Default order type text are not same");

				nextGenBasket.fail(MarkupHelper.createLabel(
						"nextGenBasket - Verified that the selected order type  and Basket default order type text are not same",
						ExtentColor.CYAN));

			}

			FlutterElement basketWhenTextVk = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

			String basketWhenText = basketWhenTextVk.getText();

			basketWhenTextVk.click();

			Assert.assertEquals(basketWhenText, basketWhenTitleText, "Validated the basket when title text");

			if (asapOrder.equalsIgnoreCase("false")) {

				CommonMethods.switchContext("FLUTTER");

				FlutterElement asapLabel1 = find.byValueKey(OrderNowLocators.ORDER_ASAP_TEXT_VKL);

				String asaplabelText = asapLabel1.getText();

				asapLabelComparison = asapPopupText.equalsIgnoreCase(asaplabelText);

				if (asapLabelComparison == true) {

					System.out.println(" Verified asap is displayed ");

				} else {

					System.out.println(" Verified asap is not displayed ");
				}

			} else {

				System.out.println(" Verified asap is not configured ");

			}

			if (laterOrder.equalsIgnoreCase("true")) {

				CommonMethods.switchContext("FLUTTER");

				FlutterElement laterLabel1 = find.byValueKey(OrderNowLocators.ORDER_LATER_TEXT_VKL);

				String laterlabelText = laterLabel1.getText();

				laterLabelComparison = laterPopupText.equalsIgnoreCase(laterlabelText);

				if (laterLabelComparison == true) {

					System.out.println(" Verified later is displayed ");

				} else {

					System.out.println(" Verified later is not displayed ");
				}

			} else {

				System.out.println(" Verified later is not configured ");

			}

			FlutterElement cancelButtonVk1 = find.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

			cancelButtonVk1.click();

			FlutterElement defaultWhenTimeTextVk = find.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

			String defaultWhenTimeText = defaultWhenTimeTextVk.getText();

			if (OrderTime.toLowerCase().contains("asap")) {

				if (defaultWhenTimeText.toLowerCase().contains("asap")) {

					System.out.println(" Verified ASAP time is displayed");

					String asapLeadTime = asapPopupText + " (" + lead + " mins estimated)";

					System.out.println("asap lead time " + asapLeadTime);

					if (defaultWhenTimeText.equalsIgnoreCase(asapLeadTime)) {

						System.out.println(" Verified user selected ASAP field is displayed in the Basket when field ");

						if (laterLabelComparison == true) {

							FlutterElement whenTimeText = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

							whenTimeText.click();

							FlutterElement orderTimeLaterCheckBoxVk = find
									.byValueKey(basketLocators.ORDER_TIME_POPUP_LATER_CHECKBOX_VKL);

							FlutterElement orderTimeLaterVk = find
									.byValueKey(basketLocators.ORDER_TIME_LATER_BUTTON_VKL);

							String orderTimeLaterButtonText = orderTimeLaterVk.getText();

							Assert.assertEquals(orderTimeLaterButtonText, laterPopupText,
									" Validated the later button text ");

							orderTimeLaterCheckBoxVk.click();

							FlutterElement applyButtonVk = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

//							String applyButtonText = applyButtonVk.getText();
//
//							Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

							applyButtonVk.click();

							Basket.ngaDeliveryCapacityManagement();

							FlutterElement defaultWhenTimeTextVk1 = find
									.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

							String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

							if (defaultWhenTimeText1.contains("asap")) {

								///// fail/////

								System.out.println(" The asap is displayed but user switched into later order ");

							} else {

								System.out.println("Verified that the later order is displayed and text is : "
										+ defaultWhenTimeText1);

							}

							FlutterElement whenTimeText1 = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

							whenTimeText1.click();
							FlutterElement orderTimeAsapButtonVk = find
									.byValueKey(basketLocators.ORDER_TIME_ASAP_BUTTON_VKL);
							orderTimeAsapButtonVk.click();

							applyButtonVk.click();

						} else {

							System.out.println(" Verified later is not configured only asap is configured ");

							FlutterElement whenTimeText = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

							whenTimeText.click();

							FlutterElement cancelButtonVk2 = find
									.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

//							String cancelButtonText = cancelButtonVk1.getText();
//
//							Assert.assertEquals(cancelButtonText, cancelPopupText,
//									" Validated the cancel button text ");

							cancelButtonVk2.click();

						}

					}
				} else {

					///// fail////
					System.out.println(
							" Verified later is configured but user selected the asap time but later is displayed");
				}

			} else {

				System.out.println(" Verified later time is displayed");

				SimpleDateFormat inputFormat = new SimpleDateFormat("dd, EEEE, dd MMMM yyyy, 'Today'");

				// Parse the input string to a Date object
				Date parsedDate = inputFormat.parse(formattedDate1);

				// Define the desired output format

				SimpleDateFormat outputFormat1 = new SimpleDateFormat("MMM d", Locale.ENGLISH);

				defaultLaterDate = outputFormat1.format(parsedDate);

				System.out.println("Default Later Date :" + defaultLaterDate);

				String laterTimeSelection = defaultLaterDate + " @ " + CapacityManagement.dropdownSelectedTime;

				System.out.println(" laterTimeSelection is : " + laterTimeSelection);

				FlutterElement defaultWhenTimeTextVk1 = find.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

				String defaultWhenTimeText1 = defaultWhenTimeTextVk1.getText();

				if (defaultWhenTimeText1.equalsIgnoreCase(laterTimeSelection)) {

					System.out
							.println(" Verified user selected later time field is displayed in the Basket when field ");

					if (asapLabelComparison == true) {

						FlutterElement whenTimeText = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

						whenTimeText.click();

						FlutterElement orderTimeAsapButtonVk = find
								.byValueKey(basketLocators.ORDER_TIME_ASAP_BUTTON_VKL);
						orderTimeAsapButtonVk.click();

						String orderTimeAsapButtonText = orderTimeAsapButtonVk.getText();

						Assert.assertEquals(orderTimeAsapButtonText, asapPopupText, " Validated the asap button text ");

						FlutterElement applyButtonVk = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_APPLY_BUTTON_VKL);

						String applyButtonText = applyButtonVk.getText();

						Assert.assertEquals(applyButtonText, applyPopupText, " Validated the apply button text ");

						applyButtonVk.click();

						FlutterElement defaultWhenTimeTextVk2 = find
								.byValueKey(basketLocators.DEFAULT_WHEN_TIME_TEXT_VKL);

						String defaultWhenTimeText2 = defaultWhenTimeTextVk2.getText();

						if (defaultWhenTimeText2.contains("asap")) {

							System.out.println(" The asap order is displayed and text is : " + defaultWhenTimeText2);

						} else {

							///// fail/////

							System.out.println(" The later is displayed but user switched into asap order ");

						}

						FlutterElement whenTimeText1 = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

						whenTimeText1.click();
						FlutterElement orderTimeLaterButtonVk = find
								.byValueKey(basketLocators.ORDER_TIME_LATER_BUTTON_VKL);
						orderTimeLaterButtonVk.click();

						applyButtonVk.click();

					} else {

						System.out.println(" Verified asap is not configured only later is configured ");

						FlutterElement whenTimeText = find.byValueKey(basketLocators.WHEN_TIME_TEXT_VKL);

						whenTimeText.click();

						FlutterElement cancelButtonVk3 = find
								.byValueKey(basketLocators.ORDER_TYPE_POPUP_CANCEL_BUTTON_VKL);

						String cancelButtonText = cancelButtonVk1.getText();

						Assert.assertEquals(cancelButtonText, cancelPopupText, " Validated the cancel button text ");

						cancelButtonVk3.click();

					}
				} else {

					////// fail /////

					System.out.println(
							" Verified asap is configured but user selected the later time but asap is displayed");

				}
			}

		}

	}

	public static void deleteItem(String orderId) throws InterruptedException {

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();
		test = extent.createTest(nameofCurrMethod).assignAuthor(author).assignDevice(deviceName)
				.assignCategory("SignInLogout");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));
		FlutterFinder find = new FlutterFinder(driver);
		ExtentTest basketDeleteItem = test.createNode("BasketDeleteItem");
		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/orders/" + orderId + "?";
		// Construct the query parameters
		Map<String, String> paramsMenuget = new HashMap<>();
		paramsMenuget.put("key", "ce1b6c4a546509ef17557094078169c25aa7b54e");
		RequestSpecification httpRequestMenuget = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameters
		RequestSpecification responseBodyMenuget = httpRequestMenuget.queryParams(paramsMenuget);
		Response responseMenuget = responseBodyMenuget.get("");
		JSONObject orderObject = new JSONObject(responseMenuget.body().asString());
		// Extract total_amount and sub_total from the root level as double
		double totalAmount = orderObject.getDouble("total_amount");
		double subTotalAmount = orderObject.getDouble("subtotal");
		// Print total_amount and sub_total
		System.out.println("Total Amount: " + totalAmount);
		System.out.println("Subtotal: " + subTotalAmount);
		// Check if active_taxes is available at the root level
		if (orderObject.has("active_taxes")) {
			JSONArray activeTaxesRootArray = orderObject.getJSONArray("active_taxes");
			for (int i = 0; i < activeTaxesRootArray.length(); i++) {
				JSONObject taxObject = activeTaxesRootArray.getJSONObject(i);
				String taxName = taxObject.getString("name");
				double taxAmount = taxObject.getDouble("amount");
				// Print tax name and amount
				System.out.println("  Active Tax Name: " + taxName);
				System.out.println("  Active Tax Amount: " + taxAmount);
			}
		} else {
			System.out.println("No active taxes available.");
		}
		try {
			CommonMethods.switchContext("FLUTTER");
			Thread.sleep(5000);
			// Pass only the first index
			FlutterElement itemDeleteButton = find.byValueKey(basketLocators.BASKET_ITEM_DELETE_ICON_VK + 0);
			itemDeleteButton.click();
			System.out.println("Verified that Alert appears when user taps the delete icon in the basket");
			FlutterElement alertdescription = find.byValueKey(basketLocators.BASKET_ITEM_DELETE_ALERT_DESCRIPTION_VK);
			String alertDescriptionDisplayed = alertdescription.getText();
			System.out.println("Verified that configured alert description test : " + ""
					+ "and displayed alert description text  : " + alertDescriptionDisplayed + " are same.");
			basketDeleteItem.info(MarkupHelper.createLabel(
					"basketDeleteItem - Verified that configured alert description test : " + ""
							+ "and displayed alert description text  : " + alertDescriptionDisplayed + " are same.",
					ExtentColor.CYAN));
			FlutterElement alertNoButton = find.byValueKey(basketLocators.BASKET_ITEM_DELETE_NO_VK);
			alertNoButton.click();
			Thread.sleep(5000);
			itemDeleteButton.click();
			FlutterElement alertYesButton = find.byValueKey(basketLocators.BASKET_ITEM_DELETE_YES_VK);
			alertYesButton.click();

//			}
//			Thread.sleep(8000);
//			FlutterElement homeIcon = find.byValueKey(basketLocators.BASKET_HOME_ICON_VK);
//			commonMethods.checkAndClickTheElement(homeIcon);
//			Thread.sleep(3000);
			// SignIn.nextGenSignInWithEmail();

		} catch (Exception e) {
			System.out.println("Verified that alert not appears when user tries to delete the item in the basket.");
			basketDeleteItem.info(MarkupHelper.createLabel(
					"basketDeleteItem - Verified that alert not appears when user tries to delete the item in the basket.",
					ExtentColor.CYAN));
		}

	}

	@Test

	public static void ngaCapacityManagement() throws Exception, IOException {

//		DesiredCapabilities cap = new DesiredCapabilities();
//		cap.setCapability(MobileCapabilityType.DEVICE_NAME, "Samsung");
//		cap.setCapability("platformName", "Android");
//		cap.setCapability(MobileCapabilityType.PLATFORM_VERSION, "12");
//		cap.setCapability(MobileCapabilityType.UDID, "emulator-5554");
//		cap.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
//		cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 10000);
//		cap.setCapability("appPackage", "com.paytronix.nexgenfl");
//		cap.setCapability("appActivity", "com.paytronix.nexgenfl.MainActivity");
//
//		driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);

		Thread.sleep(5000);

		BaseClass bc = new BaseClass();
		List<String> takeoutFlowConfiguration = bc.appConfiguration();

		merchantId = takeoutFlowConfiguration.get(8);

		storeCode = takeoutFlowConfiguration.get(13);

//		Thread.sleep(6000);

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Prasanna Venkatesh").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		ExtentTest nextGenCapacityManagement = test.createNode("nextGenCapacityManagement");

		FlutterFinder find = new FlutterFinder(driver);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest = requestingHttp.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse = parameterRequest.get("");

		JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
		if (storeResponse.has("name")) {

			Restaurant_Id = storeResponse.optString("id");

			System.out.println("Restaurant Id is : " + Restaurant_Id);

			List<String> odFlow = bc.odFlow();

			List<String> appConfiguration = bc.appConfiguration();

			String storeShortCodeNumberConfiguration = appConfiguration.get(4);
			String corpShortCodeNumberConfiguration = appConfiguration.get(5);

			userName = appConfiguration.get(6);
			passWord = appConfiguration.get(7);
			merchantId = appConfiguration.get(8);
			cardTemplateCode = appConfiguration.get(9);
			storeGroupCode = appConfiguration.get(10);
			clientId = appConfiguration.get(11);
			integrationDetail = appConfiguration.get(12);
			storeCode = appConfiguration.get(13);

			userName = appConfiguration.get(6);
			passWord = appConfiguration.get(7);
			merchantId = appConfiguration.get(8);
			cardTemplateCode = appConfiguration.get(9);
			storeGroupCode = appConfiguration.get(10);
			clientId = appConfiguration.get(11);
			integrationDetail = appConfiguration.get(12);

			DateApi = odFlow.get(18);
			Date = odFlow.get(19);
			storeCode = appConfiguration.get(13);
			System.out.println(storeShortCodeNumberConfiguration);
			System.out.println(corpShortCodeNumberConfiguration);

			String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
					+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
					+ cardTemplateCode + "\",\n"
					+ "    \"scope\": \"user_read account_read account_write user_write\",\n" + "    \"merchantId\": \""
					+ merchantId + "\",\n" + "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
					+ "    \"authentication\": \"anonymous\",\n"
					+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
					+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

			RequestSpecification request = io.restassured.RestAssured.given();

			request.contentType(ContentType.JSON);

			request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

			request.body(jsonString);
			Response response = request.post();
			ValidatableResponse validatableResponse = response.then();
			validatableResponse.statusCode(200);
			JSONObject jObj = new JSONObject(response.body().asString());
			accessTokenGen = jObj.optString("access_token");
			printedCardNumberResponse = jObj.optString("printedCardNumber");

			String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n" + "    \"merchant_id\" : "
					+ merchantid + ",\n" + "    \"printed_card_number\" : " + printedCardNumberResponse + " ,\n"
					+ "    \"provider\" : \"px\",\n" + "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

			RequestSpecification requestOrders = io.restassured.RestAssured.given();

			RequestSpecification parameterReq = requestOrders.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

			parameterReq.contentType(ContentType.JSON);

			parameterReq.baseUri("https://opendining.net/api/v1/orders?");

			parameterReq.body(Json1);
			Response responseOrders = parameterReq.post();
			System.out.println(responseOrders.asString());
			ValidatableResponse validatableOrdersResponse = responseOrders.then();
			validatableOrdersResponse.statusCode(200);
			System.out.println(responseOrders.getStatusCode());
			System.out.println(responseOrders.asPrettyString());
			JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
			String orderId = jObjOrders.optString("order_id");

			System.out.println("OrderId is : " + orderId);

			// Construct the query parameters
			Map<String, String> parameterscapacity = new HashMap<>();
			parameterscapacity.put("date", DateApi);
			parameterscapacity.put("type", "takeout");
			parameterscapacity.put("order_id", orderId);
			parameterscapacity.put("key", key);

			RequestSpecification httpReqCapacity = io.restassured.RestAssured.given();
			RequestSpecification responseCapacity = httpReqCapacity.queryParams(parameterscapacity);
			responseCapacity.contentType(ContentType.JSON);
			responseCapacity
					.baseUri("https://opendining.net/api/v1/restaurants/" + Restaurant_Id + "/allowed_order_time?");

			Response responseCap = responseCapacity.post();
//	System.out.println(responseCap.asString());
			ValidatableResponse validatableOrdersRes = responseCap.then();
			System.out.println(responseCap.getStatusCode());
//	System.out.println(responseCap.asPrettyString());
//	System.out.println(responseCap.getBody());

			validatableOrdersRes.statusCode(200);

			JSONObject jObjOrders1 = new JSONObject(responseCap.body().asString());

			if (jObjOrders1.has("times")) {
				JSONArray arr = jObjOrders1.optJSONArray("times");
				if (arr != null && !arr.isEmpty()) {
					for (int i = 0; i < arr.length(); i++) {

						String timesCapacity = arr.get(i).toString();

						System.out.println(timesCapacity);

						int parseInt = Integer.parseInt(timesCapacity);

						Duration d = Duration.ofMinutes(parseInt);

						LocalTime hackUseOfClockAsDuration = LocalTime.MIN.plus(d);

						// Format the LocalTime with AM/PM using DateTimeFormatter
						DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("hh:mm a");

						String output = hackUseOfClockAsDuration.format(formatter1).toUpperCase();

						if (output.startsWith("0")) {

							substring = output.substring(1);

							System.out.println("substring : " + substring);

							list.add(substring);

						} else {
							System.out.println("output: " + output);

							list.add(output);

						}

					}

					int size = list.size();

					String get0 = list.get(0);
					String get1 = list.get(1);
					String get2 = list.get(2);

					System.out.println(get0 + get1 + get2);

					System.out.println(size);

					CommonMethods.switchContext("FLUTTER");

					Thread.sleep(3000);

					FlutterElement datePickerHeaderTextVk = find
							.byValueKey(OrderNowLocators.DATE_PICKER_DESCRIPTION_TEXT_VKL);
					String text = datePickerHeaderTextVk.getText();

					nextGenCapacityManagement.info(MarkupHelper.createLabel(
							"nextGenCapacityManagement - Verified that the Native date picker is displayed and the header text is : "
									+ text,
							ExtentColor.CYAN));

					nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
							" Verified that the Native date picker is displayed ");

					System.out.println("Verified the Native date picker is displayed and the header text is : " + text);

					CommonMethods.switchContext("NATIVE_APP");

					Thread.sleep(5000);

					SimpleDateFormat inputFormat = new SimpleDateFormat("MM/dd/yyyy");

					// Parse the date string into a Date object
					date1 = inputFormat.parse(DateApi);

					// Create a Calendar instance and set it to the parsed date
					Calendar calendar = Calendar.getInstance();
					calendar.setTime(date1);

					// Format the date in the desired output format
					SimpleDateFormat outputFormat = new SimpleDateFormat("d, EEEE, d MMMM yyyy, 'Today'",
							Locale.ENGLISH);
					formattedDate1 = outputFormat.format(date1);

					// Print the formatted date
					System.out.println("formattedDate1 is :::: " + formattedDate1);

					String substring2 = formattedDate1.substring(0, 6);

					System.out.println("substring2 ::: is " + substring2);

//					String join = ",";
//
//					String concat = substring2.concat(join);
//
//					System.out.println(concat);
//
//					Thread.sleep(4000);

					driver.findElement(By.xpath("//*[contains(@content-desc," + "'" + substring2 + "'" + ")]")).click();

					Thread.sleep(4000);

					WebElement laterDateselactionOk = driver.findElement(By.xpath(OrderNowLocators.OK_BUTTON_XPATHL));

					laterDateselactionOk.click();

					nextGenCapacityManagement.info(MarkupHelper.createLabel(
							"nextGenCapacityManagement - Verified that the Store has Capacity Management",
							ExtentColor.CYAN));

					System.out.println("The Store has capacity management ");

					if (size >= 2) {

						Thread.sleep(2000);

						CommonMethods.switchContext("FLUTTER");

						FlutterElement timeTextVk = find.byValueKey(OrderNowLocators.TIME_HEADER_TEXT_VKL);
						String text1 = timeTextVk.getText();

						System.out.println("Verified the app navigate to time dropdown and header text is : " + text1);

						nextGenCapacityManagement.info(MarkupHelper.createLabel(
								"nextGenCapacityManagement - Verified the app navigate to time dropdown and header text is : "
										+ text1,
								ExtentColor.CYAN));

						FlutterElement capacityManagementTimeDropdownVk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
						capacityManagementTimeDropdownVk.click();

						nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified that the store has capacity management and verified time dropdown is appears  ");

						FlutterElement capacityManagementTime_0Vk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_0);
						String capacityManagementTime_0Text = capacityManagementTime_0Vk.getText();

						System.out.println(capacityManagementTime_0Text);

						FlutterElement capacityManagementTime_1Vk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_1);
						String capacityManagementTime_1Text = capacityManagementTime_1Vk.getText();

						System.out.println(capacityManagementTime_1Text);

						FlutterElement capacityManagementTime_2Vk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_2);
						String capacityManagementTime_2Text = capacityManagementTime_2Vk.getText();

						System.out.println(capacityManagementTime_2Text);

						if (get0.equalsIgnoreCase(capacityManagementTime_0Text)
								&& get1.equalsIgnoreCase(capacityManagementTime_1Text)
								&& get2.equalsIgnoreCase(capacityManagementTime_2Text)) {

							Assert.assertEquals(get0, capacityManagementTime_0Text,
									"Verified that the displayed times are matching");
							Assert.assertEquals(get1, capacityManagementTime_1Text,
									"Verified that the displayed times are matching");
							Assert.assertEquals(get2, capacityManagementTime_2Text,
									"Verified that the displayed times are matching");

							System.out.println(" Verified that the displayed times are " + "  "
									+ capacityManagementTime_0Text + " " + capacityManagementTime_1Text + " "
									+ capacityManagementTime_2Text + "  " + " and api times are " + " " + get0 + " "
									+ get1 + " " + get2 + " both times are matching");

							nextGenCapacityManagement
									.info(MarkupHelper.createLabel(
											" Verified that the displayed times are " + "  "
													+ capacityManagementTime_0Text + " " + capacityManagementTime_1Text
													+ " " + capacityManagementTime_2Text + "  " + " and api times are "
													+ " " + get0 + " " + get1 + " " + get2 + " both times are matching",
											ExtentColor.CYAN));

							dropdownSelectedTime = capacityManagementTime_2Vk.getText();

							capacityManagementTime_2Vk.click();

						} else {

							System.out.println("  Verified that the displayed time and api time are not same  ");

							nextGenCapacityManagement.fail(MarkupHelper.createLabel(
									" Verified that the displayed times are " + "  " + capacityManagementTime_0Text
											+ " " + capacityManagementTime_1Text + " " + capacityManagementTime_2Text
											+ "  " + " and api times are " + " " + get0 + " " + get1 + " " + get2
											+ " both times are not matching",
									ExtentColor.CYAN));

							FlutterElement capacityManagementTimeDropdownVk1 = find
									.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);

							dropdownSelectedTime = capacityManagementTimeDropdownVk1.getText();

							capacityManagementTimeDropdownVk1.click();

						}

						CommonMethods.switchContext("NATIVE_APP");

						Thread.sleep(4000);

						WebElement laterTimeSelection = driver
								.findElement(By.xpath(OrderNowLocators.APPLY_BUTTON_XAPTHL));

						laterTimeSelection.click();

						Thread.sleep(4000);

//							WebElement underDevelopmentOk = driver.findElement(
//									By.xpath(orderNowLocators.OK_BUTTON_XPATHL));
//
//							underDevelopmentOk.click();  

						// MenuApi.menuApi(OrderType, OrderTime);

					} else if (size >= 1) {

						CommonMethods.switchContext("FLUTTER");

						FlutterElement timeTextVk = find.byValueKey(OrderNowLocators.TIME_HEADER_TEXT_VKL);
						String text1 = timeTextVk.getText();

						System.out.println("Verified the app navigate to time dropdown and header text is : " + text1);

						nextGenCapacityManagement.info(MarkupHelper.createLabel(
								"nextGenCapacityManagement - Verified the app navigate to time dropdown and header text is : "
										+ text1,
								ExtentColor.CYAN));

						FlutterElement capacityManagementTimeDropdownVk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
						capacityManagementTimeDropdownVk.click();

						nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified that the store has capacity management and verified time dropdown is appears  ");

						FlutterElement capacityManagementTime_0Vk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_0);
						String capacityManagementTime_0Text = capacityManagementTime_0Vk.getText();

						FlutterElement capacityManagementTime_1Vk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_1);
						String capacityManagementTime_1Text = capacityManagementTime_1Vk.getText();

						if (get0.equalsIgnoreCase(capacityManagementTime_0Text)
								&& get1.equalsIgnoreCase(capacityManagementTime_1Text)) {

							Assert.assertEquals(get0, capacityManagementTime_0Text,
									"Verified that the displayed times are matching");
							Assert.assertEquals(get1, capacityManagementTime_1Text,
									"Verified that the displayed times are matching");

							System.out.println(" Verified that the displayed time and api time are same ");

							nextGenCapacityManagement.info(MarkupHelper.createLabel(
									" Verified that the displayed times are " + "  " + capacityManagementTime_0Text
											+ " " + capacityManagementTime_1Text + "  " + " and api times are " + " "
											+ get0 + " " + get1 + "  both times are matching",
									ExtentColor.CYAN));

							dropdownSelectedTime = capacityManagementTime_1Vk.getText();

							capacityManagementTime_1Vk.click();

						} else {

							System.out.println("  Verified that the displayed time and api time are not same  ");

							nextGenCapacityManagement.fail(MarkupHelper.createLabel(
									" Verified that the displayed times are " + "  " + capacityManagementTime_0Text
											+ " " + capacityManagementTime_1Text + "  " + " and api times are " + " "
											+ get0 + " " + get1 + "  both times are not matching",
									ExtentColor.CYAN));

							dropdownSelectedTime = capacityManagementTime_0Vk.getText();

							capacityManagementTime_0Vk.click();
						}

						FlutterElement capacityManagementTimeDropdownVk1 = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
						capacityManagementTimeDropdownVk1.click();

						CommonMethods.switchContext("NATIVE_APP");

						Thread.sleep(4000);

						WebElement laterTimeSelection = driver
								.findElement(By.xpath(OrderNowLocators.APPLY_BUTTON_XAPTHL));

						laterTimeSelection.click();

						Thread.sleep(4000);

//							WebElement underDevelopmentOk = driver.findElement(
//									By.xpath(orderNowLocators.OK_BUTTON_XPATHL));
//
//							underDevelopmentOk.click();   

						// MenuApi.menuApi(OrderType, OrderTime);

					} else {

						CommonMethods.switchContext("FLUTTER");

						FlutterElement timeTextVk = find.byValueKey(OrderNowLocators.TIME_HEADER_TEXT_VKL);
						String text1 = timeTextVk.getText();

						System.out.println("Verified the app navigate to time dropdown and header text is : " + text1);

						nextGenCapacityManagement.info(MarkupHelper.createLabel(
								"nextGenCapacityManagement - Verified the app navigate to time dropdown and header text is : "
										+ text1,
								ExtentColor.CYAN));

						FlutterElement capacityManagementTimeDropdownVk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
						capacityManagementTimeDropdownVk.click();

						nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified that the store has capacity management and verified time dropdown is appears  ");

						FlutterElement capacityManagementTime_0Vk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_0);
						String capacityManagementTime_0Text = capacityManagementTime_0Vk.getText();

						if (get0.equalsIgnoreCase(capacityManagementTime_0Text)) {

							Assert.assertEquals(get0, capacityManagementTime_0Text,
									"Verified that the displayed times are matching");

							System.out.println(" Verified that the displayed time and api time are same ");

							nextGenCapacityManagement.info(MarkupHelper.createLabel(
									" Verified that the displayed times are " + "  " + capacityManagementTime_0Text
											+ "  " + " and api times are " + " " + get0 + "  both times are matching",
									ExtentColor.CYAN));

							dropdownSelectedTime = capacityManagementTime_0Vk.getText();

							capacityManagementTime_0Vk.click();

						} else {

							System.out.println("  Verified that the displayed time and api time are not same  ");

							nextGenCapacityManagement.fail(MarkupHelper.createLabel(
									" Verified that the displayed times are " + "  " + capacityManagementTime_0Text
											+ "  " + " and api times are " + " " + get0 + "  both times are matching",
									ExtentColor.CYAN));

							dropdownSelectedTime = capacityManagementTime_0Vk.getText();

							capacityManagementTime_0Vk.click();
						}

						FlutterElement capacityManagementTimeDropdownVk1 = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
						capacityManagementTimeDropdownVk1.click();

						CommonMethods.switchContext("NATIVE_APP");

						Thread.sleep(4000);

						WebElement laterTimeSelection = driver
								.findElement(By.xpath(OrderNowLocators.APPLY_BUTTON_XAPTHL));

						laterTimeSelection.click();

						Thread.sleep(4000);

//							WebElement underDevelopmentOk = driver.findElement(
//									By.xpath(orderNowLocators.OK_BUTTON_XPATHL));
//
//							underDevelopmentOk.click(); 

						// MenuApi.menuApi(OrderType, OrderTime);

					}

				} else if (arr.isEmpty()) {

					for (int j = 0; j < 4; j++) {

						LocalDate currentDate = LocalDate.now();
						// Print the current date
						System.out.println("Current Date: " + currentDate);
//		        // Change the date dynamically (for example, add 1 day)
						LocalDate modifiedDate = currentDate.plusDays(j);
						// Print the modified date
						System.out.println("Modified Date: " + modifiedDate);
						// Format the date using DateTimeFormatter (optional)
						DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
						DateTimeFormatter formatterNew = DateTimeFormatter.ofPattern("dd/MM/yyyy");
						String formattedDateNew = modifiedDate.format(formatterNew);
						String formattedDate = modifiedDate.format(formatter);
						System.out.println("Formatted Date: " + formattedDate);
						System.out.println("Formatted Date New: " + formattedDateNew);

						// Construct the query parameters
						Map<String, String> parameterscapacity1 = new HashMap<>();
						parameterscapacity1.put("date", formattedDate);
						parameterscapacity1.put("type", "takeout");
						parameterscapacity1.put("order_id", orderId);
						parameterscapacity1.put("key", key);

						RequestSpecification httpReqCapacity1 = io.restassured.RestAssured.given();
						RequestSpecification responseCapacity1 = httpReqCapacity1.queryParams(parameterscapacity1);
						responseCapacity1.contentType(ContentType.JSON);
						responseCapacity1.baseUri(
								"https://opendining.net/api/v1/restaurants/" + Restaurant_Id + "/allowed_order_time?");

						Response responseCap1 = responseCapacity1.post();
//						System.out.println(responseCap.asString());
						ValidatableResponse validatableOrdersRes1 = responseCap1.then();
						System.out.println(responseCap1.getStatusCode());
//						System.out.println(responseCap.asPrettyString());
//						System.out.println(responseCap.getBody());

						validatableOrdersRes1.statusCode(200);

						JSONObject jObjOrders2 = new JSONObject(responseCap1.body().asString());

						if (jObjOrders2.has("times")) {
							JSONArray arr1 = jObjOrders2.optJSONArray("times");
							if (arr1 != null && !arr1.isEmpty()) {
								for (int i = 0; i < arr1.length(); i++) {

									String timesCapacity = arr1.get(i).toString();

									System.out.println(timesCapacity);

									int parseInt = Integer.parseInt(timesCapacity);

									Duration d = Duration.ofMinutes(parseInt);

//									int minutes = d.toMinutesPart() ;  
//									
//									String output = d.toString(); 

									LocalTime hackUseOfClockAsDuration = LocalTime.MIN.plus(d);
//									String output = hackUseOfClockAsDuration.toString(); 

									// Format the LocalTime with AM/PM using
									// DateTimeFormatter
									DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("hh:mm a");
									String output = hackUseOfClockAsDuration.format(formatter1).toUpperCase();

									if (output.startsWith("0")) {

										substring = output.substring(1);

										System.out.println("substring : " + substring);

										list.add(substring);

									} else {
										System.out.println("output: " + output);

										list.add(output);

									}

								}
								String get0 = list.get(0);
								String get1 = list.get(1);
								String get2 = list.get(2);

								int length1 = get2.length();

								System.out.println("length is : " + length1);

								System.out.println(get0 + get1 + get2);

								System.out.println(list.size());

								CommonMethods.switchContext("FLUTTER");

								Thread.sleep(2000);

								FlutterElement datePickerHeaderTextVk = find
										.byValueKey(OrderNowLocators.DATE_PICKER_DESCRIPTION_TEXT_VKL);
								String text = datePickerHeaderTextVk.getText();

								System.out.println(
										"Verified the Native date picker is displayed and the header text is : "
												+ text);

								nextGenCapacityManagement.info(MarkupHelper.createLabel(
										"nextGenCapacityManagement - Verified that the Native date picker is displayed and the header text is : "
												+ text,
										ExtentColor.CYAN));

								nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
										" Verified that the Native date picker is displayed ");

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								SimpleDateFormat inputFormat = new SimpleDateFormat("MM/dd/yyyy");

								// Parse the date string into a Date object
								date1 = inputFormat.parse(formattedDate);

								// Create a Calendar instance and set it to the parsed date
								Calendar calendar = Calendar.getInstance();
								calendar.setTime(date1);

								// Format the date in the desired output format
								SimpleDateFormat outputFormat = new SimpleDateFormat("d, EEEE, d MMMM yyyy, 'Today'",
										Locale.ENGLISH);
								formattedDate1 = outputFormat.format(date1);

								// Print the formatted date
								System.out.println("formattedDate1 is :::: " + formattedDate1);

								String substring3 = formattedDate1.substring(0, 6);

								System.out.println("substring2 ::: is " + substring3);

//								String substring2 = formattedDateNew.substring(0, 2);
//
//								System.out.println(substring2);
//
//								String join = ",";
//
//								String concat = substring2.concat(join);
//
//								System.out.println(concat);

								driver.findElement(By.xpath("//*[contains(@content-desc,'" + substring3 + "'" + ")]"))
										.click();

								Thread.sleep(4000);

								WebElement laterDateselactionOk = driver
										.findElement(By.xpath(OrderNowLocators.OK_BUTTON_XPATHL));

								laterDateselactionOk.click();

								if ((list.size()) >= 2) {

									CommonMethods.switchContext("FLUTTER");

									FlutterElement timeTextVk = find.byValueKey(OrderNowLocators.TIME_HEADER_TEXT_VKL);
									String text1 = timeTextVk.getText();

									System.out.println(
											"Verified the app navigate to time dropdown and header text is : " + text1);

									nextGenCapacityManagement.info(MarkupHelper.createLabel(
											"nextGenCapacityManagement - Verified the app navigate to time dropdown and header text is : "
													+ text1,
											ExtentColor.CYAN));

									FlutterElement capacityManagementTimeDropdownVk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
									capacityManagementTimeDropdownVk.click();

									nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
											"Verified that the store has capacity management and verified time dropdown is appears  ");

									Thread.sleep(4000);

									FlutterElement capacityManagementTime_0Vk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_0);
									String capacityManagementTime_0Text = capacityManagementTime_0Vk.getText();

									FlutterElement capacityManagementTime_1Vk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_1);
									String capacityManagementTime_1Text = capacityManagementTime_1Vk.getText();

									FlutterElement capacityManagementTime_2Vk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_2);
									String capacityManagementTime_2Text = capacityManagementTime_2Vk.getText();

									Thread.sleep(4000);

									if (get0.equalsIgnoreCase(capacityManagementTime_0Text)
											&& get1.equalsIgnoreCase(capacityManagementTime_1Text)
											&& get2.equalsIgnoreCase(capacityManagementTime_2Text)) {

										Assert.assertEquals(get0, capacityManagementTime_0Text,
												"Verified that the displayed times are matching");
										Assert.assertEquals(get1, capacityManagementTime_1Text,
												"Verified that the displayed times are matching");
										Assert.assertEquals(get2, capacityManagementTime_2Text,
												"Verified that the displayed times are matching");

										System.out.println(" Verified that the displayed time and api time are same ");

										nextGenCapacityManagement
												.info(MarkupHelper.createLabel(" Verified that the displayed times are "
														+ "  " + capacityManagementTime_0Text + " "
														+ capacityManagementTime_1Text + " "
														+ capacityManagementTime_2Text + "  " + " and api times are "
														+ " " + get0 + " " + get1 + " " + get2
														+ " both times are matching", ExtentColor.CYAN));

										dropdownSelectedTime = capacityManagementTime_2Vk.getText();

										capacityManagementTime_2Vk.click();

									} else {

										System.out.println(
												"  Verified that the displayed time and api time are not same  ");

										nextGenCapacityManagement
												.fail(MarkupHelper.createLabel(
														" Verified that the displayed times are " + "  "
																+ capacityManagementTime_0Text + " "
																+ capacityManagementTime_1Text + " "
																+ capacityManagementTime_2Text + "  "
																+ " and api times are " + " " + get0 + " " + get1 + " "
																+ get2 + " both times are not matching",
														ExtentColor.CYAN));

										dropdownSelectedTime = capacityManagementTime_0Vk.getText();

										capacityManagementTime_0Vk.click();
									}

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(4000);

									WebElement laterTimeSelection = driver
											.findElement(By.xpath(OrderNowLocators.APPLY_BUTTON_XAPTHL));

									laterTimeSelection.click();

									Thread.sleep(4000);

//										WebElement underDevelopmentOk = driver
//												.findElement(By.xpath(
//														orderNowLocators.OK_BUTTON_XPATHL));
//
//										underDevelopmentOk.click(); 

									// MenuApi.menuApi(OrderType, OrderTime);

									//
								} else if ((list.size()) >= 1) {

									CommonMethods.switchContext("FLUTTER");

									FlutterElement timeTextVk = find.byValueKey(OrderNowLocators.TIME_HEADER_TEXT_VKL);
									String text1 = timeTextVk.getText();

									System.out.println(
											"Verified the app navigate to time dropdown and header text is : " + text1);

									nextGenCapacityManagement.info(MarkupHelper.createLabel(
											"nextGenCapacityManagement - Verified the app navigate to time dropdown and header text is : "
													+ text1,
											ExtentColor.CYAN));

									FlutterElement capacityManagementTimeDropdownVk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
									capacityManagementTimeDropdownVk.click();

									nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
											"Verified that the store has capacity management and verified time dropdown is appears  ");

									FlutterElement capacityManagementTime_0Vk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_0);
									String capacityManagementTime_0Text = capacityManagementTime_0Vk.getText();

									FlutterElement capacityManagementTime_1Vk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_1);
									String capacityManagementTime_1Text = capacityManagementTime_1Vk.getText();
									//
////		
									//
									if (get0.equalsIgnoreCase(capacityManagementTime_0Text)
											&& get1.equalsIgnoreCase(capacityManagementTime_1Text)) {

										Assert.assertEquals(get0, capacityManagementTime_0Text,
												"Verified that the displayed times are matching");
										Assert.assertEquals(get1, capacityManagementTime_1Text,
												"Verified that the displayed times are matching");

										System.out.println(" Verified that the displayed time and api time are same ");

										nextGenCapacityManagement.info(MarkupHelper.createLabel(
												" Verified that the displayed times are " + "  "
														+ capacityManagementTime_0Text + " "
														+ capacityManagementTime_1Text + "  " + " and api times are "
														+ " " + get0 + " " + get1 + "  both times are matching",
												ExtentColor.CYAN));

										dropdownSelectedTime = capacityManagementTime_1Vk.getText();

										capacityManagementTime_1Vk.click();

									} else {

										System.out.println(
												"  Verified that the displayed time and api time are not same  ");

										nextGenCapacityManagement.fail(MarkupHelper.createLabel(
												" Verified that the displayed times are " + "  "
														+ capacityManagementTime_0Text + " "
														+ capacityManagementTime_1Text + "  " + " and api times are "
														+ " " + get0 + " " + get1 + "  both times are matching",
												ExtentColor.CYAN));

										dropdownSelectedTime = capacityManagementTime_1Vk.getText();

										capacityManagementTime_1Vk.click();

									}

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(4000);

									WebElement laterTimeSelection = driver
											.findElement(By.xpath(OrderNowLocators.APPLY_BUTTON_XAPTHL));

									laterTimeSelection.click();

									Thread.sleep(4000);

									// MenuApi.menuApi(OrderType, OrderTime);

//										WebElement underDevelopmentOk = driver
//												.findElement(By.xpath(
//														orderNowLocators.OK_BUTTON_XPATHL));
//
//										underDevelopmentOk.click();

								} else {

									CommonMethods.switchContext("FLUTTER");

									FlutterElement timeTextVk = find.byValueKey(OrderNowLocators.TIME_HEADER_TEXT_VKL);
									String text1 = timeTextVk.getText();

									System.out.println(
											"Verified the app navigate to time dropdown and header text is : " + text1);

									nextGenCapacityManagement.info(MarkupHelper.createLabel(
											"nextGenCapacityManagement - Verified the app navigate to time dropdown and header text is : "
													+ text1,
											ExtentColor.CYAN));

									FlutterElement capacityManagementTimeDropdownVk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
									capacityManagementTimeDropdownVk.click();

									nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
											"Verified that the store has capacity management and verified time dropdown is appears  ");

									FlutterElement capacityManagementTime_0Vk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_0);
									String capacityManagementTime_0Text = capacityManagementTime_0Vk.getText();
									//
////				
									//
									if (get0.equalsIgnoreCase(capacityManagementTime_0Text)) {

										Assert.assertEquals(get0, capacityManagementTime_0Text,
												"Verified that the displayed times are matching");

										System.out.println(" Verified that the displayed time and api time are same ");

										nextGenCapacityManagement.info(MarkupHelper
												.createLabel(" Verified that the displayed times are " + "  "
														+ capacityManagementTime_0Text + "  " + " and api times are "
														+ " " + get0 + "  both times are matching", ExtentColor.CYAN));

										dropdownSelectedTime = capacityManagementTime_0Vk.getText();

										capacityManagementTime_0Vk.click();

									} else {

										System.out.println(
												"  Verified that the displayed time and api time are not same  ");

										nextGenCapacityManagement.fail(MarkupHelper
												.createLabel(" Verified that the displayed times are " + "  "
														+ capacityManagementTime_0Text + "  " + " and api times are "
														+ " " + get0 + "  both times are matching", ExtentColor.CYAN));

										dropdownSelectedTime = capacityManagementTime_0Vk.getText();

										capacityManagementTime_0Vk.click();

									}

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(4000);

									WebElement laterTimeSelection = driver
											.findElement(By.xpath(OrderNowLocators.APPLY_BUTTON_XAPTHL));

									laterTimeSelection.click();

									Thread.sleep(4000);

//										WebElement underDevelopmentOk = driver
//												.findElement(By.xpath(
//														orderNowLocators.OK_BUTTON_XPATHL));
//
//										underDevelopmentOk.click();  

									// MenuApi.menuApi(OrderType, OrderTime);

								}

								break;

							} else {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								SimpleDateFormat inputFormat = new SimpleDateFormat("MM/dd/yyyy");

								// Parse the date string into a Date object
								date1 = inputFormat.parse(formattedDate);

								// Create a Calendar instance and set it to the parsed date
								Calendar calendar = Calendar.getInstance();
								calendar.setTime(date1);

								// Format the date in the desired output format
								SimpleDateFormat outputFormat = new SimpleDateFormat("d, EEEE, d MMMM yyyy, 'Today'",
										Locale.ENGLISH);
								formattedDate1 = outputFormat.format(date1);

								// Print the formatted date
								System.out.println("formattedDate1 is :::: " + formattedDate1);

								String substring3 = formattedDate1.substring(0, 6);

								System.out.println("substring3 ::: is " + substring3);

////								String substring2 = formattedDateNew.substring(0, 2);
////
////								System.out.println(substring2);
////
////								String join = ",";
////
////								String concat = substring2.concat(join);
////
////								System.out.println(concat);
//
								driver.findElement(By.xpath("//*[contains(@content-desc,'" + substring3 + "'" + ")]"))
										.click();

								Thread.sleep(4000);

								WebElement laterDateselactionOk = driver
										.findElement(By.xpath(OrderNowLocators.OK_BUTTON_XPATHL));

								laterDateselactionOk.click();

								CommonMethods.switchContext("FLUTTER");

								FlutterElement changeDateTimePopupDescriptionTextVk = find
										.byValueKey(OrderNowLocators.CHANGE_DATE_TIME_POPUP_DESCRIPTION_TEXT_VKL);

								String changeDateTimePopupDescriptionText = changeDateTimePopupDescriptionTextVk
										.getText();

								nextGenCapacityManagement.info(MarkupHelper.createLabel(
										"nextGenCapacityManagement -  Verified that the store has Capacity Management but have no slots ",
										ExtentColor.CYAN));

								nextGenCapacityManagement.info(MarkupHelper.createLabel(
										"nextGenCapacityManagement - Verified that change date and time popup displayed and popup description text is : "
												+ changeDateTimePopupDescriptionText,
										ExtentColor.CYAN));

								System.out.println(
										"Verified that change date and time popup displayed and popup description text is : "
												+ changeDateTimePopupDescriptionText);

								System.out.println(" Verified the store has Capacity Management but have no slots ");

								nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
										"Verified that the change date and time popup displayed ");

								FlutterElement changeDateTimeVk = find
										.byValueKey(OrderNowLocators.CHANGE_DATE_TIME_POPUP_BUTTON_VKL);

								changeDateTimeVk.click();

							}

						}

						continue;

					}

				} else {

					System.out.println(" null response ");

//					NonCapacityManagement.ngaNonCapacityManagement();

					CommonMethods.switchContext("FLUTTER");

					FlutterElement popupText = find
							.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_NOT_AVAILABLE_DESCRIPTION_VKL);

					String popupText1 = popupText.getText();

					FlutterElement okButton = find
							.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_NOT_AVAILABLE_OK_BUTTON_VKL);

					okButton.click();

					System.out.println(
							"Verified the Store Doesn't have capacity management and the alert popup is displayed and popup description text is : "
									+ popupText1);

					nextGenCapacityManagement.info(MarkupHelper.createLabel(
							"Verified the Store Doesn't have capacity management and the alert popup is displayed and popup description text is : "
									+ popupText1,
							ExtentColor.CYAN));

					nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
							"Verified that the Store Doesn't have capacity management and the alert popup is displayed");

				}
			}

		}

	}

	public static void ngaDeliveryCapacityManagement() throws Exception, IOException {

		BaseClass bc = new BaseClass();
		List<String> takeoutFlowConfiguration = bc.appConfiguration();

		merchantId = takeoutFlowConfiguration.get(8);
		storeCode = takeoutFlowConfiguration.get(13);

		Thread.sleep(3000);

		ExtentTest nextGenCapacityManagement = test.createNode("nextGenCapacityManagement");

		FlutterFinder find = new FlutterFinder(driver);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest = requestingHttp.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse = parameterRequest.get("");

		JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
		if (storeResponse.has("name")) {

			Restaurant_Id = storeResponse.optString("id");

			System.out.println("Restaurant Id is : " + Restaurant_Id);

			List<String> odFlow = bc.odFlow();

			List<String> appConfiguration = bc.appConfiguration();

			String storeShortCodeNumberConfiguration = appConfiguration.get(4);
			String corpShortCodeNumberConfiguration = appConfiguration.get(5);

			userName = appConfiguration.get(6);
			passWord = appConfiguration.get(7);
			merchantId = appConfiguration.get(8);
			cardTemplateCode = appConfiguration.get(9);
			storeGroupCode = appConfiguration.get(10);
			clientId = appConfiguration.get(11);
			integrationDetail = appConfiguration.get(12);
			storeCode = appConfiguration.get(13);

			userName = appConfiguration.get(6);
			passWord = appConfiguration.get(7);
			merchantId = appConfiguration.get(8);
			cardTemplateCode = appConfiguration.get(9);
			storeGroupCode = appConfiguration.get(10);
			clientId = appConfiguration.get(11);
			integrationDetail = appConfiguration.get(12);

			DateApi = odFlow.get(18);
			Date = odFlow.get(19);
			storeCode = appConfiguration.get(13);
			System.out.println(storeShortCodeNumberConfiguration);
			System.out.println(corpShortCodeNumberConfiguration);

			String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
					+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
					+ cardTemplateCode + "\",\n"
					+ "    \"scope\": \"user_read account_read account_write user_write\",\n" + "    \"merchantId\": \""
					+ merchantId + "\",\n" + "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
					+ "    \"authentication\": \"anonymous\",\n"
					+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
					+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

			RequestSpecification request = io.restassured.RestAssured.given();

			request.contentType(ContentType.JSON);

			request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

			request.body(jsonString);
			Response response = request.post();
			ValidatableResponse validatableResponse = response.then();
			validatableResponse.statusCode(200);
			JSONObject jObj = new JSONObject(response.body().asString());
			accessTokenGen = jObj.optString("access_token");
			printedCardNumberResponse = jObj.optString("printedCardNumber");

			String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n" + "    \"merchant_id\" : "
					+ merchantid + ",\n" + "    \"printed_card_number\" : " + printedCardNumberResponse + " ,\n"
					+ "    \"provider\" : \"px\",\n" + "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

			RequestSpecification requestOrders = io.restassured.RestAssured.given();

			RequestSpecification parameterReq = requestOrders.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

			parameterReq.contentType(ContentType.JSON);

			parameterReq.baseUri("https://opendining.net/api/v1/orders?");

			parameterReq.body(Json1);
			Response responseOrders = parameterReq.post();
			System.out.println(responseOrders.asString());
			ValidatableResponse validatableOrdersResponse = responseOrders.then();
			validatableOrdersResponse.statusCode(200);
			System.out.println(responseOrders.getStatusCode());
			System.out.println(responseOrders.asPrettyString());
			JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
			String orderId = jObjOrders.optString("order_id");

			System.out.println("OrderId is : " + orderId);

			// Construct the query parameters
			Map<String, String> parameterscapacity = new HashMap<>();
			parameterscapacity.put("date", DateApi);
			parameterscapacity.put("type", "delivery");
			parameterscapacity.put("order_id", orderId);
			parameterscapacity.put("key", key);

			RequestSpecification httpReqCapacity = io.restassured.RestAssured.given();
			RequestSpecification responseCapacity = httpReqCapacity.queryParams(parameterscapacity);
			responseCapacity.contentType(ContentType.JSON);
			responseCapacity
					.baseUri("https://opendining.net/api/v1/restaurants/" + Restaurant_Id + "/allowed_order_time?");

			Response responseCap = responseCapacity.post();
//		System.out.println(responseCap.asString());
			ValidatableResponse validatableOrdersRes = responseCap.then();
			System.out.println(responseCap.getStatusCode());
//		System.out.println(responseCap.asPrettyString());
//		System.out.println(responseCap.getBody());

			validatableOrdersRes.statusCode(200);

			JSONObject jObjOrders1 = new JSONObject(responseCap.body().asString());

			if (jObjOrders1.has("times")) {
				JSONArray arr = jObjOrders1.optJSONArray("times");
				if (arr != null && !arr.isEmpty()) {
					for (int i = 0; i < arr.length(); i++) {

						String timesCapacity = arr.get(i).toString();

						System.out.println(timesCapacity);

						int parseInt = Integer.parseInt(timesCapacity);

						Duration d = Duration.ofMinutes(parseInt);

						LocalTime hackUseOfClockAsDuration = LocalTime.MIN.plus(d);

						// Format the LocalTime with AM/PM using DateTimeFormatter
						DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("hh:mm a");

						String output = hackUseOfClockAsDuration.format(formatter1).toUpperCase();

						if (output.startsWith("0")) {

							substring = output.substring(1);

							System.out.println("substring : " + substring);

							list.add(substring);

						} else {
							System.out.println("output: " + output);

							list.add(output);

						}

					}

					int size = list.size();

					String get0 = list.get(0);
					String get1 = list.get(1);
					String get2 = list.get(2);

					System.out.println(get0 + get1 + get2);

					System.out.println(size);

					CommonMethods.switchContext("FLUTTER");

					FlutterElement datePickerHeaderTextVk = find
							.byValueKey(OrderNowLocators.DATE_PICKER_DESCRIPTION_TEXT_VKL);
					String text = datePickerHeaderTextVk.getText();

					nextGenCapacityManagement.info(MarkupHelper.createLabel(
							"nextGenCapacityManagement - Verified that the Native date picker is displayed and the header text is : "
									+ text,
							ExtentColor.CYAN));

					nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
							" Verified that the Native date picker is displayed ");

					System.out.println("Verified the Native date picker is displayed and the header text is : " + text);

					CommonMethods.switchContext("NATIVE_APP");

					Thread.sleep(5000);

					SimpleDateFormat inputFormat = new SimpleDateFormat("MM/dd/yyyy");

					// Parse the date string into a Date object
					date1 = inputFormat.parse(DateApi);

					// Create a Calendar instance and set it to the parsed date
					Calendar calendar = Calendar.getInstance();
					calendar.setTime(date1);

					// Format the date in the desired output format
					SimpleDateFormat outputFormat = new SimpleDateFormat("d, EEEE, d MMMM yyyy, 'Today'",
							Locale.ENGLISH);
					formattedDate1 = outputFormat.format(date1);

					// Print the formatted date
					System.out.println("formattedDate1 is :::: " + formattedDate1);

					String substring2 = formattedDate1.substring(0, 6);

					System.out.println("substring2 ::: is " + substring2);

//					String join = ",";
//
//					String concat = substring2.concat(join);
//
//					System.out.println(concat);
//
//					Thread.sleep(4000);

					driver.findElement(By.xpath("//*[contains(@content-desc," + "'" + substring2 + "'" + ")]")).click();

					Thread.sleep(4000);

					WebElement laterDateselactionOk = driver.findElement(By.xpath(OrderNowLocators.OK_BUTTON_XPATHL));

					laterDateselactionOk.click();

					nextGenCapacityManagement.info(MarkupHelper.createLabel(
							"nextGenCapacityManagement - Verified that the Store has Capacity Management",
							ExtentColor.CYAN));

					System.out.println("The Store has capacity management ");
					if (size >= 2) {

						Thread.sleep(2000);

						CommonMethods.switchContext("FLUTTER");

						FlutterElement timeTextVk = find.byValueKey(OrderNowLocators.TIME_HEADER_TEXT_VKL);
						String text1 = timeTextVk.getText();

						System.out.println("Verified the app navigate to time dropdown and header text is : " + text1);

						nextGenCapacityManagement.info(MarkupHelper.createLabel(
								"nextGenCapacityManagement - Verified the app navigate to time dropdown and header text is : "
										+ text1,
								ExtentColor.CYAN));

						FlutterElement capacityManagementTimeDropdownVk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
						capacityManagementTimeDropdownVk.click();

						nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified that the store has capacity management and verified time dropdown is appears  ");

						FlutterElement capacityManagementTime_0Vk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_0);
						String capacityManagementTime_0Text = capacityManagementTime_0Vk.getText();

						System.out.println(capacityManagementTime_0Text);

						FlutterElement capacityManagementTime_1Vk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_1);
						String capacityManagementTime_1Text = capacityManagementTime_1Vk.getText();

						System.out.println(capacityManagementTime_1Text);

						FlutterElement capacityManagementTime_2Vk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_2);
						String capacityManagementTime_2Text = capacityManagementTime_2Vk.getText();

						System.out.println(capacityManagementTime_2Text);

						if (get0.equalsIgnoreCase(capacityManagementTime_0Text)
								&& get1.equalsIgnoreCase(capacityManagementTime_1Text)
								&& get2.equalsIgnoreCase(capacityManagementTime_2Text)) {

							System.out.println(" Verified that the displayed times are " + "  "
									+ capacityManagementTime_0Text + " " + capacityManagementTime_1Text + " "
									+ capacityManagementTime_2Text + "  " + " and api times are " + " " + get0 + " "
									+ get1 + " " + get2 + " both times are matching");

							nextGenCapacityManagement
									.info(MarkupHelper.createLabel(
											" Verified that the displayed times are " + "  "
													+ capacityManagementTime_0Text + " " + capacityManagementTime_1Text
													+ " " + capacityManagementTime_2Text + "  " + " and api times are "
													+ " " + get0 + " " + get1 + " " + get2 + " both times are matching",
											ExtentColor.CYAN));

							capacityManagementTime_2Vk.click();

						} else {

							System.out.println("  Verified that the displayed time and api time are not same  ");

							nextGenCapacityManagement.fail(MarkupHelper.createLabel(
									" Verified that the displayed times are " + "  " + capacityManagementTime_0Text
											+ " " + capacityManagementTime_1Text + " " + capacityManagementTime_2Text
											+ "  " + " and api times are " + " " + get0 + " " + get1 + " " + get2
											+ " both times are not matching",
									ExtentColor.CYAN));

							FlutterElement capacityManagementTimeDropdownVk1 = find
									.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);

							capacityManagementTimeDropdownVk1.click();

						}

						CommonMethods.switchContext("NATIVE_APP");

						Thread.sleep(4000);

						WebElement laterTimeSelection = driver
								.findElement(By.xpath(OrderNowLocators.APPLY_BUTTON_XAPTHL));

						laterTimeSelection.click();

						Thread.sleep(4000);

//						WebElement underDevelopmentOk = driver.findElement(
//								By.xpath(orderNowLocators.OK_BUTTON_XPATHL));
						//
//						underDevelopmentOk.click();  

						// MenuApi.menuApi();

					} else if (size >= 1) {

						CommonMethods.switchContext("FLUTTER");

						FlutterElement timeTextVk = find.byValueKey(OrderNowLocators.TIME_HEADER_TEXT_VKL);
						String text1 = timeTextVk.getText();

						System.out.println("Verified the app navigate to time dropdown and header text is : " + text1);

						nextGenCapacityManagement.info(MarkupHelper.createLabel(
								"nextGenCapacityManagement - Verified the app navigate to time dropdown and header text is : "
										+ text1,
								ExtentColor.CYAN));

						FlutterElement capacityManagementTimeDropdownVk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
						capacityManagementTimeDropdownVk.click();

						nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified that the store has capacity management and verified time dropdown is appears  ");

						FlutterElement capacityManagementTime_0Vk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_0);
						String capacityManagementTime_0Text = capacityManagementTime_0Vk.getText();

						FlutterElement capacityManagementTime_1Vk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_1);
						String capacityManagementTime_1Text = capacityManagementTime_1Vk.getText();

						if (get0.equalsIgnoreCase(capacityManagementTime_0Text)
								&& get1.equalsIgnoreCase(capacityManagementTime_1Text)) {

							System.out.println(" Verified that the displayed time and api time are same ");

							nextGenCapacityManagement.info(MarkupHelper.createLabel(
									" Verified that the displayed times are " + "  " + capacityManagementTime_0Text
											+ " " + capacityManagementTime_1Text + "  " + " and api times are " + " "
											+ get0 + " " + get1 + "  both times are matching",
									ExtentColor.CYAN));

							capacityManagementTime_1Vk.click();

						} else {

							System.out.println("  Verified that the displayed time and api time are not same  ");

							nextGenCapacityManagement.fail(MarkupHelper.createLabel(
									" Verified that the displayed times are " + "  " + capacityManagementTime_0Text
											+ " " + capacityManagementTime_1Text + "  " + " and api times are " + " "
											+ get0 + " " + get1 + "  both times are not matching",
									ExtentColor.CYAN));

							capacityManagementTime_0Vk.click();
						}

						FlutterElement capacityManagementTimeDropdownVk1 = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
						capacityManagementTimeDropdownVk1.click();

						CommonMethods.switchContext("NATIVE_APP");

						Thread.sleep(4000);

						WebElement laterTimeSelection = driver
								.findElement(By.xpath(OrderNowLocators.APPLY_BUTTON_XAPTHL));

						laterTimeSelection.click();

						Thread.sleep(4000);

//						WebElement underDevelopmentOk = driver.findElement(
//								By.xpath(orderNowLocators.OK_BUTTON_XPATHL));
						//
//						underDevelopmentOk.click();   

						// MenuApi.menuApi();

					} else {

						CommonMethods.switchContext("FLUTTER");

						FlutterElement timeTextVk = find.byValueKey(OrderNowLocators.TIME_HEADER_TEXT_VKL);
						String text1 = timeTextVk.getText();

						System.out.println("Verified the app navigate to time dropdown and header text is : " + text1);

						nextGenCapacityManagement.info(MarkupHelper.createLabel(
								"nextGenCapacityManagement - Verified the app navigate to time dropdown and header text is : "
										+ text1,
								ExtentColor.CYAN));

						FlutterElement capacityManagementTimeDropdownVk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
						capacityManagementTimeDropdownVk.click();

						nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
								"Verified that the store has capacity management and verified time dropdown is appears  ");

						FlutterElement capacityManagementTime_0Vk = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_0);
						String capacityManagementTime_0Text = capacityManagementTime_0Vk.getText();

						if (get0.equalsIgnoreCase(capacityManagementTime_0Text)) {

							System.out.println(" Verified that the displayed time and api time are same ");

							nextGenCapacityManagement.info(MarkupHelper.createLabel(
									" Verified that the displayed times are " + "  " + capacityManagementTime_0Text
											+ "  " + " and api times are " + " " + get0 + "  both times are matching",
									ExtentColor.CYAN));

							capacityManagementTime_0Vk.click();

						} else {

							System.out.println("  Verified that the displayed time and api time are not same  ");

							nextGenCapacityManagement.fail(MarkupHelper.createLabel(
									" Verified that the displayed times are " + "  " + capacityManagementTime_0Text
											+ "  " + " and api times are " + " " + get0 + "  both times are matching",
									ExtentColor.CYAN));

							capacityManagementTime_0Vk.click();
						}

						FlutterElement capacityManagementTimeDropdownVk1 = find
								.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
						capacityManagementTimeDropdownVk1.click();

						CommonMethods.switchContext("NATIVE_APP");

						Thread.sleep(4000);

						WebElement laterTimeSelection = driver
								.findElement(By.xpath(OrderNowLocators.APPLY_BUTTON_XAPTHL));

						laterTimeSelection.click();

						Thread.sleep(4000);

//						WebElement underDevelopmentOk = driver.findElement(
//								By.xpath(orderNowLocators.OK_BUTTON_XPATHL));
						//
//						underDevelopmentOk.click(); 

						// MenuApi.menuApi();

					}

				} else if (arr.isEmpty()) {

					for (int j = 0; j < 4; j++) {

						LocalDate currentDate = LocalDate.now();
						// Print the current date
						System.out.println("Current Date: " + currentDate);
//	        // Change the date dynamically (for example, add 1 day)
						LocalDate modifiedDate = currentDate.plusDays(j);
						// Print the modified date
						System.out.println("Modified Date: " + modifiedDate);
						// Format the date using DateTimeFormatter (optional)
						DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
						DateTimeFormatter formatterNew = DateTimeFormatter.ofPattern("dd/MM/yyyy");
						String formattedDateNew = modifiedDate.format(formatterNew);
						String formattedDate = modifiedDate.format(formatter);
						System.out.println("Formatted Date: " + formattedDate);
						System.out.println("Formatted Date New: " + formattedDateNew);

						// Construct the query parameters
						Map<String, String> parameterscapacity1 = new HashMap<>();
						parameterscapacity1.put("date", formattedDate);
						parameterscapacity1.put("type", "delivery");
						parameterscapacity1.put("order_id", orderId);
						parameterscapacity1.put("key", key);

						RequestSpecification httpReqCapacity1 = io.restassured.RestAssured.given();
						RequestSpecification responseCapacity1 = httpReqCapacity1.queryParams(parameterscapacity1);
						responseCapacity1.contentType(ContentType.JSON);
						responseCapacity1.baseUri(
								"https://opendining.net/api/v1/restaurants/" + Restaurant_Id + "/allowed_order_time?");

						Response responseCap1 = responseCapacity1.post();
//					System.out.println(responseCap.asString());
						ValidatableResponse validatableOrdersRes1 = responseCap1.then();
						System.out.println(responseCap1.getStatusCode());
//					System.out.println(responseCap.asPrettyString());
//					System.out.println(responseCap.getBody());

						validatableOrdersRes1.statusCode(200);

						JSONObject jObjOrders2 = new JSONObject(responseCap1.body().asString());

						if (jObjOrders2.has("times")) {
							JSONArray arr1 = jObjOrders2.optJSONArray("times");
							if (arr1 != null && !arr1.isEmpty()) {
								for (int i = 0; i < arr1.length(); i++) {

									String timesCapacity = arr1.get(i).toString();

									System.out.println(timesCapacity);

									int parseInt = Integer.parseInt(timesCapacity);

									Duration d = Duration.ofMinutes(parseInt);

//								int minutes = d.toMinutesPart() ;  
//								
//								String output = d.toString(); 

									LocalTime hackUseOfClockAsDuration = LocalTime.MIN.plus(d);
//								String output = hackUseOfClockAsDuration.toString(); 

									// Format the LocalTime with AM/PM using
									// DateTimeFormatter
									DateTimeFormatter formatter1 = DateTimeFormatter.ofPattern("hh:mm a");
									String output = hackUseOfClockAsDuration.format(formatter1).toUpperCase();

									if (output.startsWith("0")) {

										substring = output.substring(1);

										System.out.println("substring : " + substring);

										list.add(substring);

									} else {
										System.out.println("output: " + output);

										list.add(output);

									}

								}
								String get0 = list.get(0);
								String get1 = list.get(1);
								String get2 = list.get(2);

								int length1 = get2.length();

								System.out.println("length is : " + length1);

								System.out.println(get0 + get1 + get2);

								System.out.println(list.size());

								CommonMethods.switchContext("FLUTTER");

								Thread.sleep(2000);

								FlutterElement datePickerHeaderTextVk = find
										.byValueKey(OrderNowLocators.DATE_PICKER_DESCRIPTION_TEXT_VKL);
								String text = datePickerHeaderTextVk.getText();

								System.out.println(
										"Verified the Native date picker is displayed and the header text is : "
												+ text);

								nextGenCapacityManagement.info(MarkupHelper.createLabel(
										"nextGenCapacityManagement - Verified that the Native date picker is displayed and the header text is : "
												+ text,
										ExtentColor.CYAN));

								nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
										" Verified that the Native date picker is displayed ");

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								SimpleDateFormat inputFormat = new SimpleDateFormat("MM/dd/yyyy");

								// Parse the date string into a Date object
								date1 = inputFormat.parse(formattedDate);

								// Create a Calendar instance and set it to the parsed date
								Calendar calendar = Calendar.getInstance();
								calendar.setTime(date1);

								// Format the date in the desired output format
								SimpleDateFormat outputFormat = new SimpleDateFormat("d, EEEE, d MMMM yyyy, 'Today'",
										Locale.ENGLISH);
								formattedDate1 = outputFormat.format(date1);

								// Print the formatted date
								System.out.println("formattedDate1 is :::: " + formattedDate1);

								String substring3 = formattedDate1.substring(0, 6);

								System.out.println("substring2 ::: is " + substring3);

//								String substring2 = formattedDateNew.substring(0, 2);
//
//								System.out.println(substring2);
//
//								String join = ",";
//
//								String concat = substring2.concat(join);
//
//								System.out.println(concat);

								driver.findElement(By.xpath("//*[contains(@content-desc,'" + substring3 + "'" + ")]"))
										.click();

								Thread.sleep(4000);

								WebElement laterDateselactionOk = driver
										.findElement(By.xpath(OrderNowLocators.OK_BUTTON_XPATHL));

								laterDateselactionOk.click();

								if ((list.size()) >= 2) {

									CommonMethods.switchContext("FLUTTER");

									FlutterElement timeTextVk = find.byValueKey(OrderNowLocators.TIME_HEADER_TEXT_VKL);
									String text1 = timeTextVk.getText();

									System.out.println(
											"Verified the app navigate to time dropdown and header text is : " + text1);

									nextGenCapacityManagement.info(MarkupHelper.createLabel(
											"nextGenCapacityManagement - Verified the app navigate to time dropdown and header text is : "
													+ text1,
											ExtentColor.CYAN));

									FlutterElement capacityManagementTimeDropdownVk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
									capacityManagementTimeDropdownVk.click();

									nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
											"Verified that the store has capacity management and verified time dropdown is appears  ");

									Thread.sleep(4000);

									FlutterElement capacityManagementTime_0Vk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_0);
									String capacityManagementTime_0Text = capacityManagementTime_0Vk.getText();

									FlutterElement capacityManagementTime_1Vk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_1);
									String capacityManagementTime_1Text = capacityManagementTime_1Vk.getText();

									FlutterElement capacityManagementTime_2Vk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_2);
									String capacityManagementTime_2Text = capacityManagementTime_2Vk.getText();

									Thread.sleep(4000);

									if (get0.equalsIgnoreCase(capacityManagementTime_0Text)
											&& get1.equalsIgnoreCase(capacityManagementTime_1Text)
											&& get2.equalsIgnoreCase(capacityManagementTime_2Text)) {

										System.out.println(" Verified that the displayed time and api time are same ");

										nextGenCapacityManagement
												.info(MarkupHelper.createLabel(" Verified that the displayed times are "
														+ "  " + capacityManagementTime_0Text + " "
														+ capacityManagementTime_1Text + " "
														+ capacityManagementTime_2Text + "  " + " and api times are "
														+ " " + get0 + " " + get1 + " " + get2
														+ " both times are matching", ExtentColor.CYAN));

										capacityManagementTime_2Vk.click();

									} else {

										System.out.println(
												"  Verified that the displayed time and api time are not same  ");

										nextGenCapacityManagement
												.fail(MarkupHelper.createLabel(
														" Verified that the displayed times are " + "  "
																+ capacityManagementTime_0Text + " "
																+ capacityManagementTime_1Text + " "
																+ capacityManagementTime_2Text + "  "
																+ " and api times are " + " " + get0 + " " + get1 + " "
																+ get2 + " both times are not matching",
														ExtentColor.CYAN));

										capacityManagementTime_0Vk.click();
									}

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(4000);

									WebElement laterTimeSelection = driver
											.findElement(By.xpath(OrderNowLocators.APPLY_BUTTON_XAPTHL));

									laterTimeSelection.click();

									Thread.sleep(4000);

//									WebElement underDevelopmentOk = driver
//											.findElement(By.xpath(
//													orderNowLocators.OK_BUTTON_XPATHL));
									//
//									underDevelopmentOk.click(); 

									// MenuApi.menuApi();

									//
								} else if ((list.size()) >= 1) {

									CommonMethods.switchContext("FLUTTER");

									FlutterElement timeTextVk = find.byValueKey(OrderNowLocators.TIME_HEADER_TEXT_VKL);
									String text1 = timeTextVk.getText();

									System.out.println(
											"Verified the app navigate to time dropdown and header text is : " + text1);

									nextGenCapacityManagement.info(MarkupHelper.createLabel(
											"nextGenCapacityManagement - Verified the app navigate to time dropdown and header text is : "
													+ text1,
											ExtentColor.CYAN));

									FlutterElement capacityManagementTimeDropdownVk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
									capacityManagementTimeDropdownVk.click();

									nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
											"Verified that the store has capacity management and verified time dropdown is appears  ");

									FlutterElement capacityManagementTime_0Vk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_0);
									String capacityManagementTime_0Text = capacityManagementTime_0Vk.getText();

									FlutterElement capacityManagementTime_1Vk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_1);
									String capacityManagementTime_1Text = capacityManagementTime_1Vk.getText();
									//
////	
									//
									if (get0.equalsIgnoreCase(capacityManagementTime_0Text)
											&& get1.equalsIgnoreCase(capacityManagementTime_1Text)) {

										System.out.println(" Verified that the displayed time and api time are same ");

										nextGenCapacityManagement.info(MarkupHelper.createLabel(
												" Verified that the displayed times are " + "  "
														+ capacityManagementTime_0Text + " "
														+ capacityManagementTime_1Text + "  " + " and api times are "
														+ " " + get0 + " " + get1 + "  both times are matching",
												ExtentColor.CYAN));

										capacityManagementTime_1Vk.click();

									} else {

										System.out.println(
												"  Verified that the displayed time and api time are not same  ");

										nextGenCapacityManagement.fail(MarkupHelper.createLabel(
												" Verified that the displayed times are " + "  "
														+ capacityManagementTime_0Text + " "
														+ capacityManagementTime_1Text + "  " + " and api times are "
														+ " " + get0 + " " + get1 + "  both times are matching",
												ExtentColor.CYAN));

										capacityManagementTime_1Vk.click();

									}

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(4000);

									WebElement laterTimeSelection = driver
											.findElement(By.xpath(OrderNowLocators.APPLY_BUTTON_XAPTHL));

									laterTimeSelection.click();

									Thread.sleep(4000);

									// MenuApi.menuApi();

//									WebElement underDevelopmentOk = driver
//											.findElement(By.xpath(
//													orderNowLocators.OK_BUTTON_XPATHL));
									//
//									underDevelopmentOk.click();

								} else {

									CommonMethods.switchContext("FLUTTER");

									FlutterElement timeTextVk = find.byValueKey(OrderNowLocators.TIME_HEADER_TEXT_VKL);
									String text1 = timeTextVk.getText();

									System.out.println(
											"Verified the app navigate to time dropdown and header text is : " + text1);

									nextGenCapacityManagement.info(MarkupHelper.createLabel(
											"nextGenCapacityManagement - Verified the app navigate to time dropdown and header text is : "
													+ text1,
											ExtentColor.CYAN));

									FlutterElement capacityManagementTimeDropdownVk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_DROPDOWN_VKL);
									capacityManagementTimeDropdownVk.click();

									nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
											"Verified that the store has capacity management and verified time dropdown is appears  ");

									FlutterElement capacityManagementTime_0Vk = find
											.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_TIME_0);
									String capacityManagementTime_0Text = capacityManagementTime_0Vk.getText();
									//
////			
									//
									if (get0.equalsIgnoreCase(capacityManagementTime_0Text)) {

										System.out.println(" Verified that the displayed time and api time are same ");

										nextGenCapacityManagement.info(MarkupHelper
												.createLabel(" Verified that the displayed times are " + "  "
														+ capacityManagementTime_0Text + "  " + " and api times are "
														+ " " + get0 + "  both times are matching", ExtentColor.CYAN));

										capacityManagementTime_0Vk.click();

									} else {

										System.out.println(
												"  Verified that the displayed time and api time are not same  ");

										nextGenCapacityManagement.fail(MarkupHelper
												.createLabel(" Verified that the displayed times are " + "  "
														+ capacityManagementTime_0Text + "  " + " and api times are "
														+ " " + get0 + "  both times are matching", ExtentColor.CYAN));

										capacityManagementTime_0Vk.click();

									}

									CommonMethods.switchContext("NATIVE_APP");

									Thread.sleep(4000);

									WebElement laterTimeSelection = driver
											.findElement(By.xpath(OrderNowLocators.APPLY_BUTTON_XAPTHL));

									laterTimeSelection.click();

									Thread.sleep(4000);

//									WebElement underDevelopmentOk = driver
//											.findElement(By.xpath(
//													orderNowLocators.OK_BUTTON_XPATHL));
									//
//									underDevelopmentOk.click();  

									// MenuApi.menuApi();

								}

								break;

							} else {

								CommonMethods.switchContext("NATIVE_APP");

								Thread.sleep(5000);

								SimpleDateFormat inputFormat = new SimpleDateFormat("MM/dd/yyyy");

								// Parse the date string into a Date object
								date1 = inputFormat.parse(formattedDate);

								// Create a Calendar instance and set it to the parsed date
								Calendar calendar = Calendar.getInstance();
								calendar.setTime(date1);

								// Format the date in the desired output format
								SimpleDateFormat outputFormat = new SimpleDateFormat("d, EEEE, d MMMM yyyy, 'Today'",
										Locale.ENGLISH);
								formattedDate1 = outputFormat.format(date1);

								// Print the formatted date
								System.out.println("formattedDate1 is :::: " + formattedDate1);

								String substring3 = formattedDate1.substring(0, 6);

								System.out.println("substring2 ::: is " + substring3);

//								String substring2 = formattedDateNew.substring(0, 2);
//
//								System.out.println(substring2);
//
//								String join = ",";
//
//								String concat = substring2.concat(join);
//
//								System.out.println(concat);

								driver.findElement(By.xpath("//*[contains(@content-desc,'" + substring3 + "'" + ")]"))
										.click();

								Thread.sleep(4000);

								WebElement laterDateselactionOk = driver
										.findElement(By.xpath(OrderNowLocators.OK_BUTTON_XPATHL));

								laterDateselactionOk.click();

								CommonMethods.switchContext("FLUTTER");

								FlutterElement changeDateTimePopupDescriptionTextVk = find
										.byValueKey(OrderNowLocators.CHANGE_DATE_TIME_POPUP_DESCRIPTION_TEXT_VKL);

								String changeDateTimePopupDescriptionText = changeDateTimePopupDescriptionTextVk
										.getText();

								nextGenCapacityManagement.info(MarkupHelper.createLabel(
										"nextGenCapacityManagement -  Verified that the store has Capacity Management but have no slots ",
										ExtentColor.CYAN));

								nextGenCapacityManagement.info(MarkupHelper.createLabel(
										"nextGenCapacityManagement - Verified that change date and time popup displayed and popup description text is : "
												+ changeDateTimePopupDescriptionText,
										ExtentColor.CYAN));

								System.out.println(
										"Verified that change date and time popup displayed and popup description text is : "
												+ changeDateTimePopupDescriptionText);

								System.out.println(" Verified the store has Capacity Management but have no slots ");

								nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
										"Verified that the change date and time popup displayed ");

								FlutterElement changeDateTimeVk = find
										.byValueKey(OrderNowLocators.CHANGE_DATE_TIME_POPUP_BUTTON_VKL);

								changeDateTimeVk.click();

							}

						}

						continue;

					}

				} else {

//					NonCapacityManagement.ngaDeliveryNonCapacityManagement();

					CommonMethods.switchContext("FLUTTER");

					FlutterElement popupText = find
							.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_NOT_AVAILABLE_DESCRIPTION_VKL);

					String popupText1 = popupText.getText();

					FlutterElement okButton = find
							.byValueKey(OrderNowLocators.CAPACITY_MANAGEMENT_NOT_AVAILABLE_OK_BUTTON_VKL);

					okButton.click();

					System.out.println(
							"Verified the Store Doesn't have capacity management and the alert popup is displayed and popup description text is : "
									+ popupText1);

					nextGenCapacityManagement.info(MarkupHelper.createLabel(
							"Verified the Store Doesn't have capacity management and the alert popup is displayed and popup description text is : "
									+ popupText1,
							ExtentColor.CYAN));

					nextGenCapacityManagement.addScreenCaptureFromBase64String(takeScreenshot(driver),
							"Verified that the Store Doesn't have capacity management and the alert popup is displayed");

				}
			}
		}

	}

}
