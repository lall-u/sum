package com.features;

import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.TimeUnit;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.annotations.Test;

import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.BasketLocators;
import com.locators.LocationLocators;
import com.locators.MenuScreenLocators;
import com.locators.SignInLocators;

import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;
import io.appium.java_client.ios.IOSTouchAction;
import org.openqa.selenium.remote.DesiredCapabilities;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.remote.MobileCapabilityType;
import java.net.URL;

public class ItemList extends BaseClass {

	static CommonMethods commonMethods = new CommonMethods();

	static AppLaunchAndLandingScreen appLaunchAndLandingScreen = new AppLaunchAndLandingScreen();

	static BasketLocators basketLocators = new BasketLocators();

	static String itemNames;

	static String optStringActive;

	static JSONObject optJSONObjectActive;

	static String optStringSubMenuName;

	static String optStringSubMenuIsSoldout;

	static String givenStoreCode = "NGAHS01";

	static String sizeName;

	static String price;

	static int parseIntActive;

	static MenuScreenLocators menuScreenLocators = new MenuScreenLocators();

	static LocationLocators locationLocators = new LocationLocators();

	static SignInLocators signInLocators = new SignInLocators();

	static HolidayHours holidayHours = new HolidayHours();

	static ArrayList<String> subMenuTrue = new ArrayList<>();

	static ArrayList<String> soldOut = new ArrayList<>();

	static ArrayList<String> priceParam = new ArrayList<>();

	static ArrayList<String> sizeParam = new ArrayList<>();

	static ArrayList<String> subMenuPrice = new ArrayList<>();

	static ArrayList<String> hierarchyTypes = new ArrayList<>();

	static int subMenuTrueSize;

	static int optJSONArraySubMenuItemsLength;

	static String optStringAlcohol;

	static JSONArray optJSONArrayPrices;

	static JSONArray optJSONArrayOptionGroups;

	static JSONArray optJSONArrayPizzaGroups;

	static long optJSONArrayOptionGroupsObjectMax;

	static String optStringWholeGroupName;

	static String optStringLeftGroupName;

	static String optStringRightGroupName;

	static String optStringAllowDoublingPizza;

	static ArrayList<String> menuLists = new ArrayList<>();

	static int menuLength;

	static JSONArray optJSONArrayMenu;

	static String storeNamesMenu;

	static int parseIntActivee;

	static ArrayList<String> optJSONArrayOptionGroupsObjectNameTrue = new ArrayList<>();

	static String sizePrize;

	static String optStringTobacco;

	static String stringSubMenuName;

	static String subMenuIsSoldout;

	static String stringActive;

	static JSONArray jsonArrayOptionGroups;

	static JSONObject jsonObjectActive;

	static String optionGroupName;

	static JSONObject optionGroupObject;

	static ArrayList<String> optionGroup = new ArrayList<>();

	static ArrayList<String> isDefaultList = new ArrayList<>();

	static ArrayList<String> descriptionList = new ArrayList<>();

	static ArrayList<String> toppingsNameMatch = new ArrayList<>();

	static boolean storeInfoScreenTitleTextContainsVk;

	static boolean menuScreenTitle1TextContainsVk;

	static JSONArray subMenuPoints;

	static String left;

	static String right;

	static JSONArray optJSONArrayOptionGroupsObjectSizeConditions;

	static String specialInstructionsEnabled;

	static String specialInstructionsNotesLimit;

	static String specialInstructionsEnabledSubString;

	static String specialInstructionsNotesLabel;

	static ArrayList<String> levelsList = new ArrayList<>();

	static Map<String, Integer> MultiOptions = new HashMap<>();

	static Map<String, Integer> prices = new HashMap<>();

	static ArrayList<String> formParamsList = new ArrayList<>();

	// static Map<String, Integer> formParams = new HashMap<>();
	static Map<String, String> formParams = new HashMap<>();

	static String TakeoutOrderType = "Take out";
	static String CurbsideOrderType = "curbside";
	static String DeliveryrderType = "delivery";

	static String ASAPOrderTime = "ASAP";
	static String LaterOrderTime = "later";
	static String storeCode;

	static String orderId;
	static String Restaurant_Id;

	static JSONObject replaceColonsWithEquals;

	/**
	 * @Class_Name MenuApi
	 * @Method_Name menuApi
	 * @Description Contains code to execute the test scripts for Menu, sub menu &
	 *              Item quantity screen
	 * @return void
	 * @author Lalith Kishore Ravi
	 * @throws Exception
	 */
	@Test
	public static void itemList() throws Exception {

		BaseClass bc = new BaseClass();
		List<String> odFlowconfig = bc.odFlow();

		List<String> takeoutFlowConfiguration = bc.appConfiguration();
		String localConfigTakeoutText = takeoutFlowConfiguration.get(36);

		storeCode = takeoutFlowConfiguration.get(13);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/NGAHS01?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		RequestSpecification requestingHttp = io.restassured.RestAssured.given();

		RequestSpecification parameterRequest = requestingHttp.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse = parameterRequest.get("");

		JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
		if (storeResponse.has("name")) {

			String asapOrder = storeResponse.optString("advance_only");
			String laterOrder = storeResponse.optString("use_eta");

			String takeoutResponse = storeResponse.optString("takeout");
			String takeoutResponseLabelText = storeResponse.optString("takeout_label");

			JSONObject curbsideObject = storeResponse.optJSONObject("curbside");
			String curbsideResponse = curbsideObject.optString("en");
			String curbsideResponseLabelText = curbsideObject.optString("label_text");

			Restaurant_Id = storeResponse.optString("id");

			List<String> appConfiguration = bc.appConfiguration();

			String storeShortCodeNumberConfiguration = appConfiguration.get(4);
			String corpShortCodeNumberConfiguration = appConfiguration.get(5);

			String userName = appConfiguration.get(6);
			String passWord = appConfiguration.get(7);
			String merchantId = appConfiguration.get(8);
			String cardTemplateCode = appConfiguration.get(9);
			String storeGroupCode = appConfiguration.get(10);
			String clientId = appConfiguration.get(11);
			String integrationDetail = appConfiguration.get(12);
			storeCode = appConfiguration.get(13);

			userName = appConfiguration.get(6);
			passWord = appConfiguration.get(7);
			merchantId = appConfiguration.get(8);
			cardTemplateCode = appConfiguration.get(9);
			storeGroupCode = appConfiguration.get(10);
			clientId = appConfiguration.get(11);
			integrationDetail = appConfiguration.get(12);

			storeCode = appConfiguration.get(13);

			String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
					+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
					+ cardTemplateCode + "\",\n"
					+ "    \"scope\": \"user_read account_read account_write user_write\",\n" + "    \"merchantId\": \""
					+ merchantId + "\",\n" + "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
					+ "    \"authentication\": \"anonymous\",\n"
					+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
					+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

			RequestSpecification request = io.restassured.RestAssured.given();

			request.contentType(ContentType.JSON);

			request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

			request.body(jsonString);
			Response response = request.post();
			ValidatableResponse validatableResponse = response.then();
			validatableResponse.statusCode(200);
			JSONObject jObj = new JSONObject(response.body().asString());
			String accessTokenGen = jObj.optString("access_token");
			String printedCardNumberResponse = jObj.optString("printedCardNumber");

			String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n" + "    \"merchant_id\" : "
					+ merchantId + ",\n" + "    \"printed_card_number\" : " + printedCardNumberResponse + " ,\n"
					+ "    \"provider\" : \"px\",\n" + "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

			RequestSpecification requestOrders = io.restassured.RestAssured.given();

			RequestSpecification parameterReq = requestOrders.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

			parameterReq.contentType(ContentType.JSON);

			parameterReq.baseUri("https://opendining.net/api/v1/orders?");

			parameterReq.body(Json1);
			Response responseOrders = parameterReq.post();
			ValidatableResponse validatableOrdersResponse = responseOrders.then();

			validatableOrdersResponse.statusCode(200);
			JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
			orderId = jObjOrders.optString("order_id");

		}

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/NGAHS01/menu/tier?";
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");
		paramsMenu.put("include_combo", "false");
		paramsMenu.put("merchant_id", "60019");
		paramsMenu.put("provider", "px");
//		paramsMenu.put("order_date", "11-01-2024");
//		paramsMenu.put("eta", "5.00 am");

		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();
		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");
		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

		JSONArray optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		DesiredCapabilities caps = new DesiredCapabilities();
		caps.setCapability(MobileCapabilityType.DEVICE_NAME, "iPhone X NGA");
		caps.setCapability(MobileCapabilityType.PLATFORM_NAME, "iOS");
		caps.setCapability(MobileCapabilityType.PLATFORM_VERSION, "15.7.1");
		caps.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
		caps.setCapability("bundleId", "com.paytronix.nexgenfl");
		caps.setCapability(MobileCapabilityType.UDID, "FB544EF5-4FD7-45B9-B525-3C746378DE95");
		caps.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, "300");

		driver = new IOSDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), caps);
		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		Thread.sleep(60000);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/"
				+ givenStoreCode + "?";
		Map<String, String> paramsRestaurant = new HashMap<>();
		paramsRestaurant.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

		RequestSpecification httpRequestRestaurant = io.restassured.RestAssured.given();

		RequestSpecification responseBodyRestaurant = httpRequestRestaurant.queryParams(paramsRestaurant);

		Response responseRestaurant = responseBodyRestaurant.get("");

		JSONObject jObjectRestaurant = new JSONObject(responseRestaurant.body().asString());

		specialInstructionsEnabled = jObjectRestaurant.optString("allow_notes");

		specialInstructionsNotesLabel = jObjectRestaurant.optString("notes_label");

		specialInstructionsEnabledSubString = specialInstructionsNotesLabel.substring(0, 20).toLowerCase();

		specialInstructionsNotesLimit = jObjectRestaurant.optString("notes_limit");

		FlutterFinder find = new FlutterFinder(driver);

		FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

		String menuScreenTitleTextVk = menuScreenTitleVk.getText();

		for (int t = 0; t < 1; t++) {

			JSONObject menuItem = optJSONArrayMenu.getJSONObject(t);

			JSONArray itemsArray = menuItem.getJSONArray("items");

			for (int i = 0; i < itemsArray.length(); i++) {

				JSONObject item = itemsArray.getJSONObject(i);

				String itemName = item.optString("name");

				String canOrder = item.optString("can_order");

				String active = item.optString("active");

				int parseInt = Integer.parseInt(active);

				System.out.println(itemName);

				if (canOrder == "true" && parseInt == 1) {

					String id = item.optString("id");

					String idParam = "id=" + id;

					formParamsList.add(idParam);

					String itemNameReplace = itemName.replace(" ", "_").toLowerCase();

					if (itemName.contains(menuScreenTitleTextVk)) {

						JSONArray prices = item.getJSONArray("prices");

						if (prices.length() > 1) {

							scrollSize();

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(3000);

							FlutterElement optionGroupObjectNameSelectedOptionsVk = find
									.byValueKey(itemNameReplace + "_size_selected_options");

							String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
									.getText();

							String trimmedOption = optionGroupObjectNameSelectedOptionsTextVk.trim();
							if (!trimmedOption.isEmpty()) {
								String optionKey = "options[" + trimmedOption + "][]";

								formParamsList.add(optionKey);

							} else {

								System.out.println(" Size array name is lesser than 1 ");
							}
						}

						JSONArray optionGroupsArray = item.getJSONArray("option_groups");

						MultiOptions.clear();

						for (int j = 0; j < optionGroupsArray.length(); j++) {

							JSONObject optionGroup = optionGroupsArray.getJSONObject(j);

							for (int m = 0; m < optionGroupsArray.length(); m++) {

								JSONObject optionGroup1 = optionGroupsArray.getJSONObject(m);

								JSONArray optJSONArray = optionGroup1.optJSONArray("options");

								for (int k = 0; k < optJSONArray.length(); k++) {

									JSONObject optJSONObject = optJSONArray.optJSONObject(k);

									String optString = optJSONObject.optString("name");

									MultiOptions.put(optString, k);

								}

							}

							String optionGroupName = optionGroup.optString("name");

							String optionGroupNameReplace = optionGroupName.replace(" ", "_").toLowerCase();

							String quantities = optionGroup.optString("quantities");

							String multiSelect = optionGroup.optString("multiselect");

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(3000);

							By targetElementLocator = By.xpath(
									"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
											+ "'" + optionGroupName.toLowerCase() + "'" + ")]");

							boolean elementFound = false;

							while (!elementFound) {

								try {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(3000);

									WebElement element = driver.findElement(targetElementLocator);

									if (element.isDisplayed()) {

										IOSTouchAction IOSTouchAction4 = new IOSTouchAction(driver);
										IOSTouchAction4.press(PointOption.point(150, 650))
												.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
												.moveTo(PointOption.point(150, 550)).release().perform();

										String elementName = element.getText();

										if (elementName.contains(optionGroupName)) {

											if (quantities == "true") {

												// have to give increment decrement logic

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(3000);

												FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace + "_"
														+ optionGroupNameReplace + "_selected_options");

												String selectedOptionsTextVk = selectedOptionsVk.getText();

												if (selectedOptionsTextVk.contains(",")) {
													String[] split = selectedOptionsTextVk.split(",");
													for (int i2 = 0; i2 < split.length; i2++) {
														String trimmedOption2 = split[i2].trim();
														if (!trimmedOption2.isEmpty()) {
															String optionKey = "options[" + optionGroupName + "]["
																	+ trimmedOption2 + "]";
															formParamsList.add(optionKey);
														}
													}
												}

											} else if (quantities == "false") {

												if (multiSelect == "true") {

													// have to give the multiple check box logic

													commonMethods.switchContext("FLUTTER");

													Thread.sleep(3000);

													FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace
															+ "_" + optionGroupNameReplace + "_selected_options");

													String selectedOptionsTextVk = selectedOptionsVk.getText();

													if (selectedOptionsTextVk.contains(",")) {
														String[] split = selectedOptionsTextVk.split(",");
														for (int i2 = 0; i2 < split.length; i2++) {
															String trimmedOptions = split[i2].trim();
															if (!trimmedOptions.isEmpty()) {

																if (optionGroup.has("option_levels")) {

																	JSONObject optionLevels = optionGroup
																			.optJSONObject("option_levels");

																	JSONArray levels = optionLevels
																			.optJSONArray("levels");

																	if (levels != null) {

																		for (int b = 0; b < levels.length(); b++) {

																			JSONObject jsonObjectLevelss = levels
																					.optJSONObject(b);

																			String previousLevelName = null;

																			if (jsonObjectLevelss.has("is_default")
																					&& jsonObjectLevelss
																							.getBoolean("is_default")) {
																				break;
																			}

																			previousLevelName = jsonObjectLevelss
																					.optString("name");

																			String optionKey = "option_levels["
																					+ optionGroupName + "]["
																					+ trimmedOptions + "][]="
																					+ previousLevelName;

																			formParamsList.add(optionKey);

																			String optionKey1 = "options["
																					+ optionGroupName + "]["
																					+ MultiOptions.get(trimmedOptions)
																					+ "]=" + trimmedOptions;

																			formParamsList.add(optionKey1);

																		}

																	} else {

																		System.out.println(
																				" levels is null for the option levels : ");

																	}

																} else {
																	String optionKey = "options[" + optionGroupName
																			+ "][" + MultiOptions.get(trimmedOptions)
																			+ "]=" + trimmedOptions;

																	formParamsList.add(optionKey);

																}

															}
														}

													}

												} else if (multiSelect == "false") {

													// have to give the single check box logic

													commonMethods.switchContext("FLUTTER");

													Thread.sleep(3000);

													FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace
															+ "_" + optionGroupNameReplace + "_selected_options");

													String selectedOptionsTextVk = selectedOptionsVk.getText();

													String trimmedOptionSingle = selectedOptionsTextVk.trim();

													if (!trimmedOptionSingle.isEmpty()) {

														if (optionGroup.has("option_levels")) {

															JSONObject optionLevels = optionGroup
																	.optJSONObject("option_levels");

															JSONArray levels = optionLevels.optJSONArray("levels");

															if (levels != null) {

																for (int b = 0; b < levels.length(); b++) {

																	JSONObject jsonObjectLevelss = levels
																			.optJSONObject(b);

																	String previousLevelName = null;

																	if (jsonObjectLevelss.has("is_default")
																			&& jsonObjectLevelss
																					.getBoolean("is_default")) {
																		break;
																	}

																	previousLevelName = jsonObjectLevelss
																			.optString("name");

																	String optionKey = "option_levels["
																			+ optionGroupName + "]["
																			+ trimmedOptionSingle + "][]:"
																			+ previousLevelName;

																	formParamsList.add(optionKey);

																	String optionKey1 = "options[" + optionGroupName
																			+ "]["
																			+ MultiOptions.get(trimmedOptionSingle)
																			+ "]=" + trimmedOptionSingle;

																	formParamsList.add(optionKey1);

																}

															} else {

																System.out.println(
																		" levels is null for the option levels : ");

															}

														} else {
															String optionKey = "options[" + trimmedOptionSingle + "][]="
																	+ trimmedOptionSingle;

															formParamsList.add(optionKey);
														}
													}

												}

											}

										}
										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(3000);

										try {
											elementFound = true;

										} catch (Exception clickException) {
											IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
											IOSTouchAction.press(PointOption.point(150, 650))
													.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
													.moveTo(PointOption.point(150, 550)).release().perform();
										}

									} else {
										IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
										IOSTouchAction.press(PointOption.point(150, 650))
												.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
												.moveTo(PointOption.point(150, 550)).release().perform();
									}
								} catch (NoSuchElementException e2) {
									IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
									IOSTouchAction.press(PointOption.point(150, 650))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
											.moveTo(PointOption.point(150, 550)).release().perform();
								}

							}

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(1200);

							scrollOptionsGroupUpAndClick(optionGroupName);

						}

						if (specialInstructionsEnabled == "true") {

							scrollOptionsGroupDown(specialInstructionsEnabledSubString);

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(3000);

							FlutterElement itemQuantitySpecialInstructionsTitleVk = find
									.byValueKey(menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TITLE_VK);

							String itemQuantitySpecialInstructionsTitleTextVk = itemQuantitySpecialInstructionsTitleVk
									.getText();

							String numericOnly = itemQuantitySpecialInstructionsTitleTextVk.replaceAll("[^0-9]", "");

							int parseLong = Integer.parseInt(numericOnly);

							FlutterElement itemQuantitySpecialInstructionsTextFieldVk = find
									.byValueKey(menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TEXT_FIELD_VK);

							String testText = "This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field,This is a text which is to find the length of the special instructions text field ";

							itemQuantitySpecialInstructionsTextFieldVk.sendKeys(testText);

							String substring = testText.substring(0, parseLong);

							String notes = "notes=";

							String finalString = notes + substring;

							formParamsList.add(finalString);

							FlutterElement itemQuantityScreenQuantityCountVk = find
									.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

							String itemQuantityScreenQuantityCountTextVk = itemQuantityScreenQuantityCountVk.getText();

							int itemQuantityScreenQuantityCountIntVk = Integer
									.parseInt(itemQuantityScreenQuantityCountTextVk);

							String quantity = "quantity=" + itemQuantityScreenQuantityCountIntVk;

							formParamsList.add(quantity);

						}

						else {

							String string = "notes=";

							String emptyString = "";

							String finalString = string + emptyString;

							formParamsList.add(finalString);

							FlutterElement itemQuantityScreenQuantityCountVk = find
									.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

							String itemQuantityScreenQuantityCountTextVk = itemQuantityScreenQuantityCountVk.getText();

							int itemQuantityScreenQuantityCountIntVk = Integer
									.parseInt(itemQuantityScreenQuantityCountTextVk);

							String quantity = "quantity=" + itemQuantityScreenQuantityCountIntVk;

							formParamsList.add(quantity);
						}

					}

				}
			}

			JSONObject jsonObject = convertListToJsonObject(formParamsList);

			replaceColonsWithEquals = replaceColonsWithEquals(jsonObject);

		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(3000);

		find.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_BUY_NOW_BUTTON_VK).click();

		Thread.sleep(10000);

		// Create RequestSpecification with base URI and query parameter
		RequestSpecification requestOrders123 = RestAssured.given()
				.baseUri("https://opendining.net/api/v1/orders/" + orderId + "/items?")
				.queryParam("key", "ce1b6c4a546509ef17557094078169c25aa7b54e").contentType(ContentType.URLENC);

		// Create form parameters
//		formParams.put("Size", " ");
		// formParams.put("notes", " ");
//		formParams.put("quantity", 1);
		// formParams.put("options[Right side][0]", "chicken");
		// formParams.put("id", "60c3921affd125f6597aa1e7");

		// Use formParams method to set the form parameters

//		convertJsonObjectToMap(jObjectRestaurant)
//
		requestOrders123.formParams(convertJsonObjectToMap(replaceColonsWithEquals));

		Response responseOrders1 = requestOrders123.post();

		System.out.println("the responseee is" + responseOrders1.asString());

		ValidatableResponse validatableOrdersResponse123 = responseOrders1.then();
		System.out.println("the responseees is" + validatableOrdersResponse123);

		validatableOrdersResponse123.statusCode(200);
		System.out.println(responseOrders1.getStatusCode());
		System.out.println(responseOrders1.asPrettyString());

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/orders/" + orderId + "?";
		// Construct the query parameters
		Map<String, String> paramsMenuget = new HashMap<>();
		paramsMenuget.put("key", "ce1b6c4a546509ef17557094078169c25aa7b54e");
		RequestSpecification httpRequestMenuget = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameters
		RequestSpecification responseBodyMenuget = httpRequestMenuget.queryParams(paramsMenuget);
		Response responseMenuget = responseBodyMenuget.get("");
		JSONObject orderObject = new JSONObject(responseMenuget.body().asString());
		// Access the "items" array within the order
		JSONArray itemsArray = orderObject.getJSONArray("items");
		// Iterate through each item in the "items" array
		for (int i8 = 0; i8 < itemsArray.length(); i8++) {
			JSONObject itemObject = itemsArray.getJSONObject(i8);
			String itemNamegett = itemObject.getString("name");
			String itemQuantity = itemObject.getString("quantity");
			String sizeName = itemObject.getString("size");
			double totalPrice = itemObject.getDouble("total_price");
			System.out.println(itemQuantity + " x " + itemNamegett);
			System.out.println(sizeName + " + " + (totalPrice));
			JSONArray optionsArray = itemObject.getJSONArray("options");
			for (int j = 0; j < optionsArray.length(); j++) {
				JSONObject optionObject = optionsArray.getJSONObject(j);
				String optionName = optionObject.getString("name");
				String addOnName = optionObject.getString("option_name");
				String groupName = optionObject.getString("group_name");
				double basePrice = optionObject.optDouble("base_price", 0);
				double price = optionObject.optDouble("price", 0);
				int quantity = optionObject.getInt("quantity");
				if (price > 0) {
					String formattedPrice = String.format("%.2f", price);
					optionName += " (" + formattedPrice + ")";
				}
				// Print or use the modified optionName as needed
				System.out.println(" +" + optionName);
				System.out.println(" the quantity is " + quantity);
				// System.out.println(" +" + groupName);
			}
		}
	}

	private static boolean containsTopping(JSONObject item, String pizzaTopping) {

		JSONArray optionGroups = item.getJSONArray("option_groups");

		// Loop through option_groups and check if pizzaTopping matches the "name"
		for (int k = 0; k < optionGroups.length(); k++) {
			JSONObject optionGroup = optionGroups.getJSONObject(k);
			String options = optionGroup.optString("name");
			if (options.equals(pizzaTopping)) {
				return true;
			}

		}

		return false;
	}

	private static int getCountOfCommas(String input) {
		int count = 0;

		for (int i = 0; i < input.length(); i++) {
			if (input.charAt(i) == ',') {
				count++;
			}
		}

		return count;
	}

	private static void itemQuantityScroll() throws InterruptedException {
		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		IOSTouchAction IOSTouchAction2 = new IOSTouchAction(driver);
		IOSTouchAction2.press(PointOption.point(200, 700)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
				.moveTo(PointOption.point(200, 600)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(3000);

	}

	private static void optionGroupsObjectScroll() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1200);

		IOSTouchAction IOSTouchAction3 = new IOSTouchAction(driver);
		IOSTouchAction3.press(PointOption.point(200, 700)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
				.moveTo(PointOption.point(200, 500)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static void subMenuScroll() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1200);

		IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
		IOSTouchAction1.press(PointOption.point(200, 600)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
				.moveTo(PointOption.point(200, 530)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static void menuScroll() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1200);

		IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
		IOSTouchAction1.press(PointOption.point(200, 600)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
				.moveTo(PointOption.point(200, 550)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static void scrollSize() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1200);

		By targetElementLocator = By
				.xpath("//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'size'" + ")]");
		boolean elementFound = false;
		while (!elementFound) {
			try {

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(1200);

				WebElement element = driver.findElement(targetElementLocator);

				if (element.isDisplayed()) {
					IOSTouchAction IOSTouchAction4 = new IOSTouchAction(driver);
					IOSTouchAction4.press(PointOption.point(150, 550))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 650)).release().perform();

					try {
						elementFound = true;

					} catch (Exception clickException) {
						IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
						IOSTouchAction.press(PointOption.point(150, 550))
								.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
								.moveTo(PointOption.point(150, 650)).release().perform();
					}
				} else {
					IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
					IOSTouchAction.press(PointOption.point(150, 550))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 650)).release().perform();
				}
			} catch (NoSuchElementException e2) {
				IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
				IOSTouchAction.press(PointOption.point(150, 550))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3))).moveTo(PointOption.point(150, 650))
						.release().perform();
			}

		}
		if (!elementFound) {
		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static void scrollOptionsGroupUpAndClick(String input) throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		By targetElementLocator = By
				.xpath("//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'" + input.toLowerCase() + "'" + ")]");
		boolean elementFound = false;
		while (!elementFound) {
			try {
				WebElement element = driver.findElement(targetElementLocator);

				if (element.isDisplayed()) {
					IOSTouchAction IOSTouchAction4 = new IOSTouchAction(driver);
					IOSTouchAction4.press(PointOption.point(150, 550))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 650)).release().perform();

					try {
						elementFound = true;

					} catch (Exception clickException) {
						IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
						IOSTouchAction.press(PointOption.point(150, 550))
								.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
								.moveTo(PointOption.point(150, 650)).release().perform();
					}
				} else {
					IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
					IOSTouchAction.press(PointOption.point(150, 550))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 650)).release().perform();
				}
			} catch (NoSuchElementException e2) {
				IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
				IOSTouchAction.press(PointOption.point(150, 550))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3))).moveTo(PointOption.point(150, 650))
						.release().perform();
			}

		}
		if (!elementFound) {
		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static JSONObject replaceColonsWithEquals(JSONObject jsonObject) {
		JSONObject modifiedJsonObject = new JSONObject();

		for (String key : jsonObject.keySet()) {
			String modifiedKey = key.replace(":", "=");
			modifiedJsonObject.put(modifiedKey, jsonObject.get(key));
		}

		return modifiedJsonObject;
	}

	private static JSONObject convertListToJsonObject(List<String> list) {
		JSONObject jsonObject = new JSONObject();
		for (String item : list) {
			int equalsIndex = item.indexOf('=');
			if (equalsIndex > 0) {
				String key = item.substring(0, equalsIndex).trim();
				String value = item.substring(equalsIndex + 1).trim();
				jsonObject.put(key, value);
			}
		}
		return jsonObject;
	}

	private static Map<String, Object> convertJsonObjectToMap(JSONObject jsonObject) {
		Map<String, Object> map = new HashMap<>();

		for (String key : jsonObject.keySet()) {
			map.put(key, jsonObject.get(key));
		}

		return map;
	}

	private static void scrollOptionsGroupDown(String input) throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		By targetElementLocator = By
				.xpath("//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'" + input.toLowerCase() + "'" + ")]");
		boolean elementFound = false;
		while (!elementFound) {
			try {
				WebElement element = driver.findElement(targetElementLocator);

				if (element.isDisplayed()) {
					IOSTouchAction IOSTouchAction4 = new IOSTouchAction(driver);
					IOSTouchAction4.press(PointOption.point(150, 650))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 550)).release().perform();

					try {
						elementFound = true;

					} catch (Exception clickException) {
						IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
						IOSTouchAction.press(PointOption.point(150, 650))
								.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
								.moveTo(PointOption.point(150, 550)).release().perform();
					}
				} else {
					IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
					IOSTouchAction.press(PointOption.point(150, 650))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 550)).release().perform();
				}
			} catch (NoSuchElementException e2) {
				IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
				IOSTouchAction.press(PointOption.point(150, 650))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3))).moveTo(PointOption.point(150, 550))
						.release().perform();
			}

		}
		if (!elementFound) {
		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}
}