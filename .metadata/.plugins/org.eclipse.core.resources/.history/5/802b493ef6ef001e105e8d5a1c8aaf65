package com.features;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.TimeUnit;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.BasketLocators;
import com.locators.LocationLocators;
import com.locators.MenuScreenLocators;
import com.locators.SignInLocators;

import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;
import io.appium.java_client.ios.IOSTouchAction;
import org.openqa.selenium.remote.DesiredCapabilities;

import io.appium.java_client.TouchAction;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.remote.MobileCapabilityType;
import java.net.URL;

public class Size extends BaseClass {

	static CommonMethods commonMethods = new CommonMethods();

	static MenuScreenLocators menuScreenLocators = new MenuScreenLocators();

	static long optJSONArrayOptionGroupsObjectMax;

	static ArrayList<String> levelsList = new ArrayList<>();

	static String screenTitleText;

	/**
	 * @Class_Name MenuApi
	 * @Method_Name menuApi
	 * @Description Contains code to execute the test scripts for Menu, sub menu &
	 *              Item quantity screen
	 * @return void
	 * @author Lalith Kishore Ravi
	 * @throws Exception
	 */
	@Test
	public static void size() throws Exception {

		BaseClass bc = new BaseClass();

		List<String> givenStringCode = bc.appConfiguration();

		String storeCode = givenStringCode.get(13);

		String merchantId = givenStringCode.get(8);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "/menu/tier?";
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");
		paramsMenu.put("include_combo", "true");
		paramsMenu.put("merchant_id", merchantId);
		paramsMenu.put("provider", "px");
//		paramsMenu.put("order_date", "11-01-2024");
//		paramsMenu.put("eta", "5.00 am");

		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();

		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");

		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

		JSONArray optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		ExtentTest nextGenSize001 = test.createNode("nextGenSize001");

		FlutterFinder find = new FlutterFinder(driver);

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(2000);

		FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

		String menuScreenTitleTextVk = menuScreenTitleVk.getText();

		if (menuScreenTitleTextVk.length() > 22) {

			screenTitleText = menuScreenTitleTextVk.substring(0, 20);
		}

		else if (menuScreenTitleTextVk.length() < 22) {

			screenTitleText = menuScreenTitleTextVk;

		}

		System.out.println("the title " + screenTitleText);

		for (int t = 0; t < optJSONArrayMenu.length(); t++) {

			JSONObject menuItem = optJSONArrayMenu.getJSONObject(t);

			String name = menuItem.optString("name");

			String canOrder = menuItem.optString("can_order");

			System.out.println(" the name : " + name);

			JSONArray itemsArray = menuItem.getJSONArray("items");

			for (int j = 0; j < itemsArray.length(); j++) {

				JSONObject item = itemsArray.getJSONObject(j);

				String itemName = item.optString("name");

				String active = item.optString("active");

				int parseInt = Integer.parseInt(active);

				System.out.println(itemName);

				if (canOrder == "true" && parseInt == 1) {

					String itemNameReplace = itemName.replace(" ", "_").toLowerCase();

					if (itemName.contains(screenTitleText)) {

						if (item.has("prices")) {

							JSONArray prices = item.getJSONArray("prices");

							if (prices.length() > 1) {

								int pricesLength = prices.length();

								if (prices.length() > 1) {

									System.out.println(" size is available ");

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(1000);

									FlutterElement optionGroupNameVk = find.byValueKey(itemNameReplace + "_size");

									String optionGroupNameTextVk = optionGroupNameVk.getText();

									System.out.println(" The size title is : " + optionGroupNameTextVk);

									String optionGroupNameTextReplaceVk = optionGroupNameTextVk.toLowerCase()
											.replace(" ", "_");

									optionGroupNameVk.click();

									for (int d = 0; d < prices.length(); d++) {

										JSONObject optJSONObjectPricesList = prices.optJSONObject(d);

										String optStringSizeName = optJSONObjectPricesList.optString("name");

										String optStringSizeNameReplace = optStringSizeName.toLowerCase().replace(" ",
												"_");

										String optStringSizePrice = optJSONObjectPricesList.optString("price");

										Double optStringSizePriceDouble = Double.parseDouble(optStringSizePrice);

										String optStringIsDefault = optJSONObjectPricesList.optString("is_default");

										if (optStringIsDefault.equalsIgnoreCase("false")) {

											nextGenSize001.info(MarkupHelper.createLabel("The size option named : "
													+ optStringSizeName
													+ " is not set to default and it's not shown in the list of it and not selected in the UI ",
													ExtentColor.CYAN));
											System.out.println("The size option named : " + optStringSizeName
													+ " is not set to default and it's not shown in the list of it and not selected in the UI ");
										}

										else {

											nextGenSize001.info(MarkupHelper.createLabel(" The size option named : "
													+ optStringSizeName
													+ " is set to default and it's shown in the list of it and selected in the UI ",
													ExtentColor.CYAN));
											System.out.println(" The size option named : " + optStringSizeName
													+ " is set to default and it's shown in the list of it and selected in the UI ");

											FlutterElement optStringSizePriceCheckboxUI = find
													.byValueKey(itemNameReplace + "_size_" + optStringSizeNameReplace
															+ "_checkbox");

											optStringSizePriceCheckboxUI.click();
										}

										Double optStringSizePriceInt = Double.parseDouble(optStringSizePrice);

										FlutterElement optStringSizeNameUI = find
												.byValueKey(itemNameReplace + "_size_" + optStringSizeNameReplace);

										String optStringSizeNameTextUI = optStringSizeNameUI.getText();

										Assert.assertEquals(optStringSizeName, optStringSizeNameTextUI,
												"Validated that the option name from API is : " + optStringSizeName
														+ " and the option name in UI is : " + optStringSizeNameTextUI
														+ " is same ");

										nextGenSize001.addScreenCaptureFromBase64String(takeScreenshot(driver),
												"Optional group name : " + optionGroupNameTextVk + " Screenshot ");

										if (optStringSizePriceDouble > 0) {

											FlutterElement optStringSizePriceUI = find
													.byValueKey(itemNameReplace + "_size_" + optStringSizeNameReplace
															+ "_" + optStringSizePriceDouble);

											String optStringSizePriceTextUI = optStringSizePriceUI.getText();

											String optStringSizePriceTextReplaceUI = optStringSizePriceTextUI
													.replace("+", "").replace(" ", "");

											Double optStringSizePriceTextReplaceDoubleUI = Double
													.parseDouble(optStringSizePriceTextReplaceUI);

											Assert.assertEquals(optStringSizePriceInt,
													optStringSizePriceTextReplaceDoubleUI,
													"Validated that the option price from API is : "
															+ optStringSizePrice + " and the option price in UI is : "
															+ optStringSizePriceTextUI + " is same ");

											nextGenSize001.info(MarkupHelper.createLabel(
													"Validated that the option price from API is : "
															+ optStringSizePrice + " and the option price in UI is : "
															+ optStringSizePriceTextUI + " is same ",
													ExtentColor.CYAN));
											System.out.println("Validated that the option price from API is : "
													+ optStringSizePrice + " and the option price in UI is : "
													+ optStringSizePriceTextUI + " is same ");

											FlutterElement optStringSizePriceCheckboxUI = find
													.byValueKey(itemNameReplace + "_size_" + optStringSizeNameReplace
															+ "_checkbox");

											optStringSizePriceCheckboxUI.click();

										} else {

											FlutterElement optStringSizePriceCheckboxUI = find
													.byValueKey(itemNameReplace + "_size_" + optStringSizeNameReplace
															+ "_checkbox");

											optStringSizePriceCheckboxUI.click();
										}

										if (item.has("option_groups")) {

											JSONArray optionGroupsArray = item.optJSONArray("option_groups");

											for (int p = 0; p < optionGroupsArray.length(); p++) {

												JSONObject optionGroupsArrayObjectt = optionGroupsArray
														.getJSONObject(p);

												if (optionGroupsArrayObjectt.has("size_conditions")) {

													System.out.println(" It have size conditions");

													JSONArray optionGroupsArrayObject = optionGroupsArrayObjectt
															.getJSONArray("size_conditions");

													if (optionGroupsArrayObject != null
															&& optionGroupsArrayObject.length() > 0) {

														JSONArray pricesArray = item.getJSONArray("prices");

														for (int z = 0; z < optionGroupsArrayObject.length(); z++) {

															String sizeConditionParam = optionGroupsArrayObject
																	.getString(z);

															if (optStringSizeNameTextUI
																	.equalsIgnoreCase(sizeConditionParam)) {

																for (int l = 0; l < pricesArray.length(); l++) {

																	JSONObject price = pricesArray.getJSONObject(l);

																	String priceName = price.getString("name");

																	System.out.println("lalith3");

																	if (priceName.equals(sizeConditionParam)) {

																		if (optionGroupsArray != null) {

																			JSONObject optJSONArrayOptionGroupsObject = optionGroupsArray
																					.optJSONObject(p);

																			String optJSONArrayOptionGroupsObjectName = optJSONArrayOptionGroupsObject
																					.optString("name");

																			String optJSONArrayOptionGroupsObjectNameReplace = optJSONArrayOptionGroupsObjectName
																					.replace(" ", "_").toLowerCase();

																			String optJSONArrayOptionGroupsObjectMultiSelect = optJSONArrayOptionGroupsObject
																					.optString("multiselect");

																			long optJSONArrayOptionGroupsObjectMin = optJSONArrayOptionGroupsObject
																					.getLong("min");

																			String optJSONArrayOptionGroupsObjectQuantities = optJSONArrayOptionGroupsObject
																					.optString("quantities");

																			if (optJSONArrayOptionGroupsObject
																					.has("max")) {

																				optJSONArrayOptionGroupsObjectMax = optJSONArrayOptionGroupsObject
																						.getLong("max");

																			} else {

																				optJSONArrayOptionGroupsObjectMax = 999;
																			}

																			FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																					.byValueKey(itemNameReplace + "_"
																							+ optJSONArrayOptionGroupsObjectNameReplace);

																			String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																					.getText();

																			Assert.assertEquals(
																					optJSONArrayOptionGroupsObjectName,
																					optJSONArrayOptionGroupsObjectNameTextUI,
																					"Validated that the option group name from API is : "
																							+ optJSONArrayOptionGroupsObjectName
																							+ " and the option group name in UI is : "
																							+ optJSONArrayOptionGroupsObjectNameTextUI
																							+ " is same ");

																			nextGenSize001
																					.info(MarkupHelper.createLabel(
																							"Validated that the option group name from API is : "
																									+ optJSONArrayOptionGroupsObjectName
																									+ " and the option group name in UI is : "
																									+ optJSONArrayOptionGroupsObjectNameTextUI
																									+ " is same ",
																							ExtentColor.CYAN));
																			System.out.println(
																					"Validated that the option group name from API is : "
																							+ optJSONArrayOptionGroupsObjectName
																							+ " and the option group name in UI is : "
																							+ optJSONArrayOptionGroupsObjectNameTextUI
																							+ " is same ");

																			nextGenSize001
																					.addScreenCaptureFromBase64String(
																							takeScreenshot(driver),
																							"Optional group name : "
																									+ optJSONArrayOptionGroupsObjectNameTextUI
																									+ " Screenshot ");

																			scrollOptionsGroupDown(
																					optJSONArrayOptionGroupsObjectName);

																			optJSONArrayOptionGroupsObjectNameUI
																					.click();

																			if (optJSONArrayOptionGroupsObject
																					.has("options")) {

																				JSONArray optJSONArrayOptions = optJSONArrayOptionGroupsObject
																						.optJSONArray("options");

																				if (optJSONArrayOptions != null) {

																					int optJSONArrayOptionsLength = optJSONArrayOptions
																							.length();

																					for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																						JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																								.optJSONObject(f);

																						String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																								.optString("name");

																						String optJSONArrayOptionsObjectNameReplace = optJSONArrayOptionsObjectName
																								.toLowerCase()
																								.replace(" ", "_");

																						String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																								.optString("price");

																						String optStringIsDisabled = optJSONArrayOptionsObject
																								.optString(
																										"is_disabled");

																						String optStringIsDefaultSizeOpt = optJSONArrayOptionsObject
																								.optString(
																										"is_default");

																						itemQuantityScroll();

																						if (optStringIsDefaultSizeOpt
																								.equalsIgnoreCase(
																										"false")) {

																							nextGenSize001
																									.info(MarkupHelper
																											.createLabel(
																													" The option name :  "
																															+ optJSONArrayOptionsObjectName
																															+ " is not set to default and it's not shown in the list of the option group name : "
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ " and it's not auto selected in the UI ",
																													ExtentColor.CYAN));
																							System.out.println(
																									" The option name :  "
																											+ optJSONArrayOptionsObjectName
																											+ " is not set to default and it's not shown in the list of the option group name : "
																											+ optJSONArrayOptionGroupsObjectNameReplace
																											+ " and it's not auto selected in the UI ");

																						} else {

																							nextGenSize001
																									.info(MarkupHelper
																											.createLabel(
																													" The option name :  "
																															+ optJSONArrayOptionsObjectName
																															+ " is set to default and it's shown in the list of the option group name : "
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ " and it's auto selected in the UI ",
																													ExtentColor.CYAN));

																							System.out.println(
																									" The option name :  "
																											+ optJSONArrayOptionsObjectName
																											+ " is set to default and it's shown in the list of the option group name : "
																											+ optJSONArrayOptionGroupsObjectNameReplace
																											+ " and it's auto selected in the UI ");

																							FlutterElement optionGroupObjectNameCheckboxVk = find
																									.byValueKey(
																											itemNameReplace
																													+ "_"
																													+ optJSONArrayOptionGroupsObjectNameReplace
																													+ "_"
																													+ optJSONArrayOptionsObjectNameReplace
																													+ "_checkbox");

																							optionGroupObjectNameCheckboxVk
																									.click();

																						}

																						if (optStringIsDisabled
																								.equalsIgnoreCase(
																										"false")) {

																							FlutterElement optionGroupObjectNameVk = find
																									.byValueKey(
																											itemNameReplace
																													+ "_"
																													+ optJSONArrayOptionGroupsObjectNameReplace
																													+ "_"
																													+ optJSONArrayOptionsObjectNameReplace);

																							String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																									.getText();

																							Assert.assertEquals(
																									optionGroupObjectNameTextVk,
																									optJSONArrayOptionsObjectName,
																									"Validated that the option group name from API is : "
																											+ optionGroupObjectNameTextVk
																											+ " and the option group name in UI is : "
																											+ optJSONArrayOptionsObjectName
																											+ " in the index : "
																											+ f
																											+ " is same ");

																							nextGenSize001
																									.info(MarkupHelper
																											.createLabel(
																													"Validated that the option group name from API is : "
																															+ optionGroupObjectNameTextVk
																															+ " and the option group name in UI is : "
																															+ optJSONArrayOptionsObjectName
																															+ " in the index : "
																															+ f
																															+ " is same ",
																													ExtentColor.CYAN));

																							double optJSONArrayOptionsObjectPriceInt = Double
																									.parseDouble(
																											optJSONArrayOptionsObjectPrice);

																							double value = Double
																									.parseDouble(
																											optJSONArrayOptionsObjectPrice);

																							DecimalFormat decimalFormat = new DecimalFormat(
																									"0.00");

																							String optJSONArrayOptionsObjectPriceConcat = decimalFormat
																									.format(value);

																							if (optJSONArrayOptionsObjectPriceInt > 0) {

																								FlutterElement optionGroupObjectPriceVk = find
																										.byValueKey(
																												itemNameReplace
																														+ "_"
																														+ optJSONArrayOptionGroupsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectNameReplace
																														+ "_"
																														+ optJSONArrayOptionsObjectPrice);

																								String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																										.getText();

																								String optionGroupObjectPriceTextReplaceVk = optionGroupObjectPriceTextVk
																										.replace("+",
																												"")
																										.replace(" ",
																												"");

																								Assert.assertEquals(
																										optionGroupObjectPriceTextReplaceVk,
																										optJSONArrayOptionsObjectPriceConcat
																												.replace(
																														" ",
																														""),
																										"Validated that the option group price from API is : "
																												+ optionGroupObjectPriceTextReplaceVk
																												+ " and the option group price in UI is : "
																												+ optJSONArrayOptionsObjectPriceConcat
																												+ "in the index : "
																												+ f
																												+ " is same ");

																								nextGenSize001.info(
																										MarkupHelper
																												.createLabel(
																														"Validated that the option group price from API is : "
																																+ optionGroupObjectPriceTextReplaceVk
																																+ " and the option group price in UI is : "
																																+ optJSONArrayOptionsObjectPriceConcat
																																+ "in the index : "
																																+ f
																																+ " is same ",
																														ExtentColor.CYAN));
																								System.out.println(
																										"Validated that the option group price from API is : "
																												+ optionGroupObjectPriceTextReplaceVk
																												+ " and the option group price in UI is : "
																												+ optJSONArrayOptionsObjectPriceConcat
																												+ "in the index : "
																												+ f
																												+ " is same ");

																							}

																							else {

																								nextGenSize001.info(
																										MarkupHelper
																												.createLabel(
																														" Price is null for the item : "
																																+ itemNameReplace
																																+ " of option groups : "
																																+ optJSONArrayOptionGroupsObjectNameReplace
																																+ " of the option : "
																																+ optJSONArrayOptionsObjectNameReplace,
																														ExtentColor.CYAN));
																								System.out.println(
																										" Price is null for the item : "
																												+ itemNameReplace
																												+ " of option groups : "
																												+ optJSONArrayOptionGroupsObjectNameReplace
																												+ " of the option : "
																												+ optJSONArrayOptionsObjectNameReplace);
																							}

																							if ((optJSONArrayOptionGroupsObjectMin == 0
																									|| !optJSONArrayOptionGroupsObject
																											.has("min"))
																									&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																								nextGenSize001.info(
																										MarkupHelper
																												.createLabel(
																														" The option : "
																																+ optionGroupObjectNameTextVk
																																+ " is single selection optional field",
																														ExtentColor.CYAN));
																								System.out.println(
																										" The option : "
																												+ optionGroupObjectNameTextVk
																												+ " is single selection optional field");

																								if (optJSONArrayOptionGroupsObjectQuantities == "true"
																										&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" The option : "
																																	+ optionGroupObjectNameTextVk
																																	+ " is single selection optional field has increment decrement button ",
																															ExtentColor.CYAN));

																									System.out.println(
																											" The option : "
																													+ optionGroupObjectNameTextVk
																													+ " is single selection optional field has increment decrement button ");

																									FlutterElement optionCountVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountTextVk = optionCountVk
																											.getText();

																									long optionCountLongVk = Long
																											.parseLong(
																													optionCountTextVk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" Before tapping increment and decrement button the count is : "
																																	+ optionCountLongVk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" Before tapping increment and decrement button the count is : "
																													+ optionCountLongVk);

																									if (optStringIsDefault
																											.equalsIgnoreCase(
																													"true")) {

																										FlutterElement optionGroupObjectNameIncrementButtonVk = find
																												.byValueKey(
																														itemNameReplace
																																+ "_"
																																+ optJSONArrayOptionGroupsObjectNameReplace
																																+ "_"
																																+ optJSONArrayOptionsObjectNameReplace
																																+ "_decrement");

																										optionGroupObjectNameIncrementButtonVk
																												.click();

																									}

																									FlutterElement optionGroupObjectNameIncrementButtonVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_increment");

																									optionGroupObjectNameIncrementButtonVk
																											.click();

																									FlutterElement optionCount1Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountText1Vk = optionCount1Vk
																											.getText();

																									long optionCountLong1Vk = Long
																											.parseLong(
																													optionCountText1Vk);

																									Assert.assertNotEquals(
																											optionCountTextVk,
																											optionCountText1Vk,
																											"Validated that after tapping increment button the count has been increased to : "
																													+ optionCountText1Vk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															"Validated that after tapping increment button the count has been increased to : "
																																	+ optionCountText1Vk,
																															ExtentColor.CYAN));

																									FlutterElement optionGroupObjectNameDecrementButtonVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_decrement");

																									optionGroupObjectNameDecrementButtonVk
																											.click();

																									FlutterElement optionCount2Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountText2Vk = optionCount2Vk
																											.getText();

																									long optionCountLong2Vk = Long
																											.parseLong(
																													optionCountText2Vk);

																									Assert.assertEquals(
																											optionCountTextVk,
																											optionCountText2Vk,
																											"Validated that after tapping decrement button the count has been decreased to : "
																													+ optionCountText2Vk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" After tapping decrement button the count is : "
																																	+ optionCountLong2Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" After tapping decrement button the count is : "
																													+ optionCountLong2Vk);

																									FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_increment");

																									optionGroupObjectNameIncrementButton1Vk
																											.click();

																									FlutterElement optionCount3Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountText3Vk = optionCount3Vk
																											.getText();

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" After tapping increment button the count is : "
																																	+ optionCountText3Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" After tapping increment button the count is : "
																													+ optionCountText3Vk);

																									if (optJSONArrayOptionGroupsObject
																											.has("max")) {

																										String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																												.optString(
																														"max");

																										int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																												.parseInt(
																														optJSONArrayOptionGroupsObjectMaximum);

																										if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																												- 1) {

																											nextGenSize001
																													.info(MarkupHelper
																															.createLabel(
																																	" Validated that after tapping the max limit of : "
																																			+ optJSONArrayOptionGroupsObjectMaximumInt
																																			+ " in this option group name : "
																																			+ optJSONArrayOptionGroupsObjectName
																																			+ " the below items are hidden ",
																																	ExtentColor.CYAN));
																											System.out
																													.println(
																															" Validated that after tapping the max limit of : "
																																	+ optJSONArrayOptionGroupsObjectMaximumInt
																																	+ " in this option group name : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " the below items are hidden ");

																											FlutterElement optionGroupObjectNameCheckbox1Vk = find
																													.byValueKey(
																															itemNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_checkbox");

																											optionGroupObjectNameCheckbox1Vk
																													.click();

																											System.out
																													.println(
																															" Unchecking the : "
																																	+ f
																																	+ " item : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " again to check the other items ");

																											if (f == optJSONArrayOptionsLength
																													- 1) {

																												optionGroupObjectNameCheckbox1Vk
																														.click();

																											}

																										}
																									} else {

																										nextGenSize001
																												.info(MarkupHelper
																														.createLabel(
																																" There is no maximum condition for this option group : "
																																		+ optJSONArrayOptionGroupsObjectName,
																																ExtentColor.CYAN));

																										System.out
																												.println(
																														" There is no maximum condition for this option group : "
																																+ optJSONArrayOptionGroupsObjectName);
																									}

																								}

																								else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																										&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" The option : "
																																	+ optionGroupObjectNameTextVk
																																	+ " is single selection optional field has checkbox ",
																															ExtentColor.CYAN));
																									System.out.println(
																											" The option : "
																													+ optionGroupObjectNameTextVk
																													+ " is single selection optional field has checkbox ");

																									FlutterElement optionGroupObjectNameCheckboxVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_checkbox");

																									optionGroupObjectNameCheckboxVk
																											.click();

																									if (optJSONArrayOptionGroupsObject
																											.has("option_levels")) {
																										JSONObject optionLevels = optJSONArrayOptionGroupsObject
																												.getJSONObject(
																														"option_levels");
																										String optionLevelsName = optionLevels
																												.getString(
																														"name");

																										JSONArray optJSONArrayLevels = optionLevels
																												.optJSONArray(
																														"levels");

																										if (optJSONArrayLevels != null) {

																											for (int a = 0; a < optJSONArrayLevels
																													.length(); a++) {

																												JSONObject jsonObjectLevels = optJSONArrayLevels
																														.getJSONObject(
																																a);
																												System.out
																														.println(
																																"the index is :"
																																		+ a);

																												System.out
																														.println(
																																optJSONArrayLevels
																																		.length());

																												levelsList
																														.clear();

																												for (int q = 0; q < optJSONArrayLevels
																														.length(); q++) {

																													JSONObject jsonObjectLevelss = optJSONArrayLevels
																															.getJSONObject(
																																	q);

																													String levelsNames = jsonObjectLevelss
																															.optString(
																																	"name");

																													levelsList
																															.add(levelsNames);

																												}

																												String levelsName = jsonObjectLevels
																														.optString(
																																"name");

																												String levelsNameReplace = levelsName
																														.toLowerCase()
																														.replace(
																																" ",
																																"_");

																												String levelsDefault = jsonObjectLevels
																														.optString(
																																"is_default");

																												if (levelsDefault
																														.equalsIgnoreCase(
																																"true")) {

																													nextGenSize001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option name :  "
																																					+ optionGroupObjectNameTextVk
																																					+ " is set to default and it's not shown in the list of the option group name : "
																																					+ levelsName
																																					+ " and it's not auto selected in the UI ",
																																			ExtentColor.CYAN));
																													System.out
																															.println(
																																	" The option name :  "
																																			+ optionGroupObjectNameTextVk
																																			+ " is set to default and it's not shown in the list of the option group name : "
																																			+ levelsName
																																			+ " and it's not auto selected in the UI ");

																												} else {

																													nextGenSize001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option name :  "
																																					+ optionGroupObjectNameTextVk
																																					+ " is not set to default and it's shown in the list of the option group name : "
																																					+ levelsName
																																					+ " and it's auto selected in the UI ",
																																			ExtentColor.CYAN));
																													System.out
																															.println(
																																	" The option name :  "
																																			+ optionGroupObjectNameTextVk
																																			+ " is not set to default and it's shown in the list of the option group name : "
																																			+ levelsName
																																			+ " and it's auto selected in the UI ");

																												}

																												FlutterElement optionGroupObjectNameOptionLevelsVk = find
																														.byValueKey(
																																itemNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_"
																																		+ "level_name");

																												String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																														.getText();

																												boolean levelsNameContains = levelsList
																														.contains(
																																optionGroupObjectNameOptionLevelsTextVk);

																												Assert.assertEquals(
																														levelsNameContains,
																														true,
																														" Validated that the option levels name from the API and the option levels name from the UI is : "
																																+ optionGroupObjectNameOptionLevelsTextVk
																																+ " are same ");

																												nextGenSize001
																														.info(MarkupHelper
																																.createLabel(
																																		" Validated that the option levels name from the API and the option levels name from the UI is : "
																																				+ optionGroupObjectNameOptionLevelsTextVk
																																				+ " are same ",
																																		ExtentColor.CYAN));
																												System.out
																														.println(
																																" Validated that the option levels name from the API and the option levels name from the UI is : "
																																		+ optionGroupObjectNameOptionLevelsTextVk
																																		+ " are same ");

																												FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																														.byValueKey(
																																itemNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_rightarrow");

																												optionGroupObjectNameOptionLevelsForwardArrowVk
																														.click();

																												nextGenSize001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																		ExtentColor.CYAN));
																												System.out
																														.println(
																																" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ");

																											}

																											FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																													.byValueKey(
																															itemNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_leftarrow");

																											optionGroupObjectNameOptionLevelsBackwardArrowVk
																													.click();
																										}
																									}

																									if (item.optJSONArray(
																											"option_groups") != null) {

																										JSONArray optionGroups = item
																												.getJSONArray(
																														"option_groups");

																										for (int g = 0; g < optionGroups
																												.length(); g++) {
																											JSONObject optionGroup = optionGroups
																													.getJSONObject(
																															g);

																											if (optionGroup
																													.has("option_conditions")) {
																												JSONArray optionConditionsArray = optionGroup
																														.getJSONArray(
																																"option_conditions");

																												for (int h = 0; h < optionConditionsArray
																														.length(); h++) {
																													JSONArray optionCondition = optionConditionsArray
																															.getJSONArray(
																																	h);

																													for (int m = 0; m < optionCondition
																															.length(); m++) {
																														JSONObject condition = optionCondition
																																.getJSONObject(
																																		m);

																														String optionValue = condition
																																.getString(
																																		"option_value");
																														String optionGroupInCondition = condition
																																.getString(
																																		"option_group");

																														if (optionGroupObjectNameTextVk
																																.equals(optionValue)) {

																															String optionGroupName = optionGroup
																																	.getString(
																																			"name");

																															String optionGroupNameLowerCase = optionGroupName
																																	.replace(
																																			" ",
																																			"_")
																																	.toLowerCase();

																															String quantities = optionGroup
																																	.optString(
																																			"quantities");

																															scrollOptionsGroupDown(
																																	optionGroupName);

																															FlutterElement optionGroup1Vk = find
																																	.byValueKey(
																																			itemNameReplace
																																					+ "_"
																																					+ optionGroupNameLowerCase);

																															optionGroup1Vk
																																	.click();

																															itemQuantityScroll();

																															if (optionGroup
																																	.has("options")) {

																																JSONArray options = optionGroup
																																		.optJSONArray(
																																				"options");

																																for (int w = 0; w < options
																																		.length(); w++) {

																																	JSONObject optionObject = options
																																			.getJSONObject(
																																					w);

																																	String optionsName = optionObject
																																			.optString(
																																					"name");

																																	String optionsNameLowerCase = optionsName
																																			.replace(
																																					" ",
																																					"_")
																																			.toLowerCase();

																																	String isDefault = optionObject
																																			.optString(
																																					"is_default");

																																	String isDisabled = optionObject
																																			.optString(
																																					"is_disabled");

																																	if (isDisabled == "false") {

																																		if (quantities == "true") {

																																			if (isDefault == "true") {

																																				FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																						.byValueKey(
																																								itemNameReplace
																																										+ "_"
																																										+ optionGroupNameLowerCase
																																										+ "_"
																																										+ optionsNameLowerCase
																																										+ "_decrement");

																																				optionGroupObjectNameDecrementOptCVk
																																						.click();

																																			}

																																			FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																					.byValueKey(
																																							itemNameReplace
																																									+ "_"
																																									+ optionGroupNameLowerCase
																																									+ "_"
																																									+ optionsNameLowerCase
																																									+ "_increment");

																																			optionGroupObjectNameIncrementOptCVk
																																					.click();

																																		} else if (quantities == "false") {

																																			if (isDefault == "true") {

																																				FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																						.byValueKey(
																																								itemNameReplace
																																										+ "_"
																																										+ optionGroupNameLowerCase
																																										+ "_"
																																										+ optionsNameLowerCase
																																										+ "_checkbox");

																																				optionGroupObjectNameCheckboxOptCVk
																																						.click();

																																			}

																																			FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																					.byValueKey(
																																							itemNameReplace
																																									+ "_"
																																									+ optionGroupNameLowerCase
																																									+ "_"
																																									+ optionsNameLowerCase
																																									+ "_checkbox");

																																			optionGroupObjectNameCheckboxOptCVk
																																					.click();

																																			if (optionGroup
																																					.has("option_levels")) {
																																				JSONObject optionLevels = optionGroup
																																						.getJSONObject(
																																								"option_levels");
																																				String optionLevelsName = optionLevels
																																						.getString(
																																								"name");

																																				JSONArray optJSONArrayLevels = optionLevels
																																						.optJSONArray(
																																								"levels");

																																				if (optJSONArrayLevels != null) {

																																					for (int a = 0; a < optJSONArrayLevels
																																							.length(); a++) {

																																						JSONObject jsonObjectLevels = optJSONArrayLevels
																																								.getJSONObject(
																																										a);

																																						System.out
																																								.println(
																																										"the index is :"
																																												+ a);

																																						System.out
																																								.println(
																																										optJSONArrayLevels
																																												.length());

																																						levelsList
																																								.clear();

																																						for (int b = 0; b < optJSONArrayLevels
																																								.length(); b++) {

																																							JSONObject jsonObjectLevelss = optJSONArrayLevels
																																									.getJSONObject(
																																											b);

																																							String levelsNames = jsonObjectLevelss
																																									.optString(
																																											"name");

																																							levelsList
																																									.add(levelsNames);

																																						}

																																						String levelsName = jsonObjectLevels
																																								.optString(
																																										"name");

																																						String levelsNameReplace = levelsName
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_");

																																						String levelsDefault = jsonObjectLevels
																																								.optString(
																																										"is_default");

																																						if (levelsDefault
																																								.equalsIgnoreCase(
																																										"true")) {

																																							nextGenSize001
																																									.info(MarkupHelper
																																											.createLabel(
																																													" The option name :  "
																																															+ optionGroupObjectNameTextVk
																																															+ " is set to default and it's not shown in the list of the option group name : "
																																															+ levelsName
																																															+ " and it's not auto selected in the UI ",
																																													ExtentColor.CYAN));
																																							System.out
																																									.println(
																																											" The option name :  "
																																													+ optionGroupObjectNameTextVk
																																													+ " is set to default and it's not shown in the list of the option group name : "
																																													+ levelsName
																																													+ " and it's not auto selected in the UI ");

																																						} else {

																																							nextGenSize001
																																									.info(MarkupHelper
																																											.createLabel(
																																													" The option name :  "
																																															+ optionGroupObjectNameTextVk
																																															+ " is not set to default and it's shown in the list of the option group name : "
																																															+ levelsName
																																															+ " and it's auto selected in the UI ",
																																													ExtentColor.CYAN));
																																							System.out
																																									.println(
																																											" The option name :  "
																																													+ optionGroupObjectNameTextVk
																																													+ " is not set to default and it's shown in the list of the option group name : "
																																													+ levelsName
																																													+ " and it's auto selected in the UI ");
																																						}

																																						FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																								.byValueKey(
																																										itemNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionGroupsObjectNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionsObjectNameReplace
																																												+ "_"
																																												+ "level_name");

																																						String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																								.getText();

																																						boolean levelsNameContains = levelsList
																																								.contains(
																																										optionGroupObjectNameOptionLevelsTextVk);

																																						Assert.assertEquals(
																																								levelsNameContains,
																																								true,
																																								" Validated that the option levels name from the API and the option levels name from the UI is : "
																																										+ optionGroupObjectNameOptionLevelsTextVk
																																										+ " are same ");

																																						nextGenSize001
																																								.info(MarkupHelper
																																										.createLabel(
																																												" Validated that the option levels name from the API and the option levels name from the UI is : "
																																														+ optionGroupObjectNameOptionLevelsTextVk
																																														+ " are same ",
																																												ExtentColor.CYAN));
																																						System.out
																																								.println(
																																										" Validated that the option levels name from the API and the option levels name from the UI is : "
																																												+ optionGroupObjectNameOptionLevelsTextVk
																																												+ " are same ");

																																						FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																								.byValueKey(
																																										itemNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionGroupsObjectNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionsObjectNameReplace
																																												+ "_rightarrow");

																																						optionGroupObjectNameOptionLevelsForwardArrowVk
																																								.click();

																																						nextGenSize001
																																								.info(MarkupHelper
																																										.createLabel(
																																												" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																												ExtentColor.CYAN));
																																						System.out
																																								.println(
																																										" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ");

																																					}

																																					FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																							.byValueKey(
																																									itemNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionGroupsObjectNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionsObjectNameReplace
																																											+ "_leftarrow");

																																					optionGroupObjectNameOptionLevelsBackwardArrowVk
																																							.click();
																																				}
																																			}

																																			if (optionGroup
																																					.has("max")) {

																																				String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																						.optString(
																																								"max");

																																				int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																						.parseInt(
																																								optJSONArrayOptionGroupsObjectMaximum);

																																				if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																						- 1) {

																																					nextGenSize001
																																							.info(MarkupHelper
																																									.createLabel(
																																											" Validated that after tapping the max limit of : "
																																													+ optJSONArrayOptionGroupsObjectMaximumInt
																																													+ " in this option group name : "
																																													+ optJSONArrayOptionGroupsObjectName
																																													+ " the below items are hidden ",
																																											ExtentColor.CYAN));
																																					System.out
																																							.println(
																																									" Validated that after tapping the max limit of : "
																																											+ optJSONArrayOptionGroupsObjectMaximumInt
																																											+ " in this option group name : "
																																											+ optJSONArrayOptionGroupsObjectName
																																											+ " the below items are hidden ");

																																					FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																							.byValueKey(
																																									itemNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionGroupsObjectNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionsObjectNameReplace
																																											+ "_checkbox");

																																					optionGroupObjectNameCheckbox1Vk
																																							.click();

																																					System.out
																																							.println(
																																									" Unchecking the : "
																																											+ f
																																											+ " item : "
																																											+ optJSONArrayOptionGroupsObjectName
																																											+ " again to check the other items ");

																																					if (f == optJSONArrayOptionsLength
																																							- 1) {

																																						optionGroupObjectNameCheckbox1Vk
																																								.click();

																																					}

																																				}

																																			} else {

																																				nextGenSize001
																																						.info(MarkupHelper
																																								.createLabel(
																																										" There is no maximum condition for this option group : "
																																												+ optJSONArrayOptionGroupsObjectName,
																																										ExtentColor.CYAN));
																																				System.out
																																						.println(
																																								" There is no maximum condition for this option group : "
																																										+ optJSONArrayOptionGroupsObjectName);
																																			}

																																		}

																																	}
																																}

																																scrollOptionsGroupUpAndClick(
																																		optJSONArrayOptionGroupsObjectName);

																																FlutterElement optionGroupObjectGroupVk = find
																																		.byValueKey(
																																				itemNameReplace
																																						+ "_"
																																						+ optJSONArrayOptionGroupsObjectNameReplace);

																																optionGroupObjectGroupVk
																																		.click();

																																itemQuantityScroll();
																															}
																														}

																														else {

																															nextGenSize001
																																	.info(MarkupHelper
																																			.createLabel(
																																					"No match found for option_value: "
																																							+ optionGroupObjectNameTextVk,
																																					ExtentColor.CYAN));
																															System.out
																																	.println(
																																			"No match found for option_value: "
																																					+ optionGroupObjectNameTextVk);
																														}
																													}
																												}

																											}

																										}

																									}

																									if (optJSONArrayOptionGroupsObject
																											.has("max")) {

																										String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																												.optString(
																														"max");

																										int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																												.parseInt(
																														optJSONArrayOptionGroupsObjectMaximum);

																										if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																												- 1) {

																											nextGenSize001
																													.info(MarkupHelper
																															.createLabel(
																																	" Validated that after tapping the max limit of : "
																																			+ optJSONArrayOptionGroupsObjectMaximumInt
																																			+ " in this option group name : "
																																			+ optJSONArrayOptionGroupsObjectName
																																			+ " the below items are hidden ",
																																	ExtentColor.CYAN));
																											System.out
																													.println(
																															" Validated that after tapping the max limit of : "
																																	+ optJSONArrayOptionGroupsObjectMaximumInt
																																	+ " in this option group name : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " the below items are hidden ");

																											FlutterElement optionGroupObjectNameCheckbox1Vk = find
																													.byValueKey(
																															itemNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_checkbox");

																											optionGroupObjectNameCheckbox1Vk
																													.click();

																											System.out
																													.println(
																															" Unchecking the : "
																																	+ f
																																	+ " item : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " again to check the other items ");

																											if (f == optJSONArrayOptionsLength
																													- 1) {

																												optionGroupObjectNameCheckbox1Vk
																														.click();

																											}

																										}

																									} else {

																										nextGenSize001
																												.info(MarkupHelper
																														.createLabel(
																																" There is no maximum condition for this option group : "
																																		+ optJSONArrayOptionGroupsObjectName,
																																ExtentColor.CYAN));
																										System.out
																												.println(
																														" There is no maximum condition for this option group : "
																																+ optJSONArrayOptionGroupsObjectName);
																									}

																								}
																							} else if (optJSONArrayOptionGroupsObjectMin == 1
																									&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																								nextGenSize001.info(
																										MarkupHelper
																												.createLabel(
																														" The option : "
																																+ optionGroupObjectNameTextVk
																																+ " is single selection Mandatory field",
																														ExtentColor.CYAN));
																								System.out.println(
																										" The option : "
																												+ optionGroupObjectNameTextVk
																												+ " is single selection Mandatory field");

																								if (optJSONArrayOptionGroupsObjectQuantities == "true"
																										&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" The option : "
																																	+ optionGroupObjectNameTextVk
																																	+ " is single selection Mandatory field has increment decrement button",
																															ExtentColor.CYAN));
																									System.out.println(
																											" The option : "
																													+ optionGroupObjectNameTextVk
																													+ " is single selection Mandatory field has increment decrement button");

																									FlutterElement optionCountVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountTextVk = optionCountVk
																											.getText();

																									long optionCountLongVk = Long
																											.parseLong(
																													optionCountTextVk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" Before tapping increment and decrement button the count is : "
																																	+ optionCountLongVk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" Before tapping increment and decrement button the count is : "
																													+ optionCountLongVk);
																									if (optStringIsDefault
																											.equalsIgnoreCase(
																													"true")) {

																										FlutterElement optionGroupObjectNameIncrementButtonVk = find
																												.byValueKey(
																														itemNameReplace
																																+ "_"
																																+ optJSONArrayOptionGroupsObjectNameReplace
																																+ "_"
																																+ optJSONArrayOptionsObjectNameReplace
																																+ "_decrement");

																										optionGroupObjectNameIncrementButtonVk
																												.click();

																									}
																									FlutterElement optionGroupObjectNameIncrementButtonVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_increment");

																									optionGroupObjectNameIncrementButtonVk
																											.click();

																									FlutterElement optionCount1Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountText1Vk = optionCount1Vk
																											.getText();

																									long optionCountLong1Vk = Long
																											.parseLong(
																													optionCountText1Vk);

																									Assert.assertNotEquals(
																											optionCountTextVk,
																											optionCountText1Vk,
																											"Validated that after tapping increment button the count has been increased to : "
																													+ optionCountText1Vk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															"Validated that after tapping increment button the count has been increased to : "
																																	+ optionCountText1Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											"Validated that after tapping increment button the count has been increased to : "
																													+ optionCountText1Vk);

																									FlutterElement optionGroupObjectNameDecrementButtonVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_decrement");

																									optionGroupObjectNameDecrementButtonVk
																											.click();

																									FlutterElement optionCount2Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountText2Vk = optionCount2Vk
																											.getText();

																									long optionCountLong2Vk = Long
																											.parseLong(
																													optionCountText2Vk);

																									Assert.assertEquals(
																											optionCountTextVk,
																											optionCountText2Vk,
																											"Validated that after tapping decreased button the count has been decreased to : "
																													+ optionCountText2Vk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" After tapping decrement button the count is : "
																																	+ optionCountLong2Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" After tapping decrement button the count is : "
																													+ optionCountLong2Vk);

																									FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_increment");

																									optionGroupObjectNameIncrementButton1Vk
																											.click();

																									FlutterElement optionCount3Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountText3Vk = optionCount3Vk
																											.getText();

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" After tapping increment button the count is : "
																																	+ optionCountText3Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" After tapping increment button the count is : "
																													+ optionCountText3Vk);
																									if (optJSONArrayOptionGroupsObject
																											.has("max")) {

																										String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																												.optString(
																														"max");

																										int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																												.parseInt(
																														optJSONArrayOptionGroupsObjectMaximum);

																										if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																												- 1) {

																											nextGenSize001
																													.info(MarkupHelper
																															.createLabel(
																																	" Validated that after tapping the max limit of : "
																																			+ optJSONArrayOptionGroupsObjectMaximumInt
																																			+ " in this option group name : "
																																			+ optJSONArrayOptionGroupsObjectName
																																			+ " the below items are hidden ",
																																	ExtentColor.CYAN));
																											System.out
																													.println(
																															" Validated that after tapping the max limit of : "
																																	+ optJSONArrayOptionGroupsObjectMaximumInt
																																	+ " in this option group name : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " the below items are hidden ");

																											FlutterElement optionGroupObjectNameCheckbox1Vk = find
																													.byValueKey(
																															itemNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_checkbox");

																											optionGroupObjectNameCheckbox1Vk
																													.click();

																											System.out
																													.println(
																															" Unchecking the : "
																																	+ f
																																	+ " item : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " again to check the other items ");

																											if (f == optJSONArrayOptionsLength
																													- 1) {

																												optionGroupObjectNameCheckbox1Vk
																														.click();

																											}

																										}
																									} else {

																										nextGenSize001
																												.info(MarkupHelper
																														.createLabel(
																																" There is no maximum condition for this option group : "
																																		+ optJSONArrayOptionGroupsObjectName,
																																ExtentColor.CYAN));
																										System.out
																												.println(
																														" There is no maximum condition for this option group : "
																																+ optJSONArrayOptionGroupsObjectName);
																									}

																								}

																								else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																										&& optJSONArrayOptionGroupsObjectMultiSelect == "false") {

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" The option : "
																																	+ optionGroupObjectNameTextVk
																																	+ " is single selection Mandatory field has checkbox",
																															ExtentColor.CYAN));
																									System.out.println(
																											" The option : "
																													+ optionGroupObjectNameTextVk
																													+ " is single selection Mandatory field has checkbox");

																									FlutterElement optionGroupObjectNameCheckboxVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_checkbox");

																									optionGroupObjectNameCheckboxVk
																											.click();

																									if (optJSONArrayOptionGroupsObject
																											.has("option_levels")) {
																										JSONObject optionLevels = optJSONArrayOptionGroupsObject
																												.getJSONObject(
																														"option_levels");
																										String optionLevelsName = optionLevels
																												.getString(
																														"name");

																										JSONArray optJSONArrayLevels = optionLevels
																												.optJSONArray(
																														"levels");

																										if (optJSONArrayLevels != null) {

																											for (int a = 0; a < optJSONArrayLevels
																													.length(); a++) {

																												JSONObject jsonObjectLevels = optJSONArrayLevels
																														.getJSONObject(
																																a);

																												System.out
																														.println(
																																"the index is :"
																																		+ a);

																												System.out
																														.println(
																																optJSONArrayLevels
																																		.length());

																												levelsList
																														.clear();

																												for (int e = 0; e < optJSONArrayLevels
																														.length(); e++) {

																													JSONObject jsonObjectLevelss = optJSONArrayLevels
																															.getJSONObject(
																																	e);

																													String levelsNames = jsonObjectLevelss
																															.optString(
																																	"name");

																													levelsList
																															.add(levelsNames);

																												}

																												String levelsName = jsonObjectLevels
																														.optString(
																																"name");

																												String levelsNameReplace = levelsName
																														.toLowerCase()
																														.replace(
																																" ",
																																"_");

																												String levelsDefault = jsonObjectLevels
																														.optString(
																																"is_default");

																												if (levelsDefault
																														.equalsIgnoreCase(
																																"true")) {

																													nextGenSize001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option name :  "
																																					+ optionGroupObjectNameTextVk
																																					+ " is set to default and it's not shown in the list of the option group name : "
																																					+ levelsName
																																					+ " and it's not auto selected in the UI ",
																																			ExtentColor.CYAN));
																													System.out
																															.println(
																																	" The option name :  "
																																			+ optionGroupObjectNameTextVk
																																			+ " is set to default and it's not shown in the list of the option group name : "
																																			+ levelsName
																																			+ " and it's not auto selected in the UI ");

																												} else {

																													nextGenSize001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option name :  "
																																					+ optionGroupObjectNameTextVk
																																					+ " is not set to default and it's shown in the list of the option group name : "
																																					+ levelsName
																																					+ " and it's auto selected in the UI ",
																																			ExtentColor.CYAN));
																													System.out
																															.println(
																																	" The option name :  "
																																			+ optionGroupObjectNameTextVk
																																			+ " is not set to default and it's shown in the list of the option group name : "
																																			+ levelsName
																																			+ " and it's auto selected in the UI ");
																												}

																												FlutterElement optionGroupObjectNameOptionLevelsVk = find
																														.byValueKey(
																																itemNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_"
																																		+ "level_name");

																												String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																														.getText();

																												boolean levelsNameContains = levelsList
																														.contains(
																																optionGroupObjectNameOptionLevelsTextVk);

																												Assert.assertEquals(
																														levelsNameContains,
																														true,
																														" Validated that the option levels name from the API and the option levels name from the UI is : "
																																+ optionGroupObjectNameOptionLevelsTextVk
																																+ " are same ");

																												nextGenSize001
																														.info(MarkupHelper
																																.createLabel(
																																		" Validated that the option levels name from the API and the option levels name from the UI is : "
																																				+ optionGroupObjectNameOptionLevelsTextVk
																																				+ " are same ",
																																		ExtentColor.CYAN));
																												System.out
																														.println(
																																" Validated that the option levels name from the API and the option levels name from the UI is : "
																																		+ optionGroupObjectNameOptionLevelsTextVk
																																		+ " are same ");

																												FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																														.byValueKey(
																																itemNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_rightarrow");

																												optionGroupObjectNameOptionLevelsForwardArrowVk
																														.click();

																												nextGenSize001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																		ExtentColor.CYAN));
																												System.out
																														.println(
																																" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ");

																											}

																											FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																													.byValueKey(
																															itemNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_leftarrow");

																											optionGroupObjectNameOptionLevelsBackwardArrowVk
																													.click();
																										}
																									}
																									if (item.optJSONArray(
																											"option_groups") != null) {

																										JSONArray optionGroups = item
																												.getJSONArray(
																														"option_groups");

																										for (int g = 0; g < optionGroups
																												.length(); g++) {
																											JSONObject optionGroup = optionGroups
																													.getJSONObject(
																															g);

																											if (optionGroup
																													.has("option_conditions")) {
																												JSONArray optionConditionsArray = optionGroup
																														.getJSONArray(
																																"option_conditions");

																												for (int h = 0; h < optionConditionsArray
																														.length(); h++) {
																													JSONArray optionCondition = optionConditionsArray
																															.getJSONArray(
																																	h);

																													for (int m = 0; m < optionCondition
																															.length(); m++) {
																														JSONObject condition = optionCondition
																																.getJSONObject(
																																		m);

																														String optionValue = condition
																																.getString(
																																		"option_value");
																														String optionGroupInCondition = condition
																																.getString(
																																		"option_group");

																														if (optionGroupObjectNameTextVk
																																.equals(optionValue)) {
																															String optionGroupName = optionGroup
																																	.getString(
																																			"name");

																															String optionGroupNameLowerCase = optionGroupName
																																	.replace(
																																			" ",
																																			"_")
																																	.toLowerCase();

																															String quantities = optionGroup
																																	.optString(
																																			"quantities");

																															scrollOptionsGroupDown(
																																	optionGroupName);

																															FlutterElement optionGroup1Vk = find
																																	.byValueKey(
																																			itemNameReplace
																																					+ "_"
																																					+ optionGroupNameLowerCase);

																															optionGroup1Vk
																																	.click();

																															itemQuantityScroll();

																															if (optionGroup
																																	.has("options")) {

																																JSONArray options = optionGroup
																																		.optJSONArray(
																																				"options");

																																for (int r = 0; r < options
																																		.length(); r++) {

																																	JSONObject optionObject = options
																																			.getJSONObject(
																																					r);

																																	String optionsName = optionObject
																																			.optString(
																																					"name");

																																	String optionsNameLowerCase = optionsName
																																			.replace(
																																					" ",
																																					"_")
																																			.toLowerCase();

																																	String isDefault = optionObject
																																			.optString(
																																					"is_default");

																																	String isDisabled = optionObject
																																			.optString(
																																					"is_disabled");

																																	if (isDisabled == "false") {

																																		if (quantities == "true") {

																																			if (isDefault == "true") {

																																				FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																						.byValueKey(
																																								itemNameReplace
																																										+ "_"
																																										+ optionGroupNameLowerCase
																																										+ "_"
																																										+ optionsNameLowerCase
																																										+ "_decrement");

																																				optionGroupObjectNameDecrementOptCVk
																																						.click();

																																			}

																																			FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																					.byValueKey(
																																							itemNameReplace
																																									+ "_"
																																									+ optionGroupNameLowerCase
																																									+ "_"
																																									+ optionsNameLowerCase
																																									+ "_increment");

																																			optionGroupObjectNameIncrementOptCVk
																																					.click();

																																		} else if (quantities == "false") {

																																			if (isDefault == "true") {

																																				FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																						.byValueKey(
																																								itemNameReplace
																																										+ "_"
																																										+ optionGroupNameLowerCase
																																										+ "_"
																																										+ optionsNameLowerCase
																																										+ "_checkbox");

																																				optionGroupObjectNameCheckboxOptCVk
																																						.click();

																																			}

																																			FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																					.byValueKey(
																																							itemNameReplace
																																									+ "_"
																																									+ optionGroupNameLowerCase
																																									+ "_"
																																									+ optionsNameLowerCase
																																									+ "_checkbox");

																																			optionGroupObjectNameCheckboxOptCVk
																																					.click();

																																			if (optionGroup
																																					.has("option_levels")) {
																																				JSONObject optionLevels = optionGroup
																																						.getJSONObject(
																																								"option_levels");
																																				String optionLevelsName = optionLevels
																																						.getString(
																																								"name");

																																				JSONArray optJSONArrayLevels = optionLevels
																																						.optJSONArray(
																																								"levels");

																																				if (optJSONArrayLevels != null) {

																																					for (int a = 0; a < optJSONArrayLevels
																																							.length(); a++) {

																																						JSONObject jsonObjectLevels = optJSONArrayLevels
																																								.getJSONObject(
																																										a);

																																						System.out
																																								.println(
																																										"the index is :"
																																												+ a);

																																						System.out
																																								.println(
																																										optJSONArrayLevels
																																												.length());

																																						levelsList
																																								.clear();

																																						for (int b = 0; b < optJSONArrayLevels
																																								.length(); b++) {

																																							JSONObject jsonObjectLevelss = optJSONArrayLevels
																																									.getJSONObject(
																																											b);

																																							String levelsNames = jsonObjectLevelss
																																									.optString(
																																											"name");

																																							levelsList
																																									.add(levelsNames);

																																						}

																																						String levelsName = jsonObjectLevels
																																								.optString(
																																										"name");

																																						String levelsNameReplace = levelsName
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_");

																																						String levelsDefault = jsonObjectLevels
																																								.optString(
																																										"is_default");

																																						if (levelsDefault
																																								.equalsIgnoreCase(
																																										"true")) {

																																							nextGenSize001
																																									.info(MarkupHelper
																																											.createLabel(
																																													" The option name :  "
																																															+ optionGroupObjectNameTextVk
																																															+ " is set to default and it's not shown in the list of the option group name : "
																																															+ levelsName
																																															+ " and it's not auto selected in the UI ",
																																													ExtentColor.CYAN));
																																							System.out
																																									.println(
																																											" The option name :  "
																																													+ optionGroupObjectNameTextVk
																																													+ " is set to default and it's not shown in the list of the option group name : "
																																													+ levelsName
																																													+ " and it's not auto selected in the UI ");

																																						} else {

																																							nextGenSize001
																																									.info(MarkupHelper
																																											.createLabel(
																																													" The option name :  "
																																															+ optionGroupObjectNameTextVk
																																															+ " is not set to default and it's shown in the list of the option group name : "
																																															+ levelsName
																																															+ " and it's auto selected in the UI ",
																																													ExtentColor.CYAN));
																																							System.out
																																									.println(
																																											" The option name :  "
																																													+ optionGroupObjectNameTextVk
																																													+ " is not set to default and it's shown in the list of the option group name : "
																																													+ levelsName
																																													+ " and it's auto selected in the UI ");
																																						}

																																						FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																								.byValueKey(
																																										itemNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionGroupsObjectNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionsObjectNameReplace
																																												+ "_"
																																												+ "level_name");

																																						String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																								.getText();

																																						boolean levelsNameContains = levelsList
																																								.contains(
																																										optionGroupObjectNameOptionLevelsTextVk);

																																						Assert.assertEquals(
																																								levelsNameContains,
																																								true,
																																								" Validated that the option levels name from the API and the option levels name from the UI is : "
																																										+ optionGroupObjectNameOptionLevelsTextVk
																																										+ " are same ");

																																						nextGenSize001
																																								.info(MarkupHelper
																																										.createLabel(
																																												" Validated that the option levels name from the API and the option levels name from the UI is : "
																																														+ optionGroupObjectNameOptionLevelsTextVk
																																														+ " are same ",
																																												ExtentColor.CYAN));
																																						System.out
																																								.println(
																																										" Validated that the option levels name from the API and the option levels name from the UI is : "
																																												+ optionGroupObjectNameOptionLevelsTextVk
																																												+ " are same ");

																																						FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																								.byValueKey(
																																										itemNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionGroupsObjectNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionsObjectNameReplace
																																												+ "_rightarrow");

																																						optionGroupObjectNameOptionLevelsForwardArrowVk
																																								.click();

																																						nextGenSize001
																																								.info(MarkupHelper
																																										.createLabel(
																																												" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																												ExtentColor.CYAN));
																																						System.out
																																								.println(
																																										" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ");

																																					}

																																					FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																							.byValueKey(
																																									itemNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionGroupsObjectNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionsObjectNameReplace
																																											+ "_leftarrow");

																																					optionGroupObjectNameOptionLevelsBackwardArrowVk
																																							.click();
																																				}
																																			}

																																			if (optionGroup
																																					.has("max")) {

																																				String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																						.optString(
																																								"max");

																																				int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																						.parseInt(
																																								optJSONArrayOptionGroupsObjectMaximum);

																																				if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																						- 1) {

																																					nextGenSize001
																																							.info(MarkupHelper
																																									.createLabel(
																																											" Validated that after tapping the max limit of : "
																																													+ optJSONArrayOptionGroupsObjectMaximumInt
																																													+ " in this option group name : "
																																													+ optJSONArrayOptionGroupsObjectName
																																													+ " the below items are hidden ",
																																											ExtentColor.CYAN));
																																					System.out
																																							.println(
																																									" Validated that after tapping the max limit of : "
																																											+ optJSONArrayOptionGroupsObjectMaximumInt
																																											+ " in this option group name : "
																																											+ optJSONArrayOptionGroupsObjectName
																																											+ " the below items are hidden ");

																																					FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																							.byValueKey(
																																									itemNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionGroupsObjectNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionsObjectNameReplace
																																											+ "_checkbox");

																																					optionGroupObjectNameCheckbox1Vk
																																							.click();

																																					System.out
																																							.println(
																																									" Unchecking the : "
																																											+ f
																																											+ " item : "
																																											+ optJSONArrayOptionGroupsObjectName
																																											+ " again to check the other items ");

																																					if (f == optJSONArrayOptionsLength
																																							- 1) {

																																						optionGroupObjectNameCheckbox1Vk
																																								.click();

																																					}

																																				}

																																			} else {

																																				nextGenSize001
																																						.info(MarkupHelper
																																								.createLabel(

																																										" There is no maximum condition for this option group : "
																																												+ optJSONArrayOptionGroupsObjectName,
																																										ExtentColor.CYAN));
																																				System.out
																																						.println(
																																								" There is no maximum condition for this option group : "
																																										+ optJSONArrayOptionGroupsObjectName);
																																			}

																																		}

																																	}
																																}

																																scrollOptionsGroupUpAndClick(
																																		optJSONArrayOptionGroupsObjectName);

																																FlutterElement optionGroupObjectGroupVk = find
																																		.byValueKey(
																																				itemNameReplace
																																						+ "_"
																																						+ optJSONArrayOptionGroupsObjectNameReplace);

																																optionGroupObjectGroupVk
																																		.click();

																																itemQuantityScroll();
																															}
																														}

																														else {

																															nextGenSize001
																																	.info(MarkupHelper
																																			.createLabel(
																																					"No match found for option_value: "
																																							+ optionGroupObjectNameTextVk,
																																					ExtentColor.CYAN));
																															System.out
																																	.println(
																																			"No match found for option_value: "
																																					+ optionGroupObjectNameTextVk);

																														}
																													}
																												}

																											}

																										}

																									}

																									if (optJSONArrayOptionGroupsObject
																											.has("max")) {

																										String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																												.optString(
																														"max");

																										int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																												.parseInt(
																														optJSONArrayOptionGroupsObjectMaximum);

																										if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																												- 1) {

																											nextGenSize001
																													.info(MarkupHelper
																															.createLabel(
																																	" Validated that after tapping the max limit of : "
																																			+ optJSONArrayOptionGroupsObjectMaximumInt
																																			+ " in this option group name : "
																																			+ optJSONArrayOptionGroupsObjectName
																																			+ " the below items are hidden ",
																																	ExtentColor.CYAN));
																											System.out
																													.println(
																															" Validated that after tapping the max limit of : "
																																	+ optJSONArrayOptionGroupsObjectMaximumInt
																																	+ " in this option group name : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " the below items are hidden ");

																											FlutterElement optionGroupObjectNameCheckbox1Vk = find
																													.byValueKey(
																															itemNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_checkbox");

																											optionGroupObjectNameCheckbox1Vk
																													.click();

																											System.out
																													.println(
																															" Unchecking the : "
																																	+ f
																																	+ " item : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " again to check the other items ");

																											if (f == optJSONArrayOptionsLength
																													- 1) {

																												optionGroupObjectNameCheckbox1Vk
																														.click();

																											}

																										}

																									} else {

																										nextGenSize001
																												.info(MarkupHelper
																														.createLabel(
																																" There is no maximum condition for this option group : "
																																		+ optJSONArrayOptionGroupsObjectName,
																																ExtentColor.CYAN));
																										System.out
																												.println(
																														" There is no maximum condition for this option group : "
																																+ optJSONArrayOptionGroupsObjectName);
																									}

																								}
																							}

																							else if (optJSONArrayOptionGroupsObjectMin == 0
																									&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																								nextGenSize001.info(
																										MarkupHelper
																												.createLabel(
																														" The option : "
																																+ optionGroupObjectNameTextVk
																																+ " is multi selection optional field",
																														ExtentColor.CYAN));
																								System.out.println(
																										" The option : "
																												+ optionGroupObjectNameTextVk
																												+ " is multi selection optional field");

																								if (optJSONArrayOptionGroupsObjectQuantities == "true"
																										&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" The option : "
																																	+ optionGroupObjectNameTextVk
																																	+ " is multi selection optional field has increment decrement button",
																															ExtentColor.CYAN));
																									System.out.println(
																											" The option : "
																													+ optionGroupObjectNameTextVk
																													+ " is multi selection optional field has increment decrement button");

																									FlutterElement optionCountVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountTextVk = optionCountVk
																											.getText();

																									long optionCountLongVk = Long
																											.parseLong(
																													optionCountTextVk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" Before tapping increment and decrement button the count is : "
																																	+ optionCountLongVk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" Before tapping increment and decrement button the count is : "
																													+ optionCountLongVk);
																									if (optStringIsDefault
																											.equalsIgnoreCase(
																													"true")) {

																										FlutterElement optionGroupObjectNameIncrementButtonVk = find
																												.byValueKey(
																														itemNameReplace
																																+ "_"
																																+ optJSONArrayOptionGroupsObjectNameReplace
																																+ "_"
																																+ optJSONArrayOptionsObjectNameReplace
																																+ "_decrement");

																										optionGroupObjectNameIncrementButtonVk
																												.click();

																									}
																									FlutterElement optionGroupObjectNameIncrementButtonVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_increment");

																									optionGroupObjectNameIncrementButtonVk
																											.click();

																									FlutterElement optionCount1Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountText1Vk = optionCount1Vk
																											.getText();

																									long optionCountLong1Vk = Long
																											.parseLong(
																													optionCountText1Vk);

																									Assert.assertNotEquals(
																											optionCountTextVk,
																											optionCountText1Vk,
																											"Validated that after tapping increment button the count has been increased to : "
																													+ optionCountText1Vk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															"Validated that after tapping increment button the count has been increased to : "
																																	+ optionCountText1Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											"Validated that after tapping increment button the count has been increased to : "
																													+ optionCountText1Vk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" After tapping increment button the count is : "
																																	+ optionCountLong1Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" After tapping increment button the count is : "
																													+ optionCountLong1Vk);

																									FlutterElement optionGroupObjectNameDecrementButtonVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_decrement");

																									optionGroupObjectNameDecrementButtonVk
																											.click();

																									FlutterElement optionCount2Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountText2Vk = optionCount2Vk
																											.getText();

																									long optionCountLong2Vk = Long
																											.parseLong(
																													optionCountText2Vk);

																									Assert.assertEquals(
																											optionCountTextVk,
																											optionCountText2Vk,
																											"Validated that after tapping decrement button the count has been decreased to : "
																													+ optionCountText2Vk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" After tapping decrement button the count is : "
																																	+ optionCountLong2Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" After tapping decrement button the count is : "
																													+ optionCountLong2Vk);

																									FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_increment");

																									optionGroupObjectNameIncrementButton1Vk
																											.click();

																									FlutterElement optionCount3Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountText3Vk = optionCount3Vk
																											.getText();

																									long optionCountLong3Vk = Long
																											.parseLong(
																													optionCountText3Vk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" After tapping the increment button count is : "
																																	+ optionCountLong3Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" After tapping the increment button count is : "
																													+ optionCountLong3Vk);

																									if (optJSONArrayOptionGroupsObject
																											.has("max")) {

																										String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																												.optString(
																														"max");

																										int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																												.parseInt(
																														optJSONArrayOptionGroupsObjectMaximum);

																										if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																												- 1) {

																											nextGenSize001
																													.info(MarkupHelper
																															.createLabel(
																																	" Validated that after tapping the max limit of : "
																																			+ optJSONArrayOptionGroupsObjectMaximumInt
																																			+ " in this option group name : "
																																			+ optJSONArrayOptionGroupsObjectName
																																			+ " the below items are hidden ",
																																	ExtentColor.CYAN));
																											System.out
																													.println(
																															" Validated that after tapping the max limit of : "
																																	+ optJSONArrayOptionGroupsObjectMaximumInt
																																	+ " in this option group name : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " the below items are hidden ");

																											FlutterElement optionGroupObjectNameCheckbox1Vk = find
																													.byValueKey(
																															itemNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_checkbox");

																											optionGroupObjectNameCheckbox1Vk
																													.click();

																											System.out
																													.println(
																															" Unchecking the : "
																																	+ f
																																	+ " item : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " again to check the other items ");

																											if (f == optJSONArrayOptionsLength
																													- 1) {

																												optionGroupObjectNameCheckbox1Vk
																														.click();

																											}

																										}

																									} else {

																										nextGenSize001
																												.info(MarkupHelper
																														.createLabel(
																																" There is no maximum condition for this option group : "
																																		+ optJSONArrayOptionGroupsObjectName,
																																ExtentColor.CYAN));
																										System.out
																												.println(
																														" There is no maximum condition for this option group : "
																																+ optJSONArrayOptionGroupsObjectName);
																									}

																								}

																								else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																										&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" The option : "
																																	+ optionGroupObjectNameTextVk
																																	+ " is multi selection Mandatory field has checkbox",
																															ExtentColor.CYAN));
																									System.out.println(
																											" The option : "
																													+ optionGroupObjectNameTextVk
																													+ " is multi selection Mandatory field has checkbox");

																									FlutterElement optionGroupObjectNameCheckboxVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_checkbox");

																									optionGroupObjectNameCheckboxVk
																											.click();

																									if (optJSONArrayOptionGroupsObject
																											.has("option_levels")) {
																										JSONObject optionLevels = optJSONArrayOptionGroupsObject
																												.getJSONObject(
																														"option_levels");
																										String optionLevelsName = optionLevels
																												.getString(
																														"name");

																										JSONArray optJSONArrayLevels = optionLevels
																												.optJSONArray(
																														"levels");

																										if (optJSONArrayLevels != null) {

																											for (int a = 0; a < optJSONArrayLevels
																													.length(); a++) {

																												JSONObject jsonObjectLevels = optJSONArrayLevels
																														.getJSONObject(
																																a);

																												System.out
																														.println(
																																"the index is :"
																																		+ a);

																												System.out
																														.println(
																																optJSONArrayLevels
																																		.length());

																												levelsList
																														.clear();

																												for (int y = 0; y < optJSONArrayLevels
																														.length(); y++) {

																													JSONObject jsonObjectLevelss = optJSONArrayLevels
																															.getJSONObject(
																																	y);

																													String levelsNames = jsonObjectLevelss
																															.optString(
																																	"name");

																													levelsList
																															.add(levelsNames);

																												}

																												String levelsName = jsonObjectLevels
																														.optString(
																																"name");

																												String levelsNameReplace = levelsName
																														.toLowerCase()
																														.replace(
																																" ",
																																"_");

																												String levelsDefault = jsonObjectLevels
																														.optString(
																																"is_default");

																												if (levelsDefault
																														.equalsIgnoreCase(
																																"true")) {

																													nextGenSize001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option name :  "
																																					+ optionGroupObjectNameTextVk
																																					+ " is set to default and it's not shown in the list of the option group name : "
																																					+ levelsName
																																					+ " and it's not auto selected in the UI ",
																																			ExtentColor.CYAN));
																													System.out
																															.println(
																																	" The option name :  "
																																			+ optionGroupObjectNameTextVk
																																			+ " is set to default and it's not shown in the list of the option group name : "
																																			+ levelsName
																																			+ " and it's not auto selected in the UI ");

																												} else {

																													nextGenSize001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option name :  "
																																					+ optionGroupObjectNameTextVk
																																					+ " is not set to default and it's shown in the list of the option group name : "
																																					+ levelsName
																																					+ " and it's auto selected in the UI ",
																																			ExtentColor.CYAN));
																													System.out
																															.println(
																																	" The option name :  "
																																			+ optionGroupObjectNameTextVk
																																			+ " is not set to default and it's shown in the list of the option group name : "
																																			+ levelsName
																																			+ " and it's auto selected in the UI ");
																												}

																												FlutterElement optionGroupObjectNameOptionLevelsVk = find
																														.byValueKey(
																																itemNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_"
																																		+ "level_name");

																												String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																														.getText();

																												boolean levelsNameContains = levelsList
																														.contains(
																																optionGroupObjectNameOptionLevelsTextVk);

																												Assert.assertEquals(
																														levelsNameContains,
																														true,
																														" Validated that the option levels name from the API and the option levels name from the UI is : "
																																+ optionGroupObjectNameOptionLevelsTextVk
																																+ " are same ");

																												nextGenSize001
																														.info(MarkupHelper
																																.createLabel(
																																		" Validated that the option levels name from the API and the option levels name from the UI is : "
																																				+ optionGroupObjectNameOptionLevelsTextVk
																																				+ " are same ",
																																		ExtentColor.CYAN));
																												System.out
																														.println(
																																" Validated that the option levels name from the API and the option levels name from the UI is : "
																																		+ optionGroupObjectNameOptionLevelsTextVk
																																		+ " are same ");

																												FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																														.byValueKey(
																																itemNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_rightarrow");

																												optionGroupObjectNameOptionLevelsForwardArrowVk
																														.click();

																												nextGenSize001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																		ExtentColor.CYAN));
																												System.out
																														.println(
																																" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ");

																											}

																											FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																													.byValueKey(
																															itemNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_leftarrow");

																											optionGroupObjectNameOptionLevelsBackwardArrowVk
																													.click();
																										}
																									}
																									if (item.optJSONArray(
																											"option_groups") != null) {

																										JSONArray optionGroups = item
																												.getJSONArray(
																														"option_groups");

																										for (int g = 0; g < optionGroups
																												.length(); g++) {
																											JSONObject optionGroup = optionGroups
																													.getJSONObject(
																															g);

																											if (optionGroup
																													.has("option_conditions")) {
																												JSONArray optionConditionsArray = optionGroup
																														.getJSONArray(
																																"option_conditions");

																												for (int h = 0; h < optionConditionsArray
																														.length(); h++) {
																													JSONArray optionCondition = optionConditionsArray
																															.getJSONArray(
																																	h);

																													for (int m = 0; m < optionCondition
																															.length(); m++) {
																														JSONObject condition = optionCondition
																																.getJSONObject(
																																		m);

																														String optionValue = condition
																																.getString(
																																		"option_value");
																														String optionGroupInCondition = condition
																																.getString(
																																		"option_group");

																														if (optionGroupObjectNameTextVk
																																.equals(optionValue)) {

																															String optionGroupName = optionGroup
																																	.getString(
																																			"name");

																															String optionGroupNameLowerCase = optionGroupName
																																	.replace(
																																			" ",
																																			"_")
																																	.toLowerCase();

																															String quantities = optionGroup
																																	.optString(
																																			"quantities");

																															scrollOptionsGroupDown(
																																	optionGroupName);

																															FlutterElement optionGroup1Vk = find
																																	.byValueKey(
																																			itemNameReplace
																																					+ "_"
																																					+ optionGroupNameLowerCase);

																															optionGroup1Vk
																																	.click();

																															itemQuantityScroll();

																															if (optionGroup
																																	.has("options")) {

																																JSONArray options = optionGroup
																																		.optJSONArray(
																																				"options");

																																for (int u = 0; u < options
																																		.length(); u++) {

																																	JSONObject optionObject = options
																																			.getJSONObject(
																																					u);

																																	String optionsName = optionObject
																																			.optString(
																																					"name");

																																	String optionsNameLowerCase = optionsName
																																			.replace(
																																					" ",
																																					"_")
																																			.toLowerCase();

																																	String isDefault = optionObject
																																			.optString(
																																					"is_default");

																																	String isDisabled = optionObject
																																			.optString(
																																					"is_disabled");

																																	if (isDisabled == "false") {

																																		if (quantities == "true") {

																																			if (isDefault == "true") {

																																				FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																						.byValueKey(
																																								itemNameReplace
																																										+ "_"
																																										+ optionGroupNameLowerCase
																																										+ "_"
																																										+ optionsNameLowerCase
																																										+ "_decrement");

																																				optionGroupObjectNameDecrementOptCVk
																																						.click();

																																			}

																																			FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																					.byValueKey(
																																							itemNameReplace
																																									+ "_"
																																									+ optionGroupNameLowerCase
																																									+ "_"
																																									+ optionsNameLowerCase
																																									+ "_increment");

																																			optionGroupObjectNameIncrementOptCVk
																																					.click();

																																		} else if (quantities == "false") {

																																			if (isDefault == "true") {

																																				FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																						.byValueKey(
																																								itemNameReplace
																																										+ "_"
																																										+ optionGroupNameLowerCase
																																										+ "_"
																																										+ optionsNameLowerCase
																																										+ "_checkbox");

																																				optionGroupObjectNameCheckboxOptCVk
																																						.click();

																																			}

																																			FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																					.byValueKey(
																																							itemNameReplace
																																									+ "_"
																																									+ optionGroupNameLowerCase
																																									+ "_"
																																									+ optionsNameLowerCase
																																									+ "_checkbox");

																																			optionGroupObjectNameCheckboxOptCVk
																																					.click();

																																			if (optionGroup
																																					.has("option_levels")) {
																																				JSONObject optionLevels = optionGroup
																																						.getJSONObject(
																																								"option_levels");
																																				String optionLevelsName = optionLevels
																																						.getString(
																																								"name");

																																				JSONArray optJSONArrayLevels = optionLevels
																																						.optJSONArray(
																																								"levels");

																																				if (optJSONArrayLevels != null) {

																																					for (int a = 0; a < optJSONArrayLevels
																																							.length(); a++) {

																																						JSONObject jsonObjectLevels = optJSONArrayLevels
																																								.getJSONObject(
																																										a);

																																						System.out
																																								.println(
																																										"the index is :"
																																												+ a);

																																						System.out
																																								.println(
																																										optJSONArrayLevels
																																												.length());

																																						levelsList
																																								.clear();

																																						for (int b = 0; b < optJSONArrayLevels
																																								.length(); b++) {

																																							JSONObject jsonObjectLevelss = optJSONArrayLevels
																																									.getJSONObject(
																																											b);

																																							String levelsNames = jsonObjectLevelss
																																									.optString(
																																											"name");

																																							levelsList
																																									.add(levelsNames);

																																						}

																																						String levelsName = jsonObjectLevels
																																								.optString(
																																										"name");

																																						String levelsNameReplace = levelsName
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_");

																																						String levelsDefault = jsonObjectLevels
																																								.optString(
																																										"is_default");

																																						if (levelsDefault
																																								.equalsIgnoreCase(
																																										"true")) {

																																							nextGenSize001
																																									.info(MarkupHelper
																																											.createLabel(
																																													" The option name :  "
																																															+ optionGroupObjectNameTextVk
																																															+ " is set to default and it's not shown in the list of the option group name : "
																																															+ levelsName
																																															+ " and it's not auto selected in the UI ",
																																													ExtentColor.CYAN));
																																							System.out
																																									.println(
																																											" The option name :  "
																																													+ optionGroupObjectNameTextVk
																																													+ " is set to default and it's not shown in the list of the option group name : "
																																													+ levelsName
																																													+ " and it's not auto selected in the UI ");

																																						} else {

																																							nextGenSize001
																																									.info(MarkupHelper
																																											.createLabel(
																																													" The option name :  "
																																															+ optionGroupObjectNameTextVk
																																															+ " is not set to default and it's shown in the list of the option group name : "
																																															+ levelsName
																																															+ " and it's auto selected in the UI ",
																																													ExtentColor.CYAN));
																																							System.out
																																									.println(
																																											" The option name :  "
																																													+ optionGroupObjectNameTextVk
																																													+ " is not set to default and it's shown in the list of the option group name : "
																																													+ levelsName
																																													+ " and it's auto selected in the UI ");
																																						}

																																						FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																								.byValueKey(
																																										itemNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionGroupsObjectNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionsObjectNameReplace
																																												+ "_"
																																												+ "level_name");

																																						String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																								.getText();

																																						boolean levelsNameContains = levelsList
																																								.contains(
																																										optionGroupObjectNameOptionLevelsTextVk);

																																						Assert.assertEquals(
																																								levelsNameContains,
																																								true,
																																								" Validated that the option levels name from the API and the option levels name from the UI is : "
																																										+ optionGroupObjectNameOptionLevelsTextVk
																																										+ " are same ");

																																						nextGenSize001
																																								.info(MarkupHelper
																																										.createLabel(
																																												" Validated that the option levels name from the API and the option levels name from the UI is : "
																																														+ optionGroupObjectNameOptionLevelsTextVk
																																														+ " are same ",
																																												ExtentColor.CYAN));
																																						System.out
																																								.println(
																																										" Validated that the option levels name from the API and the option levels name from the UI is : "
																																												+ optionGroupObjectNameOptionLevelsTextVk
																																												+ " are same ");

																																						FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																								.byValueKey(
																																										itemNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionGroupsObjectNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionsObjectNameReplace
																																												+ "_rightarrow");

																																						optionGroupObjectNameOptionLevelsForwardArrowVk
																																								.click();

																																						nextGenSize001
																																								.info(MarkupHelper
																																										.createLabel(
																																												" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																												ExtentColor.CYAN));
																																						System.out
																																								.println(
																																										" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ");

																																					}

																																					FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																							.byValueKey(
																																									itemNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionGroupsObjectNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionsObjectNameReplace
																																											+ "_leftarrow");

																																					optionGroupObjectNameOptionLevelsBackwardArrowVk
																																							.click();
																																				}
																																			}

																																			if (optionGroup
																																					.has("max")) {

																																				String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																						.optString(
																																								"max");

																																				int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																						.parseInt(
																																								optJSONArrayOptionGroupsObjectMaximum);

																																				if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																						- 1) {

																																					nextGenSize001
																																							.info(MarkupHelper
																																									.createLabel(
																																											" Validated that after tapping the max limit of : "
																																													+ optJSONArrayOptionGroupsObjectMaximumInt
																																													+ " in this option group name : "
																																													+ optJSONArrayOptionGroupsObjectName
																																													+ " the below items are hidden ",
																																											ExtentColor.CYAN));
																																					System.out
																																							.println(
																																									" Validated that after tapping the max limit of : "
																																											+ optJSONArrayOptionGroupsObjectMaximumInt
																																											+ " in this option group name : "
																																											+ optJSONArrayOptionGroupsObjectName
																																											+ " the below items are hidden ");

																																					FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																							.byValueKey(
																																									itemNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionGroupsObjectNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionsObjectNameReplace
																																											+ "_checkbox");

																																					optionGroupObjectNameCheckbox1Vk
																																							.click();

																																					System.out
																																							.println(
																																									" Unchecking the : "
																																											+ f
																																											+ " item : "
																																											+ optJSONArrayOptionGroupsObjectName
																																											+ " again to check the other items ");

																																					if (f == optJSONArrayOptionsLength
																																							- 1) {

																																						optionGroupObjectNameCheckbox1Vk
																																								.click();

																																					}

																																				}

																																			} else {

																																				nextGenSize001
																																						.info(MarkupHelper
																																								.createLabel(
																																										" There is no maximum condition for this option group : "
																																												+ optJSONArrayOptionGroupsObjectName,
																																										ExtentColor.CYAN));
																																				System.out
																																						.println(
																																								" There is no maximum condition for this option group : "
																																										+ optJSONArrayOptionGroupsObjectName);
																																			}

																																		}

																																	}
																																}

																																scrollOptionsGroupUpAndClick(
																																		optJSONArrayOptionGroupsObjectName);

																																FlutterElement optionGroupObjectGroupVk = find
																																		.byValueKey(
																																				itemNameReplace
																																						+ "_"
																																						+ optJSONArrayOptionGroupsObjectNameReplace);

																																optionGroupObjectGroupVk
																																		.click();

																																itemQuantityScroll();
																															}
																														}

																														else {

																															nextGenSize001
																																	.info(MarkupHelper
																																			.createLabel(
																																					" No match found for option_value : "
																																							+ optionGroupObjectNameTextVk,
																																					ExtentColor.CYAN));
																															System.out
																																	.println(
																																			" No match found for option_value : "
																																					+ optionGroupObjectNameTextVk);

																														}
																													}

																												}

																											}

																										}

																									}

																									if (optJSONArrayOptionGroupsObject
																											.has("max")) {

																										String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																												.optString(
																														"max");

																										int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																												.parseInt(
																														optJSONArrayOptionGroupsObjectMaximum);

																										if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																												- 1) {

																											nextGenSize001
																													.info(MarkupHelper
																															.createLabel(
																																	" Validated that after tapping the max limit of : "
																																			+ optJSONArrayOptionGroupsObjectMaximumInt
																																			+ " in this option group name : "
																																			+ optJSONArrayOptionGroupsObjectName
																																			+ " the below items are hidden ",
																																	ExtentColor.CYAN));
																											System.out
																													.println(
																															" Validated that after tapping the max limit of : "
																																	+ optJSONArrayOptionGroupsObjectMaximumInt
																																	+ " in this option group name : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " the below items are hidden ");

																											FlutterElement optionGroupObjectNameCheckbox1Vk = find
																													.byValueKey(
																															itemNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_checkbox");

																											optionGroupObjectNameCheckbox1Vk
																													.click();

																											System.out
																													.println(
																															" Unchecking the : "
																																	+ f
																																	+ " item : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " again to check the other items ");

																											if (f == optJSONArrayOptionsLength
																													- 1) {

																												optionGroupObjectNameCheckbox1Vk
																														.click();

																											}

																										}

																									} else {

																										nextGenSize001
																												.info(MarkupHelper
																														.createLabel(
																																" There is no maximum condition for this option group : "
																																		+ optJSONArrayOptionGroupsObjectName,
																																ExtentColor.CYAN));
																										System.out
																												.println(
																														" There is no maximum condition for this option group : "
																																+ optJSONArrayOptionGroupsObjectName);
																									}

																								}

																							} else if (optJSONArrayOptionGroupsObjectMin >= 1
																									&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																								nextGenSize001.info(
																										MarkupHelper
																												.createLabel(
																														" The option : "
																																+ optionGroupObjectNameTextVk
																																+ " is multi selection mandatory field",
																														ExtentColor.CYAN));
																								System.out.println(
																										" The option : "
																												+ optionGroupObjectNameTextVk
																												+ " is multi selection mandatory field");

																								if (optJSONArrayOptionGroupsObjectQuantities == "true"
																										&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" The option : "
																																	+ optionGroupObjectNameTextVk
																																	+ " is multi selection mandatory field has increment decrement button",
																															ExtentColor.CYAN));
																									System.out.println(
																											" The option : "
																													+ optionGroupObjectNameTextVk
																													+ " is multi selection mandatory field has increment decrement button");

																									FlutterElement optionCountVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountTextVk = optionCountVk
																											.getText();

																									long optionCountLongVk = Long
																											.parseLong(
																													optionCountTextVk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" Before tapping increment and decrement button the count is : "
																																	+ optionCountLongVk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" Before tapping increment and decrement button the count is : "
																													+ optionCountLongVk);
																									if (optStringIsDefault
																											.equalsIgnoreCase(
																													"true")) {

																										FlutterElement optionGroupObjectNameIncrementButtonVk = find
																												.byValueKey(
																														itemNameReplace
																																+ "_"
																																+ optJSONArrayOptionGroupsObjectNameReplace
																																+ "_"
																																+ optJSONArrayOptionsObjectNameReplace
																																+ "_decrement");

																										optionGroupObjectNameIncrementButtonVk
																												.click();

																									}
																									FlutterElement optionGroupObjectNameIncrementButtonVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_increment");

																									optionGroupObjectNameIncrementButtonVk
																											.click();

																									FlutterElement optionCount1Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountText1Vk = optionCount1Vk
																											.getText();

																									long optionCountLong1Vk = Long
																											.parseLong(
																													optionCountText1Vk);

																									Assert.assertNotEquals(
																											optionCountTextVk,
																											optionCountText1Vk,
																											"Validated that after tapping increment button the count has been increased to : "
																													+ optionCountText1Vk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															"Validated that after tapping increment button the count has been increased to : "
																																	+ optionCountText1Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											"Validated that after tapping increment button the count has been increased to : "
																													+ optionCountText1Vk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" After tapping increment button the count is : "
																																	+ optionCountLong1Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" After tapping increment button the count is : "
																													+ optionCountLong1Vk);

																									FlutterElement optionGroupObjectNameDecrementButtonVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_decrement");

																									optionGroupObjectNameDecrementButtonVk
																											.click();

																									FlutterElement optionCount2Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountText2Vk = optionCount2Vk
																											.getText();

																									long optionCountLong2Vk = Long
																											.parseLong(
																													optionCountText2Vk);

																									Assert.assertEquals(
																											optionCountTextVk,
																											optionCountText2Vk,
																											"Validated that after tapping decrement button the count has been decreased to : "
																													+ optionCountText2Vk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" After tapping decrement button the count is : "
																																	+ optionCountLong2Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" After tapping decrement button the count is : "
																													+ optionCountLong2Vk);

																									FlutterElement optionGroupObjectNameIncrementButton1Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_increment");

																									optionGroupObjectNameIncrementButton1Vk
																											.click();

																									FlutterElement optionCount3Vk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_quantityvalue");

																									String optionCountText3Vk = optionCount3Vk
																											.getText();

																									long optionCountLong3Vk = Long
																											.parseLong(
																													optionCountText3Vk);

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" After tapping the increment button the count is : "
																																	+ optionCountLong3Vk,
																															ExtentColor.CYAN));
																									System.out.println(
																											" After tapping the increment button the count is : "
																													+ optionCountLong3Vk);

																									if (optJSONArrayOptionGroupsObject
																											.has("max")) {

																										String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																												.optString(
																														"max");

																										int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																												.parseInt(
																														optJSONArrayOptionGroupsObjectMaximum);

																										if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																												- 1) {

																											nextGenSize001
																													.info(MarkupHelper
																															.createLabel(
																																	" Validated that after tapping the max limit of : "
																																			+ optJSONArrayOptionGroupsObjectMaximumInt
																																			+ " in this option group name : "
																																			+ optJSONArrayOptionGroupsObjectName
																																			+ " the below items are hidden ",
																																	ExtentColor.CYAN));
																											System.out
																													.println(
																															" Validated that after tapping the max limit of : "
																																	+ optJSONArrayOptionGroupsObjectMaximumInt
																																	+ " in this option group name : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " the below items are hidden ");

																											FlutterElement optionGroupObjectNameCheckbox1Vk = find
																													.byValueKey(
																															itemNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_checkbox");

																											optionGroupObjectNameCheckbox1Vk
																													.click();

																											System.out
																													.println(
																															" Unchecking the : "
																																	+ f
																																	+ " item : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " again to check the other items ");

																											if (f == optJSONArrayOptionsLength
																													- 1) {

																												optionGroupObjectNameCheckbox1Vk
																														.click();

																											}

																										}
																									} else {

																										nextGenSize001
																												.info(MarkupHelper
																														.createLabel(
																																" There is no maximum condition for this option group : "
																																		+ optJSONArrayOptionGroupsObjectName,
																																ExtentColor.CYAN));
																										System.out
																												.println(
																														" There is no maximum condition for this option group : "
																																+ optJSONArrayOptionGroupsObjectName);
																									}

																								}

																								else if (optJSONArrayOptionGroupsObjectQuantities == "false"
																										&& optJSONArrayOptionGroupsObjectMultiSelect == "true") {

																									nextGenSize001.info(
																											MarkupHelper
																													.createLabel(
																															" The option : "
																																	+ optionGroupObjectNameTextVk
																																	+ " is multi selection Mandatory field has checkbox",
																															ExtentColor.CYAN));
																									System.out.println(
																											" The option : "
																													+ optionGroupObjectNameTextVk
																													+ " is multi selection Mandatory field has checkbox");

																									FlutterElement optionGroupObjectNameCheckboxVk = find
																											.byValueKey(
																													itemNameReplace
																															+ "_"
																															+ optJSONArrayOptionGroupsObjectNameReplace
																															+ "_"
																															+ optJSONArrayOptionsObjectNameReplace
																															+ "_checkbox");

																									optionGroupObjectNameCheckboxVk
																											.click();

																									if (optJSONArrayOptionGroupsObject
																											.has("option_levels")) {
																										JSONObject optionLevels = optJSONArrayOptionGroupsObject
																												.getJSONObject(
																														"option_levels");
																										String optionLevelsName = optionLevels
																												.getString(
																														"name");

																										JSONArray optJSONArrayLevels = optionLevels
																												.optJSONArray(
																														"levels");

																										if (optJSONArrayLevels != null) {

																											for (int a = 0; a < optJSONArrayLevels
																													.length(); a++) {

																												JSONObject jsonObjectLevels = optJSONArrayLevels
																														.getJSONObject(
																																a);

																												System.out
																														.println(
																																"the index is :"
																																		+ a);

																												System.out
																														.println(
																																optJSONArrayLevels
																																		.length());

																												levelsList
																														.clear();

																												for (int i = 0; i < optJSONArrayLevels
																														.length(); i++) {

																													JSONObject jsonObjectLevelss = optJSONArrayLevels
																															.getJSONObject(
																																	i);

																													String levelsNames = jsonObjectLevelss
																															.optString(
																																	"name");

																													levelsList
																															.add(levelsNames);

																												}

																												String levelsName = jsonObjectLevels
																														.optString(
																																"name");

																												String levelsNameReplace = levelsName
																														.toLowerCase()
																														.replace(
																																" ",
																																"_");

																												String levelsDefault = jsonObjectLevels
																														.optString(
																																"is_default");

																												if (levelsDefault
																														.equalsIgnoreCase(
																																"true")) {

																													nextGenSize001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option name :  "
																																					+ optionGroupObjectNameTextVk
																																					+ " is set to default and it's not shown in the list of the option group name : "
																																					+ levelsName
																																					+ " and it's not auto selected in the UI ",
																																			ExtentColor.CYAN));
																													System.out
																															.println(
																																	" The option name :  "
																																			+ optionGroupObjectNameTextVk
																																			+ " is set to default and it's not shown in the list of the option group name : "
																																			+ levelsName
																																			+ " and it's not auto selected in the UI ");

																												} else {

																													nextGenSize001
																															.info(MarkupHelper
																																	.createLabel(
																																			" The option name :  "
																																					+ optionGroupObjectNameTextVk
																																					+ " is not set to default and it's shown in the list of the option group name : "
																																					+ levelsName
																																					+ " and it's auto selected in the UI ",
																																			ExtentColor.CYAN));
																													System.out
																															.println(
																																	" The option name :  "
																																			+ optionGroupObjectNameTextVk
																																			+ " is not set to default and it's shown in the list of the option group name : "
																																			+ levelsName
																																			+ " and it's auto selected in the UI ");
																												}

																												FlutterElement optionGroupObjectNameOptionLevelsVk = find
																														.byValueKey(
																																itemNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_"
																																		+ "level_name");

																												String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																														.getText();

																												boolean levelsNameContains = levelsList
																														.contains(
																																optionGroupObjectNameOptionLevelsTextVk);

																												Assert.assertEquals(
																														levelsNameContains,
																														true,
																														" Validated that the option levels name from the API and the option levels name from the UI is : "
																																+ optionGroupObjectNameOptionLevelsTextVk
																																+ " are same ");

																												nextGenSize001
																														.info(MarkupHelper
																																.createLabel(
																																		" Validated that the option levels name from the API and the option levels name from the UI is : "
																																				+ optionGroupObjectNameOptionLevelsTextVk
																																				+ " are same ",
																																		ExtentColor.CYAN));
																												System.out
																														.println(
																																" Validated that the option levels name from the API and the option levels name from the UI is : "
																																		+ optionGroupObjectNameOptionLevelsTextVk
																																		+ " are same ");

																												FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																														.byValueKey(
																																itemNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionGroupsObjectNameReplace
																																		+ "_"
																																		+ optJSONArrayOptionsObjectNameReplace
																																		+ "_rightarrow");

																												optionGroupObjectNameOptionLevelsForwardArrowVk
																														.click();

																												nextGenSize001
																														.info(MarkupHelper
																																.createLabel(
																																		" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																		ExtentColor.CYAN));
																												System.out
																														.println(
																																" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ");

																											}

																											FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																													.byValueKey(
																															itemNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_leftarrow");

																											optionGroupObjectNameOptionLevelsBackwardArrowVk
																													.click();
																										}
																									}
																									if (item.optJSONArray(
																											"option_groups") != null) {

																										JSONArray optionGroups = item
																												.getJSONArray(
																														"option_groups");

																										for (int g = 0; g < optionGroups
																												.length(); g++) {
																											JSONObject optionGroup = optionGroups
																													.getJSONObject(
																															g);

																											if (optionGroup
																													.has("option_conditions")) {
																												JSONArray optionConditionsArray = optionGroup
																														.getJSONArray(
																																"option_conditions");

																												for (int h = 0; h < optionConditionsArray
																														.length(); h++) {
																													JSONArray optionCondition = optionConditionsArray
																															.getJSONArray(
																																	h);

																													for (int m = 0; m < optionCondition
																															.length(); m++) {
																														JSONObject condition = optionCondition
																																.getJSONObject(
																																		m);

																														String optionValue = condition
																																.getString(
																																		"option_value");
																														String optionGroupInCondition = condition
																																.getString(
																																		"option_group");

																														if (optionGroupObjectNameTextVk
																																.equals(optionValue)) {

																															String optionGroupName = optionGroup
																																	.getString(
																																			"name");

																															String optionGroupNameLowerCase = optionGroupName
																																	.replace(
																																			" ",
																																			"_")
																																	.toLowerCase();

																															String quantities = optionGroup
																																	.optString(
																																			"quantities");

																															scrollOptionsGroupDown(
																																	optionGroupName);

																															FlutterElement optionGroup1Vk = find
																																	.byValueKey(
																																			itemNameReplace
																																					+ "_"
																																					+ optionGroupNameLowerCase);

																															optionGroup1Vk
																																	.click();

																															itemQuantityScroll();

																															if (optionGroup
																																	.has("options")) {

																																JSONArray options = optionGroup
																																		.optJSONArray(
																																				"options");

																																for (int i = 0; i < options
																																		.length(); i++) {

																																	JSONObject optionObject = options
																																			.getJSONObject(
																																					i);

																																	String optionsName = optionObject
																																			.optString(
																																					"name");

																																	String optionsNameLowerCase = optionsName
																																			.replace(
																																					" ",
																																					"_")
																																			.toLowerCase();

																																	String isDefault = optionObject
																																			.optString(
																																					"is_default");

																																	String isDisabled = optionObject
																																			.optString(
																																					"is_disabled");

																																	if (isDisabled == "false") {

																																		if (quantities == "true") {

																																			if (isDefault == "true") {

																																				FlutterElement optionGroupObjectNameDecrementOptCVk = find
																																						.byValueKey(
																																								itemNameReplace
																																										+ "_"
																																										+ optionGroupNameLowerCase
																																										+ "_"
																																										+ optionsNameLowerCase
																																										+ "_decrement");

																																				optionGroupObjectNameDecrementOptCVk
																																						.click();

																																			}

																																			FlutterElement optionGroupObjectNameIncrementOptCVk = find
																																					.byValueKey(
																																							itemNameReplace
																																									+ "_"
																																									+ optionGroupNameLowerCase
																																									+ "_"
																																									+ optionsNameLowerCase
																																									+ "_increment");

																																			optionGroupObjectNameIncrementOptCVk
																																					.click();

																																		} else if (quantities == "false") {

																																			if (isDefault == "true") {

																																				FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																						.byValueKey(
																																								itemNameReplace
																																										+ "_"
																																										+ optionGroupNameLowerCase
																																										+ "_"
																																										+ optionsNameLowerCase
																																										+ "_checkbox");

																																				optionGroupObjectNameCheckboxOptCVk
																																						.click();

																																			}

																																			FlutterElement optionGroupObjectNameCheckboxOptCVk = find
																																					.byValueKey(
																																							itemNameReplace
																																									+ "_"
																																									+ optionGroupNameLowerCase
																																									+ "_"
																																									+ optionsNameLowerCase
																																									+ "_checkbox");

																																			optionGroupObjectNameCheckboxOptCVk
																																					.click();

																																			if (optionGroup
																																					.has("option_levels")) {
																																				JSONObject optionLevels = optionGroup
																																						.getJSONObject(
																																								"option_levels");
																																				String optionLevelsName = optionLevels
																																						.getString(
																																								"name");

																																				JSONArray optJSONArrayLevels = optionLevels
																																						.optJSONArray(
																																								"levels");

																																				if (optJSONArrayLevels != null) {

																																					for (int a = 0; a < optJSONArrayLevels
																																							.length(); a++) {

																																						JSONObject jsonObjectLevels = optJSONArrayLevels
																																								.getJSONObject(
																																										a);

																																						System.out
																																								.println(
																																										"the index is :"
																																												+ a);

																																						System.out
																																								.println(
																																										optJSONArrayLevels
																																												.length());

																																						levelsList
																																								.clear();

																																						for (int b = 0; b < optJSONArrayLevels
																																								.length(); b++) {

																																							JSONObject jsonObjectLevelss = optJSONArrayLevels
																																									.getJSONObject(
																																											b);

																																							String levelsNames = jsonObjectLevelss
																																									.optString(
																																											"name");

																																							levelsList
																																									.add(levelsNames);

																																						}

																																						String levelsName = jsonObjectLevels
																																								.optString(
																																										"name");

																																						String levelsNameReplace = levelsName
																																								.toLowerCase()
																																								.replace(
																																										" ",
																																										"_");

																																						String levelsDefault = jsonObjectLevels
																																								.optString(
																																										"is_default");

																																						if (levelsDefault
																																								.equalsIgnoreCase(
																																										"true")) {

																																							nextGenSize001
																																									.info(MarkupHelper
																																											.createLabel(
																																													" The option name :  "
																																															+ optionGroupObjectNameTextVk
																																															+ " is set to default and it's not shown in the list of the option group name : "
																																															+ levelsName
																																															+ " and it's not auto selected in the UI ",
																																													ExtentColor.CYAN));
																																							System.out
																																									.println(
																																											" The option name :  "
																																													+ optionGroupObjectNameTextVk
																																													+ " is set to default and it's not shown in the list of the option group name : "
																																													+ levelsName
																																													+ " and it's not auto selected in the UI ");

																																						} else {

																																							nextGenSize001
																																									.info(MarkupHelper
																																											.createLabel(
																																													" The option name :  "
																																															+ optionGroupObjectNameTextVk
																																															+ " is not set to default and it's shown in the list of the option group name : "
																																															+ levelsName
																																															+ " and it's auto selected in the UI ",
																																													ExtentColor.CYAN));
																																							System.out
																																									.println(
																																											" The option name :  "
																																													+ optionGroupObjectNameTextVk
																																													+ " is not set to default and it's shown in the list of the option group name : "
																																													+ levelsName
																																													+ " and it's auto selected in the UI ");
																																						}

																																						FlutterElement optionGroupObjectNameOptionLevelsVk = find
																																								.byValueKey(
																																										itemNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionGroupsObjectNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionsObjectNameReplace
																																												+ "_"
																																												+ "level_name");

																																						String optionGroupObjectNameOptionLevelsTextVk = optionGroupObjectNameOptionLevelsVk
																																								.getText();

																																						boolean levelsNameContains = levelsList
																																								.contains(
																																										optionGroupObjectNameOptionLevelsTextVk);

																																						Assert.assertEquals(
																																								levelsNameContains,
																																								true,
																																								" Validated that the option levels name from the API and the option levels name from the UI is : "
																																										+ optionGroupObjectNameOptionLevelsTextVk
																																										+ " are same ");

																																						nextGenSize001
																																								.info(MarkupHelper
																																										.createLabel(
																																												" Validated that the option levels name from the API and the option levels name from the UI is : "
																																														+ optionGroupObjectNameOptionLevelsTextVk
																																														+ " are same ",
																																												ExtentColor.CYAN));
																																						System.out
																																								.println(
																																										" Validated that the option levels name from the API and the option levels name from the UI is : "
																																												+ optionGroupObjectNameOptionLevelsTextVk
																																												+ " are same ");

																																						FlutterElement optionGroupObjectNameOptionLevelsForwardArrowVk = find
																																								.byValueKey(
																																										itemNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionGroupsObjectNameReplace
																																												+ "_"
																																												+ optJSONArrayOptionsObjectNameReplace
																																												+ "_rightarrow");

																																						optionGroupObjectNameOptionLevelsForwardArrowVk
																																								.click();

																																						nextGenSize001
																																								.info(MarkupHelper
																																										.createLabel(
																																												" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ",
																																												ExtentColor.CYAN));
																																						System.out
																																								.println(
																																										" The option levels reached the end to click the forward arrow and clicking the backward arrow once to check whether it's showing the previous item or not ");

																																					}

																																					FlutterElement optionGroupObjectNameOptionLevelsBackwardArrowVk = find
																																							.byValueKey(
																																									itemNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionGroupsObjectNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionsObjectNameReplace
																																											+ "_leftarrow");

																																					optionGroupObjectNameOptionLevelsBackwardArrowVk
																																							.click();
																																				}
																																			}

																																			if (optionGroup
																																					.has("max")) {

																																				String optJSONArrayOptionGroupsObjectMaximum = optionGroup
																																						.optString(
																																								"max");

																																				int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																																						.parseInt(
																																								optJSONArrayOptionGroupsObjectMaximum);

																																				if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																																						- 1) {

																																					nextGenSize001
																																							.info(MarkupHelper
																																									.createLabel(
																																											" Validated that after tapping the max limit of : "
																																													+ optJSONArrayOptionGroupsObjectMaximumInt
																																													+ " in this option group name : "
																																													+ optJSONArrayOptionGroupsObjectName
																																													+ " the below items are hidden ",
																																											ExtentColor.CYAN));
																																					System.out
																																							.println(
																																									" Validated that after tapping the max limit of : "
																																											+ optJSONArrayOptionGroupsObjectMaximumInt
																																											+ " in this option group name : "
																																											+ optJSONArrayOptionGroupsObjectName
																																											+ " the below items are hidden ");

																																					FlutterElement optionGroupObjectNameCheckbox1Vk = find
																																							.byValueKey(
																																									itemNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionGroupsObjectNameReplace
																																											+ "_"
																																											+ optJSONArrayOptionsObjectNameReplace
																																											+ "_checkbox");

																																					optionGroupObjectNameCheckbox1Vk
																																							.click();

																																					System.out
																																							.println(
																																									" Unchecking the : "
																																											+ f
																																											+ " item : "
																																											+ optJSONArrayOptionGroupsObjectName
																																											+ " again to check the other items ");

																																					if (f == optJSONArrayOptionsLength
																																							- 1) {

																																						optionGroupObjectNameCheckbox1Vk
																																								.click();

																																					}

																																				}

																																			} else {

																																				nextGenSize001
																																						.info(MarkupHelper
																																								.createLabel(
																																										" There is no maximum condition for this option group : "
																																												+ optJSONArrayOptionGroupsObjectName,
																																										ExtentColor.CYAN));
																																				System.out
																																						.println(
																																								" There is no maximum condition for this option group : "
																																										+ optJSONArrayOptionGroupsObjectName);
																																			}

																																		}

																																	}
																																}

																																scrollOptionsGroupUpAndClick(
																																		optJSONArrayOptionGroupsObjectName);

																																FlutterElement optionGroupObjectGroupVk = find
																																		.byValueKey(
																																				itemNameReplace
																																						+ "_"
																																						+ optJSONArrayOptionGroupsObjectNameReplace);

																																optionGroupObjectGroupVk
																																		.click();

																																itemQuantityScroll();
																															}
																														}

																														else {

																															nextGenSize001
																																	.info(MarkupHelper
																																			.createLabel(
																																					"No match found for option_value: "
																																							+ optionGroupObjectNameTextVk,
																																					ExtentColor.CYAN));
																															System.out
																																	.println(
																																			"No match found for option_value: "
																																					+ optionGroupObjectNameTextVk);

																														}
																													}
																												}

																											}

																										}

																									}
																									if (optJSONArrayOptionGroupsObject
																											.has("max")) {

																										String optJSONArrayOptionGroupsObjectMaximum = optJSONArrayOptionGroupsObject
																												.optString(
																														"max");

																										int optJSONArrayOptionGroupsObjectMaximumInt = Integer
																												.parseInt(
																														optJSONArrayOptionGroupsObjectMaximum);

																										if (f >= optJSONArrayOptionGroupsObjectMaximumInt
																												- 1) {

																											nextGenSize001
																													.info(MarkupHelper
																															.createLabel(
																																	" Validated that after tapping the max limit of : "
																																			+ optJSONArrayOptionGroupsObjectMaximumInt
																																			+ " in this option group name : "
																																			+ optJSONArrayOptionGroupsObjectName
																																			+ " the below items are hidden ",
																																	ExtentColor.CYAN));
																											System.out
																													.println(
																															" Validated that after tapping the max limit of : "
																																	+ optJSONArrayOptionGroupsObjectMaximumInt
																																	+ " in this option group name : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " the below items are hidden ");

																											FlutterElement optionGroupObjectNameCheckbox1Vk = find
																													.byValueKey(
																															itemNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionGroupsObjectNameReplace
																																	+ "_"
																																	+ optJSONArrayOptionsObjectNameReplace
																																	+ "_checkbox");

																											optionGroupObjectNameCheckbox1Vk
																													.click();

																											System.out
																													.println(
																															" Unchecking the : "
																																	+ f
																																	+ " item : "
																																	+ optJSONArrayOptionGroupsObjectName
																																	+ " again to check the other items ");

																											if (f == optJSONArrayOptionsLength
																													- 1) {

																												optionGroupObjectNameCheckbox1Vk
																														.click();

																											}

																										}

																									} else {

																										nextGenSize001
																												.info(MarkupHelper
																														.createLabel(
																																" There is no maximum condition for this option group : "
																																		+ optJSONArrayOptionGroupsObjectName,
																																ExtentColor.CYAN));
																										System.out
																												.println(
																														" There is no maximum condition for this option group : "
																																+ optJSONArrayOptionGroupsObjectName);
																									}

																								}
																							}
																						} else {

																							nextGenSize001
																									.info(MarkupHelper
																											.createLabel(
																													" The option : "
																															+ optJSONArrayOptionsObjectName
																															+ "is disabled and won't be displayed",
																													ExtentColor.CYAN));
																							System.out.println(
																									" The option : "
																											+ optJSONArrayOptionsObjectName
																											+ "is disabled and won't be displayed");
																						}
																					}

																					scrollOptionsGroupUpAndClick(
																							optJSONArrayOptionGroupsObjectName);

																					FlutterElement optionGroupObjectGroupVk = find
																							.byValueKey(itemNameReplace
																									+ "_"
																									+ optJSONArrayOptionGroupsObjectNameReplace);

																					optionGroupObjectGroupVk.click();

																					itemQuantityScroll();

																					FlutterElement optionalRequired1Vk = find
																							.byValueKey(itemNameReplace
																									+ "_"
																									+ optJSONArrayOptionGroupsObjectNameReplace
																									+ "_description");

																					String optionalRequiredText1Vk = optionalRequired1Vk
																							.getText();

																					if (optionalRequiredText1Vk
																							.toLowerCase()
																							.contains("optional")) {

																						boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																								.toLowerCase()
																								.contains("optional");

																						Assert.assertEquals(
																								optionalRequiredTextContains1Vk,
																								true,
																								"Validated that the option group : "
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ " is optional ");

																						nextGenSize001.info(MarkupHelper
																								.createLabel(
																										"Validated that the option group : "
																												+ optJSONArrayOptionGroupsObjectNameReplace
																												+ " is optional ",
																										ExtentColor.CYAN));
																						System.out.println(
																								"Validated that the option group : "
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ " is optional ");

																					}

																					else if (optionalRequiredText1Vk
																							.toLowerCase()
																							.contains("required")) {
																						boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																								.toLowerCase()
																								.contains("required");

																						Assert.assertEquals(
																								optionalRequiredTextContains1Vk,
																								true,
																								"Validated that the option group : "
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ " is required or mandatory ");

																						nextGenSize001.info(MarkupHelper
																								.createLabel(
																										"Validated that the option group : "
																												+ optJSONArrayOptionGroupsObjectNameReplace
																												+ " is required or mandatory ",
																										ExtentColor.CYAN));
																						System.out.println(
																								"Validated that the option group : "
																										+ optJSONArrayOptionGroupsObjectNameReplace
																										+ " is required or mandatory ");

																					}

																					FlutterElement optionGroupObjectNameSelectedOptionsVk = find
																							.byValueKey(itemNameReplace
																									+ "_"
																									+ optJSONArrayOptionGroupsObjectNameReplace
																									+ "_selected_options");

																					String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
																							.getText();

																					int countOfCommas = getCountOfCommas(
																							optionGroupObjectNameSelectedOptionsTextVk);

																					if (countOfCommas == 0) {

																						Assert.assertEquals(
																								countOfCommas, 0,
																								" Validated that the item is single selected  ");

																					} else if (countOfCommas > 0) {

																						Assert.assertEquals(
																								countOfCommas + 1,
																								countOfCommas + 1,
																								" Validated that the item is a multi selected ");

																					}
																				} else {

																					nextGenSize001.info(
																							MarkupHelper.createLabel(
																									" Options is null for the option groups name : "
																											+ optJSONArrayOptionGroupsObjectName,
																									ExtentColor.CYAN));
																					System.out.println(
																							" Options is null for the option groups name : "
																									+ optJSONArrayOptionGroupsObjectName);
																				}
																			} else {

																				nextGenSize001
																						.info(MarkupHelper.createLabel(
																								" Option groups named : "
																										+ optJSONArrayOptionGroupsObjectName
																										+ " doesn't have options in it ",
																								ExtentColor.CYAN));
																				System.out.println(
																						" Option groups named : "
																								+ optJSONArrayOptionGroupsObjectName
																								+ " doesn't have options in it ");
																			}

																		} else {

																			nextGenSize001
																					.info(MarkupHelper.createLabel(
																							" The Option group is null and moving to the next option group of sub menu item name : "
																									+ itemName,
																							ExtentColor.CYAN));
																			System.out.println(
																					" The Option group is null and moving to the next option group of sub menu item name : "
																							+ itemName);
																		}

																	} else {

																		nextGenSize001.info(MarkupHelper.createLabel(
																				" Price name : " + priceName
																						+ " not equals to the size condition : "
																						+ sizeConditionParam,
																				ExtentColor.CYAN));
																		System.out.println(" Price name : " + priceName
																				+ " not equals to the size condition : "
																				+ sizeConditionParam);
																	}

																}

															} else {

																nextGenSize001.info(MarkupHelper.createLabel(
																		" Size condition param : " + sizeConditionParam
																				+ " is not matched with the : "
																				+ optStringSizeNameTextUI,
																		ExtentColor.CYAN));
																System.out.println(
																		" Size condition param : " + sizeConditionParam
																				+ " is not matched with the : "
																				+ optStringSizeNameTextUI);
															}

														}

													}
												} else {

													nextGenSize001.info(MarkupHelper.createLabel(
															" The option group object doesn't have size conditions "
																	+ optStringSizeNameTextUI,
															ExtentColor.CYAN));
													System.out.println(
															" The option group object doesn't have size conditions "
																	+ optStringSizeNameTextUI);
												}

											}
										}
									}

									scrollUp();

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(3000);

									FlutterElement optionGroupName1Vk = find.byValueKey(itemNameReplace + "_size");

									optionGroupName1Vk.click();

									FlutterElement optionalRequired1Vk = find
											.byValueKey(itemNameReplace + "_size_description");

									String optionalRequiredText1Vk = optionalRequired1Vk.getText();

									if (optionalRequiredText1Vk.toLowerCase().contains("optional")) {

										boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk.toLowerCase()
												.contains("optional");

										Assert.assertEquals(optionalRequiredTextContains1Vk, true,
												"Validated that the option group : " + optionGroupNameTextVk
														+ " is optional ");

										nextGenSize001
												.info(MarkupHelper.createLabel("Validated that the option group : "
														+ optionGroupNameTextVk + " is optional ", ExtentColor.CYAN));
										System.out.println("Validated that the option group : " + optionGroupNameTextVk
												+ " is optional ");

									}

									else if (optionalRequiredText1Vk.toLowerCase().contains("required")) {
										boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk.toLowerCase()
												.contains("required");

										Assert.assertEquals(optionalRequiredTextContains1Vk, true,
												"Validated that the option group : " + optionGroupNameTextVk
														+ " is required or mandatory ");

										nextGenSize001.info(MarkupHelper.createLabel(
												"Validated that the option group : " + optionGroupNameTextVk
														+ " is required or mandatory ",
												ExtentColor.CYAN));
										System.out.println("Validated that the option group : " + optionGroupNameTextVk
												+ " is required or mandatory ");

									}

									FlutterElement optionGroupObjectNameSelectedOptionsVk = find
											.byValueKey(itemNameReplace + "_size_selected_options");

									String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
											.getText();

									int countOfCommas = getCountOfCommas(optionGroupObjectNameSelectedOptionsTextVk);

									if (countOfCommas == 0) {

										Assert.assertEquals(countOfCommas, 0,
												" Validated that the item is single selected  ");

										nextGenSize001.info(MarkupHelper.createLabel(
												" Validated that the item is single selected  ", ExtentColor.CYAN));
										System.out.println(" Validated that the item is single selected  ");

									} else if (countOfCommas > 0) {

										Assert.assertEquals(countOfCommas + 1, pricesLength,
												" Validated that the item is a multi selected  ");

										nextGenSize001.info(MarkupHelper.createLabel(
												" Validated that the item is a multi selected  ", ExtentColor.CYAN));
										System.out.println(" Validated that the item is a multi selected  ");

									}

								} else {

									nextGenSize001.info(MarkupHelper.createLabel(
											" The size is lesser or equal to 1 and it won't be displayed for the sub menu item name is : "
													+ itemName,
											ExtentColor.CYAN));
									System.out.println(
											" The size is lesser or equal to 1 and it won't be displayed for the sub menu item name is : "
													+ itemName);

								}

								commonMethods.switchContext("FLUTTER");

								Thread.sleep(1200);
//
//								scrollOptionsGroupUpAndClick(itemNameReplace);
							}

						}
					}

				} else {

					System.out.println(" Item quantity screen title of : " + menuScreenTitleTextVk
							+ " not matches with the : " + itemName);
				}

			}

		}

	}

	private static void scrollSize() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		By targetElementLocator = By
				.xpath("//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'size'" + ")]");
		boolean elementFound = false;
		while (!elementFound) {
			try {
				WebElement element = driver.findElement(targetElementLocator);

				if (element.isDisplayed()) {
					IOSTouchAction IOSTouchAction4 = new IOSTouchAction(driver);
					IOSTouchAction4.press(PointOption.point(150, 550))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 650)).release().perform();

					try {
						elementFound = true;

					} catch (Exception clickException) {
						IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
						IOSTouchAction.press(PointOption.point(150, 550))
								.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
								.moveTo(PointOption.point(150, 650)).release().perform();
					}
				} else {
					IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
					IOSTouchAction.press(PointOption.point(150, 550))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
							.moveTo(PointOption.point(150, 650)).release().perform();
				}
			} catch (NoSuchElementException e2) {
				IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
				IOSTouchAction.press(PointOption.point(150, 550))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3))).moveTo(PointOption.point(150, 650))
						.release().perform();
			}

		}
		if (!elementFound) {
		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static int getCountOfCommas(String input) {
		int count = 0;

		for (int i = 0; i < input.length(); i++) {
			if (input.charAt(i) == ',') {
				count++;
			}
		}

		return count;
	}

	private static void itemQuantityScroll() throws InterruptedException {
		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(2000);

		TouchAction touch4 = new TouchAction(driver);
		touch4.press(PointOption.point(500, 1850)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
				.moveTo(PointOption.point(500, 1650)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(2000);

	}

	private static void scrollOptionsGroupUpAndClick(String input) throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(2000);

		By targetElementLocator3 = By.xpath(
				"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'" + input.toLowerCase() + "'" + ")]");

		int maxScrollAttempts3 = 5;

		for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
			try {
				WebElement element = driver.findElement(targetElementLocator3);
				if (element.isDisplayed()) {
					TouchAction touchAction1 = new TouchAction(driver);
					touchAction1.press(PointOption.point(500, 600))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
							.moveTo(PointOption.point(500, 800)).release().perform();

					break;
				}
			} catch (Exception e2) {

				TouchAction touchAction1 = new TouchAction(driver);
				touchAction1.press(PointOption.point(500, 600))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6))).moveTo(PointOption.point(500, 1200))
						.release().perform();
				System.out.println(" Store not found in the : " + j1
						+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
						+ maxScrollAttempts3);
			}

		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(2500);

	}

	private static void scrollOptionsGroupDown(String input) throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(2000);

		By targetElementLocator3 = By.xpath(
				"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'" + input.toLowerCase() + "'" + ")]");

		int maxScrollAttempts3 = 5;

		for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
			try {
				WebElement element = driver.findElement(targetElementLocator3);
				if (element.isDisplayed()) {
					TouchAction touchAction1 = new TouchAction(driver);
					touchAction1.press(PointOption.point(500, 800))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
							.moveTo(PointOption.point(500, 600)).release().perform();
					break;
				}
			} catch (Exception e2) {

				TouchAction touchAction1 = new TouchAction(driver);
				touchAction1.press(PointOption.point(500, 1200))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6))).moveTo(PointOption.point(500, 600))
						.release().perform();
			}

		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(2000);

	}

	private static void scrollUp() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1500);

		TouchAction touchAction1 = new TouchAction(driver);
		touchAction1.press(PointOption.point(500, 600)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
				.moveTo(PointOption.point(500, 800)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1000);

	}
}
