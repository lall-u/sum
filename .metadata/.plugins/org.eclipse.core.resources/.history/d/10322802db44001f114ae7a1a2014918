package com.features;

import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;

import org.json.JSONArray;
import org.json.JSONObject;
import org.testng.annotations.Test;

import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.DashBoardLocators;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class APIMethods {

	static String userName;
	static String passWord;
	static String merchantId;
	static String cardTemplateCode;
	static String storeGroupCode;
	static String clientId;
	static String integrationDetail;
	static String Restaurant_Id;
	static String orderId;
	static String key = "6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
	static String provider = "px";

	static CommonMethods commonMethods = new CommonMethods();

	static DashBoardLocators dashBoardLocators = new DashBoardLocators();
	
	static boolean multiMerchant = true;

	// Method to generate access token
	public static Response generateAccessToken(String userName, String passWord, String cardTemplateCode,
			String merchantId) {
		
		
		
		String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
				+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
				+ cardTemplateCode + "\",\n" + "    \"scope\": \"user_read account_read account_write user_write\",\n"
				+ "    \"merchantId\": \"" + merchantId + "\",\n"
				+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
				+ "    \"authentication\": \"anonymous\",\n"
				+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
				+ "    \"client_id\": \"y5mjgC9v2raWoMkQ_1jJgZhMEinFx9Zl4fb7105Slp\"\n" + "}";

		RequestSpecification request = io.restassured.RestAssured.given().contentType(ContentType.JSON)
				.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json")
				.body(jsonString);

		Response response = request.post();

		return response;

	}
	
	public static Response requestGuestToken() throws GeneralSecurityException, IOException {
		
		BaseClass bc = new BaseClass();
		List<String> appConfiguration = bc.appConfiguration();
		userName = appConfiguration.get(6);
		passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		List<String> requestGuestToken = bc.uriEndpointsData();
		String requestGuestTokenUri = requestGuestToken.get(1);
		
		String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
				+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
				+ cardTemplateCode + "\",\n" + "    \"scope\": \"user_read account_read account_write user_write\",\n"
				+ "    \"merchantId\": \"" + merchantId + "\",\n"
				+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
				+ "    \"authentication\": \"anonymous\",\n"
				+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
				+ "    \"client_id\": \"y5mjgC9v2raWoMkQ_1jJgZhMEinFx9Zl4fb7105Slp\"\n" + "}";

		RequestSpecification request = io.restassured.RestAssured.given().contentType(ContentType.JSON)
				.baseUri(requestGuestTokenUri)
				.body(jsonString);

		Response response = request.post();
		
		System.out.println(response);

		return response;

	}
	
	// Method to generate authorization grant
	public static String generateAuthorizationGrant(String accessTokenGen, String userName) throws GeneralSecurityException, IOException {
		
		BaseClass bc = new BaseClass();
		List<String> authorizationGrant = bc.uriEndpointsData();
		String authorizationGrantUri = authorizationGrant.get(2);
		
		String jsonString1 = "{\n" + "    \"authentication\": \"oauth\",\n" + "    \"merchantId\": \"60019\",\n"
				+ "    \"access_token\": \"" + accessTokenGen + "\",\n" + "    \"response_type\": \"code\",\n"
				+ "    \"thirdPartyIntegration\": \"lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97\",\n"
				+ "    \"scope\": \"user_read account_read account_write user_write\",\n" + "    \"username\": \""
				+ userName + "\",\n" + "    \"client_id\": \"y5mjgC9v2raWoMkQ_1jJgZhMEinFx9Zl4fb7105Slp\"\n" + "}";

		RequestSpecification req = io.restassured.RestAssured.given().contentType(ContentType.JSON)
				.baseUri(authorizationGrantUri)
				.body(jsonString1);

		Response resp = req.post();
		JSONObject jObj1 = new JSONObject(resp.getBody().asString());
		return jObj1.getString("authorizationGrant");
	}

// TO ADD CREDIT CARD
	public static String spreedlyRetrieveCardToken(String creditCard, String firstName, String lastName,
			String cardNumber, String CVV, String monthData, String yearData, String emailId) {
		RequestSpecification httpRequest = io.restassured.RestAssured.given()
				.baseUri("https://core.spreedly.com/v1/payment_methods.js");

		Map<String, String> params = new HashMap<>();
//		if(multiMerchant==true) {
//			
//			String hmac = CommonMethods.getSecondField(null);
//			
//			params.put("X-PX-Request-ID", hmac);	
//		}
		params.put("environment_key", "TGhaOmppDgApYUbIxwwb46mrTEG");
		params.put("kind", creditCard);
		params.put("first_name", firstName);
		params.put("last_name", lastName);
		params.put("number", cardNumber);
		params.put("verification_value", CVV);
		params.put("month", monthData);
		params.put("year", yearData);
		params.put("email", emailId);

		Response response = httpRequest.queryParams(params).get("");

		JSONObject jObject = new JSONObject(response.body().asString());
		JSONObject transactionObj = jObject.optJSONObject("transaction");
		JSONObject tokenObj = transactionObj != null ? transactionObj.optJSONObject("payment_method") : null;

		return tokenObj != null ? tokenObj.optString("token") : null;
	}

	// TO CREATE THE CARD BY GIVEN TOKEN
	public static Response createCard(String authorizationGrantReq, String digitsData, String monthData,
			String printedCardNumberData, String cardToken, String cardTypeData, String yearData) {
		RequestSpecification requestSpec = io.restassured.RestAssured.given()
				.baseUri("https://opendining.net/api/v1/account/cards")
				.queryParam("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

		Map<String, String> cardParam = new HashMap<>();
		cardParam.put("access_token", authorizationGrantReq);
		cardParam.put("digits", digitsData);
		cardParam.put("merchant_id", "60019");
		cardParam.put("month", monthData);
		cardParam.put("printed_card_number", printedCardNumberData);
		cardParam.put("provider", "px");
		cardParam.put("token", cardToken);
		cardParam.put("type", cardTypeData);
		cardParam.put("year", yearData);

		requestSpec.formParams(cardParam);

		return requestSpec.post();
	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name orderId
	 * @Description Contains code to get the orderId for the store which is
	 *              configured in the Test data external sheet
	 * @return String
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static String orderId() throws GeneralSecurityException, IOException {

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		merchantId = takeoutFlowConfiguration.get(8);
		String storeCode = takeoutFlowConfiguration.get(13);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"+ storeCode + "?";
		RequestSpecification requestingHttp = io.restassured.RestAssured.given();

		RequestSpecification parameterRequest = requestingHttp.queryParam("key",
				"ce1b6c4a546509ef17557094078169c25aa7b54e");
		Response restaurantsResponse = parameterRequest.get("");
		System.out.println(restaurantsResponse.asPrettyString());

		JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
		if (storeResponse.has("name")) {


			boolean takeoutResponse = false;

			JSONObject curbsideResponse = null;

			boolean hideTakeout = false;

			boolean curbsideOrderTypeResponse = false;

			boolean deliveryOrderTypeResponse = false;

			if (storeResponse.has("takeout")) {

				takeoutResponse = storeResponse.optBoolean("takeout");

			}

			if (storeResponse.has("curbside")) {

				curbsideResponse = storeResponse.optJSONObject("curbside");
			}
			if (storeResponse.has("hide_takeout")) {

				 hideTakeout = curbsideResponse.optBoolean("hide_takeout");

				curbsideOrderTypeResponse = curbsideResponse.optBoolean("en");

			}

			if (storeResponse.has("delivery")) {

				deliveryOrderTypeResponse = storeResponse.optBoolean("delivery");

			}

			System.out.println(" takeout Response & Label Text : " + takeoutResponse + hideTakeout);

			Restaurant_Id = storeResponse.optString("id");

			List<String> appConfiguration = bass.appConfiguration();

			userName = appConfiguration.get(6);
			passWord = appConfiguration.get(7);
			merchantId = appConfiguration.get(8);
			cardTemplateCode = appConfiguration.get(9);
			storeGroupCode = appConfiguration.get(10);
			clientId = appConfiguration.get(11);
			integrationDetail = appConfiguration.get(12);

			storeCode = appConfiguration.get(13);

			System.out.println("API Success1");

			String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
					+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
					+ cardTemplateCode + "\",\n"
					+ "    \"scope\": \"user_read account_read account_write user_write\",\n" + "    \"merchantId\": \""
					+ merchantId + "\",\n" + "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
					+ "    \"authentication\": \"anonymous\",\n"
					+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
					+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

			RequestSpecification request = io.restassured.RestAssured.given();

			request.contentType(ContentType.JSON);

			request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

			request.body(jsonString);
			Response response = request.post();
			ValidatableResponse validatableResponse = response.then();
			validatableResponse.statusCode(200);
			JSONObject jObj = new JSONObject(response.body().asString());
			String accessTokenGen = jObj.optString("access_token");
			String printedCardNumberResponse = jObj.optString("printedCardNumber");

			if (curbsideOrderTypeResponse || deliveryOrderTypeResponse || takeoutResponse) {

				String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n"
						+ "    \"merchant_id\" : " + merchantId + ",\n" + "    \"printed_card_number\" : "
						+ printedCardNumberResponse + " ,\n" + "    \"provider\" : \"px\",\n"
						+ "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

				RequestSpecification requestOrders = io.restassured.RestAssured.given();

				RequestSpecification parameterReq = requestOrders.queryParam("key",
						"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

				parameterReq.contentType(ContentType.JSON);

				parameterReq.baseUri("https://opendining.net/api/v1/orders?");

				parameterReq.body(Json1);
				Response responseOrders = parameterReq.post();
				ValidatableResponse validatableOrdersResponse = responseOrders.then();

				validatableOrdersResponse.statusCode(200);
				JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
				orderId = jObjOrders.optString("order_id");
				System.out.println(" order id : " + orderId);

			} else {

				System.out.println("No order type is configured in the Respective store.");

			}

		}

		return orderId;
	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name takeOutConfig
	 * @Description Contains code to get the takeout param whether it is true or
	 *              false for the store which is configured in the Test data
	 *              external sheet
	 * @return String
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	@Test
	public static String takeOutConfig() throws GeneralSecurityException, IOException {

		BaseClass base = new BaseClass();

		List<String> appConfiguration = base.appConfiguration();

		userName = appConfiguration.get(6);
		passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		storeGroupCode = appConfiguration.get(10);
		clientId = appConfiguration.get(11);
		integrationDetail = appConfiguration.get(12);

		String storeCode = appConfiguration.get(13);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse1 = parameterRequest1.get("");

		JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

		String takeoutResponse = null;

		if (storeResponse1.has("name")) {

			if (storeResponse1.has("takeout")) {

				if (storeResponse1.optString("takeout") != null) {

					takeoutResponse = storeResponse1.optString("takeout");

					System.out.println(" takeout : " + takeoutResponse);

				} else {
					System.out.println(" takeout param is null");
				}

			} else {

				System.out.println(" No takeout parameter is available ");
			}

		} else {
			System.out.println("takeoutconfig doesn't enter in name");

		}

		return takeoutResponse;

	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name hideTakeOutConfig
	 * @Description Contains code to get the hide takeout param whether it is true
	 *              or false for the store which is configured in the Test data
	 *              external sheet
	 * @return String
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static String hideTakeOutConfig() throws GeneralSecurityException, IOException {

		BaseClass base = new BaseClass();

		List<String> appConfiguration = base.appConfiguration();

		userName = appConfiguration.get(6);
		passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		storeGroupCode = appConfiguration.get(10);
		clientId = appConfiguration.get(11);
		integrationDetail = appConfiguration.get(12);

		String storeCode = appConfiguration.get(13);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

		Response restaurantsResponse1 = parameterRequest1.get("");

		JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

		String hideTakeout = null;

		if (storeResponse1.has("name")) {

			String takeOutConfig = takeOutConfig();

			if (takeOutConfig != null && takeOutConfig == "true") {

				if (storeResponse1.has("curbside")) {

					if (storeResponse1.optJSONObject("curbside") != null) {

						JSONObject curbsideResponse = storeResponse1.optJSONObject("curbside");

						if (curbsideResponse.has("hide_takeout")) {

							if (curbsideResponse.optString("hide_takeout") != null) {

								hideTakeout = curbsideResponse.optString("hide_takeout");

								System.out.println(" hide takeout : " + hideTakeout);

							} else {
								System.out.println("hide_takeout param is null");
							}

						} else {
							System.out.println("hide_takeout param is not available");
						}
					} else {
						System.out.println(" curbside is null");
					}
				} else {

					System.out.println(" Curbside is not enabled as the hide_takeout param won't be available ");
				}
			} else {

				System.out.println(" Takeout param is not enabled and hence curbside is disabled ");

			}

		} else {

			System.out.println(" doesn't contain name param ");
		}

		return hideTakeout;

	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name curbsideConfig
	 * @Description Contains code to get the curbside param whether it is true or
	 *              false for the store which is configured in the Test data
	 *              external sheet
	 * @return String
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static String curbsideConfig() throws GeneralSecurityException, IOException {

		BaseClass base = new BaseClass();

		List<String> appConfiguration = base.appConfiguration();

		userName = appConfiguration.get(6);
		passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		storeGroupCode = appConfiguration.get(10);
		clientId = appConfiguration.get(11);
		integrationDetail = appConfiguration.get(12);

		String storeCode = appConfiguration.get(13);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse1 = parameterRequest1.get("");

		JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

		String curbsideResponse = null;

		if (storeResponse1.has("name")) {

			if (storeResponse1.has("curbside")) {

				if (storeResponse1.optJSONObject("curbside") != null) {

					String takeOutConfig = takeOutConfig();

					if (takeOutConfig != null && takeOutConfig == "true") {

						JSONObject curbsideObject = storeResponse1.optJSONObject("curbside");

						curbsideResponse = curbsideObject.optString("en");

						System.out.println(" curbside : " + curbsideResponse);

					} else {

						System.out.println(" Takeout param is not enabled and hence curbside is disabled ");

					}

				} else {

					System.out.println("curbside param is null");
				}

			} else {

				System.out.println(" curbside param is not available ");
			}

		}

		return curbsideResponse;

	}

	@Test
	private void param() throws GeneralSecurityException, IOException {

		curbsideConfig();

	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name deliveryConfig
	 * @Description Contains code to get the delivery param whether it is true or
	 *              false for the store which is configured in the Test data
	 *              external sheet
	 * @return String
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static String deliveryConfig() throws GeneralSecurityException, IOException {

		BaseClass base = new BaseClass();

		List<String> appConfiguration = base.appConfiguration();

		userName = appConfiguration.get(6);
		passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		storeGroupCode = appConfiguration.get(10);
		clientId = appConfiguration.get(11);
		integrationDetail = appConfiguration.get(12);

		String storeCode = appConfiguration.get(13);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse1 = parameterRequest1.get("");

		JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

		String deliveryResponse = null;

		if (storeResponse1.has("name")) {

			if (storeResponse1.has("delivery")) {

				if (storeResponse1.optString("delivery") != null) {

					deliveryResponse = storeResponse1.optString("delivery");

					System.out.println(" delivery : " + deliveryResponse);

				} else {
					System.out.println("delivery param is null");
				}

			} else {

				System.out.println(" delivery param is not available ");
			}
		}

		return deliveryResponse;

	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name asapConfig
	 * @Description Contains code to get the asap param whether it is true or false
	 *              for the store which is configured in the Test data external
	 *              sheet
	 * @return String
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static String asapConfig() throws GeneralSecurityException, IOException {

		BaseClass base = new BaseClass();

		List<String> appConfiguration = base.appConfiguration();

		userName = appConfiguration.get(6);
		passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		storeGroupCode = appConfiguration.get(10);
		clientId = appConfiguration.get(11);
		integrationDetail = appConfiguration.get(12);

		String storeCode = appConfiguration.get(13);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse1 = parameterRequest1.get("");

		JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

		String asapOrder = null;

		if (storeResponse1.has("name")) {

			if (storeResponse1.has("advance_only")) {

				asapOrder = storeResponse1.optString("advance_only");

				System.out.println(" Asap config : " + asapOrder);

			} else {

				System.out.println(" asap param is not available");
			}
		}

		return asapOrder;

	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name laterConfig
	 * @Description Contains code to get the later param whether it is true or false
	 *              for the store which is configured in the Test data external
	 *              sheet
	 * @return String
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static String laterConfig() throws GeneralSecurityException, IOException {

		BaseClass base = new BaseClass();

		List<String> appConfiguration = base.appConfiguration();

		userName = appConfiguration.get(6);
		passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		storeGroupCode = appConfiguration.get(10);
		clientId = appConfiguration.get(11);
		integrationDetail = appConfiguration.get(12);

		String storeCode = appConfiguration.get(13);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse1 = parameterRequest1.get("");

		JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());

		String laterOrder = null;

		if (storeResponse1.has("name")) {

			if (storeResponse1.has("usa_eta")) {

				laterOrder = storeResponse1.optString("use_eta");

				System.out.println(" Later config : " + laterOrder);

			} else {

				System.out.println(" later param is not available ");
			}

		}

		return laterOrder;

	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name recentOrderList
	 * @Description Contains code to get the recent order list for the store which
	 *              is configured in the Test data external sheet
	 * @return String
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static JSONArray recentOrderList() throws GeneralSecurityException, IOException {

		BaseClass bc = new BaseClass();

		List<String> givenStringCode = bc.appConfiguration();

		String merchantId = givenStringCode.get(8);

		List<String> appConfiguration = bc.appConfiguration();

		String userName = appConfiguration.get(6);
		String passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		storeGroupCode = appConfiguration.get(10);
		clientId = appConfiguration.get(11);
		integrationDetail = appConfiguration.get(12);

		String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
				+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
				+ cardTemplateCode + "\",\n" + "    \"scope\": \"user_read account_read account_write user_write\",\n"
				+ "    \"merchantId\": \"" + merchantId + "\",\n"
				+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
				+ "    \"authentication\": \"anonymous\",\n"
				+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n" + "    \"client_id\": \""
				+ clientId + "\"\n" + "}";

		RequestSpecification request = io.restassured.RestAssured.given();

		request.contentType(ContentType.JSON);

		request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

		request.body(jsonString);
		Response response = request.post();
		ValidatableResponse validatableResponse = response.then();
		validatableResponse.statusCode(200);
		JSONObject jObj = new JSONObject(response.body().asString());
		String accessTokenGen = jObj.optString("access_token");
		String printedCardNumberResponse = jObj.optString("printedCardNumber");

		String json = "{\n" + "    \"thirdPartyIntegration\": \"lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97\",\n"
				+ "    \"response_type\": \"code\",\n"
				+ "    \"scope\": \"user_read user_write account_read account_write\",\n" + "    \"merchantId\": "
				+ merchantId + ",\n" + "    \"authentication\": \"oauth\",\n" + "    \"username\": \"" + userName
				+ "\",\n"
				+ "    \"integrationDetail\": \"os=iOS|osversion=14.7.1|device=iPhone|merchantId=60019|integrator=Paytronix|version=REST:14.15 - API:23.15-Rose(Branded)-SNAPSHOT - APP:2023072101\",\n"
				+ "    \"access_token\": \"" + accessTokenGen + "\",\n"
				+ "    \"client_id\": \"y5mjgC9v2raWoMkQ_1jJgZhMEinFx9Zl4fb7105Slp\"\n" + "}";

		RequestSpecification requestAuth = io.restassured.RestAssured.given();
		requestAuth.contentType(ContentType.JSON);
		requestAuth.baseUri("https://www.train.paytronix.com:1283/rest/14.15/oauth/requestAuthorizationGrant.json");
		requestAuth.body(json);
		Response responseAuth = requestAuth.post();
		ValidatableResponse validatableResponseAuth = responseAuth.then();
		validatableResponseAuth.statusCode(200);
		JSONObject jObjAuth = new JSONObject(responseAuth.body().asString());
		String authorizationGrant = jObjAuth.optString("authorizationGrant");
		String key = "6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		String provider = "px";

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/account/orders?";
//Construct the query parameters
		Map<String, String> parametersRecent = new HashMap<>();
		
		
		
		parametersRecent.put("key", key);
		parametersRecent.put("access_token", authorizationGrant);
		parametersRecent.put("merchant_id", merchantId);
		parametersRecent.put("printed_card_number", printedCardNumberResponse);
		parametersRecent.put("provider", provider);
		RequestSpecification httpReqRecent = io.restassured.RestAssured.given();
		RequestSpecification responseRecent = httpReqRecent.queryParams(parametersRecent);
		Response respRecent = responseRecent.get("");
		JSONArray jsonObjectRecent = new JSONArray(respRecent.body().asString());

		return jsonObjectRecent;
	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name recents
	 * @Description Contains code to get the recent order items
	 * @return List<String>
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	@Test
	private void recents() throws GeneralSecurityException, IOException {

		BaseClass bc = new BaseClass();

		List<String> givenStringCode = bc.appConfiguration();

		String merchantId = givenStringCode.get(8);

		List<String> appConfiguration = bc.appConfiguration();

		String userName = appConfiguration.get(6);
		String passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		storeGroupCode = appConfiguration.get(10);
		clientId = appConfiguration.get(11);
		integrationDetail = appConfiguration.get(12);

		String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
				+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
				+ cardTemplateCode + "\",\n" + "    \"scope\": \"user_read account_read account_write user_write\",\n"
				+ "    \"merchantId\": \"" + merchantId + "\",\n"
				+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
				+ "    \"authentication\": \"anonymous\",\n"
				+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n" + "    \"client_id\": \""
				+ clientId + "\"\n" + "}";

		RequestSpecification request = io.restassured.RestAssured.given();

		request.contentType(ContentType.JSON);

		request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

		request.body(jsonString);
		Response response = request.post();
		ValidatableResponse validatableResponse = response.then();
		validatableResponse.statusCode(200);
		JSONObject jObj = new JSONObject(response.body().asString());
		String accessTokenGen = jObj.optString("access_token");
		String printedCardNumberResponse = jObj.optString("printedCardNumber");

		String json = "{\n" + "    \"thirdPartyIntegration\": \"lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97\",\n"
				+ "    \"response_type\": \"code\",\n"
				+ "    \"scope\": \"user_read user_write account_read account_write\",\n" + "    \"merchantId\": "
				+ merchantId + ",\n" + "    \"authentication\": \"oauth\",\n" + "    \"username\": \"" + userName
				+ "\",\n"
				+ "    \"integrationDetail\": \"os=iOS|osversion=14.7.1|device=iPhone|merchantId=60019|integrator=Paytronix|version=REST:14.15 - API:23.15-Rose(Branded)-SNAPSHOT - APP:2023072101\",\n"
				+ "    \"access_token\": \"" + accessTokenGen + "\",\n"
				+ "    \"client_id\": \"y5mjgC9v2raWoMkQ_1jJgZhMEinFx9Zl4fb7105Slp\"\n" + "}";

		RequestSpecification requestAuth = io.restassured.RestAssured.given();
		requestAuth.contentType(ContentType.JSON);
		requestAuth.baseUri("https://www.train.paytronix.com:1283/rest/14.15/oauth/requestAuthorizationGrant.json");
		requestAuth.body(json);
		Response responseAuth = requestAuth.post();
		ValidatableResponse validatableResponseAuth = responseAuth.then();
		validatableResponseAuth.statusCode(200);
		JSONObject jObjAuth = new JSONObject(responseAuth.body().asString());
		String authorizationGrant = jObjAuth.optString("authorizationGrant");
		String key = "6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		String provider = "px";

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/account/orders?";
//Construct the query parameters
		Map<String, String> parametersRecent = new HashMap<>();
		parametersRecent.put("key", key);
		parametersRecent.put("access_token", authorizationGrant);
		parametersRecent.put("merchant_id", merchantId);
		parametersRecent.put("printed_card_number", printedCardNumberResponse);
		parametersRecent.put("provider", provider);
		RequestSpecification httpReqRecent = io.restassured.RestAssured.given();
		RequestSpecification responseRecent = httpReqRecent.queryParams(parametersRecent);
		Response respRecent = responseRecent.get("");
		JSONArray jsonObjectRecent = new JSONArray(respRecent.body().asString());

		if (jsonObjectRecent.length() > 1) {

			List<JSONObject> collectedItems = new ArrayList<>();
			int itemsToCollect = 3;

			for (int q = 0; q < jsonObjectRecent.length() && collectedItems.size() < itemsToCollect; q++) {
				JSONObject order = jsonObjectRecent.getJSONObject(q);
				JSONArray itemsArray = order.getJSONArray("items");

				for (int j = 0; j < itemsArray.length() && collectedItems.size() < itemsToCollect; j++) {
					collectedItems.add(itemsArray.getJSONObject(j));
				}
			}

			// Print the collected items
			for (JSONObject item : collectedItems) {
				System.out.println(item.toString(2));
			}

		}

	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name takeoutOrderType
	 * @Description Contains code to get the takeout order type for the store which
	 *              is configured in the Test configuration sheet
	 * @return boolean
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static boolean takeoutOrderType() throws GeneralSecurityException, IOException, InterruptedException {

		BaseClass bc = new BaseClass();

		List<String> selectedFlow = bc.configuration();

		String nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest = selectedFlow.get(9);

		String nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest = selectedFlow.get(10);

		String nextGenLocationListFlowWithTakeoutAsapConfiguredGuest = selectedFlow.get(15);

		String nextGenLocationListFlowWithTakeoutLaterConfiguredGuest = selectedFlow.get(16);

		String nextGenOrderNowFlowWithTakeoutAsapConfigured = selectedFlow.get(64);

		String nextGenOrderNowFlowWithTakeoutLaterConfigured = selectedFlow.get(65);

		String nextGenOrderNowFlowWithTakeoutAsapMapViewConfigured = selectedFlow.get(70);

		String nextGenOrderNowFlowWithTakeoutLaterMapViewConfigured = selectedFlow.get(71);

		String nextGenOrderNowFlowWithTakeoutAsapStoreMapViewConfigured = selectedFlow.get(76);

		String nextGenOrderNowFlowWithTakeoutLaterStoreMapViewConfigured = selectedFlow.get(77);

		String nextGenLocationListFlowWithTakeoutAsapConfigured = selectedFlow.get(82);

		String nextGenLocationListFlowWithTakeoutLaterConfigured = selectedFlow.get(83);

		String nextGenLocationListFlowWithTakeoutAsapMapViewConfigured = selectedFlow.get(88);

		String nextGenLocationListFlowWithTakeoutLaterMapViewConfigured = selectedFlow.get(89);

		String nextGenLocationListFlowWithTakeoutAsapStoreMapViewConfigured = selectedFlow.get(94);

		String nextGenLocationListFlowWithTakeoutLaterStoreMapViewConfigured = selectedFlow.get(95);

		boolean takeOutConfigSheet = false;

		if (nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithTakeoutAsapConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithTakeoutAsapMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithTakeoutAsapStoreMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutAsapConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutAsapConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutAsapMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutAsapStoreMapViewConfigured.equalsIgnoreCase("Yes")) {

			String takeOutConfig = APIMethods.takeOutConfig();

			String hideTakeOutConfig = APIMethods.hideTakeOutConfig();

			if (takeOutConfig == "true") {

				if (hideTakeOutConfig == "false") {

					takeOutConfigSheet = true;

				}

			}
		}

		else if (nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithTakeoutLaterConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithTakeoutLaterMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithTakeoutLaterStoreMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutLaterConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutLaterConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutLaterMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutLaterStoreMapViewConfigured.equalsIgnoreCase("Yes")) {

			String takeOutConfig = APIMethods.takeOutConfig();

			String hideTakeOutConfig = APIMethods.hideTakeOutConfig();

			if (takeOutConfig == "true") {

				if (hideTakeOutConfig == "false") {

					takeOutConfigSheet = true;
				}

			}
		}

		return takeOutConfigSheet;
	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name curbsideOrderType
	 * @Description Contains code to get the curbside order type for the store which
	 *              is configured in the Test configuration sheet
	 * @return boolean
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static boolean curbsideOrderType() throws GeneralSecurityException, IOException {

		BaseClass bc = new BaseClass();

		List<String> selectedFlow = bc.configuration();
		String nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest = selectedFlow.get(11);
		String nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest = selectedFlow.get(12);
		String nextGenLocationListFlowWithCurbsideAsapConfiguredGuest = selectedFlow.get(17);
		String nextGenLocationListFlowWithCurbsideLaterConfiguredGuest = selectedFlow.get(18);
		String nextGenOrderNowFlowWithCurbsideAsapConfigured = selectedFlow.get(66);
		String nextGenOrderNowFlowWithCurbsideLaterConfigured = selectedFlow.get(67);
		String nextGenOrderNowFlowWithCurbsideAsapMapViewConfigured = selectedFlow.get(72);
		String nextGenOrderNowFlowWithCurbsideLaterMapViewConfigured = selectedFlow.get(73);
		String nextGenOrderNowFlowWithCurbsideAsapStoreMapViewConfigured = selectedFlow.get(78);
		String nextGenOrderNowFlowWithCurbsideLaterStoreMapViewConfigured = selectedFlow.get(79);
		String nextGenLocationListFlowWithCurbsideAsapConfigured = selectedFlow.get(84);
		String nextGenLocationListFlowWithCurbsideLaterConfigured = selectedFlow.get(85);
		String nextGenLocationListFlowWithCurbsideAsapMapViewConfigured = selectedFlow.get(90);
		String nextGenLocationListFlowWithCurbsideLaterMapViewConfigured = selectedFlow.get(91);
		String nextGenLocationListFlowWithCurbsideAsapStoreMapViewConfigured = selectedFlow.get(96);
		String nextGenLocationListFlowWithCurbsideLaterStoreMapViewConfigured = selectedFlow.get(97);

		boolean curbsideConfigSheet = false;

		if (nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithCurbsideAsapConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithCurbsideAsapMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithCurbsideAsapStoreMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideAsapConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideAsapConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideAsapMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideAsapStoreMapViewConfigured.equalsIgnoreCase("Yes")) {

			String curbsideConfig = APIMethods.curbsideConfig();

			if (curbsideConfig == "true") {

				curbsideConfigSheet = true;
			}

		}

		else if (nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithCurbsideLaterConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithCurbsideLaterMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithCurbsideLaterStoreMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideLaterConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideLaterConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideLaterMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideLaterStoreMapViewConfigured.equalsIgnoreCase("Yes")) {

			String curbsideConfig = APIMethods.curbsideConfig();

			if (curbsideConfig == "true") {

				curbsideConfigSheet = true;

			}
		}

		return curbsideConfigSheet;
	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name deliveryOrderType
	 * @Description Contains code to get the delivery order type for the store which
	 *              is configured in the Test configuration sheet
	 * @return boolean
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static boolean deliveryOrderType() throws GeneralSecurityException, IOException, InterruptedException {

		BaseClass bc = new BaseClass();

		List<String> selectedFlow = bc.configuration();

		String nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest = selectedFlow.get(13);

		String nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest = selectedFlow.get(14);

		String nextGenLocationListFlowWithDeliveryAsapConfiguredGuest = selectedFlow.get(19);

		String nextGenLocationListFlowWithDeliveryLaterConfiguredGuest = selectedFlow.get(20);

		String nextGenOrderNowFlowWithDeliveryAsapConfigured = selectedFlow.get(68);

		String nextGenOrderNowFlowWithDeliveryLaterConfigured = selectedFlow.get(69);

		String nextGenOrderNowFlowWithDeliveryAsapMapViewConfigured = selectedFlow.get(74);

		String nextGenOrderNowFlowWithDeliveryLaterMapViewConfigured = selectedFlow.get(75);

		String nextGenOrderNowFlowWithDeliveryAsapStoreMapViewConfigured = selectedFlow.get(80);

		String nextGenOrderNowFlowWithDeliveryLaterStoreMapViewConfigured = selectedFlow.get(81);

		String nextGenLocationListFlowWithDeliveryAsapConfigured = selectedFlow.get(86);

		String nextGenLocationListFlowWithDeliveryLaterConfigured = selectedFlow.get(87);

		String nextGenLocationListFlowWithDeliveryAsapMapViewConfigured = selectedFlow.get(92);

		String nextGenLocationListFlowWithDeliveryLaterMapViewConfigured = selectedFlow.get(93);

		String nextGenLocationListFlowWithDeliveryAsapStoreMapViewConfigured = selectedFlow.get(98);

		String nextGenLocationListFlowWithDeliveryLaterStoreMapViewConfigured = selectedFlow.get(99);

		boolean deliveryConfigSheet = false;

		if (nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithDeliveryAsapConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithDeliveryAsapMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithDeliveryAsapStoreMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryAsapConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryAsapConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryAsapMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryAsapStoreMapViewConfigured.equalsIgnoreCase("Yes")) {

			String deliveryConfig = APIMethods.deliveryConfig();

			if (deliveryConfig == "true") {

				deliveryConfigSheet = false;

			}
		}

		else if (nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithDeliveryLaterConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithDeliveryLaterMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithDeliveryLaterStoreMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryLaterConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryLaterConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryLaterMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryLaterStoreMapViewConfigured.equalsIgnoreCase("Yes")) {

			String deliveryConfig = APIMethods.deliveryConfig();

			if (deliveryConfig == "true") {

				deliveryConfigSheet = false;

			}

		}

		return deliveryConfigSheet;
	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name takeoutOrderTypeWithOrderTime
	 * @Description Contains code to get the takeout order type with order time for
	 *              the store which is configured in the Test configuration sheet
	 * @return List<String>
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static List<String> takeoutOrderTypeWithOrderTime()
			throws GeneralSecurityException, IOException, InterruptedException {

		String asapText = commonMethods
				.stringsReader(dashBoardLocators.OD_ORDER_AGAIN_SINGLE_ORDER_ALERT_POPUP_ASAP_STRING);
		String laterText = commonMethods
				.stringsReader(dashBoardLocators.OD_ORDER_AGAIN_SINGLE_ORDER_ALERT_POPUP_LATER_STRING);

		BaseClass bc = new BaseClass();

		List<String> selectedFlow = bc.configuration();

		String nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest = selectedFlow.get(9);

		String nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest = selectedFlow.get(10);

		String nextGenLocationListFlowWithTakeoutAsapConfiguredGuest = selectedFlow.get(15);

		String nextGenLocationListFlowWithTakeoutLaterConfiguredGuest = selectedFlow.get(16);

		String nextGenOrderNowFlowWithTakeoutAsapConfigured = selectedFlow.get(64);

		String nextGenOrderNowFlowWithTakeoutLaterConfigured = selectedFlow.get(65);

		String nextGenOrderNowFlowWithTakeoutAsapMapViewConfigured = selectedFlow.get(70);

		String nextGenOrderNowFlowWithTakeoutLaterMapViewConfigured = selectedFlow.get(71);

		String nextGenOrderNowFlowWithTakeoutAsapStoreMapViewConfigured = selectedFlow.get(76);

		String nextGenOrderNowFlowWithTakeoutLaterStoreMapViewConfigured = selectedFlow.get(77);

		String nextGenLocationListFlowWithTakeoutAsapConfigured = selectedFlow.get(82);

		String nextGenLocationListFlowWithTakeoutLaterConfigured = selectedFlow.get(83);

		String nextGenLocationListFlowWithTakeoutAsapMapViewConfigured = selectedFlow.get(88);

		String nextGenLocationListFlowWithTakeoutLaterMapViewConfigured = selectedFlow.get(89);

		String nextGenLocationListFlowWithTakeoutAsapStoreMapViewConfigured = selectedFlow.get(94);

		String nextGenLocationListFlowWithTakeoutLaterStoreMapViewConfigured = selectedFlow.get(95);

		List<String> takeOut = new ArrayList<>();

		String takeOutAsapLater = null;

		boolean asapConfig = commonMethods.elementFoundOrNotPopUp(asapText);

		boolean laterConfig = commonMethods.elementFoundOrNotPopUp(laterText);

		if (nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithTakeoutAsapConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithTakeoutAsapMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithTakeoutAsapStoreMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutAsapConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutAsapConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutAsapMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutAsapStoreMapViewConfigured.equalsIgnoreCase("Yes")) {

			String takeOutConfig = APIMethods.takeOutConfig();

			String hideTakeOutConfig = APIMethods.hideTakeOutConfig();

			if (takeOutConfig == "true") {

				if (hideTakeOutConfig == "false") {

					if (asapConfig == true) {

						takeOutAsapLater = "ASAP";

						takeOut.add(takeOutAsapLater);

					}
				}

			}
		}

		else if (nextGenOrderNowFlowWithTakeoutLaterConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithTakeoutLaterConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithTakeoutLaterMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithTakeoutLaterStoreMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutLaterConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutLaterConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutLaterMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithTakeoutLaterStoreMapViewConfigured.equalsIgnoreCase("Yes")) {

			String takeOutConfig = APIMethods.takeOutConfig();

			String hideTakeOutConfig = APIMethods.hideTakeOutConfig();

			if (takeOutConfig == "true") {

				if (hideTakeOutConfig == "false") {

					if (laterConfig == true) {

						takeOutAsapLater = "later";

						takeOut.add(takeOutAsapLater);

					}
				}

			}
		}

		return takeOut;
	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name curbsideOrderTypeWithOrderTime
	 * @Description Contains code to get the curbside order type with order time for
	 *              the store which is configured in the Test configuration sheet
	 * @return List<String>
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static List<String> curbsideOrderTypeWithOrderTime()
			throws GeneralSecurityException, IOException, InterruptedException {

		String asapText = commonMethods
				.stringsReader(dashBoardLocators.OD_ORDER_AGAIN_SINGLE_ORDER_ALERT_POPUP_ASAP_STRING);
		String laterText = commonMethods
				.stringsReader(dashBoardLocators.OD_ORDER_AGAIN_SINGLE_ORDER_ALERT_POPUP_LATER_STRING);

		BaseClass bc = new BaseClass();

		List<String> selectedFlow = bc.configuration();
		String nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest = selectedFlow.get(11);
		String nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest = selectedFlow.get(12);
		String nextGenLocationListFlowWithCurbsideAsapConfiguredGuest = selectedFlow.get(17);
		String nextGenLocationListFlowWithCurbsideLaterConfiguredGuest = selectedFlow.get(18);
		String nextGenOrderNowFlowWithCurbsideAsapConfigured = selectedFlow.get(66);
		String nextGenOrderNowFlowWithCurbsideLaterConfigured = selectedFlow.get(67);
		String nextGenOrderNowFlowWithCurbsideAsapMapViewConfigured = selectedFlow.get(72);
		String nextGenOrderNowFlowWithCurbsideLaterMapViewConfigured = selectedFlow.get(73);
		String nextGenOrderNowFlowWithCurbsideAsapStoreMapViewConfigured = selectedFlow.get(78);
		String nextGenOrderNowFlowWithCurbsideLaterStoreMapViewConfigured = selectedFlow.get(79);
		String nextGenLocationListFlowWithCurbsideAsapConfigured = selectedFlow.get(84);
		String nextGenLocationListFlowWithCurbsideLaterConfigured = selectedFlow.get(85);
		String nextGenLocationListFlowWithCurbsideAsapMapViewConfigured = selectedFlow.get(90);
		String nextGenLocationListFlowWithCurbsideLaterMapViewConfigured = selectedFlow.get(91);
		String nextGenLocationListFlowWithCurbsideAsapStoreMapViewConfigured = selectedFlow.get(96);
		String nextGenLocationListFlowWithCurbsideLaterStoreMapViewConfigured = selectedFlow.get(97);

		List<String> curbside = new ArrayList<>();

		String curbsideAsapLater = null;

		boolean asapConfig = commonMethods.elementFoundOrNotPopUp(asapText);

		boolean laterConfig = commonMethods.elementFoundOrNotPopUp(laterText);

		if (nextGenOrderNowFlowWithCurbsideAsapConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithCurbsideAsapConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithCurbsideAsapMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithCurbsideAsapStoreMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideAsapConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideAsapConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideAsapMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideAsapStoreMapViewConfigured.equalsIgnoreCase("Yes")) {

			String curbsideConfig = APIMethods.curbsideConfig();

			if (curbsideConfig == "true") {

				if (asapConfig == true) {

					curbsideAsapLater = "ASAP";

					curbside.add(curbsideAsapLater);
				}
			}

		}

		else if (nextGenOrderNowFlowWithCurbsideLaterConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithCurbsideLaterConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithCurbsideLaterMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithCurbsideLaterStoreMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideLaterConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideLaterConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideLaterMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithCurbsideLaterStoreMapViewConfigured.equalsIgnoreCase("Yes")) {

			String curbsideConfig = APIMethods.curbsideConfig();

			if (curbsideConfig == "true") {

				if (laterConfig == true) {

					curbsideAsapLater = "later";

					curbside.add(curbsideAsapLater);
				}
			}
		}

		return curbside;
	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name deliveryOrderTypeWithOrderTime
	 * @Description Contains code to get the delivery order type with order time for
	 *              the store which is configured in the Test configuration sheet
	 * @return List<String>
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static List<String> deliveryOrderTypeWithOrderTime()
			throws GeneralSecurityException, IOException, InterruptedException {

		String asapText = commonMethods
				.stringsReader(dashBoardLocators.OD_ORDER_AGAIN_SINGLE_ORDER_ALERT_POPUP_ASAP_STRING);
		String laterText = commonMethods
				.stringsReader(dashBoardLocators.OD_ORDER_AGAIN_SINGLE_ORDER_ALERT_POPUP_LATER_STRING);

		Thread.sleep(5000);

		BaseClass bc = new BaseClass();

		List<String> selectedFlow = bc.configuration();

		String nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest = selectedFlow.get(13);

		String nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest = selectedFlow.get(14);

		String nextGenLocationListFlowWithDeliveryAsapConfiguredGuest = selectedFlow.get(19);

		String nextGenLocationListFlowWithDeliveryLaterConfiguredGuest = selectedFlow.get(20);

		String nextGenOrderNowFlowWithDeliveryAsapConfigured = selectedFlow.get(68);

		String nextGenOrderNowFlowWithDeliveryLaterConfigured = selectedFlow.get(69);

		String nextGenOrderNowFlowWithDeliveryAsapMapViewConfigured = selectedFlow.get(74);

		String nextGenOrderNowFlowWithDeliveryLaterMapViewConfigured = selectedFlow.get(75);

		String nextGenOrderNowFlowWithDeliveryAsapStoreMapViewConfigured = selectedFlow.get(80);

		String nextGenOrderNowFlowWithDeliveryLaterStoreMapViewConfigured = selectedFlow.get(81);

		String nextGenLocationListFlowWithDeliveryAsapConfigured = selectedFlow.get(86);

		String nextGenLocationListFlowWithDeliveryLaterConfigured = selectedFlow.get(87);

		String nextGenLocationListFlowWithDeliveryAsapMapViewConfigured = selectedFlow.get(92);

		String nextGenLocationListFlowWithDeliveryLaterMapViewConfigured = selectedFlow.get(93);

		String nextGenLocationListFlowWithDeliveryAsapStoreMapViewConfigured = selectedFlow.get(98);

		String nextGenLocationListFlowWithDeliveryLaterStoreMapViewConfigured = selectedFlow.get(99);

		List<String> delivery = new ArrayList<>();

		String deliveryAsapLater = null;

		boolean asapConfig = commonMethods.elementFoundOrNotPopUp(asapText);

		boolean laterConfig = commonMethods.elementFoundOrNotPopUp(laterText);

		if (nextGenOrderNowFlowWithDeliveryAsapConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithDeliveryAsapConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithDeliveryAsapMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithDeliveryAsapStoreMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryAsapConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryAsapConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryAsapMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryAsapStoreMapViewConfigured.equalsIgnoreCase("Yes")) {

			String deliveryConfig = APIMethods.deliveryConfig();

			if (deliveryConfig == "true") {

				if (asapConfig == true) {

					deliveryAsapLater = "ASAP";

					delivery.add(deliveryAsapLater);
				}
			}
		}

		else if (nextGenOrderNowFlowWithDeliveryLaterConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithDeliveryLaterConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithDeliveryLaterMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenOrderNowFlowWithDeliveryLaterStoreMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryLaterConfiguredGuest.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryLaterConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryLaterMapViewConfigured.equalsIgnoreCase("Yes")
				|| nextGenLocationListFlowWithDeliveryLaterStoreMapViewConfigured.equalsIgnoreCase("Yes")) {

			String deliveryConfig = APIMethods.deliveryConfig();

			if (deliveryConfig == "true") {

				if (laterConfig == true) {

					deliveryAsapLater = "later";

					delivery.add(deliveryAsapLater);

				}

			}

		}

		return delivery;
	}

	public static Response takeOutResponse() throws GeneralSecurityException, IOException {

		BaseClass base = new BaseClass();
		List<String> appConfiguration = base.appConfiguration();
		userName = appConfiguration.get(6);
		passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		storeGroupCode = appConfiguration.get(10);
		clientId = appConfiguration.get(11);
		integrationDetail = appConfiguration.get(12);

		String storeCode = appConfiguration.get(13);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse1 = parameterRequest1.get("");
		return restaurantsResponse1;

	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name favouriteOrderCode
	 * @Description Contains code to get the favorite order store code from the API
	 * @return String
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static String favouriteOrderCode() throws GeneralSecurityException, IOException {

		BaseClass bc = new BaseClass();
		List<String> appConfiguration = bc.appConfiguration();
		userName = appConfiguration.get(6);
		passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		storeGroupCode = appConfiguration.get(10);
		clientId = appConfiguration.get(11);
		integrationDetail = appConfiguration.get(12);
		String storeCode = appConfiguration.get(13);

		String favStoreCode = null;

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest = requestingHttp.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse = parameterRequest.get("");

		JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());

		if (storeResponse.has("name")) {

			String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
					+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
					+ cardTemplateCode + "\",\n"
					+ "    \"scope\": \"user_read account_read account_write user_write\",\n" + "    \"merchantId\": \""
					+ merchantId + "\",\n" + "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
					+ "    \"authentication\": \"anonymous\",\n"
					+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
					+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

			RequestSpecification request = io.restassured.RestAssured.given();

			request.contentType(ContentType.JSON);

			request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

			request.body(jsonString);
			Response response = request.post();
			ValidatableResponse validatableResponse = response.then();
			validatableResponse.statusCode(200);
			JSONObject jObj = new JSONObject(response.body().asString());
			String accessTokenGen = jObj.optString("access_token");
			String printedCardNumberResponse = jObj.optString("printedCardNumber");

			io.restassured.RestAssured.baseURI = "https://www.train.paytronix.com:1283/rest/14.15/guest/accountInformation.json?";
			// Construct the query parameters
			Map<String, String> paramsFav = new HashMap<>();
			paramsFav.put("access_token", accessTokenGen);
			paramsFav.put("client_id", clientId);
			paramsFav.put("integrationDetail", integrationDetail);
			paramsFav.put("authentication", "oauth");
			paramsFav.put("merchantId", merchantId);
			paramsFav.put("printedCardNumber", printedCardNumberResponse);
			RequestSpecification httpRequestFav = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameters
			RequestSpecification responseBodyFav = httpRequestFav.queryParams(paramsFav);
			Response responseFav = responseBodyFav.get("");
			// Retrieving the response body using getBody() method
//			System.out.println("Response=>" + response1.prettyPrint());
			JSONObject jObjectFav = new JSONObject(responseFav.body().asString());

			JSONObject optJSONObjectFav = jObjectFav.optJSONObject("fields");

			JSONObject optStringFav = optJSONObjectFav.optJSONObject("favoriteStore");

			if (optStringFav != null) {

				favStoreCode = optStringFav.optString("code");

				System.out.println(" store code is : " + favStoreCode);

			} else {

				favStoreCode = null;
			}
		}

		return favStoreCode;

	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name deliveryOrderTypeWithOrderTime
	 * @Description Contains code to get the favorite order store name from the API
	 * @return String
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static String favouriteOrderName() throws GeneralSecurityException, IOException {

		BaseClass bc = new BaseClass();
		List<String> appConfiguration = bc.appConfiguration();
		userName = appConfiguration.get(6);
		passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		storeGroupCode = appConfiguration.get(10);
		clientId = appConfiguration.get(11);
		integrationDetail = appConfiguration.get(12);
		String storeCode = appConfiguration.get(13);

		String favStoreName = null;

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest = requestingHttp.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse = parameterRequest.get("");

		JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());

		if (storeResponse.has("name")) {

			String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
					+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
					+ cardTemplateCode + "\",\n"
					+ "    \"scope\": \"user_read account_read account_write user_write\",\n" + "    \"merchantId\": \""
					+ merchantId + "\",\n" + "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
					+ "    \"authentication\": \"anonymous\",\n"
					+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
					+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

			RequestSpecification request = io.restassured.RestAssured.given();

			request.contentType(ContentType.JSON);

			request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

			request.body(jsonString);
			Response response = request.post();
			ValidatableResponse validatableResponse = response.then();
			validatableResponse.statusCode(200);
			JSONObject jObj = new JSONObject(response.body().asString());
			String accessTokenGen = jObj.optString("access_token");
			String printedCardNumberResponse = jObj.optString("printedCardNumber");

			io.restassured.RestAssured.baseURI = "https://www.train.paytronix.com:1283/rest/14.15/guest/accountInformation.json?";
			// Construct the query parameters
			Map<String, String> paramsFav = new HashMap<>();
			paramsFav.put("access_token", accessTokenGen);
			paramsFav.put("client_id", clientId);
			paramsFav.put("integrationDetail", integrationDetail);
			paramsFav.put("authentication", "oauth");
			paramsFav.put("merchantId", merchantId);
			paramsFav.put("printedCardNumber", printedCardNumberResponse);
			RequestSpecification httpRequestFav = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameters
			RequestSpecification responseBodyFav = httpRequestFav.queryParams(paramsFav);
			Response responseFav = responseBodyFav.get("");
			// Retrieving the response body using getBody() method
//			System.out.println("Response=>" + response1.prettyPrint());
			JSONObject jObjectFav = new JSONObject(responseFav.body().asString());

			JSONObject optJSONObjectFav = jObjectFav.optJSONObject("fields");

			JSONObject optStringFav = optJSONObjectFav.optJSONObject("favoriteStore");

			if (optStringFav != null) {

				favStoreName = optStringFav.optString("label");

				System.out.println(" store code is : " + favStoreName);

			} else {

				favStoreName = null;
			}
		}

		return favStoreName;

	}

	/**
	 * @Class_Name APIMethods
	 * @Method_Name deliveryOrderTypeWithOrderTime
	 * @Description Contains code to get the recent order store name from the API
	 * @return String
	 * @author Lalith Kishore Ravi
	 * @return
	 * @throws Exception
	 */
	public static String recentlyOrderedStoreName() throws GeneralSecurityException, IOException {

		BaseClass bc = new BaseClass();
		List<String> appConfiguration = bc.appConfiguration();
		userName = appConfiguration.get(6);
		passWord = appConfiguration.get(7);
		merchantId = appConfiguration.get(8);
		cardTemplateCode = appConfiguration.get(9);
		storeGroupCode = appConfiguration.get(10);
		clientId = appConfiguration.get(11);
		integrationDetail = appConfiguration.get(12);
		String storeCode = appConfiguration.get(13);

		String recentlyOrderedName = null;

		String authentication1 = "anonymous";

		String integrationDetail1 = "os=iOS%7Cosversion=16.6%7Cdevice=iPhone%7CmerchantId=60019%7Cintegrator=Paytronix%7Cversion=REST:14.15%20-%20API:23.21.20231010%20-%20APP:2023101001";

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
		// Construct the query parameters
		RequestSpecification requestingHttp = io.restassured.RestAssured.given();
		// specify the method type (GET) and the parameters if any.
		// In this case the request does not take any parameter

		RequestSpecification parameterRequest = requestingHttp.queryParam("key",
				"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		Response restaurantsResponse = parameterRequest.get("");

		JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());

		if (storeResponse.has("name")) {

			String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
					+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
					+ cardTemplateCode + "\",\n"
					+ "    \"scope\": \"user_read account_read account_write user_write\",\n" + "    \"merchantId\": \""
					+ merchantId + "\",\n" + "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
					+ "    \"authentication\": \"anonymous\",\n"
					+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
					+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

			RequestSpecification request = io.restassured.RestAssured.given();

			request.contentType(ContentType.JSON);

			request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

			request.body(jsonString);
			Response response = request.post();
			ValidatableResponse validatableResponse = response.then();
			validatableResponse.statusCode(200);
			JSONObject jObj = new JSONObject(response.body().asString());
			String accessTokenGen = jObj.optString("access_token");
			String printedCardNumberResponse = jObj.optString("printedCardNumber");

			String json = "{\n" + "    \"thirdPartyIntegration\": \"lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97\",\n"
					+ "    \"response_type\": \"code\",\n"
					+ "    \"scope\": \"user_read user_write account_read account_write\",\n"
					+ "    \"merchantId\": 60019,\n" + "    \"authentication\": \"oauth\",\n"
					+ "    \"username\": \"ganeshkumar.s@hoffensoft.com\",\n"
					+ "    \"integrationDetail\": \"os=iOS|osversion=14.7.1|device=iPhone|merchantId=60019|integrator=Paytronix|version=REST:14.15 - API:23.15-Rose(Branded)-SNAPSHOT - APP:2023072101\",\n"
					+ "    \"access_token\": \"" + accessTokenGen + "\",\n"
					+ "    \"client_id\": \"y5mjgC9v2raWoMkQ_1jJgZhMEinFx9Zl4fb7105Slp\"\n" + "}";
			RequestSpecification requestAuth = io.restassured.RestAssured.given();
			requestAuth.contentType(ContentType.JSON);
			requestAuth.baseUri("https://www.train.paytronix.com:1283/rest/14.15/oauth/requestAuthorizationGrant.json");
			requestAuth.body(json);
			Response responseAuth = requestAuth.post();
			ValidatableResponse validatableResponseAuth = responseAuth.then();
			validatableResponseAuth.statusCode(200);
			JSONObject jObjAuth = new JSONObject(responseAuth.body().asString());
			String authorizationGrant = jObjAuth.optString("authorizationGrant");
			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/account/orders?";
			// Construct the query parameters
			Map<String, String> parametersRecent = new HashMap<>();
			parametersRecent.put("key", key);
			parametersRecent.put("access_token", authorizationGrant);
			parametersRecent.put("merchant_id", merchantId);
			parametersRecent.put("printed_card_number", printedCardNumberResponse);
			parametersRecent.put("provider", provider);
			RequestSpecification httpReqRecent = io.restassured.RestAssured.given();
			RequestSpecification responseRecent = httpReqRecent.queryParams(parametersRecent);
			Response respRecent = responseRecent.get("");
			JSONArray jsonObjectRecent = new JSONArray(respRecent.body().asString());
			JSONObject optJSONObjectRecent = jsonObjectRecent.optJSONObject(0);
			storeCode = optJSONObjectRecent.optString("px_store_code");
			io.restassured.RestAssured.baseURI = "https://www.train.paytronix.com:1283/rest/14.15/store/store.json?";
			RequestSpecification httpReqRecent1 = io.restassured.RestAssured.given();
			Map<String, String> paramsRecent = new HashMap<>();
			paramsRecent.put("storeIdentity.code", storeCode);
			paramsRecent.put("client_id", clientId);
			paramsRecent.put("integrationDetail", integrationDetail1);
			paramsRecent.put("authentication", authentication1);
			paramsRecent.put("merchantId", merchantId);
			RequestSpecification responseBodyRecent = httpReqRecent1.queryParams(paramsRecent);
			Response responseRecent1 = responseBodyRecent.get("");
			JSONObject jObjectRecent = new JSONObject(responseRecent1.body().asString());
			recentlyOrderedName = jObjectRecent.get("name").toString();

			if (jObjectRecent.get("name").toString() != null) {

				recentlyOrderedName = jObjectRecent.get("name").toString();
				
				System.out.println("recently ordered name : "+recentlyOrderedName);

			}

			else {

				recentlyOrderedName = "";

			}

			
		}

		return recentlyOrderedName;
		
	}

}
