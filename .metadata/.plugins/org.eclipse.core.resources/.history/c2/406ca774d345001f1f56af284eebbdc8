package com.features;

import java.net.URL;
import java.time.Duration;
import java.util.List;
import java.util.concurrent.TimeUnit;

import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.testng.asserts.SoftAssert;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.AppLaunchAndLandingScreenLocators;
import com.locators.AppRatingLocators;
import com.locators.BottomBarNavigationLocator;
import com.locators.DashBoardLocators;
import com.locators.LocationLocators;
import com.locators.MyAccountLocators;
import com.locators.OLOLocators;
import com.locators.OrderNowLocators;
import com.locators.SideDrawerLocators;
import com.locators.SignInLocators;
import com.locators.TransactionHistoryLocators;

import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.ios.IOSTouchAction;
import io.appium.java_client.remote.MobileCapabilityType;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

public class LocationListGuest extends BaseClass {

	static SignInLocators signInLocator = new SignInLocators();
	static CommonMethods commonMethods = new CommonMethods();
	static LocationLocators locationLocators = new LocationLocators();
	static DashBoardLocators dashBoardLocators = new DashBoardLocators();
	static SideDrawerLocators sideDrawerLocators = new SideDrawerLocators();
	static OrderNowLocators orderNowLocators = new OrderNowLocators();
	static BottomBarNavigationLocator bottomBarNavigationLocators = new BottomBarNavigationLocator();

	static AppRatingLocators appRating = new AppRatingLocators();
	static SignInLocators signInLocators = new SignInLocators();
	static AppLaunchAndLandingScreenLocators appLaunchAndLandingScreenLocators = new AppLaunchAndLandingScreenLocators();
	static MyAccountLocators myAccountLocators = new MyAccountLocators();
	public static String isLocationEnabled = "true";
	static TransactionHistoryLocators transactionHistoryLocators = new TransactionHistoryLocators();
	static OLOLocators oloLocators = new OLOLocators();

	public static String storeShortCode;
	public static String userName;
	public static String passWord;
	public static String merchantId;
	public static String cardTemplateCode;
	public static String storeGroupCode;
	public static String clientId;
	public static String integrationDetail;
	static String storeCode;
	static String authorizationGrant;
	static String merchantid;
	static String key = "6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
	static String provider = "px";
	static String recentlyOrderedName;

	static String authentication = "oauth";

	static String[] welcomeConfig = { "{salutation}", "{firstName}", "{lastName}", "{username}" };

	static String thirdPartyIntegration = "lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97";

	static String response_type = "code";

	static String scope = "user_read user_write account_read account_write";

	static String corpStoreCode;

	static String authentication1 = "anonymous";

	static String integrationDetail1 = "os=iOS%7Cosversion=16.6%7Cdevice=iPhone%7CmerchantId=60019%7Cintegrator=Paytronix%7Cversion=REST:14.15%20-%20API:23.21.20231010%20-%20APP:2023101001";

	@Test

	public void nextGenLocationListFlowWithTakeoutAsapConfiguredGuest() throws Throwable {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bc = new BaseClass();
		List<String> takeoutFlowConfiguration = bc.odFlow();

		String sideDrawer = takeoutFlowConfiguration.get(68);

		Thread.sleep(6000);

		/**
		 * @Class_Name LocationListGuest
		 * @Method_Name nextGenLocationListFlowWithTakeoutAsapConfiguredGuest
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenLocationListFlowWithTakeoutAsapConfiguredGuest_001
		 * @author Prasanna Venkatesh KP
		 */

		ExtentTest nextGenLocationListFlowWithTakeoutAsapConfiguredGuest_003 = test
				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003");

		if (sideDrawer.equalsIgnoreCase("Yes")) {

			NGALocationListGuest.ngaLocationListTakeoutAsapSideDrawerConfiguredGuest();

		} else {

			System.out.println("Verified that Order Now Via side drawer is not configured.");

			nextGenLocationListFlowWithTakeoutAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithTakeoutAsapConfiguredGuest_003 - Verified that ordernow via side drawer is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		WebElement homeButtonXpath = driver.findElement(By.xpath("//*[contains(@name,'Landing Screen')]"));
		homeButtonXpath.click();
	}

	@Test

	public void nextGenLocationListFlowWithDeliveryAsapConfiguredGuest() throws Throwable {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bc = new BaseClass();
		List<String> deliveryFlowConfiguration = bc.appConfiguration();

		String sideDrawer = deliveryFlowConfiguration.get(67);


		Thread.sleep(6000);

		/**
		 * @Class_Name LocationListGuest
		 * @Method_Name nextGenLocationListFlowWithDeliveryAsapConfiguredGuest
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenLocationListFlowWithDeliveryAsapConfiguredGuest_001
		 * @author Prasanna Venkatesh KP
		 */

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenLocationListFlowWithDeliveryAsapConfiguredGuest_003 = test
				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003");

		if (sideDrawer.equalsIgnoreCase("Yes")) {
			
			NGALocationListGuest.ngaLocationListDeliveryAsapSideDrawerConfiguredGuest();
			
			
		} else {
			
			System.out.println("Verified that Order Now Via side drawer is not configured.");

			nextGenLocationListFlowWithDeliveryAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryAsapConfiguredGuest_003 - Verified that ordernow via side drawer is not configured in the configuration sheet.",
					ExtentColor.CYAN));
			
			
		}

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		WebElement homeButtonXpath = driver.findElement(By.xpath("//*[contains(@name,'Landing Screen')]"));
		homeButtonXpath.click();
	}

	@Test

	public void nextGenLocationListFlowWithCurbsideAsapConfiguredGuest() throws Exception {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bc = new BaseClass();
		List<String> curbsideFlowConfiguration = bc.odFlow();

		String sideDrawer = curbsideFlowConfiguration.get(70);

		Thread.sleep(6000);

		/**
		 * @Class_Name LocationListGuest
		 * @Method_Name nextGenLocationListFlowWithCurbsideAsapConfiguredGuest
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenLocationListFlowWithCurbsideAsapConfiguredGuest_001
		 * @author Prasanna Venkatesh KP
		 */

		// Initiating the node to be print in the Extent report.
		ExtentTest nextGenLocationListFlowWithCurbsideAsapConfiguredGuest_003 = test
				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfiguredGuest_003");

		if (sideDrawer.equalsIgnoreCase("Yes")) {

			NGALocationListGuest.ngaLocationListCurbsideAsapSideDrawerConfiguredGuest();

		} else {

			System.out.println("Verified that Order Now Via side drawer is not configured.");

			nextGenLocationListFlowWithCurbsideAsapConfiguredGuest_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideAsapConfiguredGuest_003 - Verified that Location List via side drawer is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		WebElement homeButtonXpath = driver.findElement(By.xpath("//*[contains(@name,'Landing Screen')]"));
		homeButtonXpath.click();

	}

	@Test

	public void nextGenLocationListFlowWithTakeoutLaterConfiguredGuest() throws Exception {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bc = new BaseClass();
		List<String> takeoutFlowConfiguration = bc.odFlow();

		String sideDrawer = takeoutFlowConfiguration.get(69);

		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenLocationListFlowWithTakeoutLaterConfiguredGuest
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenLocationListFlowWithTakeoutLaterConfiguredGuest001
		 * @author Ganeshkumarselvaraj
		 */

		ExtentTest nextGenLocationListFlowWithTakeoutLaterConfiguredGuest_003 = test
				.createNode("nextGenLocationListFlowWithTakeoutLaterConfiguredGuest_003");

		if (sideDrawer.equalsIgnoreCase("Yes")) {

			NGALocationListGuest.ngaLocationListTakeoutLaterSideDrawerConfiguredGuest();

		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithTakeoutLaterConfiguredGuest_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithTakeoutLaterConfiguredGuest_003 - Verified that LocationList via side drawer is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		WebElement homeButtonXpath = driver.findElement(By.xpath("//*[contains(@name,'Landing Screen')]"));
		homeButtonXpath.click();

	}

	@Test

	public void nextGenLocationListFlowWithCurbsideLaterConfiguredGuest() throws Throwable {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		FlutterFinder find = new FlutterFinder(driver);

		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bc = new BaseClass();
		List<String> curbsideFlowConfiguration = bc.odFlow();

		String sideDrawer = curbsideFlowConfiguration.get(71);
		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenLocationListFlowWithCurbsideLaterConfiguredGuest
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenLocationListFlowWithCurbsideLaterConfiguredGuest001
		 * @author Ganeshkumarselvaraj
		 */

		ExtentTest nextGenLocationListFlowWithCurbsideLaterConfiguredGuest_003 = test
				.createNode("nextGenLocationListFlowWithCurbsideLaterConfiguredGuest_003");

		if (sideDrawer.equalsIgnoreCase("Yes")) {

			NGALocationListGuest.ngaLocationListCurbsideLaterSideDrawerConfiguredGuest();

		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithCurbsideLaterConfiguredGuest_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithCurbsideLaterConfiguredGuest_003 - Verified that LocationList via side drawer is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		WebElement homeButtonXpath = driver.findElement(By.xpath("//*[contains(@name,'Landing Screen')]"));
		homeButtonXpath.click();

	}

	@Test
	public void nextGenLocationListFlowWithDeliveryLaterConfiguredGuest() throws Throwable {

		/* To get the current method name */
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);


		FlutterFinder find = new FlutterFinder(driver);


		// To initiate the test to be print

		test = extent.createTest(nameofCurrMethod).assignAuthor("Ganeshkumar").assignDevice(deviceName)
				.assignCategory("Ordering Flow via ordernow");
		test.info(MarkupHelper.createLabel(nameofCurrMethod, ExtentColor.CYAN));

		BaseClass bc = new BaseClass();
		
		List<String> deliveryFlowConfiguration = bc.appConfiguration();

		String sideDrawer = deliveryFlowConfiguration.get(74);


		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenLocationListFlowWithDeliveryLaterConfiguredGuest
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenLocationListFlowWithDeliveryLaterConfiguredGuest001
		 * @author Ganeshkumarselvaraj
		 */

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenLocationListFlowWithDeliveryLaterConfiguredGuest_003 = test
				.createNode("nextGenLocationListFlowWithDeliveryLaterConfiguredGuest_003");


		if (sideDrawer.equalsIgnoreCase("Yes")) {
			
			NGALocationListGuest.ngaLocationListDeliveryLaterSideDrawerConfiguredGuest();
			
			
		} else {

			System.out.println("Verified that Order Now Via buttom bar is not configured.");

			nextGenLocationListFlowWithDeliveryLaterConfiguredGuest_003.info(MarkupHelper.createLabel(
					"nextGenLocationListFlowWithDeliveryLaterConfiguredGuest_003 - Verified that ordernow via side drawer is not configured in the configuration sheet.",
					ExtentColor.CYAN));

		}

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(3000);

		WebElement homeButtonXpath = driver.findElement(By.xpath("//*[contains(@name,'Landing Screen')]"));
		homeButtonXpath.click();

	}

}
