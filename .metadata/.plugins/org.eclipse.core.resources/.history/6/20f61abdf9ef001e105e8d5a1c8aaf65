package com.features;

import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.BasketLocators;
import com.locators.LocationLocators;
import com.locators.MenuScreenLocators;
import com.locators.OrderNowLocators;
import com.locators.SignInLocators;

import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.openqa.selenium.remote.DesiredCapabilities;

import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.remote.MobileCapabilityType;
import java.net.URL;

public class MenuApi extends BaseClass {

	static CommonMethods commonMethods = new CommonMethods();

	static AppLaunchAndLandingScreen appLaunchAndLandingScreen = new AppLaunchAndLandingScreen();

	static OrderNowLocators orderNowLocators = new OrderNowLocators();

	static BasketLocators basketLocators = new BasketLocators();

	static String itemNames;

	static String optStringActive;

	static JSONObject optJSONObjectActive;

	static String optStringSubMenuName;

	static String optStringSubMenuIsSoldout;

	static String sizeName;

	static String price;

	static int parseIntActive;

	static MenuScreenLocators menuScreenLocators = new MenuScreenLocators();

	static LocationLocators locationLocators = new LocationLocators();

	static SignInLocators signInLocators = new SignInLocators();

	static HolidayHours holidayHours = new HolidayHours();

	static ArrayList<String> subMenuTrue = new ArrayList<>();

	static ArrayList<String> soldOut = new ArrayList<>();

	static ArrayList<String> priceParam = new ArrayList<>();

	static ArrayList<String> sizeParam = new ArrayList<>();

	static ArrayList<String> subMenuPrice = new ArrayList<>();

	static ArrayList<String> hierarchyTypes = new ArrayList<>();

	static int subMenuTrueSize;

	static int optJSONArraySubMenuItemsLength;

	static String optStringAlcohol;

	static JSONArray optJSONArrayPrices;

	static JSONArray optJSONArrayOptionGroups;

	static JSONArray optJSONArrayPizzaGroups;

	static long optJSONArrayOptionGroupsObjectMax;

	static String optStringWholeGroupName;

	static String optStringLeftGroupName;

	static String optStringRightGroupName;

	static String optStringAllowDoublingPizza;

	static ArrayList<String> menuLists = new ArrayList<>();

	static int menuLength;

	static JSONArray optJSONArrayMenu;

	static String storeNamesMenu;

	static int parseIntActivee;

	static ArrayList<String> optJSONArrayOptionGroupsObjectNameTrue = new ArrayList<>();

	static String sizePrize;

	static String optStringTobacco;

	static String stringSubMenuName;

	static String subMenuIsSoldout;

	static String stringActive;

	static JSONArray jsonArrayOptionGroups;

	static JSONObject jsonObjectActive;

	static String optionGroupName;

	static JSONObject optionGroupObject;

	static ArrayList<String> optionGroup = new ArrayList<>();

	static ArrayList<String> isDefaultList = new ArrayList<>();

	static ArrayList<String> descriptionList = new ArrayList<>();

	static ArrayList<String> toppingsNameMatch = new ArrayList<>();

	static boolean storeInfoScreenTitleTextContainsVk;

	static boolean menuScreenTitle1TextContainsVk;

	static JSONArray subMenuPoints;

	static String left;

	static String right;

	static JSONArray optJSONArrayOptionGroupsObjectSizeConditions;

	static String specialInstructionsEnabled;

	static String specialInstructionsNotesLimit;

	static String specialInstructionsEnabledSubString;

	static String specialInstructionsNotesLabel;

	static ArrayList<String> levelsList = new ArrayList<>();

	static int number;

	/**
	 * @Class_Name MenuApi
	 * @Method_Name menuApi
	 * @Description Contains code to execute the test scripts for Menu, sub menu &
	 *              Item quantity screen
	 * @return void
	 * @author Lalith Kishore Ravi
	 * @throws Exception
	 */
	@Test
	public static void menuApi(String OrderType, String OrderTime, int pos, int position, String orderId)
			throws Exception {
		BaseClass bc = new BaseClass();

		List<String> givenStringCode = bc.appConfiguration();

		String storeCode = givenStringCode.get(13);		
		
		String merchantId = givenStringCode.get(8);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/"+merchantId+"/restaurants/"+storeCode+"/menu/tier?";
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");
		paramsMenu.put("include_combo", "true");
		paramsMenu.put("merchant_id", merchantId);
		paramsMenu.put("provider", "px");
//		paramsMenu.put("order_date", "11-01-2024");
//		paramsMenu.put("eta", "5.00 am");

		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();
		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");
		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

		optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		menuLength = optJSONArrayMenu.length();

		JSONArray hierarchy = jObjectMenu.optJSONArray("hierarchy");

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/"+merchantId+"/restaurants/"
				+ storeCode + "?";
		Map<String, String> paramsRestaurant = new HashMap<>();
		paramsRestaurant.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

		RequestSpecification httpRequestRestaurant = io.restassured.RestAssured.given();

		RequestSpecification responseBodyRestaurant = httpRequestRestaurant.queryParams(paramsRestaurant);

		Response responseRestaurant = responseBodyRestaurant.get("");

		JSONObject jObjectRestaurant = new JSONObject(responseRestaurant.body().asString());

		specialInstructionsEnabled = jObjectRestaurant.optString("allow_notes");

		specialInstructionsNotesLabel = jObjectRestaurant.optString("notes_label");

		specialInstructionsEnabledSubString = specialInstructionsNotesLabel.substring(0, 3).toLowerCase();

		specialInstructionsNotesLimit = jObjectRestaurant.optString("notes_limit");

		test = extent.createTest(nameofCurrMethod).assignAuthor(author).assignDevice(deviceName)
				.assignCategory("Launch And Splashscreen");

		FlutterFinder find = new FlutterFinder(driver);

		ExtentTest nextGenMenuScreen001 = test.createNode("nextGenMenuScreen_001");

		if (menuLength > 0) {

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(2000);

			FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

			String menuScreenTitleTextVk = menuScreenTitleVk.getText();

			nextGenMenuScreen001.info(MarkupHelper
					.createLabel(" Title of the menu screen is : " + menuScreenTitleTextVk, ExtentColor.CYAN));

			System.out.println(" Title of the menu screen is : " + menuScreenTitleTextVk);

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" Menu screen is : " + menuScreenTitleTextVk);

			FlutterElement menuScreenStoreNameVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_NAME_VK);

			String menuScreenStoreNameTextVk = menuScreenStoreNameVk.getText();

			nextGenMenuScreen001.info(MarkupHelper
					.createLabel(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk, ExtentColor.CYAN));

			System.out.println(" Store Name in the menu screen is : " + menuScreenStoreNameTextVk);

			FlutterElement menuScreenStoreAddressVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ADDRESS_VK);

			String menuScreenStoreAddressTextVk = menuScreenStoreAddressVk.getText();

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Store address text in the menu screen is : " + menuScreenStoreAddressTextVk, ExtentColor.CYAN));

			FlutterElement menuScreenStoreZipcodeVk = find.byValueKey(menuScreenLocators.MENU_SCREEN_STORE_ZIPCODE_VK);

			String menuScreenStoreZipcodeTextVk = menuScreenStoreZipcodeVk.getText();

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk, ExtentColor.CYAN));

			System.out.println(" Zipcode of the store in the menu screen is : " + menuScreenStoreZipcodeTextVk);

			FlutterElement storeDetailsButtonVk = find.byValueKey(menuScreenLocators.STORE_DETAILS_BUTTON_VK);

			String storeDetailsButtonTextVk = storeDetailsButtonVk.getText();

			nextGenMenuScreen001.info(MarkupHelper.createLabel(" Details button text is : " + storeDetailsButtonTextVk,
					ExtentColor.CYAN));

			System.out.println(" Details button text is : " + storeDetailsButtonTextVk);

			storeDetailsButtonVk.click();

			FlutterElement storeInfoScreenTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);

			String storeInfoScreenTitleTextVk = storeInfoScreenTitleVk.getText();

			storeInfoScreenTitleTextContainsVk = storeInfoScreenTitleTextVk.toLowerCase().contains("store");

			Assert.assertEquals(storeInfoScreenTitleTextContainsVk, true,
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk,
					ExtentColor.CYAN));

			System.out.println(
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" Validated that after tapping the details button in the menu screen it navigated to the store info screen with the title : "
							+ storeInfoScreenTitleTextVk);

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(3000);

			holidayHours.holidayHours();

			FlutterElement storeInfoScreenBackNavigationVk = find
					.byValueKey(locationLocators.STOREINFO_SCREEN_BACKNAVIGATION_VKL);

			storeInfoScreenBackNavigationVk.click();

			FlutterElement menuScreenTitle1Vk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

			String menuScreenTitle1TextVk = menuScreenTitle1Vk.getText();

			menuScreenTitle1TextContainsVk = menuScreenTitle1TextVk.toLowerCase().contains("menu");

			Assert.assertEquals(menuScreenTitle1TextContainsVk, true,
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			nextGenMenuScreen001.info(MarkupHelper.createLabel(
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk,
					ExtentColor.CYAN));

			System.out.println(
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

			nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					"  Validated that after tapping the back icon in the store info screen it navigated to the menu screen with the title :  "
							+ menuScreenTitle1TextVk);

		}

		processHierarchyAndRetrieveNames(hierarchy, optJSONArrayMenu, OrderType, OrderTime, pos, position, orderId);

	}

	private static void processHierarchyAndRetrieveNames(JSONArray hierarchyArray, JSONArray menuArray,
			String OrderType, String OrderTime, int pos, int position, String orderId) throws Exception {

		FlutterFinder find = new FlutterFinder(driver);

		ExtentTest nextGenMenuScreen001 = test.createNode("nextGenMenuScreen_001");

		for (int i = pos; i < position; i++) {

			JSONObject hierarchyObject = hierarchyArray.getJSONObject(i);

			if (hierarchyObject.has("type")) {
				String type = hierarchyObject.getString("type");

				if (type.contains("group")) {

					String name = hierarchyObject.getString("name");

					System.out.println(" Group name : " + name + " displayed  ");

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(1500);

					By targetElementLocator = By.xpath(
							"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + name.toLowerCase() + "'" + ")]");

					boolean elementFound = false;

					while (!elementFound) {

						try {

							WebElement element = driver.findElement(targetElementLocator);

							Thread.sleep(1500);

							if (element.isDisplayed()) {

								element.click();

							} else {

								nextGenMenuScreen001.info(
										MarkupHelper.createLabel(" Group name not displayed  ", ExtentColor.CYAN));

								System.out.println(" Group name : " + name + " not displayed  ");
							}
						} catch (NoSuchElementException e2) {

							nextGenMenuScreen001
									.info(MarkupHelper.createLabel(" Group name not displayed  ", ExtentColor.CYAN));

							System.out.println(" Group name : " + name + " not displayed  ");
						}

					}
					if (!elementFound) {

					}

					commonMethods.switchContext("FLUTTER");

					Thread.sleep(1500);
				}
			}

			if (hierarchyObject.has("id")) {

				String hierarchyId = hierarchyObject.getString("id");

				for (int t = pos; t < position; t++) {

					JSONObject menuItem = menuArray.getJSONObject(t);

					if (menuItem.has("id")) {

						String menuId = menuItem.getJSONObject("id").getString("$id");

						if (hierarchyId.equals(menuId)) {

							String itemName = menuItem.getString("name");

							if (menuLength > 0) {

								JSONObject optJSONObjectMenu = optJSONArrayMenu.optJSONObject(t);

								String canOrderMenu = optJSONObjectMenu.optString("can_order");

								if (canOrderMenu == "true") {

									itemNames = optJSONObjectMenu.optString("name");

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(1500);

									int maxScrollAttempts3 = 5;

									if (menuArray.length() < 4) {

										By targetElementLocator3 = By.xpath(
												"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
														+ "'" + itemName.toLowerCase() + "'" + ")]");
										for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
											try {
												WebElement element = driver.findElement(targetElementLocator3);
												if (element.isDisplayed()) {

													break;
												}
											} catch (Exception e) {
											}

										}
									}

									menuScroll();

									FlutterElement menuScreenVk = find
											.byValueKey(menuScreenLocators.MENU_SCREEN_LIST_VK + itemName);

									String menuScreenTextVk = menuScreenVk.getText();

									if (menuScreenTextVk.length() > 21) {

										String menuScreenTextSubStringVk = menuScreenTextVk.substring(0, 21);

										boolean menuScreenTextSubStringContainsVk = itemName
												.contains(menuScreenTextSubStringVk);

										Assert.assertEquals(menuScreenTextSubStringContainsVk, true,
												" Validated that the index : " + i + " name in the API menu & the " + i
														+ " name in the menu are same ");

										System.out.println(" Validated that the index : " + i
												+ " name in the API menu & the " + i + " name in the menu are same ");

									} else {

										Assert.assertEquals(itemName, menuScreenTextVk,
												" Validated that the index : " + i + " name in the API menu & the " + i
														+ " name in the menu are same ");

										System.out.println(" Validated that the index : " + i
												+ " name in the API menu & the " + i + " name in the menu are same ");

									}

									nextGenMenuScreen001.info(MarkupHelper.createLabel(" Validated that the index : "
											+ i + " name in the API menu & the " + i + " name in the menu are same ",
											ExtentColor.CYAN));

									System.out.println(" Validated that the index : " + i
											+ " name in the API menu & the " + i + " name in the menu are same ");

									menuScreenVk.click();

								}

								else {

									nextGenMenuScreen001.info(MarkupHelper.createLabel(
											" The store name which is listed in API but not listed in the menu screen is : "
													+ itemName,
											ExtentColor.CYAN));

									System.out.println(
											" The store name which is listed in API but not listed in the menu screen is : "
													+ itemName);
								}

								ExtentTest nextGenSubMenuScreen001 = test.createNode("nextGenSubMenuScreen_001");

								commonMethods.switchContext("FLUTTER");

								Thread.sleep(1500);

								FlutterElement subMenuScreenTitleVk = find
										.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_TITLE_VK);

								String subMenuScreenTitleTextVk = subMenuScreenTitleVk.getText();

								nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
										" The title of the sub menu screen " + subMenuScreenTitleTextVk,
										ExtentColor.CYAN));

								System.out.println(" The title of the sub menu screen " + subMenuScreenTitleTextVk);

								nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
										" Sub menu screen " + subMenuScreenTitleTextVk);

								if (subMenuScreenTitleTextVk.length() > 22) {

									String subMenuScreenTitleTextSubStringVk = subMenuScreenTitleTextVk.substring(0,
											21);

									boolean subMenuScreenTitleTextSubStringContainsVk = itemName
											.contains(subMenuScreenTitleTextSubStringVk);

									Assert.assertEquals(subMenuScreenTitleTextSubStringContainsVk, true,
											" Validated that the menu item name & sub menu header is same ");

									System.out.println(" Validated that the menu item name & sub menu header is same ");

								}

								else {

									Assert.assertEquals(itemName, subMenuScreenTitleTextVk,
											" Validated that the menu item name & sub menu header is same ");

									System.out.println(" Validated that the menu item name & sub menu header is same ");
								}

								nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
										" Validated that the menu item name & sub menu header is same ",
										ExtentColor.CYAN));

								System.out.println(" Validated that the menu item name & sub menu header is same ");

								JSONArray optJSONArraySubMenuItems = optJSONObjectMenu.optJSONArray("items");

								int optJSONArraySubMenuItemsLength = optJSONArraySubMenuItems.length();

								if (optJSONArraySubMenuItemsLength > 0) {

									subMenuTrue.clear();

									soldOut.clear();

									for (int j = 0; j < optJSONArraySubMenuItemsLength; j++) {

										optJSONObjectActive = optJSONArraySubMenuItems.optJSONObject(j);

										optStringActive = optJSONObjectActive.optString("active");

										parseIntActive = Integer.parseInt(optStringActive);

										optStringSubMenuName = optJSONObjectActive.optString("name");

										optStringSubMenuIsSoldout = optJSONObjectActive.optString("is_sold_out");

										if (canOrderMenu == "true" && parseIntActive == 1) {

											soldOut.add(optStringSubMenuIsSoldout);

											subMenuTrue.add(optStringSubMenuName);

											subMenuTrueSize = subMenuTrue.size();

											optJSONArrayPrices = optJSONObjectActive.optJSONArray("prices");

										}
									}
									if (subMenuTrueSize > 0) {

										for (int n = 0; n < 1; n++) {

											if (canOrderMenu == "true" && parseIntActive == 1) {

												if (n >= 1) {

													subMenuScroll();

												}

											}

											FlutterElement subMenuScreenItemVk = find
													.byValueKey("sub_menu_item_" + n + "_name");

											String subMenuScreenItemTextVk = subMenuScreenItemVk.getText();

											Assert.assertEquals(subMenuTrue.get(n), subMenuScreenItemTextVk,
													" Validated that the index : " + n
															+ " name in the API sub menu & the " + n
															+ " name in the sub menu are same ");

											nextGenSubMenuScreen001
													.info(MarkupHelper.createLabel(
															" Validated that the index : " + n
																	+ " name in the API sub menu & the " + n
																	+ " name in the sub menu are same ",
															ExtentColor.CYAN));

											System.out.println(" Validated that the index : " + n
													+ " name in the API sub menu & the " + n
													+ " name in the sub menu are same ");

											nextGenSubMenuScreen001.addScreenCaptureFromBase64String(
													takeScreenshot(driver),
													" Validated that the index : " + n
															+ " name in the API sub menu & the " + n
															+ " name in the sub menu are same ");

											JSONObject optJSONObjectPrice = optJSONArraySubMenuItems.optJSONObject(n);

											subMenuPoints = optJSONObjectPrice.optJSONArray("prices");

											int subMenuPointsLength = subMenuPoints.length();

											sizeParam.clear();

											priceParam.clear();

											isDefaultList.clear();

											descriptionList.clear();

											for (int p = 0; p < subMenuPointsLength; p++) {

												JSONObject subMenuPointsObject = subMenuPoints.optJSONObject(p);

												String sizeName = subMenuPointsObject.optString("name");

												String price = subMenuPointsObject.optString("price");

												String isDefault = subMenuPointsObject.optString("is_default");

												String description = subMenuPointsObject.optString("description");

												descriptionList.add(description);

												isDefaultList.add(isDefault);

												sizeParam.add(sizeName);

												priceParam.add(price);

											}

											subMenuPrice.clear();

//											for (int k = 0; k < subMenuPointsLength; k++) {
//
//												if (subMenuPointsLength == 0) {
//
//													if (sizeParam.get(k).length() == 0) {
//
//														nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//																" The price is null in the index : " + n,
//																ExtentColor.CYAN));
//
//													} else {
//
//														nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//																" The price is null in the index : " + n,
//																ExtentColor.CYAN));
//													}
//												}
//
//												else {
//
//													FlutterElement subMenuScreenItemSizeVk = find
//															.byValueKey("sub_menu_item_" + n + "_size_" + k);
//
//													String subMenuScreenItemSizeTextVk = subMenuScreenItemSizeVk
//															.getText();
//
//													nextGenSubMenuScreen001
//															.info(MarkupHelper.createLabel(
//																	" The item size and price in the index : " + k
//																			+ " is : " + subMenuScreenItemSizeTextVk,
//																	ExtentColor.CYAN));
//
//													if (sizeParam.get(k).length() == 0) {
//
//														BigDecimal originalBigDecimal = new BigDecimal(
//																priceParam.get(k));
//
//														BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
//																BigDecimal.ROUND_HALF_UP);
//
//														String priceParamInt = roundedBigDecimal.toString();
//
//														String sizePrize = "" + priceParamInt;
//
//														boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
//																.contains(sizePrize);
//
//														nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//																" Validated the the size and price of the item : "
//																		+ subMenuScreenItemTextVk + " in the index : "
//																		+ k
//																		+ " and the value of the size and price from the API in the index : "
//																		+ k + " are same ",
//																ExtentColor.CYAN));
//													} else {
//
//														BigDecimal originalBigDecimal = new BigDecimal(
//																priceParam.get(k));
//
//														BigDecimal roundedBigDecimal = originalBigDecimal.setScale(2,
//																BigDecimal.ROUND_HALF_UP);
//
//														String priceParamInt = roundedBigDecimal.toString();
//
//														String sizePrize = sizeParam.get(k) + " - " + priceParamInt;
//
//														boolean subMenuScreenItemSizeTextContainsVk = subMenuScreenItemSizeTextVk
//																.contains(sizePrize);
//
//														nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//																" Validated the the size and price of the item : "
//																		+ subMenuScreenItemTextVk + " in the index : "
//																		+ k
//																		+ " and the value of the size and price from the API in the index : "
//																		+ k + " are same ",
//																ExtentColor.CYAN));
//													}
//
//													FlutterElement subMenuScreenItemPriceVk = find
//															.byValueKey("sub_menu_item_" + n + "_size_" + k);
//
//													String subMenuScreenItemPriceTextVk = subMenuScreenItemPriceVk
//															.getText();
//
//													nextGenSubMenuScreen001
//															.info(MarkupHelper.createLabel(
//																	" The item price in the index : " + n + " is : "
//																			+ subMenuScreenItemPriceTextVk,
//																	ExtentColor.CYAN));
//
//													subMenuPrice.add(subMenuScreenItemPriceTextVk);
//												}
//
//												String name = optJSONObjectPrice.optString("name");
//
//												if (optJSONObjectPrice.has("description")) {
//
//													String description = optJSONObjectPrice.optString("description");
//
//													FlutterElement subMenuScreenItemDescriptionVk = find
//															.byValueKey("sub_menu_item_" + n + "_description");
//
//													String subMenuScreenItemDescriptionTextVk = subMenuScreenItemDescriptionVk
//															.getText();
//
//													Assert.assertEquals(subMenuScreenItemDescriptionTextVk, description,
//															" Validated that item description from the API is : "
//																	+ description
//																	+ " and the description from the UI is : "
//																	+ subMenuScreenItemDescriptionTextVk
//																	+ " are same ");
//
//													nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//															" Validated that item description from the API is : "
//																	+ description
//																	+ " and the description from the UI is : "
//																	+ subMenuScreenItemDescriptionTextVk + " are same ",
//															ExtentColor.CYAN));
//
//												} else {
//
//													System.out.println(
//															" No description available for the item : " + name);
//												}
//											}

											ExtentTest nextGenItemQuantityScreen001 = test
													.createNode("nextGenItemQuantityScreen_001");

											if (soldOut.get(n) == "false") {

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(1500);

												subMenuScreenItemVk.click();

												String name = optJSONObjectPrice.optString("name");

												String description = optJSONObjectPrice.optString("description");

												if (optJSONObjectPrice.has("item_slots")) {

													System.out.println(" The item : " + name
															+ " have item slots and it's a combo");

													JSONArray itemSlotsArray = optJSONObjectPrice
															.optJSONArray("item_slots");

													String itemSkipSteps = optJSONObjectPrice.optString("skip_steps");

													String itemSkipPopUp = optJSONObjectPrice.optString("skip_popup");

													String itemUseStepUpDescription = optJSONObjectPrice
															.optString("use_step_description");

													String itemUseDescription = optJSONObjectPrice
															.optString("description");

													if (itemSkipPopUp == "false") {

														// pop-up will display

														System.out.println("popup will display");

														FlutterElement subMenuComboTitleVk = find.byValueKey(
																menuScreenLocators.SUB_MENU_COMBO_POPUP_TITLE_VK);

														String subMenuComboTitleVTextk = subMenuComboTitleVk.getText();

														System.out.println(" Title of the combo : " + name + " is : "
																+ subMenuComboTitleVTextk);

														Assert.assertEquals(name, subMenuComboTitleVTextk,
																" Validated that the name of the sub menu item : "
																		+ name + " and the popup title in the UI : "
																		+ subMenuComboTitleVTextk + " are same ");

														nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
																" Validated that the name of the sub menu item : "
																		+ name + " and the popup title in the UI : "
																		+ subMenuComboTitleVTextk + " are same ",
																ExtentColor.CYAN));

														System.out.println(
																" Validated that the name of the sub menu item : "
																		+ name + " and the popup title in the UI : "
																		+ subMenuComboTitleVTextk + " are same ");

//														FlutterElement subMenuComboDescriptionVk = find.byValueKey(
//																menuScreenLocators.SUB_MENU_COMBO_POPUP_DESCRIPTION_VK);
//
//														String subMenuComboDescriptionTextVk = subMenuComboDescriptionVk
//																.getText();
//														System.out.println(
//																" Validated that the description of the sub menu item : "
//																		+ description
//																		+ " and the popup description in the UI : "
//																		+ subMenuComboDescriptionTextVk + " are same ");

														// To validate the pop-up texts available

														for (int j = 0; j < itemSlotsArray.length(); j++) {

															if (j > 1) {

																scrollUp();

															}

															FlutterElement subMenuComboItemVk = find.byValueKey(
																	menuScreenLocators.SUB_MENU_COMBO_POPUP_ITEM_VK
																			+ j);

															String subMenuComboItemTextVk = subMenuComboItemVk
																	.getText();

															System.out.println(" Item name of the combo : " + name
																	+ " is : " + subMenuComboItemTextVk);

															FlutterElement subMenuComboItemDescriptionVk = find
																	.byValueKey(
																			menuScreenLocators.SUB_MENU_COMBO_POPUP_ITEM_DESCRIPTION_VK
																					+ j);

															String subMenuComboItemDescriptionTextVk = subMenuComboItemDescriptionVk
																	.getText();

															System.out.println(" Item Description of the combo : "
																	+ name + " is : "
																	+ subMenuComboItemDescriptionTextVk);

														}

														if (itemSkipSteps == "false") {

															// continue button in pop-up

															System.out.println("continue button in popup");

															FlutterElement subMenuComboPopupContinueButtonVk = find
																	.byValueKey(
																			menuScreenLocators.SUB_MENU_COMBO_POPUP_CONTINUE_BUTTON_VK);

															subMenuComboPopupContinueButtonVk.click();

															System.out.println(
																	"step description" + itemUseStepUpDescription);

															FlutterElement title = find.byValueKey(
																	menuScreenLocators.VK_COMBO_CUSTOMIZATION_TITLE_TEXT);

															String titleText = title.getText();

															System.out.println(" The title text in sides screen is : "
																	+ titleText);

															nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
																	" The title text in sides screen is : " + titleText,
																	ExtentColor.CYAN));

//															if (itemUseStepUpDescription == "true") {
//
//																System.out.println(" Step description true : "
//																		+ itemUseDescription);
//
//																FlutterElement itemUseStepUpDescriptionVk = find
//																		.byValueKey(
//																				menuScreenLocators.VK_COMBO_CUSTOMIZATION_DESCRIPTION_TEXT);
//
//																String itemUseStepUpDescriptionTextVk = itemUseStepUpDescriptionVk
//																		.getText();
//
//																System.out.println(" The description from the UI is : "
//																		+ itemUseStepUpDescriptionTextVk);
//
//																nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//																		" The description from the UI is : "
//																				+ itemUseStepUpDescriptionTextVk,
//																		ExtentColor.CYAN));
//
//															}
//
//															else if (itemUseStepUpDescription == "false") {
//
//																System.out.println(
//																		" Step description false : " + description);
//
//																FlutterElement itemUseStepUpDescriptionVk = find
//																		.byValueKey(
//																				menuScreenLocators.VK_COMBO_CUSTOMIZATION_DESCRIPTION_TEXT);
//
//																String itemUseStepUpDescriptionTextVk = itemUseStepUpDescriptionVk
//																		.getText();
//
//																System.out.println(" The description from the UI is : "
//																		+ itemUseStepUpDescriptionTextVk);
//
//																nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//																		" The description from the UI is : "
//																				+ itemUseStepUpDescriptionTextVk,
//																		ExtentColor.CYAN));
//
//															}

															for (int j = 0; j < itemSlotsArray.length(); j++) {

																JSONObject itemSlotsObject = itemSlotsArray
																		.getJSONObject(j);

																String itemSlotName = itemSlotsObject.optString("name");

																FlutterElement comboItemSlotNameVk = find.byValueKey(
																		menuScreenLocators.VK_COMBO_SIDE_NAME + j);

																String comboItemSlotNameTextVk = comboItemSlotNameVk
																		.getText();

																boolean itemSlotNameContains = comboItemSlotNameTextVk
																		.contains(itemSlotName);

																Assert.assertEquals(itemSlotNameContains, true,
																		" Validated that the name of the item slot from the API is : "
																				+ itemSlotName
																				+ " and from the UI is : "
																				+ comboItemSlotNameTextVk
																				+ " both are same");

																nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
																		" Validated that the name of the item slot from the API is : "
																				+ itemSlotName
																				+ " and from the UI is : "
																				+ comboItemSlotNameTextVk
																				+ " both are same",
																		ExtentColor.CYAN));

																System.out.println(
																		" Validated that the name of the item slot from the API is : "
																				+ itemSlotName
																				+ " and from the UI is : "
																				+ comboItemSlotNameTextVk
																				+ " both are same");

																Pattern pattern = Pattern.compile("\\d+");
																Matcher matcher = pattern
																		.matcher(comboItemSlotNameTextVk);

																if (matcher.find()) {

																	String numberStr = matcher.group();

																	number = Integer.parseInt(numberStr);

																} else {

																	System.out
																			.println("No integer found in the string.");
																}

																if (itemSlotsObject.has("description")) {

																	String itemSlotDescription = itemSlotsObject
																			.optString("description");

																	if (number > 1) {

																		System.out.println(
																				" item present more than 1 and number is : "
																						+ number);

																		for (int q = 0; q < number; q++) {

																			System.out.println(
																					" item present more than 1 and number is : "
																							+ q);

//																			scrollOptionsGroupDown(itemSlotName);

																			FlutterElement comboItemSlotDescriptionVk = find
																					.byValueKey("combo_name_parent_" + j
																							+ "_child_" + q);

//																			String comboItemSlotDescriptionTextVk = comboItemSlotDescriptionVk
//																					.getText();

//																				Assert.assertEquals(
//																						comboItemSlotDescriptionTextVk,
//																						itemSlotDescription,
//																						" Validated that the description of the item slot from the API is : "
//																								+ itemSlotDescription
//																								+ " and from the UI is : "
//																								+ comboItemSlotDescriptionTextVk
//																								+ " both are same");
//
//																			System.out.println(
//																					" Validated that the description of the item slot from the API is : "
//																							+ itemSlotDescription
//																							+ " and from the UI is : "
//																							+ comboItemSlotDescriptionTextVk
//																							+ " both are same");

																			if (q == 0) {

																				String itemSlotQty = itemSlotsObject
																						.optString("qty");

																				JSONArray itemArray = itemSlotsObject
																						.optJSONArray("items");

																				for (int e = 0; e < itemArray
																						.length(); e++) {

																					JSONObject itemArrayObject = itemArray
																							.optJSONObject(e);

																					String itemArrayObjectItem = itemArrayObject
																							.optString("item");

																					for (int k = 0; k < optJSONArrayMenu
																							.length(); k++) {

																						JSONObject optJSONObject = optJSONArrayMenu
																								.optJSONObject(k);

																						JSONArray optJSONArrayItems = optJSONObject
																								.optJSONArray("items");

																						for (int l = 0; l < optJSONArrayItems
																								.length(); l++) {

																							JSONObject optJSONArrayItemsObject = optJSONArrayItems
																									.optJSONObject(l);

																							String ids = optJSONArrayItemsObject
																									.optString("id");

																							JSONArray optJSONArrayOptGroups = optJSONArrayItemsObject
																									.optJSONArray(
																											"option_groups");

																							if (itemArrayObjectItem
																									.equals(ids)) {

																								String namee = optJSONArrayItemsObject
																										.optString(
																												"name");

																								System.out.println(
																										"name of the item :"
																												+ namee);

																								comboItemSlotDescriptionVk
																										.click();

																								try {

																									commonMethods
																											.switchContext(
																													"NATIVE_APP");

																									Thread.sleep(2000);

																									WebElement targetElementLocator1 = driver
																											.findElement(
																													By.xpath(
																															"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
																																	+ "'"
																																	+ itemSlotName.toLowerCase().trim()
																																	+ "'"
																																	+ ")]"));

																									if (targetElementLocator1
																											.isDisplayed()) {

																										commonMethods
																												.switchContext(
																														"FLUTTER");

																										Thread.sleep(
																												2000);

																										FlutterElement subMenuComboItemTitleVk = find
																												.byValueKey(
																														menuScreenLocators.SUB_MENU_COMBO_TITLE_VK);

																										String subMenuComboItemTitleTextVk = subMenuComboItemTitleVk
																												.getText();

																										if (itemSlotName
																												.contains(
																														subMenuComboItemTitleTextVk)) {

																											FlutterElement subMenuComboItemVk = find
																													.byValueKey(
																															menuScreenLocators.SUB_MENU_COMBO_ITEM_VK
																																	+ namee
																																	+ "_name");

																											String subMenuComboItemTextVk = subMenuComboItemVk
																													.getText();

																											Assert.assertEquals(
																													subMenuComboItemTextVk,
																													namee,
																													" Validated that the item name from the API is : "
																															+ namee
																															+ " and from the UI is : "
																															+ subMenuComboItemTextVk);

																											nextGenSubMenuScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	" Validated that the item name from the API is : "
																																			+ namee
																																			+ " and from the UI is : "
																																			+ subMenuComboItemTextVk,
																																	ExtentColor.CYAN));

																											System.out
																													.println(
																															" Validated that the item name from the API is : "
																																	+ namee
																																	+ " and from the UI is : "
																																	+ subMenuComboItemTextVk);

																											Thread.sleep(
																													2000);

																											subMenuComboItemVk
																													.click();

																											try {

																												commonMethods
																														.switchContext(
																																"NATIVE_APP");

																												Thread.sleep(
																														2000);

																												WebElement targetElementLocator = driver
																														.findElement(
																																By.xpath(
																																		"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
																																				+ "'attention!!'"
																																				+ ")]"));

																												if (targetElementLocator
																														.isDisplayed()) {

																													commonMethods
																															.switchContext(
																																	"FLUTTER");
//																												
																													Thread.sleep(
																															2000);

																													FlutterElement alertTitleText = find
																															.byValueKey(
																																	menuScreenLocators.VK_CLEAR_CUSTOMIZATION_YES_BNUTTON);

																													alertTitleText
																															.click();

																												}

																											} catch (Exception e2) {
																												System.out
																														.println(
																																" ATTENTION pop-up button is not present in the screen : "
																																		+ itemSlotName);
																											}
																										}

																									}

																								} catch (Exception e2) {
																									System.out.println(
																											itemSlotName
																													+ " is not found in the screeen  ");
																								}

																								if (optJSONArrayItemsObject
																										.has("alcohol")
																										|| optJSONArrayItemsObject
																												.has("tobacco")) {

																									if (optJSONArrayItemsObject
																											.optString(
																													"alcohol") == "true"
																											|| optJSONArrayItemsObject
																													.optString(
																															"tobacco") == "true") {

																										System.out
																												.println(
																														" The item : "
																																+ namee
																																+ " contains TOBACCO or ALCOHOL ");

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The item : "
																																		+ namee
																																		+ " contains TOBACCO or ALCOHOL ",
																																ExtentColor.CYAN));

																										alcoholWarning();

																									} else {

																										System.out
																												.println(
																														" The item : "
																																+ namee
																																+ " doesn't contains TOBACCO or ALCOHOL ");

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The item : "
																																		+ namee
																																		+ " doesn't contains TOBACCO or ALCOHOL ",
																																ExtentColor.CYAN));

																									}

																								}

																								if (optJSONArrayItemsObject
																										.has("prices")) {

																									System.out.println(
																											" The item "
																													+ namee
																													+ " has prices");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" The item "
																																	+ namee
																																	+ " has prices",
																															ExtentColor.CYAN));

																									JSONArray prices = optJSONArrayItemsObject
																											.optJSONArray(
																													"prices");

																									if (prices
																											.length() > 1) {

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" size length is greater than 1 for the item : "
																																		+ namee,
																																ExtentColor.CYAN));

																										System.out
																												.println(
																														" size length is greater than 1 for the item : "
																																+ namee);
																										Size.size();
																									}

																								}

																								if (optJSONArrayOptGroups
																										.length() == 0) {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" There is no option groups for the item : "
																																	+ namee,
																															ExtentColor.CYAN));

																									System.out.println(
																											" There is no option groups for the item : "
																													+ namee);

																									if (optJSONArrayItemsObject
																											.has("prices")) {

																										JSONArray prices = optJSONArrayItemsObject
																												.optJSONArray(
																														"prices");

																										System.out
																												.println(
																														"prices length : "
																																+ prices.length());

																										if (prices
																												.length() == 1) {

																											System.out
																													.println(
																															"prices length is 0");

																											specialInstructionsComboSubMenuScreen();

																										}

																										else if (prices
																												.length() > 1) {

																											specialInstructions();

																											Thread.sleep(
																													1500);

																											find.byValueKey(
																													menuScreenLocators.VK_ITEM_QUANTITY_COMBO_ADD_ITEM_BUTTON)
																													.click();

																										}

																									}

																								}

																								else if (optJSONArrayOptGroups
																										.length() > 0) {

																									System.out.println(
																											" Option groups available for the item : "
																													+ namee);

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Option groups available for the item : "
																																	+ namee,
																															ExtentColor.CYAN));

																									OptionGroups
																											.optionGroups();

																									specialInstructions();

																									Thread.sleep(1500);

																									find.byValueKey(
																											menuScreenLocators.VK_ITEM_QUANTITY_COMBO_ADD_ITEM_BUTTON)
																											.click();

																								}

																							}
																						}

																					}

																					String itemArrayObjectSizes = itemArrayObject
																							.optString("sizes");

																					System.out.println(
																							itemArrayObjectSizes);

																					String itemArrayObjectOptQty = itemArrayObject
																							.optString("opt_qty");

																					System.out.println(
																							itemArrayObjectOptQty);

																					String itemArrayObjectOptCredit = itemArrayObject
																							.optString("opt_credit");

																					System.out.println(
																							itemArrayObjectOptCredit);

																					String itemArrayObjectAllOptCredit = itemArrayObject
																							.optString(
																									"all_opt_credit");

																					System.out.println(
																							itemArrayObjectAllOptCredit);

																					String itemArrayObjectUpcharge = itemArrayObject
																							.optString("upcharge");

																					System.out.println(
																							itemArrayObjectUpcharge);
																				}

																			}

																			else if (q > 0) {

																				System.out.println(
																						" the index is : " + q);

																				String itemSlotQty = itemSlotsObject
																						.optString("qty");

																				JSONArray itemArray = itemSlotsObject
																						.optJSONArray("items");

																				for (int e = 0; e < itemArray
																						.length(); e++) {

																					JSONObject itemArrayObject = itemArray
																							.optJSONObject(e);

																					String itemArrayObjectItem = itemArrayObject
																							.optString("item");

																					for (int k = 0; k < optJSONArrayMenu
																							.length(); k++) {

																						JSONObject optJSONObject = optJSONArrayMenu
																								.optJSONObject(k);

																						JSONArray optJSONArrayItems = optJSONObject
																								.optJSONArray("items");

																						for (int l = 0; l < optJSONArrayItems
																								.length(); l++) {

																							JSONObject optJSONArrayItemsObject = optJSONArrayItems
																									.optJSONObject(l);

																							String ids = optJSONArrayItemsObject
																									.optString("id");

																							JSONArray optJSONArrayOptGroups = optJSONArrayItemsObject
																									.optJSONArray(
																											"option_groups");

																							if (itemArrayObjectItem
																									.equals(ids)) {

																								String namee = optJSONArrayItemsObject
																										.optString(
																												"name");

																								System.out.println(
																										"name :" + namee);

																								comboItemSlotDescriptionVk
																										.click();

																								try {

																									commonMethods
																											.switchContext(
																													"NATIVE_APP");

																									Thread.sleep(2000);

																									WebElement targetElementLocator1 = driver
																											.findElement(
																													By.xpath(
																															"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
																																	+ "'"
																																	+ itemSlotName.toLowerCase().trim()
																																	+ "'"
																																	+ ")]"));

																									if (targetElementLocator1
																											.isDisplayed()) {

																										commonMethods
																												.switchContext(
																														"FLUTTER");

																										Thread.sleep(
																												2000);

																										FlutterElement subMenuComboItemTitleVk = find
																												.byValueKey(
																														menuScreenLocators.SUB_MENU_COMBO_TITLE_VK);

																										String subMenuComboItemTitleTextVk = subMenuComboItemTitleVk
																												.getText();

																										if (itemSlotName
																												.contains(
																														subMenuComboItemTitleTextVk)) {

																											FlutterElement subMenuComboItemVk = find
																													.byValueKey(
																															menuScreenLocators.SUB_MENU_COMBO_ITEM_VK
																																	+ namee
																																	+ "_name");

																											String subMenuComboItemTextVk = subMenuComboItemVk
																													.getText();

																											Assert.assertEquals(
																													subMenuComboItemTextVk,
																													namee,
																													" Validated that the item name from the API is : "
																															+ namee
																															+ " and from the UI is : "
																															+ subMenuComboItemTextVk);

																											nextGenSubMenuScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	" Validated that the item name from the API is : "
																																			+ namee
																																			+ " and from the UI is : "
																																			+ subMenuComboItemTextVk,
																																	ExtentColor.CYAN));

																											System.out
																													.println(
																															" Validated that the item name from the API is : "
																																	+ namee
																																	+ " and from the UI is : "
																																	+ subMenuComboItemTextVk);

																											Thread.sleep(
																													2000);

																											subMenuComboItemVk
																													.click();

																											try {

																												commonMethods
																														.switchContext(
																																"NATIVE_APP");

																												Thread.sleep(
																														2000);

																												WebElement targetElementLocator = driver
																														.findElement(
																																By.xpath(
																																		"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
																																				+ "'attention!!'"
																																				+ ")]"));

																												if (targetElementLocator
																														.isDisplayed()) {

																													commonMethods
																															.switchContext(
																																	"FLUTTER");
//																												
																													Thread.sleep(
																															2000);

																													FlutterElement alertTitleText = find
																															.byValueKey(
																																	menuScreenLocators.VK_CLEAR_CUSTOMIZATION_YES_BNUTTON);

																													alertTitleText
																															.click();

																												}

																											} catch (Exception e2) {
																												System.out
																														.println(
																																" ATTENTION!! pop-up button is not present in the screen : "
																																		+ itemSlotName);
																											}
																										}

																									}
																								} catch (Exception e3) {

																									System.out.println(
																											itemSlotName
																													+ " is found present in the screen ");
																								}

																								if (optJSONArrayItemsObject
																										.has("alcohol")
																										|| optJSONArrayItemsObject
																												.has("tobacco")) {

																									if (optJSONArrayItemsObject
																											.optString(
																													"alcohol") == "true"
																											|| optJSONArrayItemsObject
																													.optString(
																															"tobacco") == "true") {

																										System.out
																												.println(
																														" The item : "
																																+ namee
																																+ " contains TOBACCO or ALCOHOL ");

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The item : "
																																		+ namee
																																		+ " contains TOBACCO or ALCOHOL ",
																																ExtentColor.CYAN));

																										alcoholWarning();

																									} else {

																										System.out
																												.println(
																														" The item : "
																																+ namee
																																+ " doesn't contains TOBACCO or ALCOHOL ");

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The item : "
																																		+ namee
																																		+ " doesn't contains TOBACCO or ALCOHOL ",
																																ExtentColor.CYAN));

																									}

																								}

																								if (optJSONArrayItemsObject
																										.has("prices")) {

																									System.out.println(
																											" The item "
																													+ namee
																													+ " has prices");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" The item "
																																	+ namee
																																	+ " has prices",
																															ExtentColor.CYAN));

																									JSONArray prices = optJSONArrayItemsObject
																											.optJSONArray(
																													"prices");

																									if (prices
																											.length() > 1) {

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" size length is greater than 1 for the item : "
																																		+ namee,
																																ExtentColor.CYAN));

																										System.out
																												.println(
																														" size length is greater than 1 for the item : "
																																+ namee);

																									}

																								}

																								if (optJSONArrayOptGroups
																										.length() == 0) {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" There is no option groups for the item : "
																																	+ namee,
																															ExtentColor.CYAN));

																									System.out.println(
																											" There is no option groups for the item : "
																													+ namee);

																									if (optJSONArrayItemsObject
																											.has("prices")) {

																										JSONArray prices = optJSONArrayItemsObject
																												.optJSONArray(
																														"prices");

																										if (prices
																												.length() == 1) {

																											System.out
																													.println(
																															"prices length is 0");

																											specialInstructionsComboSubMenuScreen();

																										}

																										if (prices
																												.length() > 1) {

																											specialInstructions();

																											find.byValueKey(
																													menuScreenLocators.VK_ITEM_QUANTITY_COMBO_ADD_ITEM_BUTTON)
																													.click();

																										}

																									}

																								}

																								else if (optJSONArrayOptGroups
																										.length() > 0) {

																									System.out.println(
																											" Option groups available for the item : "
																													+ namee);

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Option groups available for the item : "
																																	+ namee,
																															ExtentColor.CYAN));

																									specialInstructions();

																									commonMethods
																											.switchContext(
																													"FLUTTER");

																									Thread.sleep(2000);

																									find.byValueKey(
																											menuScreenLocators.VK_ITEM_QUANTITY_COMBO_ADD_ITEM_BUTTON)
																											.click();

																									Thread.sleep(2000);

																								}

																							}
																						}

																					}

																					String itemArrayObjectSizes = itemArrayObject
																							.optString("sizes");

																					System.out.println(
																							itemArrayObjectSizes);

																					String itemArrayObjectOptQty = itemArrayObject
																							.optString("opt_qty");

																					System.out.println(
																							itemArrayObjectOptQty);

																					String itemArrayObjectOptCredit = itemArrayObject
																							.optString("opt_credit");

																					System.out.println(
																							itemArrayObjectOptCredit);

																					String itemArrayObjectAllOptCredit = itemArrayObject
																							.optString(
																									"all_opt_credit");

																					System.out.println(
																							itemArrayObjectAllOptCredit);

																					String itemArrayObjectUpcharge = itemArrayObject
																							.optString("upcharge");

																					System.out.println(
																							itemArrayObjectUpcharge);
																				}

																			}

																		}

																	} else if (number == 1) {

																		for (int q = 0; q < 1; q++) {

																			System.out.println(
																					" item present EQUAL to 1 and number is : "
																							+ q);

																			scrollDown();

																			FlutterElement comboItemSlotDescriptionVk = find
																					.byValueKey("combo_name_parent_" + j
																							+ "_child_" + q);

//																			String comboItemSlotDescriptionTextVk = comboItemSlotDescriptionVk
//																					.getText();
//
//																				Assert.assertEquals(
//																						comboItemSlotDescriptionTextVk,
//																						itemSlotDescription,
//																						" Validated that the description of the item slot from the API is : "
//																								+ itemSlotDescription
//																								+ " and from the UI is : "
//																								+ comboItemSlotDescriptionTextVk
//																								+ " both are same");
//
//																			System.out.println(
//																					" Validated that the description of the item slot from the API is : "
//																							+ itemSlotDescription
//																							+ " and from the UI is : "
//																							+ comboItemSlotDescriptionTextVk
//																							+ " both are same");

																			String itemSlotQty = itemSlotsObject
																					.optString("qty");

																			JSONArray itemArray = itemSlotsObject
																					.optJSONArray("items");

																			for (int e = 0; e < itemArray
																					.length(); e++) {

																				JSONObject itemArrayObject = itemArray
																						.optJSONObject(e);

																				String itemArrayObjectItem = itemArrayObject
																						.optString("item");

																				for (int k = 0; k < optJSONArrayMenu
																						.length(); k++) {

																					JSONObject optJSONObject = optJSONArrayMenu
																							.optJSONObject(k);

																					JSONArray optJSONArrayItems = optJSONObject
																							.optJSONArray("items");

																					for (int l = 0; l < optJSONArrayItems
																							.length(); l++) {

																						JSONObject optJSONArrayItemsObject = optJSONArrayItems
																								.optJSONObject(l);

																						String ids = optJSONArrayItemsObject
																								.optString("id");

																						JSONArray optJSONArrayOptGroups = optJSONArrayItemsObject
																								.optJSONArray(
																										"option_groups");

																						if (itemArrayObjectItem
																								.equals(ids)) {

																							String namee = optJSONArrayItemsObject
																									.optString("name");

																							System.out.println(
																									"name :" + namee);

																							comboItemSlotDescriptionVk
																									.click();

																							try {

																								commonMethods
																										.switchContext(
																												"NATIVE_APP");

																								Thread.sleep(2000);

																								WebElement targetElementLocator1 = driver
																										.findElement(By
																												.xpath("//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
																														+ "'"
																														+ itemSlotName.toLowerCase().trim()
																														+ "'"
																														+ ")]"));

																								if (targetElementLocator1
																										.isDisplayed()) {

																									commonMethods
																											.switchContext(
																													"FLUTTER");

																									Thread.sleep(2000);

																									FlutterElement subMenuComboItemTitleVk = find
																											.byValueKey(
																													menuScreenLocators.SUB_MENU_COMBO_TITLE_VK);

																									String subMenuComboItemTitleTextVk = subMenuComboItemTitleVk
																											.getText();

																									if (itemSlotName
																											.contains(
																													subMenuComboItemTitleTextVk)) {

																										FlutterElement subMenuComboItemVk = find
																												.byValueKey(
																														menuScreenLocators.SUB_MENU_COMBO_ITEM_VK
																																+ namee
																																+ "_name");

																										String subMenuComboItemTextVk = subMenuComboItemVk
																												.getText();

																										Assert.assertEquals(
																												subMenuComboItemTextVk,
																												namee,
																												" Validated that the item name from the API is : "
																														+ namee
																														+ " and from the UI is : "
																														+ subMenuComboItemTextVk);

																										nextGenSubMenuScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" Validated that the item name from the API is : "
																																		+ namee
																																		+ " and from the UI is : "
																																		+ subMenuComboItemTextVk,
																																ExtentColor.CYAN));

																										System.out
																												.println(
																														" Validated that the item name from the API is : "
																																+ namee
																																+ " and from the UI is : "
																																+ subMenuComboItemTextVk);

																										Thread.sleep(
																												2000);

																										subMenuComboItemVk
																												.click();

																										try {

																											commonMethods
																													.switchContext(
																															"NATIVE_APP");

																											Thread.sleep(
																													2000);

																											WebElement targetElementLocator = driver
																													.findElement(
																															By.xpath(
																																	"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
																																			+ "'attention!!'"
																																			+ ")]"));

																											if (targetElementLocator
																													.isDisplayed()) {

																												commonMethods
																														.switchContext(
																																"FLUTTER");
//																									
																												Thread.sleep(
																														2000);

																												FlutterElement alertTitleText = find
																														.byValueKey(
																																menuScreenLocators.VK_CLEAR_CUSTOMIZATION_YES_BNUTTON);

																												alertTitleText
																														.click();

																											}

																										} catch (Exception e2) {
																											System.out
																													.println(
																															" ATTENTION pop-up button is not present in the screen : "
																																	+ itemSlotName);
																										}
																									}

																								}

																							} catch (Exception e2) {
																								System.out.println(
																										itemSlotName
																												+ " is not found in the screeen  ");
																							}

																							if (optJSONArrayItemsObject
																									.has("alcohol")
																									|| optJSONArrayItemsObject
																											.has("tobacco")) {

																								if (optJSONArrayItemsObject
																										.optString(
																												"alcohol") == "true"
																										|| optJSONArrayItemsObject
																												.optString(
																														"tobacco") == "true") {

																									System.out.println(
																											" The item : "
																													+ namee
																													+ " contains TOBACCO or ALCOHOL ");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" The item : "
																																	+ namee
																																	+ " contains TOBACCO or ALCOHOL ",
																															ExtentColor.CYAN));

																									alcoholWarning();

																								} else {

																									System.out.println(
																											" The item : "
																													+ namee
																													+ " doesn't contains TOBACCO or ALCOHOL ");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" The item : "
																																	+ namee
																																	+ " doesn't contains TOBACCO or ALCOHOL ",
																															ExtentColor.CYAN));

																								}

																							}

																							if (optJSONArrayItemsObject
																									.has("prices")) {

																								System.out.println(
																										" The item "
																												+ namee
																												+ " has prices");

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" The item "
																																+ namee
																																+ " has prices",
																														ExtentColor.CYAN));

																								JSONArray prices = optJSONArrayItemsObject
																										.optJSONArray(
																												"prices");

																								if (prices
																										.length() > 1) {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" size length is greater than 1 for the item : "
																																	+ namee,
																															ExtentColor.CYAN));

																									System.out.println(
																											" size length is greater than 1 for the item : "
																													+ namee);
																									Size.size();
																								}

																							}

																							if (optJSONArrayOptGroups
																									.length() == 0) {

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" There is no option groups for the item : "
																																+ namee,
																														ExtentColor.CYAN));

																								System.out.println(
																										" There is no option groups for the item : "
																												+ namee);

																								if (optJSONArrayItemsObject
																										.has("prices")) {

																									JSONArray prices = optJSONArrayItemsObject
																											.optJSONArray(
																													"prices");

																									System.out.println(
																											"prices length : "
																													+ prices.length());

																									if (prices
																											.length() == 1) {

																										System.out
																												.println(
																														"prices length is 0");

																										specialInstructionsComboSubMenuScreen();

																									}

																									if (prices
																											.length() > 1) {

																										specialInstructions();

																										find.byValueKey(
																												menuScreenLocators.VK_ITEM_QUANTITY_COMBO_ADD_ITEM_BUTTON)
																												.click();

																									}

																								}

																							}

																							else if (optJSONArrayOptGroups
																									.length() > 0) {

																								System.out.println(
																										" Option groups available for the item : "
																												+ namee);

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" Option groups available for the item : "
																																+ namee,
																														ExtentColor.CYAN));

																								OptionGroups
																										.optionGroups();

																								specialInstructions();

																								commonMethods
																										.switchContext(
																												"FLUTTER");

																								Thread.sleep(2000);

																								find.byValueKey(
																										menuScreenLocators.VK_ITEM_QUANTITY_COMBO_ADD_ITEM_BUTTON)
																										.click();

																								Thread.sleep(2000);

																							}

																						}
																					}

																				}

																				String itemArrayObjectSizes = itemArrayObject
																						.optString("sizes");

																				System.out
																						.println(itemArrayObjectSizes);

																				String itemArrayObjectOptQty = itemArrayObject
																						.optString("opt_qty");

																				System.out
																						.println(itemArrayObjectOptQty);

																				String itemArrayObjectOptCredit = itemArrayObject
																						.optString("opt_credit");

																				System.out.println(
																						itemArrayObjectOptCredit);

																				String itemArrayObjectAllOptCredit = itemArrayObject
																						.optString("all_opt_credit");

																				System.out.println(
																						itemArrayObjectAllOptCredit);

																				String itemArrayObjectUpcharge = itemArrayObject
																						.optString("upcharge");

																				System.out.println(
																						itemArrayObjectUpcharge);
																			}

																		}
																	}
																}

																else {

																	System.out.println("description for the item : "
																			+ itemSlotName + " is not available");

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					"description for the item : "
																							+ itemSlotName
																							+ " is not available",
																					ExtentColor.CYAN));

																}

															}
															if (t % 2 != 0) {

																FlutterElement buyNowButtonVk = find.byValueKey(
																		menuScreenLocators.ITEM_QUANTITY_SCREEN_BUY_NOW_BUTTON_VK);

																String buyNowButtonTextVk = buyNowButtonVk.getText();

																buyNowButtonVk.click();

																String basketHeaderTitleText = commonMethods
																		.stringsReader(
																				basketLocators.BASKET_HEADER_TITLE);

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that after tapping the : "
																						+ buyNowButtonTextVk
																						+ " button, it navigates to the basket screen with the title : "
																						+ basketHeaderTitleText,
																				ExtentColor.CYAN));

																System.out
																		.println(" Validated that after tapping the : "
																				+ buyNowButtonTextVk
																				+ " button, it navigates to the basket screen with the title : "
																				+ basketHeaderTitleText);

																find.byValueKey(
																		basketLocators.BASKET_SCREEN_BACK_ICON_VKL)
																		.click();

																FlutterElement menuScreenTitle1Vk = find.byValueKey(
																		menuScreenLocators.MENU_SCREEN_TITLE_VK);

																String menuScreenTitleText1Vk = menuScreenTitle1Vk
																		.getText();

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that after tapping the basket screen back icon, it navigates to the menu screen with the title : "
																						+ menuScreenTitleText1Vk,
																				ExtentColor.CYAN));

																System.out.println(
																		" Validated that after tapping the basket screen back icon, it navigates to the menu screen with the title : "
																				+ menuScreenTitleText1Vk);

															} else {

																FlutterElement addToBasketButtonVk = find.byValueKey(
																		menuScreenLocators.ITEM_QUANTITY_SCREEN_ADD_TO_BASKET_BUTTON_VK);

																String addToBasketButtonTextVk = addToBasketButtonVk
																		.getText();

																addToBasketButtonVk.click();

																FlutterElement menuScreenTitle1Vk = find.byValueKey(
																		menuScreenLocators.MENU_SCREEN_TITLE_VK);

																String menuScreenTitleText1Vk = menuScreenTitle1Vk
																		.getText();

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that after tapping the "
																						+ addToBasketButtonTextVk
																						+ " button, it navigates to the menu screen with the title : "
																						+ menuScreenTitleText1Vk,
																				ExtentColor.CYAN));

																System.out.println(" Validated that after tapping the "
																		+ addToBasketButtonTextVk
																		+ " button, it navigates to the menu screen with the title : "
																		+ menuScreenTitleText1Vk);

															}

															FlutterElement reviewButtonVk = find.byValueKey(
																	menuScreenLocators.MENU_SCREEN_REVIEW_BASKET_BUTTON_VK);

															String reviewButtonTextVk = reviewButtonVk.getText();

															reviewButtonVk.click();

															String basketHeaderTitleText1 = commonMethods
																	.stringsReader(basketLocators.BASKET_HEADER_TITLE);

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	" Validated that after tapping the : "
																			+ reviewButtonTextVk
																			+ " button, it navigates to the basket screen with the title : "
																			+ basketHeaderTitleText1,
																	ExtentColor.CYAN));

															System.out.println(" Validated that after tapping the : "
																	+ reviewButtonTextVk
																	+ " button, it navigates to the basket screen with the title : "
																	+ basketHeaderTitleText1);

														}

														else if (itemSkipSteps == "true") {

															// add to cart button & buy now button in pop-up

															System.out.println(
																	"add to cart button & buy now button in popup");

															System.out.println(
																	"step description" + itemUseStepUpDescription);

															if (itemUseStepUpDescription == "true") {

																System.out.println(" Step description true : "
																		+ itemUseDescription);

																FlutterElement itemUseStepUpDescriptionVk = find
																		.byValueKey(
																				menuScreenLocators.SUB_MENU_COMBO_DESCRIPTION_VK);

																String itemUseStepUpDescriptionTextVk = itemUseStepUpDescriptionVk
																		.getText();

																Assert.assertEquals(itemUseStepUpDescriptionTextVk,
																		itemUseDescription,
																		" Validated that the description from the API is : "
																				+ itemUseDescription
																				+ " and from the UI is : "
																				+ itemUseStepUpDescriptionTextVk
																				+ " both are same ");

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that the description from the API is : "
																						+ itemUseDescription
																						+ " and from the UI is : "
																						+ itemUseStepUpDescriptionTextVk
																						+ " both are same ",
																				ExtentColor.CYAN));

																System.out.println(
																		" Validated that the description from the API is : "
																				+ itemUseDescription
																				+ " and from the UI is : "
																				+ itemUseStepUpDescriptionTextVk
																				+ " both are same ");

															}

															else if (itemUseStepUpDescription == "false") {

																System.out.println(
																		" Step description false : " + description);

																FlutterElement itemUseStepUpDescriptionVk = find
																		.byValueKey(
																				menuScreenLocators.SUB_MENU_COMBO_DESCRIPTION_VK);

																String itemUseStepUpDescriptionTextVk = itemUseStepUpDescriptionVk
																		.getText();

																Assert.assertEquals(itemUseStepUpDescriptionTextVk,
																		description,
																		" Validated that the description from the API is : "
																				+ description + " and from the UI is : "
																				+ itemUseStepUpDescriptionTextVk
																				+ " both are same ");

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that the description from the API is : "
																						+ description
																						+ " and from the UI is : "
																						+ itemUseStepUpDescriptionTextVk
																						+ " both are same ",
																				ExtentColor.CYAN));

																System.out.println(
																		" Validated that the description from the API is : "
																				+ description + " and from the UI is : "
																				+ itemUseStepUpDescriptionTextVk
																				+ " both are same ");

															}

															if (t % 2 != 0) {

																FlutterElement buyNowButtonVk = find.byValueKey(
																		menuScreenLocators.ITEM_QUANTITY_SCREEN_BUY_NOW_BUTTON_VK);

																String buyNowButtonTextVk = buyNowButtonVk.getText();

																buyNowButtonVk.click();

																String basketHeaderTitleText = commonMethods
																		.stringsReader(
																				basketLocators.BASKET_HEADER_TITLE);

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that after tapping the : "
																						+ buyNowButtonTextVk
																						+ " button, it navigates to the basket screen with the title : "
																						+ basketHeaderTitleText,
																				ExtentColor.CYAN));

																System.out
																		.println(" Validated that after tapping the : "
																				+ buyNowButtonTextVk
																				+ " button, it navigates to the basket screen with the title : "
																				+ basketHeaderTitleText);

																find.byValueKey(
																		basketLocators.BASKET_SCREEN_BACK_ICON_VKL)
																		.click();

																FlutterElement menuScreenTitle1Vk = find.byValueKey(
																		menuScreenLocators.MENU_SCREEN_TITLE_VK);

																String menuScreenTitleText1Vk = menuScreenTitle1Vk
																		.getText();

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that after tapping the basket screen back icon, it navigates to the menu screen with the title : "
																						+ menuScreenTitleText1Vk,
																				ExtentColor.CYAN));

																System.out.println(
																		" Validated that after tapping the basket screen back icon, it navigates to the menu screen with the title : "
																				+ menuScreenTitleText1Vk);

															} else {

																FlutterElement addToBasketButtonVk = find.byValueKey(
																		menuScreenLocators.ITEM_QUANTITY_SCREEN_ADD_TO_BASKET_BUTTON_VK);

																String addToBasketButtonTextVk = addToBasketButtonVk
																		.getText();

																addToBasketButtonVk.click();

																FlutterElement menuScreenTitle1Vk = find.byValueKey(
																		menuScreenLocators.MENU_SCREEN_TITLE_VK);

																String menuScreenTitleText1Vk = menuScreenTitle1Vk
																		.getText();

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that after tapping the "
																						+ addToBasketButtonTextVk
																						+ " button, it navigates to the menu screen with the title : "
																						+ menuScreenTitleText1Vk,
																				ExtentColor.CYAN));

																System.out.println(" Validated that after tapping the "
																		+ addToBasketButtonTextVk
																		+ " button, it navigates to the menu screen with the title : "
																		+ menuScreenTitleText1Vk);

															}

															FlutterElement reviewButtonVk = find.byValueKey(
																	menuScreenLocators.MENU_SCREEN_REVIEW_BASKET_BUTTON_VK);

															String reviewButtonTextVk = reviewButtonVk.getText();

															reviewButtonVk.click();

															String basketHeaderTitleText1 = commonMethods
																	.stringsReader(basketLocators.BASKET_HEADER_TITLE);

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	" Validated that after tapping the : "
																			+ reviewButtonTextVk
																			+ " button, it navigates to the basket screen with the title : "
																			+ basketHeaderTitleText1,
																	ExtentColor.CYAN));

															System.out.println(" Validated that after tapping the : "
																	+ reviewButtonTextVk
																	+ " button, it navigates to the basket screen with the title : "
																	+ basketHeaderTitleText1);

														}

													}

													else if (itemSkipPopUp == "true") {

														// pop-up won't display

														System.out.println("popup won't display");

														if (itemSkipSteps == "false") {

															System.out.println(
																	"step description" + itemUseStepUpDescription);

															FlutterElement title = find.byValueKey(
																	menuScreenLocators.VK_COMBO_CUSTOMIZATION_TITLE_TEXT);

															String titleText = title.getText();

															System.out.println(" The title text in sides screen is : "
																	+ titleText);

															nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
																	" The title text in sides screen is : " + titleText,
																	ExtentColor.CYAN));
//
//															if (itemUseStepUpDescription == "true") {
//
//																System.out.println(" Step description true : "
//																		+ itemUseDescription);
//
//																FlutterElement itemUseStepUpDescriptionVk = find
//																		.byValueKey(
//																				menuScreenLocators.VK_COMBO_CUSTOMIZATION_DESCRIPTION_TEXT);
//
//																String itemUseStepUpDescriptionTextVk = itemUseStepUpDescriptionVk
//																		.getText();
//
//																System.out.println(" The description from the UI is : "
//																		+ itemUseStepUpDescriptionTextVk);
//
//																nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//																		" The description from the UI is : "
//																				+ itemUseStepUpDescriptionTextVk,
//																		ExtentColor.CYAN));
//
//															}
//
//															else if (itemUseStepUpDescription == "false") {
//
//																System.out.println(
//																		" Step description false : " + description);
//
//																FlutterElement itemUseStepUpDescriptionVk = find
//																		.byValueKey(
//																				menuScreenLocators.VK_COMBO_CUSTOMIZATION_DESCRIPTION_TEXT);
//
//																String itemUseStepUpDescriptionTextVk = itemUseStepUpDescriptionVk
//																		.getText();
//
//																System.out.println(" The description from the UI is : "
//																		+ itemUseStepUpDescriptionTextVk);
//
//																nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
//																		" The description from the UI is : "
//																				+ itemUseStepUpDescriptionTextVk,
//																		ExtentColor.CYAN));
//
//															}

															for (int j = 0; j < itemSlotsArray.length(); j++) {

																JSONObject itemSlotsObject = itemSlotsArray
																		.getJSONObject(j);

																String itemSlotName = itemSlotsObject.optString("name");

																FlutterElement comboItemSlotNameVk = find.byValueKey(
																		menuScreenLocators.VK_COMBO_SIDE_NAME + j);

																String comboItemSlotNameTextVk = comboItemSlotNameVk
																		.getText();

																boolean itemSlotNameContains = comboItemSlotNameTextVk
																		.contains(itemSlotName);

																Assert.assertEquals(itemSlotNameContains, true,
																		" Validated that the name of the item slot from the API is : "
																				+ itemSlotName
																				+ " and from the UI is : "
																				+ comboItemSlotNameTextVk
																				+ " both are same");

																nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
																		" Validated that the name of the item slot from the API is : "
																				+ itemSlotName
																				+ " and from the UI is : "
																				+ comboItemSlotNameTextVk
																				+ " both are same",
																		ExtentColor.CYAN));

																System.out.println(
																		" Validated that the name of the item slot from the API is : "
																				+ itemSlotName
																				+ " and from the UI is : "
																				+ comboItemSlotNameTextVk
																				+ " both are same");

																Pattern pattern = Pattern.compile("\\d+");
																Matcher matcher = pattern
																		.matcher(comboItemSlotNameTextVk);

																if (matcher.find()) {

																	String numberStr = matcher.group();

																	number = Integer.parseInt(numberStr);

																} else {

																	System.out
																			.println("No integer found in the string.");
																}

																if (itemSlotsObject.has("description")) {

																	String itemSlotDescription = itemSlotsObject
																			.optString("description");

																	if (number > 1) {

																		System.out.println(
																				" item present more than 1 and number is : "
																						+ number);

																		for (int q = 0; q < number; q++) {

																			System.out.println(
																					" item present more than 1 and number is : "
																							+ q);

//																			scrollOptionsGroupDown(itemSlotName);

																			FlutterElement comboItemSlotDescriptionVk = find
																					.byValueKey("combo_name_parent_" + j
																							+ "_child_" + q);

//																			String comboItemSlotDescriptionTextVk = comboItemSlotDescriptionVk
//																					.getText();

//																				Assert.assertEquals(
//																						comboItemSlotDescriptionTextVk,
//																						itemSlotDescription,
//																						" Validated that the description of the item slot from the API is : "
//																								+ itemSlotDescription
//																								+ " and from the UI is : "
//																								+ comboItemSlotDescriptionTextVk
//																								+ " both are same");
//
//																			System.out.println(
//																					" Validated that the description of the item slot from the API is : "
//																							+ itemSlotDescription
//																							+ " and from the UI is : "
//																							+ comboItemSlotDescriptionTextVk
//																							+ " both are same");

																			if (q == 0) {

																				String itemSlotQty = itemSlotsObject
																						.optString("qty");

																				JSONArray itemArray = itemSlotsObject
																						.optJSONArray("items");

																				for (int e = 0; e < itemArray
																						.length(); e++) {

																					JSONObject itemArrayObject = itemArray
																							.optJSONObject(e);

																					String itemArrayObjectItem = itemArrayObject
																							.optString("item");

																					for (int k = 0; k < optJSONArrayMenu
																							.length(); k++) {

																						JSONObject optJSONObject = optJSONArrayMenu
																								.optJSONObject(k);

																						JSONArray optJSONArrayItems = optJSONObject
																								.optJSONArray("items");

																						for (int l = 0; l < optJSONArrayItems
																								.length(); l++) {

																							JSONObject optJSONArrayItemsObject = optJSONArrayItems
																									.optJSONObject(l);

																							String ids = optJSONArrayItemsObject
																									.optString("id");

																							JSONArray optJSONArrayOptGroups = optJSONArrayItemsObject
																									.optJSONArray(
																											"option_groups");

																							if (itemArrayObjectItem
																									.equals(ids)) {

																								String namee = optJSONArrayItemsObject
																										.optString(
																												"name");

																								System.out.println(
																										"name :" + namee);

																								comboItemSlotDescriptionVk
																										.click();

																								try {

																									commonMethods
																											.switchContext(
																													"NATIVE_APP");

																									Thread.sleep(2000);

																									WebElement targetElementLocator1 = driver
																											.findElement(
																													By.xpath(
																															"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
																																	+ "'"
																																	+ itemSlotName.toLowerCase().trim()
																																	+ "'"
																																	+ ")]"));

																									if (targetElementLocator1
																											.isDisplayed()) {

																										commonMethods
																												.switchContext(
																														"FLUTTER");

																										Thread.sleep(
																												2000);

																										FlutterElement subMenuComboItemTitleVk = find
																												.byValueKey(
																														menuScreenLocators.SUB_MENU_COMBO_TITLE_VK);

																										String subMenuComboItemTitleTextVk = subMenuComboItemTitleVk
																												.getText();

																										if (itemSlotName
																												.contains(
																														subMenuComboItemTitleTextVk)) {

																											FlutterElement subMenuComboItemVk = find
																													.byValueKey(
																															menuScreenLocators.SUB_MENU_COMBO_ITEM_VK
																																	+ namee
																																	+ "_name");

																											String subMenuComboItemTextVk = subMenuComboItemVk
																													.getText();

																											Assert.assertEquals(
																													subMenuComboItemTextVk,
																													namee,
																													" Validated that the item name from the API is : "
																															+ namee
																															+ " and from the UI is : "
																															+ subMenuComboItemTextVk);

																											nextGenSubMenuScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	" Validated that the item name from the API is : "
																																			+ namee
																																			+ " and from the UI is : "
																																			+ subMenuComboItemTextVk,
																																	ExtentColor.CYAN));

																											System.out
																													.println(
																															" Validated that the item name from the API is : "
																																	+ namee
																																	+ " and from the UI is : "
																																	+ subMenuComboItemTextVk);

																											Thread.sleep(
																													2000);

																											subMenuComboItemVk
																													.click();

																											try {

																												commonMethods
																														.switchContext(
																																"NATIVE_APP");

																												Thread.sleep(
																														2000);

																												WebElement targetElementLocator = driver
																														.findElement(
																																By.xpath(
																																		"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
																																				+ "'attention!!'"
																																				+ ")]"));

																												if (targetElementLocator
																														.isDisplayed()) {

																													commonMethods
																															.switchContext(
																																	"FLUTTER");
//																												
																													Thread.sleep(
																															2000);

																													FlutterElement alertTitleText = find
																															.byValueKey(
																																	menuScreenLocators.VK_CLEAR_CUSTOMIZATION_YES_BNUTTON);

																													alertTitleText
																															.click();

																												}

																											} catch (Exception e2) {
																												System.out
																														.println(
																																"yes button is not present in the screen");
																											}
																										}

																									}

																								} catch (Exception e2) {
																									// TODO: handle
																									// exception
																								}

																								if (optJSONArrayItemsObject
																										.has("alcohol")
																										|| optJSONArrayItemsObject
																												.has("tobacco")) {

																									if (optJSONArrayItemsObject
																											.optString(
																													"alcohol") == "true"
																											|| optJSONArrayItemsObject
																													.optString(
																															"tobacco") == "true") {

																										System.out
																												.println(
																														" The item : "
																																+ namee
																																+ " contains TOBACCO or ALCOHOL ");

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The item : "
																																		+ namee
																																		+ " contains TOBACCO or ALCOHOL ",
																																ExtentColor.CYAN));

																										alcoholWarning();

																									} else {

																										System.out
																												.println(
																														" The item : "
																																+ namee
																																+ " doesn't contains TOBACCO or ALCOHOL ");

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The item : "
																																		+ namee
																																		+ " doesn't contains TOBACCO or ALCOHOL ",
																																ExtentColor.CYAN));

																									}

																								}

																								if (optJSONArrayItemsObject
																										.has("prices")) {

																									System.out.println(
																											" The item "
																													+ namee
																													+ " has prices");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" The item "
																																	+ namee
																																	+ " has prices",
																															ExtentColor.CYAN));

																									JSONArray prices = optJSONArrayItemsObject
																											.optJSONArray(
																													"prices");

																									if (prices
																											.length() > 1) {

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" size length is greater than 1 for the item : "
																																		+ namee,
																																ExtentColor.CYAN));

																										System.out
																												.println(
																														" size length is greater than 1 for the item : "
																																+ namee);
																										Size.size();
																									}

																								}

																								if (optJSONArrayOptGroups
																										.length() == 0) {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" There is no option groups for the item : "
																																	+ namee,
																															ExtentColor.CYAN));

																									System.out.println(
																											" There is no option groups for the item : "
																													+ namee);

																									if (optJSONArrayItemsObject
																											.has("prices")) {

																										JSONArray prices = optJSONArrayItemsObject
																												.optJSONArray(
																														"prices");

																										System.out
																												.println(
																														"prices length : "
																																+ prices.length());

																										if (prices
																												.length() == 1) {

																											System.out
																													.println(
																															"prices length is 0");

																											specialInstructionsComboSubMenuScreen();

																										}

																										if (prices
																												.length() > 1) {

																											specialInstructions();

																											Thread.sleep(
																													1500);

																											find.byValueKey(
																													menuScreenLocators.VK_ITEM_QUANTITY_COMBO_ADD_ITEM_BUTTON)
																													.click();

																										}

																									}

																								}

																								else if (optJSONArrayOptGroups
																										.length() > 0) {

																									System.out.println(
																											" Option groups available for the item : "
																													+ namee);

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Option groups available for the item : "
																																	+ namee,
																															ExtentColor.CYAN));

																									OptionGroups
																											.optionGroups();

																									specialInstructions();

																									commonMethods
																											.switchContext(
																													"FLUTTER");

																									Thread.sleep(2000);

																									find.byValueKey(
																											menuScreenLocators.VK_ITEM_QUANTITY_COMBO_ADD_ITEM_BUTTON)
																											.click();

																									Thread.sleep(2000);

																								}

																							}
																						}

																					}

																					String itemArrayObjectSizes = itemArrayObject
																							.optString("sizes");

																					System.out.println(
																							itemArrayObjectSizes);

																					String itemArrayObjectOptQty = itemArrayObject
																							.optString("opt_qty");

																					System.out.println(
																							itemArrayObjectOptQty);

																					String itemArrayObjectOptCredit = itemArrayObject
																							.optString("opt_credit");

																					System.out.println(
																							itemArrayObjectOptCredit);

																					String itemArrayObjectAllOptCredit = itemArrayObject
																							.optString(
																									"all_opt_credit");

																					System.out.println(
																							itemArrayObjectAllOptCredit);

																					String itemArrayObjectUpcharge = itemArrayObject
																							.optString("upcharge");

																					System.out.println(
																							itemArrayObjectUpcharge);
																				}

																			}

																			else if (q > 0) {

																				String itemSlotQty = itemSlotsObject
																						.optString("qty");

																				JSONArray itemArray = itemSlotsObject
																						.optJSONArray("items");

																				for (int e = 0; e < itemArray
																						.length(); e++) {

																					JSONObject itemArrayObject = itemArray
																							.optJSONObject(e);

																					String itemArrayObjectItem = itemArrayObject
																							.optString("item");

																					for (int k = 0; k < optJSONArrayMenu
																							.length(); k++) {

																						JSONObject optJSONObject = optJSONArrayMenu
																								.optJSONObject(k);

																						JSONArray optJSONArrayItems = optJSONObject
																								.optJSONArray("items");

																						for (int l = 0; l < optJSONArrayItems
																								.length(); l++) {

																							JSONObject optJSONArrayItemsObject = optJSONArrayItems
																									.optJSONObject(l);

																							String ids = optJSONArrayItemsObject
																									.optString("id");

																							JSONArray optJSONArrayOptGroups = optJSONArrayItemsObject
																									.optJSONArray(
																											"option_groups");

																							if (itemArrayObjectItem
																									.equals(ids)) {

																								String namee = optJSONArrayItemsObject
																										.optString(
																												"name");

																								System.out.println(
																										"name :" + namee);

																								comboItemSlotDescriptionVk
																										.click();

																								try {

																									commonMethods
																											.switchContext(
																													"NATIVE_APP");

																									Thread.sleep(2000);

																									WebElement targetElementLocator1 = driver
																											.findElement(
																													By.xpath(
																															"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
																																	+ "'"
																																	+ itemSlotName.toLowerCase().trim()
																																	+ "'"
																																	+ ")]"));

																									if (targetElementLocator1
																											.isDisplayed()) {

																										commonMethods
																												.switchContext(
																														"FLUTTER");

																										Thread.sleep(
																												2000);

																										FlutterElement subMenuComboItemTitleVk = find
																												.byValueKey(
																														menuScreenLocators.SUB_MENU_COMBO_TITLE_VK);

																										String subMenuComboItemTitleTextVk = subMenuComboItemTitleVk
																												.getText();

																										if (itemSlotName
																												.contains(
																														subMenuComboItemTitleTextVk)) {

																											FlutterElement subMenuComboItemVk = find
																													.byValueKey(
																															menuScreenLocators.SUB_MENU_COMBO_ITEM_VK
																																	+ namee
																																	+ "_name");

																											String subMenuComboItemTextVk = subMenuComboItemVk
																													.getText();

																											Assert.assertEquals(
																													subMenuComboItemTextVk,
																													namee,
																													" Validated that the item name from the API is : "
																															+ namee
																															+ " and from the UI is : "
																															+ subMenuComboItemTextVk);

																											nextGenSubMenuScreen001
																													.info(MarkupHelper
																															.createLabel(
																																	" Validated that the item name from the API is : "
																																			+ namee
																																			+ " and from the UI is : "
																																			+ subMenuComboItemTextVk,
																																	ExtentColor.CYAN));

																											System.out
																													.println(
																															" Validated that the item name from the API is : "
																																	+ namee
																																	+ " and from the UI is : "
																																	+ subMenuComboItemTextVk);

																											Thread.sleep(
																													2000);

																											subMenuComboItemVk
																													.click();

																											try {

																												commonMethods
																														.switchContext(
																																"NATIVE_APP");

																												Thread.sleep(
																														2000);

																												WebElement targetElementLocator = driver
																														.findElement(
																																By.xpath(
																																		"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
																																				+ "'attention!!'"
																																				+ ")]"));

																												if (targetElementLocator
																														.isDisplayed()) {

																													commonMethods
																															.switchContext(
																																	"FLUTTER");
//																												
																													Thread.sleep(
																															2000);

																													FlutterElement alertTitleText = find
																															.byValueKey(
																																	menuScreenLocators.VK_CLEAR_CUSTOMIZATION_YES_BNUTTON);

																													alertTitleText
																															.click();

																												}

																											} catch (Exception e2) {
																												System.out
																														.println(
																																"yes button is not present in the screen");
																											}
																										}

																									}
																								} catch (Exception e3) {
																									// TODO: handle
																									// exception
																								}

																								if (optJSONArrayItemsObject
																										.has("alcohol")
																										|| optJSONArrayItemsObject
																												.has("tobacco")) {

																									if (optJSONArrayItemsObject
																											.optString(
																													"alcohol") == "true"
																											|| optJSONArrayItemsObject
																													.optString(
																															"tobacco") == "true") {

																										System.out
																												.println(
																														" The item : "
																																+ namee
																																+ " contains TOBACCO or ALCOHOL ");

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The item : "
																																		+ namee
																																		+ " contains TOBACCO or ALCOHOL ",
																																ExtentColor.CYAN));

																										alcoholWarning();

																									} else {

																										System.out
																												.println(
																														" The item : "
																																+ namee
																																+ " doesn't contains TOBACCO or ALCOHOL ");

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" The item : "
																																		+ namee
																																		+ " doesn't contains TOBACCO or ALCOHOL ",
																																ExtentColor.CYAN));

																									}

																								}

																								if (optJSONArrayItemsObject
																										.has("prices")) {

																									System.out.println(
																											" The item "
																													+ namee
																													+ " has prices");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" The item "
																																	+ namee
																																	+ " has prices",
																															ExtentColor.CYAN));

																									JSONArray prices = optJSONArrayItemsObject
																											.optJSONArray(
																													"prices");

																									if (prices
																											.length() > 1) {

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" size length is greater than 1 for the item : "
																																		+ namee,
																																ExtentColor.CYAN));

																										System.out
																												.println(
																														" size length is greater than 1 for the item : "
																																+ namee);

																									}

																								}

																								if (optJSONArrayOptGroups
																										.length() == 0) {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" There is no option groups for the item : "
																																	+ namee,
																															ExtentColor.CYAN));

																									System.out.println(
																											" There is no option groups for the item : "
																													+ namee);

																									if (optJSONArrayItemsObject
																											.has("prices")) {

																										JSONArray prices = optJSONArrayItemsObject
																												.optJSONArray(
																														"prices");

																										System.out
																												.println(
																														"prices length : "
																																+ prices.length());

																										if (prices
																												.length() == 1) {

																											System.out
																													.println(
																															"prices length is 0");

																											specialInstructionsComboSubMenuScreen();

																										}

																										if (prices
																												.length() > 1) {

																											specialInstructions();

																											find.byValueKey(
																													menuScreenLocators.VK_ITEM_QUANTITY_COMBO_ADD_ITEM_BUTTON)
																													.click();

																										}

																									}

																								}

																								else if (optJSONArrayOptGroups
																										.length() > 0) {

																									System.out.println(
																											" Option groups available for the item : "
																													+ namee);

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Option groups available for the item : "
																																	+ namee,
																															ExtentColor.CYAN));

//																									specialInstructions();

																									commonMethods
																											.switchContext(
																													"FLUTTER");

																									Thread.sleep(2000);

																									find.byValueKey(
																											menuScreenLocators.VK_ITEM_QUANTITY_COMBO_ADD_ITEM_BUTTON)
																											.click();

																									Thread.sleep(2000);

																								}

																							}
																						}

																					}

																					String itemArrayObjectSizes = itemArrayObject
																							.optString("sizes");

																					System.out.println(
																							itemArrayObjectSizes);

																					String itemArrayObjectOptQty = itemArrayObject
																							.optString("opt_qty");

																					System.out.println(
																							itemArrayObjectOptQty);

																					String itemArrayObjectOptCredit = itemArrayObject
																							.optString("opt_credit");

																					System.out.println(
																							itemArrayObjectOptCredit);

																					String itemArrayObjectAllOptCredit = itemArrayObject
																							.optString(
																									"all_opt_credit");

																					System.out.println(
																							itemArrayObjectAllOptCredit);

																					String itemArrayObjectUpcharge = itemArrayObject
																							.optString("upcharge");

																					System.out.println(
																							itemArrayObjectUpcharge);
																				}

																			}

																		}
																	} else if (number == 1) {

																		for (int q = 0; q < 1; q++) {

																			System.out.println(
																					" item present EQUAL 1 and number is : "
																							+ q);

																			scrollDown();

																			FlutterElement comboItemSlotDescriptionVk = find
																					.byValueKey("combo_name_parent_" + j
																							+ "_child_" + q);

//																			String comboItemSlotDescriptionTextVk = comboItemSlotDescriptionVk
//																					.getText();
//
//																				Assert.assertEquals(
//																						comboItemSlotDescriptionTextVk,
//																						itemSlotDescription,
//																						" Validated that the description of the item slot from the API is : "
//																								+ itemSlotDescription
//																								+ " and from the UI is : "
//																								+ comboItemSlotDescriptionTextVk
//																								+ " both are same");
//
//																			System.out.println(
//																					" Validated that the description of the item slot from the API is : "
//																							+ itemSlotDescription
//																							+ " and from the UI is : "
//																							+ comboItemSlotDescriptionTextVk
//																							+ " both are same");

																			String itemSlotQty = itemSlotsObject
																					.optString("qty");

																			JSONArray itemArray = itemSlotsObject
																					.optJSONArray("items");

																			for (int e = 0; e < itemArray
																					.length(); e++) {

																				JSONObject itemArrayObject = itemArray
																						.optJSONObject(e);

																				String itemArrayObjectItem = itemArrayObject
																						.optString("item");

																				for (int k = 0; k < optJSONArrayMenu
																						.length(); k++) {

																					JSONObject optJSONObject = optJSONArrayMenu
																							.optJSONObject(k);

																					JSONArray optJSONArrayItems = optJSONObject
																							.optJSONArray("items");

																					for (int l = 0; l < optJSONArrayItems
																							.length(); l++) {

																						JSONObject optJSONArrayItemsObject = optJSONArrayItems
																								.optJSONObject(l);

																						String ids = optJSONArrayItemsObject
																								.optString("id");

																						JSONArray optJSONArrayOptGroups = optJSONArrayItemsObject
																								.optJSONArray(
																										"option_groups");

																						if (itemArrayObjectItem
																								.equals(ids)) {

																							String namee = optJSONArrayItemsObject
																									.optString("name");

																							System.out.println(
																									"name :" + namee);

																							comboItemSlotDescriptionVk
																									.click();

																							FlutterElement subMenuComboItemTitleVk = find
																									.byValueKey(
																											menuScreenLocators.SUB_MENU_COMBO_TITLE_VK);

																							String subMenuComboItemTitleTextVk = subMenuComboItemTitleVk
																									.getText();

																							if (itemSlotName.contains(
																									subMenuComboItemTitleTextVk)) {

																								FlutterElement subMenuComboItemVk = find
																										.byValueKey(
																												menuScreenLocators.SUB_MENU_COMBO_ITEM_VK
																														+ namee
																														+ "_name");

																								String subMenuComboItemTextVk = subMenuComboItemVk
																										.getText();

																								Assert.assertEquals(
																										subMenuComboItemTextVk,
																										namee,
																										" Validated that the item name from the API is : "
																												+ namee
																												+ " and from the UI is : "
																												+ subMenuComboItemTextVk);

																								nextGenSubMenuScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" Validated that the item name from the API is : "
																																+ namee
																																+ " and from the UI is : "
																																+ subMenuComboItemTextVk,
																														ExtentColor.CYAN));

																								System.out.println(
																										" Validated that the item name from the API is : "
																												+ namee
																												+ " and from the UI is : "
																												+ subMenuComboItemTextVk);

																								Thread.sleep(2000);

																								subMenuComboItemVk
																										.click();

																								try {

																									commonMethods
																											.switchContext(
																													"NATIVE_APP");

																									Thread.sleep(2000);

																									WebElement targetElementLocator = driver
																											.findElement(
																													By.xpath(
																															"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
																																	+ "'attention!!'"
																																	+ ")]"));

																									if (targetElementLocator
																											.isDisplayed()) {

																										commonMethods
																												.switchContext(
																														"FLUTTER");
//																											
																										Thread.sleep(
																												2000);

																										FlutterElement alertTitleText = find
																												.byValueKey(
																														menuScreenLocators.VK_CLEAR_CUSTOMIZATION_YES_BNUTTON);

																										alertTitleText
																												.click();

																									}

																								} catch (Exception e2) {
																									System.out.println(
																											"yes button is not present in the screen");
																								}
																							}

																							if (optJSONArrayItemsObject
																									.has("alcohol")
																									|| optJSONArrayItemsObject
																											.has("tobacco")) {

																								if (optJSONArrayItemsObject
																										.optString(
																												"alcohol") == "true"
																										|| optJSONArrayItemsObject
																												.optString(
																														"tobacco") == "true") {

																									System.out.println(
																											" The item : "
																													+ namee
																													+ " contains TOBACCO or ALCOHOL ");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" The item : "
																																	+ namee
																																	+ " contains TOBACCO or ALCOHOL ",
																															ExtentColor.CYAN));

																									alcoholWarning();

																								} else {

																									System.out.println(
																											" The item : "
																													+ namee
																													+ " doesn't contains TOBACCO or ALCOHOL ");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" The item : "
																																	+ namee
																																	+ " doesn't contains TOBACCO or ALCOHOL ",
																															ExtentColor.CYAN));

																								}

																							}

																							if (optJSONArrayItemsObject
																									.has("prices")) {

																								System.out.println(
																										" The item "
																												+ namee
																												+ " has prices");

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" The item "
																																+ namee
																																+ " has prices",
																														ExtentColor.CYAN));

																								JSONArray prices = optJSONArrayItemsObject
																										.optJSONArray(
																												"prices");

																								if (prices
																										.length() > 1) {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" size length is greater than 1 for the item : "
																																	+ namee,
																															ExtentColor.CYAN));

																									System.out.println(
																											" size length is greater than 1 for the item : "
																													+ namee);
																									Size.size();
																								}

																							}

																							if (optJSONArrayOptGroups
																									.length() == 0) {

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" There is no option groups for the item : "
																																+ namee,
																														ExtentColor.CYAN));

																								System.out.println(
																										" There is no option groups for the item : "
																												+ namee);

																								if (optJSONArrayItemsObject
																										.has("prices")) {

																									JSONArray prices = optJSONArrayItemsObject
																											.optJSONArray(
																													"prices");

																									System.out.println(
																											"prices length : "
																													+ prices.length());

																									if (prices
																											.length() == 1) {

																										System.out
																												.println(
																														"prices length is 0");

																										specialInstructionsComboSubMenuScreen();

																									}

																									if (prices
																											.length() > 1) {

																										specialInstructions();

																										Thread.sleep(
																												1500);

																										find.byValueKey(
																												menuScreenLocators.VK_ITEM_QUANTITY_COMBO_ADD_ITEM_BUTTON)
																												.click();

																									}

																								}

																							}

																							else if (optJSONArrayOptGroups
																									.length() > 0) {

																								System.out.println(
																										" Option groups available for the item : "
																												+ namee);

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" Option groups available for the item : "
																																+ namee,
																														ExtentColor.CYAN));

																								OptionGroups
																										.optionGroups();

																								specialInstructions();

																								commonMethods
																										.switchContext(
																												"FLUTTER");

																								Thread.sleep(2000);

																								find.byValueKey(
																										menuScreenLocators.VK_ITEM_QUANTITY_COMBO_ADD_ITEM_BUTTON)
																										.click();

																								Thread.sleep(2000);

																							}

																						}
																					}

																				}

																				String itemArrayObjectSizes = itemArrayObject
																						.optString("sizes");

																				System.out
																						.println(itemArrayObjectSizes);

																				String itemArrayObjectOptQty = itemArrayObject
																						.optString("opt_qty");

																				System.out
																						.println(itemArrayObjectOptQty);

																				String itemArrayObjectOptCredit = itemArrayObject
																						.optString("opt_credit");

																				System.out.println(
																						itemArrayObjectOptCredit);

																				String itemArrayObjectAllOptCredit = itemArrayObject
																						.optString("all_opt_credit");

																				System.out.println(
																						itemArrayObjectAllOptCredit);

																				String itemArrayObjectUpcharge = itemArrayObject
																						.optString("upcharge");

																				System.out.println(
																						itemArrayObjectUpcharge);
																			}

																		}
																	}
																}

																else {

																	System.out.println("description for the item : "
																			+ itemSlotName + " is not available");

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					"description for the item : "
																							+ itemSlotName
																							+ " is not available",
																					ExtentColor.CYAN));

																}

															}
															if (t % 2 != 0) {

																FlutterElement buyNowButtonVk = find.byValueKey(
																		menuScreenLocators.ITEM_QUANTITY_SCREEN_BUY_NOW_BUTTON_VK);

																String buyNowButtonTextVk = buyNowButtonVk.getText();

																buyNowButtonVk.click();

																String basketHeaderTitleText = commonMethods
																		.stringsReader(
																				basketLocators.BASKET_HEADER_TITLE);

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that after tapping the : "
																						+ buyNowButtonTextVk
																						+ " button, it navigates to the basket screen with the title : "
																						+ basketHeaderTitleText,
																				ExtentColor.CYAN));

																System.out
																		.println(" Validated that after tapping the : "
																				+ buyNowButtonTextVk
																				+ " button, it navigates to the basket screen with the title : "
																				+ basketHeaderTitleText);

																find.byValueKey(
																		basketLocators.BASKET_SCREEN_BACK_ICON_VKL)
																		.click();

																FlutterElement menuScreenTitle1Vk = find.byValueKey(
																		menuScreenLocators.MENU_SCREEN_TITLE_VK);

																String menuScreenTitleText1Vk = menuScreenTitle1Vk
																		.getText();

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that after tapping the basket screen back icon, it navigates to the menu screen with the title : "
																						+ menuScreenTitleText1Vk,
																				ExtentColor.CYAN));

																System.out.println(
																		" Validated that after tapping the basket screen back icon, it navigates to the menu screen with the title : "
																				+ menuScreenTitleText1Vk);

															} else {

																FlutterElement addToBasketButtonVk = find.byValueKey(
																		menuScreenLocators.ITEM_QUANTITY_SCREEN_ADD_TO_BASKET_BUTTON_VK);

																String addToBasketButtonTextVk = addToBasketButtonVk
																		.getText();

																addToBasketButtonVk.click();

																FlutterElement menuScreenTitle1Vk = find.byValueKey(
																		menuScreenLocators.MENU_SCREEN_TITLE_VK);

																String menuScreenTitleText1Vk = menuScreenTitle1Vk
																		.getText();

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that after tapping the "
																						+ addToBasketButtonTextVk
																						+ " button, it navigates to the menu screen with the title : "
																						+ menuScreenTitleText1Vk,
																				ExtentColor.CYAN));

																System.out.println(" Validated that after tapping the "
																		+ addToBasketButtonTextVk
																		+ " button, it navigates to the menu screen with the title : "
																		+ menuScreenTitleText1Vk);

															}

															FlutterElement reviewButtonVk = find.byValueKey(
																	menuScreenLocators.MENU_SCREEN_REVIEW_BASKET_BUTTON_VK);

															String reviewButtonTextVk = reviewButtonVk.getText();

															reviewButtonVk.click();

															String basketHeaderTitleText1 = commonMethods
																	.stringsReader(basketLocators.BASKET_HEADER_TITLE);

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	" Validated that after tapping the : "
																			+ reviewButtonTextVk
																			+ " button, it navigates to the basket screen with the title : "
																			+ basketHeaderTitleText1,
																	ExtentColor.CYAN));

															System.out.println(" Validated that after tapping the : "
																	+ reviewButtonTextVk
																	+ " button, it navigates to the basket screen with the title : "
																	+ basketHeaderTitleText1);

														}

														else if (itemSkipSteps == "true") {

															// add to cart button & buy now button in side screen

															System.out.println(
																	"add to cart button & buy now button in side screen ");

															FlutterElement itemUseStepUptTitleVk = find.byValueKey(
																	menuScreenLocators.VK_COMBO_CUSTOMIZATION_TITLE_TEXT);

															String itemUseStepUptTitleTextVk = itemUseStepUptTitleVk
																	.getText();

															System.out.println(" Title of the side screen is : "
																	+ itemUseStepUptTitleTextVk);

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	" Title of the side screen is : "
																			+ itemUseStepUptTitleTextVk,
																	ExtentColor.CYAN));

															System.out.println(
																	"step description" + itemUseStepUpDescription);

															if (itemUseStepUpDescription == "true") {

																System.out.println(" Step description true : "
																		+ itemUseDescription);

																FlutterElement itemUseStepUpDescriptionVk = find
																		.byValueKey(
																				menuScreenLocators.VK_COMBO_CUSTOMIZATION_DESCRIPTION_TEXT);

																String itemUseStepUpDescriptionTextVk = itemUseStepUpDescriptionVk
																		.getText();

																Assert.assertEquals(itemUseStepUpDescriptionTextVk,
																		itemUseDescription,
																		" Validated that the description from the API is : "
																				+ itemUseDescription
																				+ " and from the UI is : "
																				+ itemUseStepUpDescriptionTextVk
																				+ " both are same ");

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that the description from the API is : "
																						+ itemUseDescription
																						+ " and from the UI is : "
																						+ itemUseStepUpDescriptionTextVk
																						+ " both are same ",
																				ExtentColor.CYAN));

																System.out.println(
																		" Validated that the description from the API is : "
																				+ itemUseDescription
																				+ " and from the UI is : "
																				+ itemUseStepUpDescriptionTextVk
																				+ " both are same ");

															}

															else if (itemUseStepUpDescription == "false") {

																System.out.println(
																		" Step description false : " + description);

																FlutterElement itemUseStepUpDescriptionVk = find
																		.byValueKey(
																				menuScreenLocators.VK_COMBO_CUSTOMIZATION_DESCRIPTION_TEXT);

																String itemUseStepUpDescriptionTextVk = itemUseStepUpDescriptionVk
																		.getText();

																Assert.assertEquals(itemUseStepUpDescriptionTextVk,
																		description,
																		" Validated that the description from the API is : "
																				+ description + " and from the UI is : "
																				+ itemUseStepUpDescriptionTextVk
																				+ " both are same ");

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that the description from the API is : "
																						+ description
																						+ " and from the UI is : "
																						+ itemUseStepUpDescriptionTextVk
																						+ " both are same ",
																				ExtentColor.CYAN));

																System.out.println(
																		" Validated that the description from the API is : "
																				+ description + " and from the UI is : "
																				+ itemUseStepUpDescriptionTextVk
																				+ " both are same ");

															}

															for (int j = 0; j < itemSlotsArray.length(); j++) {

																JSONObject itemSlotsObject = itemSlotsArray
																		.getJSONObject(j);

																String itemSlotName = itemSlotsObject.optString("name");

																FlutterElement comboItemSlotNameVk = find.byValueKey(
																		menuScreenLocators.VK_COMBO_SIDE_NAME + j);

																String comboItemSlotNameTextVk = comboItemSlotNameVk
																		.getText();

																boolean itemSlotNameContains = comboItemSlotNameTextVk
																		.contains(itemSlotName);

																Assert.assertEquals(itemSlotNameContains, true,
																		" Validated that the name of the item slot from the API is : "
																				+ itemSlotName
																				+ " and from the UI is : "
																				+ comboItemSlotNameTextVk
																				+ " both are same");

																nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
																		" Validated that the name of the item slot from the API is : "
																				+ itemSlotName
																				+ " and from the UI is : "
																				+ comboItemSlotNameTextVk
																				+ " both are same",
																		ExtentColor.CYAN));

																System.out.println(
																		" Validated that the name of the item slot from the API is : "
																				+ itemSlotName
																				+ " and from the UI is : "
																				+ comboItemSlotNameTextVk
																				+ " both are same");

																if (itemSlotsObject.has("description")) {

																	String itemSlotDescription = itemSlotsObject
																			.optString("description");

																	System.out.println(
																			" item present more than 1 and number is : "
																					+ number);

																	for (int q = 0; q < number; q++) {

																		System.out.println(
																				" item present more than 1 and number is : "
																						+ q);

																		scrollOptionsGroupDown(itemSlotName);

																		FlutterElement comboItemSlotDescriptionVk = find
																				.byValueKey("combo_name_parent_" + j
																						+ "_child_" + q);

																		String comboItemSlotDescriptionTextVk = comboItemSlotDescriptionVk
																				.getText();
																	}

																}
															}

															if (t % 2 != 0) {

																FlutterElement buyNowButtonVk = find.byValueKey(
																		menuScreenLocators.ITEM_QUANTITY_SCREEN_BUY_NOW_BUTTON_VK);

																String buyNowButtonTextVk = buyNowButtonVk.getText();

																buyNowButtonVk.click();

																String basketHeaderTitleText = commonMethods
																		.stringsReader(
																				basketLocators.BASKET_HEADER_TITLE);

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that after tapping the : "
																						+ buyNowButtonTextVk
																						+ " button, it navigates to the basket screen with the title : "
																						+ basketHeaderTitleText,
																				ExtentColor.CYAN));

																System.out
																		.println(" Validated that after tapping the : "
																				+ buyNowButtonTextVk
																				+ " button, it navigates to the basket screen with the title : "
																				+ basketHeaderTitleText);

																find.byValueKey(
																		basketLocators.BASKET_SCREEN_BACK_ICON_VKL)
																		.click();

																FlutterElement menuScreenTitle1Vk = find.byValueKey(
																		menuScreenLocators.MENU_SCREEN_TITLE_VK);

																String menuScreenTitleText1Vk = menuScreenTitle1Vk
																		.getText();

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that after tapping the basket screen back icon, it navigates to the menu screen with the title : "
																						+ menuScreenTitleText1Vk,
																				ExtentColor.CYAN));

																System.out.println(
																		" Validated that after tapping the basket screen back icon, it navigates to the menu screen with the title : "
																				+ menuScreenTitleText1Vk);

															} else {

																FlutterElement addToBasketButtonVk = find.byValueKey(
																		menuScreenLocators.ITEM_QUANTITY_SCREEN_ADD_TO_BASKET_BUTTON_VK);

																String addToBasketButtonTextVk = addToBasketButtonVk
																		.getText();

																addToBasketButtonVk.click();

																FlutterElement menuScreenTitle1Vk = find.byValueKey(
																		menuScreenLocators.MENU_SCREEN_TITLE_VK);

																String menuScreenTitleText1Vk = menuScreenTitle1Vk
																		.getText();

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Validated that after tapping the "
																						+ addToBasketButtonTextVk
																						+ " button, it navigates to the menu screen with the title : "
																						+ menuScreenTitleText1Vk,
																				ExtentColor.CYAN));

																System.out.println(" Validated that after tapping the "
																		+ addToBasketButtonTextVk
																		+ " button, it navigates to the menu screen with the title : "
																		+ menuScreenTitleText1Vk);

															}

															FlutterElement reviewButtonVk = find.byValueKey(
																	menuScreenLocators.MENU_SCREEN_REVIEW_BASKET_BUTTON_VK);

															String reviewButtonTextVk = reviewButtonVk.getText();

															reviewButtonVk.click();

															String basketHeaderTitleText1 = commonMethods
																	.stringsReader(basketLocators.BASKET_HEADER_TITLE);

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	" Validated that after tapping the : "
																			+ reviewButtonTextVk
																			+ " button, it navigates to the basket screen with the title : "
																			+ basketHeaderTitleText1,
																	ExtentColor.CYAN));

															System.out.println(" Validated that after tapping the : "
																	+ reviewButtonTextVk
																	+ " button, it navigates to the basket screen with the title : "
																	+ basketHeaderTitleText1);

														}

													}
												}

												else {

													System.out.println(" The item : " + name
															+ " doesn't have item slots and it's not a combo");

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" The item : " + name
																	+ " doesn't have item slots and it's not a combo",
															ExtentColor.CYAN));

													alcoholWarning();

													commonMethods.switchContext("FLUTTER");

													Thread.sleep(1500);

													FlutterElement itemQuantityScreenTitleVk = find.byValueKey(
															menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

													String itemQuantityScreenTitleTextVk = itemQuantityScreenTitleVk
															.getText();

													nextGenItemQuantityScreen001
															.info(MarkupHelper.createLabel(
																	" Title of the item quantity screen is : "
																			+ itemQuantityScreenTitleTextVk,
																	ExtentColor.CYAN));

													System.out.println(" Title of the item quantity screen is : "
															+ itemQuantityScreenTitleTextVk);

													nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
															takeScreenshot(driver),
															" Title of the item quantity screen is : "
																	+ itemQuantityScreenTitleTextVk);

//													if (subMenuTrue.get(n).length() > 22) {
//
//														String itemQuantityScreenTitleTextSubStringVk = itemQuantityScreenTitleTextVk
//																.substring(0, 25);
//
//														Assert.assertEquals(
//																subMenuTrue.get(n).contains(
//																		itemQuantityScreenTitleTextSubStringVk),
//																true,
//																" Validated that the sub menu item name & item quantity title screen is same ");
//
//														nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
//																" Validated that the sub menu item name & item quantity title screen is same ",
//																ExtentColor.CYAN));
//
//														System.out.println(
//																" Validated that the sub menu item name & item quantity title screen is same ");
//													}
//
//													else {
//
//														Assert.assertEquals(subMenuTrue.get(n),
//																itemQuantityScreenTitleTextVk,
//																" Validated that the sub menu item name & item quantity title screen is same ");
//
//														nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
//																" Validated that the sub menu item name & item quantity title screen is same ",
//																ExtentColor.CYAN));
//
//														System.out.println(
//																" Validated that the sub menu item name & item quantity title screen is same ");
//
//													}

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" Validated that the sub menu item name & item quantity title screen is same ",
															ExtentColor.CYAN));

													System.out.println(
															" Validated that the sub menu item name & item quantity title screen is same ");

													FlutterElement itemQuantityScreenDescriptionVk = find.byValueKey(
															menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_DESCRIPTION_VK);

													String itemQuantityScreenDescriptionTextVk = itemQuantityScreenDescriptionVk
															.getText();

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" Description of the item quantity screen is : "
																	+ itemQuantityScreenDescriptionTextVk,
															ExtentColor.CYAN));

													System.out.println(" Description of the item quantity screen is : "
															+ itemQuantityScreenDescriptionTextVk);

													optionGroupsObjectScroll();

													FlutterElement itemQuantityScreenItemQuantityCountVk = find
															.byValueKey(
																	menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

													String itemQuantityScreenItemQuantityCountTextVk = itemQuantityScreenItemQuantityCountVk
															.getText();

													int itemQuantityScreenItemQuantityCountIntVk = Integer
															.parseInt(itemQuantityScreenItemQuantityCountTextVk);

													FlutterElement itemQuantityScreenIncrementIconVk = find.byValueKey(
															menuScreenLocators.ITEM_QUANTITY_SCREEN_INCREMENT_ICON_VK);

													itemQuantityScreenIncrementIconVk.click();

													Thread.sleep(3000);

													FlutterElement itemQuantityScreenItemQuantityCount1Vk = find
															.byValueKey(
																	menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

													String itemQuantityScreenItemQuantityCountText1Vk = itemQuantityScreenItemQuantityCount1Vk
															.getText();

													int itemQuantityScreenItemQuantityCountInt1Vk = Integer
															.parseInt(itemQuantityScreenItemQuantityCountText1Vk);

													Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt1Vk,
															itemQuantityScreenItemQuantityCountIntVk,
															" Validated that the value in the item quantity count after tapping increment button is : "
																	+ itemQuantityScreenItemQuantityCountInt1Vk
																	+ " which is higher than before tapping the increment button ");

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" Validated that the value in the item quantity count after tapping increment button is : "
																	+ itemQuantityScreenItemQuantityCountInt1Vk
																	+ " which is higher than before tapping the increment button ",
															ExtentColor.CYAN));

													System.out.println(
															" Validated that the value in the item quantity count after tapping increment button is : "
																	+ itemQuantityScreenItemQuantityCountInt1Vk
																	+ " which is higher than before tapping the increment button ");

													nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
															takeScreenshot(driver),
															" Validated that the value in the item quantity count after tapping increment button is : "
																	+ itemQuantityScreenItemQuantityCountInt1Vk
																	+ " which is higher than before tapping the increment button ");

													FlutterElement itemQuantityScreenDecrementIconVk = find.byValueKey(
															menuScreenLocators.ITEM_QUANTITY_SCREEN_DECREMENT_ICON_VK);

													itemQuantityScreenDecrementIconVk.click();

													Thread.sleep(1500);

													FlutterElement itemQuantityScreenItemQuantityCount2Vk = find
															.byValueKey(
																	menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

													String itemQuantityScreenItemQuantityCountText2Vk = itemQuantityScreenItemQuantityCount2Vk
															.getText();

													int itemQuantityScreenItemQuantityCountInt2Vk = Integer
															.parseInt(itemQuantityScreenItemQuantityCountText2Vk);

													Assert.assertNotEquals(itemQuantityScreenItemQuantityCountInt2Vk,
															itemQuantityScreenItemQuantityCountInt1Vk,
															" Validated that the value in the item quantity count after tapping decrement button is : "
																	+ itemQuantityScreenItemQuantityCountText2Vk
																	+ " which is lower than before tapping the decrement button ");

													nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
															" Validated that the value in the item quantity count after tapping decrement button is : "
																	+ itemQuantityScreenItemQuantityCountText2Vk
																	+ " which is lower than before tapping the decrement button ",
															ExtentColor.CYAN));

													System.out.println(
															" Validated that the value in the item quantity count after tapping decrement button is : "
																	+ itemQuantityScreenItemQuantityCountText2Vk
																	+ " which is lower than before tapping the decrement button ");

													nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
															takeScreenshot(driver),
															" Validated that the value in the item quantity count after tapping decrement button is : "
																	+ itemQuantityScreenItemQuantityCountText2Vk
																	+ " which is lower than before tapping the decrement button ");

													JSONArray jsonArraySubMenuItems = optJSONObjectMenu
															.optJSONArray("items");

													int jsonArraySubMenuItemsLength = jsonArraySubMenuItems.length();

													JSONObject optJSONObjectPrice1 = optJSONArraySubMenuItems
															.optJSONObject(n);

													JSONArray subMenuPoints1 = optJSONObjectPrice1
															.optJSONArray("prices");

													String subMenuName = optJSONObjectPrice1.optString("name");

													if (subMenuPoints1 != null) {

														int subMenuPointsLength1 = subMenuPoints1.length();

														if (subMenuPointsLength1 > 1) {

															Size.size();

														} else {

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	" The size is lesser or equal to 1 and it won't be displayed for the sub menu item name is : "
																			+ subMenuTrue.get(n),
																	ExtentColor.CYAN));

															System.out.println(
																	" The size is lesser or equal to 1 and it won't be displayed for the sub menu item name is : "
																			+ subMenuTrue.get(n));
														}

													} else {

														nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																"  The size is null and moving to the next option group for the sub menu item name is : "
																		+ subMenuTrue.get(n),
																ExtentColor.CYAN));

														System.out.println(
																"  The size is null and moving to the next option group for the sub menu item name is : "
																		+ subMenuTrue.get(n));
													}

													if (jsonArraySubMenuItemsLength > 0) {

														jsonObjectActive = jsonArraySubMenuItems.optJSONObject(n);

														stringActive = jsonObjectActive.optString("active");

														int parseIntActivee = Integer.parseInt(stringActive);

														if (canOrderMenu == "true" && parseIntActivee == 1) {

															if (jsonObjectActive
																	.optJSONArray("option_groups") != null) {

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Option groups array is available at the index : "
																						+ n
																						+ " for the sub menu item : "
																						+ subMenuTrue.get(n),
																				ExtentColor.CYAN));

																System.out.println(
																		" Option groups array is available at the index : "
																				+ n + " for the sub menu item : "
																				+ subMenuTrue.get(n));

																jsonArrayOptionGroups = jsonObjectActive
																		.optJSONArray("option_groups");

																if (jsonArrayOptionGroups != null) {

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					" option groups array is not null at the index : "
																							+ n
																							+ " for the sub menu item : "
																							+ subMenuTrue.get(n),
																					ExtentColor.CYAN));

																	System.out.println(
																			" option groups array is not null at the index : "
																					+ n + " for the sub menu item : "
																					+ subMenuTrue.get(n));

																} else {

																	nextGenItemQuantityScreen001
																			.info(MarkupHelper.createLabel(
																					" option groups array is null at the index : "
																							+ n
																							+ " for the sub menu item : "
																							+ subMenuTrue.get(n),
																					ExtentColor.CYAN));

																	System.out.println(
																			" option groups array is null at the index : "
																					+ n + " for the sub menu item : "
																					+ subMenuTrue.get(n));
																}
															} else {

																nextGenItemQuantityScreen001
																		.info(MarkupHelper.createLabel(
																				" Option groups array is not available at the index : "
																						+ n
																						+ " for the sub menu item : "
																						+ subMenuTrue.get(n),
																				ExtentColor.CYAN));

																System.out.println(
																		" Option groups array is not available at the index : "
																				+ n + " for the sub menu item : "
																				+ subMenuTrue.get(n));
															}

															stringSubMenuName = jsonObjectActive.optString("name");

															subMenuIsSoldout = jsonObjectActive
																	.optString("is_sold_out");

															optStringAlcohol = jsonObjectActive.optString("alcohol");

															optStringTobacco = jsonObjectActive.optString("tobacco");

															optJSONArrayPrices = optJSONObjectActive
																	.optJSONArray("prices");

														}
													}

													if (optJSONObjectPrice.has("pizza")) {
														JSONObject pizzaObject = optJSONObjectPrice
																.getJSONObject("pizza");

														for (String pizzaKey : pizzaObject.keySet()) {
															if (pizzaObject.get(pizzaKey) instanceof JSONArray) {
																JSONArray pizzaToppings = pizzaObject
																		.getJSONArray(pizzaKey);
																for (int m = 0; m < pizzaToppings.length(); m++) {
																	Object pizzaToppingObject = pizzaToppings.get(m);

																	if (pizzaToppingObject instanceof String) {
																		String pizzaTopping = (String) pizzaToppingObject;

																		if (containsTopping(optJSONObjectPrice,
																				pizzaTopping)) {

																			JSONArray toppingsArray = optJSONObjectPrice
																					.getJSONArray("option_groups");

																			toppingsNameMatch.clear();
																			for (int p = 0; p < toppingsArray
																					.length(); p++) {
																				JSONObject toppingObject = toppingsArray
																						.getJSONObject(p);
																				String toppingName = toppingObject
																						.getString("name");

																				if (pizzaTopping.equals(toppingName)) {

																					toppingsNameMatch.add(toppingName);
																				}
																			}
																			if (toppingsNameMatch.size() == 2) {

																				left = toppingsNameMatch.get(0);

																				right = toppingsNameMatch.get(1);

																			} else {

																				left = "Left";

																				right = "Right";

																			}
																		}
																	}
																}
															}
														}
													}

													if (jsonObjectActive.optJSONArray("pizza_groups") != null) {

														JSONArray pizzaGroupsArray = jsonObjectActive
																.getJSONArray("pizza_groups");

														for (int j = 0; j < pizzaGroupsArray.length(); j++) {

															JSONObject pizzaGroupObject = pizzaGroupsArray
																	.getJSONObject(j);

															String wholeGroupName = pizzaGroupObject
																	.optString("whole_group_name");

															if (jsonObjectActive
																	.getJSONArray("option_groups") != null) {

																JSONArray optionGroupsArray = jsonObjectActive
																		.getJSONArray("option_groups");

																boolean found = false;

																int optionGroupsLength = optionGroupsArray.length();

																for (int k = 0; k < optionGroupsLength; k++) {

																	optionGroupObject = optionGroupsArray
																			.getJSONObject(k);

																	if (optionGroupObject.has("name")) {

																		optionGroupName = optionGroupObject
																				.getString("name");

																		if (wholeGroupName.equals(optionGroupName)) {

																			if (!optionGroupName
																					.equalsIgnoreCase("Left side")
																					|| !optionGroupName
																							.equalsIgnoreCase(
																									"Right side")) {

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Pizza found! Whole Group Name: "
																										+ wholeGroupName,
																								ExtentColor.CYAN));

																				System.out.println(
																						"Pizza found! Whole Group Name: "
																								+ wholeGroupName);

																				FlutterElement optJSONArrayOptionGroupsObjectNameUI = find
																						.byValueKey(subMenuTrue.get(n)
																								.toLowerCase()
																								.replace(" ", "_")
																								+ "_"
																								+ optionGroupName
																										.toLowerCase()
																										.replace(" ",
																												"_"));

																				String optJSONArrayOptionGroupsObjectNameTextUI = optJSONArrayOptionGroupsObjectNameUI
																						.getText();

																				Assert.assertEquals(optionGroupName,
																						optJSONArrayOptionGroupsObjectNameTextUI,
																						"Validated that the option group name from API is : "
																								+ optionGroupName
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionGroupsObjectNameTextUI
																								+ " is same ");

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								"Validated that the option group name from API is : "
																										+ optionGroupName
																										+ " and the option group name in UI is : "
																										+ optJSONArrayOptionGroupsObjectNameTextUI
																										+ " is same ",
																								ExtentColor.CYAN));

																				System.out.println(
																						"Validated that the option group name from API is : "
																								+ optionGroupName
																								+ " and the option group name in UI is : "
																								+ optJSONArrayOptionGroupsObjectNameTextUI
																								+ " is same ");

																				nextGenItemQuantityScreen001
																						.addScreenCaptureFromBase64String(
																								takeScreenshot(driver),
																								"Optional group name : "
																										+ optJSONArrayOptionGroupsObjectNameTextUI
																										+ " Screenshot ");

																				itemQuantityScroll();

																				optJSONArrayOptionGroupsObjectNameUI
																						.click();

																				itemQuantityScroll();

																				if (optionGroupObject.has("options")) {

																					JSONArray optJSONArrayOptions = optionGroupObject
																							.optJSONArray("options");

																					if (optJSONArrayOptions != null) {

																						int optJSONArrayOptionsLength = optJSONArrayOptions
																								.length();

																						for (int f = 0; f < optJSONArrayOptionsLength; f++) {

																							itemQuantityScroll();

																							JSONObject optJSONArrayOptionsObject = optJSONArrayOptions
																									.optJSONObject(f);

																							String optJSONArrayOptionsObjectName = optJSONArrayOptionsObject
																									.optString("name");

																							String optJSONArrayOptionsObjectPrice = optJSONArrayOptionsObject
																									.optString("price");

																							double value = Double
																									.parseDouble(
																											optJSONArrayOptionsObjectPrice);

																							DecimalFormat decimalFormat = new DecimalFormat(
																									"0.00");

																							String optJSONArrayOptionsObjectPriceConcat = decimalFormat
																									.format(value);

																							String optStringIsDisabled = optJSONArrayOptionsObject
																									.optString(
																											"is_disabled");

																							String optStringIsDefault = optJSONArrayOptionsObject
																									.optString(
																											"is_default");

																							if (optStringIsDefault
																									.equalsIgnoreCase(
																											"false")) {

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" The option name :  "
																																+ optJSONArrayOptionsObjectName
																																+ " is not set to default and it's not selected and not shown in the list of the option group name : "
																																+ optionGroupName
																																+ " and it's not auto selected in the UI ",
																														ExtentColor.CYAN));

																								System.out.println(
																										" The option name :  "
																												+ optJSONArrayOptionsObjectName
																												+ " is not set to default and it's not selected and not shown in the list of the option group name : "
																												+ optionGroupName
																												+ " and it's not auto selected in the UI ");

																							} else {

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" The option name :  "
																																+ optJSONArrayOptionsObjectName
																																+ " is set to default and it's selected and shown in the list of the option group name : "
																																+ optionGroupName
																																+ " and it's auto selected in the UI ",
																														ExtentColor.CYAN));

																								System.out.println(
																										" The option name :  "
																												+ optJSONArrayOptionsObjectName
																												+ " is set to default and it's selected and shown in the list of the option group name : "
																												+ optionGroupName
																												+ " and it's auto selected in the UI ");

																							}

																							if (optStringIsDisabled
																									.equalsIgnoreCase(
																											"false")) {

																								FlutterElement optionGroupObjectNameVk = find
																										.byValueKey(
																												subMenuTrue
																														.get(n)
																														+ "_"
																														+ optionGroupName
																														+ "_"
																														+ optJSONArrayOptionsObjectName);

																								String optionGroupObjectNameTextVk = optionGroupObjectNameVk
																										.getText();

																								Assert.assertEquals(
																										optionGroupObjectNameTextVk,
																										optJSONArrayOptionsObjectName,
																										"Validated that the option group name from API is : "
																												+ optionGroupObjectNameTextVk
																												+ " and the option group name in UI is : "
																												+ optJSONArrayOptionsObjectName
																												+ "in the index : "
																												+ f
																												+ " is same ");

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														"Validated that the option group name from API is : "
																																+ optionGroupObjectNameTextVk
																																+ " and the option group name in UI is : "
																																+ optJSONArrayOptionsObjectName
																																+ "in the index : "
																																+ f
																																+ " is same ",
																														ExtentColor.CYAN));

																								System.out.println(
																										"Validated that the option group name from API is : "
																												+ optionGroupObjectNameTextVk
																												+ " and the option group name in UI is : "
																												+ optJSONArrayOptionsObjectName
																												+ "in the index : "
																												+ f
																												+ " is same ");

																								double optJSONArrayOptionsObjectPriceInt = Double
																										.parseDouble(
																												optJSONArrayOptionsObjectPrice);

																								if (optJSONArrayOptionsObjectPriceInt > 0) {

																									FlutterElement optionGroupObjectPriceVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															+ "_"
																															+ optionGroupName
																															+ "_"
																															+ optJSONArrayOptionsObjectName
																															+ "_"
																															+ optJSONArrayOptionsObjectPrice);

																									String optionGroupObjectPriceTextVk = optionGroupObjectPriceVk
																											.getText();

																									String optionGroupObjectPriceTextReplaceVk = optionGroupObjectPriceTextVk
																											.replace(
																													"+",
																													"")
																											.replace(
																													" ",
																													"");

																									Assert.assertEquals(
																											optionGroupObjectPriceTextReplaceVk,
																											optJSONArrayOptionsObjectPriceConcat
																													.replace(
																															" ",
																															""),
																											"Validated that the option group price from API is : "
																													+ optionGroupObjectPriceTextReplaceVk
																													+ " and the option group price in UI is : "
																													+ optJSONArrayOptionsObjectPriceInt
																													+ "in the index : "
																													+ f
																													+ " is same ");

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															"Validated that the option group price from API is : "
																																	+ optionGroupObjectPriceTextReplaceVk
																																	+ " and the option group price in UI is : "
																																	+ optJSONArrayOptionsObjectPriceInt
																																	+ "in the index : "
																																	+ f
																																	+ " is same ",
																															ExtentColor.CYAN));

																									System.out.println(
																											"Validated that the option group price from API is : "
																													+ optionGroupObjectPriceTextReplaceVk
																													+ " and the option group price in UI is : "
																													+ optJSONArrayOptionsObjectPriceInt
																													+ "in the index : "
																													+ f
																													+ " is same ");

																								} else {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Price is null for the item : "
																																	+ subMenuTrue
																																			.get(n)
																																	+ " of option groups : "
																																	+ optionGroupName
																																	+ " of the option : "
																																	+ optJSONArrayOptionsObjectName,
																															ExtentColor.CYAN));

																									System.out.println(
																											" Price is null for the item : "
																													+ subMenuTrue
																															.get(n)
																													+ " of option groups : "
																													+ optionGroupName
																													+ " of the option : "
																													+ optJSONArrayOptionsObjectName);

																								}

																								if (pizzaGroupObject
																										.has("whole_group_name")) {

																									FlutterElement optionGroupObjectWholePizzaVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															+ "_"
																															+ optionGroupName
																															+ "_"
																															+ optJSONArrayOptionsObjectName
																															+ "_whole");

																									optionGroupObjectWholePizzaVk
																											.click();

																								}

																								else {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Whole side customization is not available for the item : "
																																	+ optionGroupName,
																															ExtentColor.CYAN));

																									System.out.println(
																											" Whole side customization is not available for the item : "
																													+ optionGroupName);
																								}

																								if (pizzaGroupObject
																										.has("left_group_name")) {

																									FlutterElement optionGroupObjectLeftPizzaVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															+ "_"
																															+ optionGroupName
																															+ "_"
																															+ optJSONArrayOptionsObjectName
																															+ "_left");

																									optionGroupObjectLeftPizzaVk
																											.click();

																								} else {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Left side customization is not available for the item : "
																																	+ optionGroupName,
																															ExtentColor.CYAN));

																									System.out.println(
																											" Left side customization is not available for the item : "
																													+ optionGroupName);
																								}

																								if (pizzaGroupObject
																										.has("right_group_name")) {

																									FlutterElement optionGroupObjectRightPizzaVk = find
																											.byValueKey(
																													subMenuTrue
																															.get(n)
																															+ "_"
																															+ optionGroupName
																															+ "_"
																															+ optJSONArrayOptionsObjectName
																															+ "_right");

																									optionGroupObjectRightPizzaVk
																											.click();

																								} else {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Right side customization is not available for the item : "
																																	+ optionGroupName,
																															ExtentColor.CYAN));

																									System.out.println(
																											" Right side customization is not available for the item : "
																													+ optionGroupName);
																								}

																								if (pizzaGroupObject
																										.has("allow_doubling")) {

																									String optStringAllowDoublingPizza = pizzaGroupObject
																											.optString(
																													"allow_doubling");

																									if (optStringAllowDoublingPizza
																											.equalsIgnoreCase(
																													"true")) {

																										if (f % 2 != 0) {

																											FlutterElement optionGroupObjectRightPizzaNormalVk = find
																													.byValueKey(
																															subMenuTrue
																																	.get(n)
																																	+ "_"
																																	+ optionGroupName
																																	+ "_"
																																	+ optJSONArrayOptionsObjectName
																																	+ "_normal");

																											optionGroupObjectRightPizzaNormalVk
																													.click();

																										}

																										else {

																											FlutterElement optionGroupObjectRightPizzaDoubleVk = find
																													.byValueKey(
																															subMenuTrue
																																	.get(n)
																																	+ "_"
																																	+ optionGroupName
																																	+ "_"
																																	+ optJSONArrayOptionsObjectName
																																	+ "_double");

																											optionGroupObjectRightPizzaDoubleVk
																													.click();

																										}

																									} else {

																										nextGenItemQuantityScreen001
																												.info(MarkupHelper
																														.createLabel(
																																" Doubling is false for the object group : "
																																		+ optionGroupName,
																																ExtentColor.CYAN));

																										System.out
																												.println(
																														" Doubling is false for the object group : "
																																+ optionGroupName);

																									}

																								} else {

																									nextGenItemQuantityScreen001
																											.info(MarkupHelper
																													.createLabel(
																															" Allow doubling param is not available for this pizza groups and hence NORMAL AND DOUBLE button won't be available for the item option : "
																																	+ optionGroupName,
																															ExtentColor.CYAN));

																									System.out.println(
																											" Allow doubling param is not available for this pizza groups and hence NORMAL AND DOUBLE button won't be available for the item option : "
																													+ optionGroupName);
																								}

																							} else {

																								nextGenItemQuantityScreen001
																										.info(MarkupHelper
																												.createLabel(
																														" The item : "
																																+ optJSONArrayOptionsObjectName
																																+ " in the option group named : "
																																+ optionGroupName
																																+ " is disabled ",
																														ExtentColor.CYAN));

																								System.out.println(
																										" The item : "
																												+ optJSONArrayOptionsObjectName
																												+ " in the option group named : "
																												+ optionGroupName
																												+ " is disabled ");
																							}

																						}

																						scrollOptionsGroupUpAndClick(
																								optionGroupName);

																						String optionGroupNameReplace = optionGroupName
																								.toLowerCase()
																								.replace(" ", "_");

																						FlutterElement optionGroupObjectGroupVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optionGroupNameReplace);

																						optionGroupObjectGroupVk
																								.click();

																						itemQuantityScroll();

																						FlutterElement optionalRequired1Vk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optionGroupNameReplace
																										+ "_description");

																						String optionalRequiredText1Vk = optionalRequired1Vk
																								.getText();

																						if (optionalRequiredText1Vk
																								.toLowerCase()
																								.contains("optional")) {

																							boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																									.toLowerCase()
																									.contains(
																											"optional");

																							Assert.assertEquals(
																									optionalRequiredTextContains1Vk,
																									true,
																									"Validated that the option group : "
																											+ optionGroupNameReplace
																											+ " is optional ");

																							nextGenItemQuantityScreen001
																									.info(MarkupHelper
																											.createLabel(
																													"Validated that the option group : "
																															+ optionGroupNameReplace
																															+ " is optional ",
																													ExtentColor.CYAN));

																							System.out.println(
																									"Validated that the option group : "
																											+ optionGroupNameReplace
																											+ " is optional ");

																						}

																						else if (optionalRequiredText1Vk
																								.toLowerCase()
																								.contains("required")) {
																							boolean optionalRequiredTextContains1Vk = optionalRequiredText1Vk
																									.toLowerCase()
																									.contains(
																											"required");

																							Assert.assertEquals(
																									optionalRequiredTextContains1Vk,
																									true,
																									"Validated that the option group : "
																											+ optionGroupNameReplace
																											+ " is required or mandatory ");

																							nextGenItemQuantityScreen001
																									.info(MarkupHelper
																											.createLabel(
																													"Validated that the option group : "
																															+ optionGroupNameReplace
																															+ " is required or mandatory ",
																													ExtentColor.CYAN));

																							System.out.println(
																									"Validated that the option group : "
																											+ optionGroupNameReplace
																											+ " is required or mandatory ");

																						}

																						FlutterElement optionGroupObjectNameSelectedOptionsVk = find
																								.byValueKey(subMenuTrue
																										.get(n)
																										.toLowerCase()
																										.replace(" ",
																												"_")
																										+ "_"
																										+ optionGroupNameReplace
																										+ "_selected_options");

																						String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
																								.getText();

																						int countOfCommas = getCountOfCommas(
																								optionGroupObjectNameSelectedOptionsTextVk);

																						if (countOfCommas == 0) {

																							Assert.assertEquals(
																									countOfCommas, 0,
																									" Validated that the item is single selected with the selcted option is : "
																											+ optionGroupObjectNameSelectedOptionsTextVk);

																							nextGenItemQuantityScreen001
																									.info(MarkupHelper
																											.createLabel(
																													" Validated that the item is single selected with the selcted option is : "
																															+ optionGroupObjectNameSelectedOptionsTextVk,
																													ExtentColor.CYAN));

																							System.out.println(
																									" Validated that the item is single selected with the selcted option is : "
																											+ optionGroupObjectNameSelectedOptionsTextVk);

																						} else if (countOfCommas > 0) {

																							Assert.assertEquals(
																									countOfCommas + 1,
																									countOfCommas + 1,
																									" Validated that the item is a multi selected ");

																							nextGenItemQuantityScreen001
																									.info(MarkupHelper
																											.createLabel(
																													" Validated that the item is a multi selected ",
																													ExtentColor.CYAN));

																							System.out.println(
																									" Validated that the item is a multi selected ");

																						}

																					} else {

																						nextGenItemQuantityScreen001
																								.info(MarkupHelper
																										.createLabel(
																												" The options array is null for the sub menu item : "
																														+ subMenuTrue
																																.get(n),
																												ExtentColor.CYAN));

																						System.out.println(
																								" The options array is null for the sub menu item : "
																										+ subMenuTrue
																												.get(n));
																					}
																				} else {

																					nextGenItemQuantityScreen001.info(
																							MarkupHelper.createLabel(
																									" The option group doesn't have options array for the sub menu item : "
																											+ subMenuTrue
																													.get(n),
																									ExtentColor.CYAN));

																					System.out.println(
																							" The option group doesn't have options array for the sub menu item : "
																									+ subMenuTrue
																											.get(n));
																				}

																			} else {

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" Option groups contains : "
																										+ optionGroupName
																										+ " for the sub menu item : "
																										+ subMenuTrue
																												.get(n),
																								ExtentColor.CYAN));

																				System.out.println(
																						" Option groups contains : "
																								+ optionGroupName
																								+ " for the sub menu item : "
																								+ subMenuTrue.get(n));
																			}

																		} else if ((!optionGroupName.contains(left)
																				&& !optionGroupName.contains(right))) {

																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Whole Group Name is not found in option_groups for Pizza "
																									+ subMenuTrue
																											.get(n),
																							ExtentColor.CYAN));

																			System.out.println(
																					" Whole Group Name is not found in option_groups for Pizza "
																							+ subMenuTrue.get(n));

																			if (jsonObjectActive.optJSONArray(
																					"option_groups") != null) {

																				if (jsonArrayOptionGroups != null) {

																					OptionGroups.optionGroups();
																				} else {

																					nextGenItemQuantityScreen001.info(
																							MarkupHelper.createLabel(
																									" The Option group is null and moving to the next option group ",
																									ExtentColor.CYAN));

																					System.out.println(
																							" The Option group is null and moving to the next option group ");
																				}
																			} else {

																				nextGenItemQuantityScreen001
																						.info(MarkupHelper.createLabel(
																								" option groups parameter is not available",
																								ExtentColor.CYAN));

																				System.out.println(
																						" option groups parameter is not available");

																			}

																			specialInstructions();

																		} else {
																			nextGenItemQuantityScreen001
																					.info(MarkupHelper.createLabel(
																							" Option groups contains : "
																									+ optionGroupName,
																							ExtentColor.CYAN));

																			System.out.println(
																					" Option groups contains : "
																							+ optionGroupName);
																		}

																	} else {

																		nextGenItemQuantityScreen001
																				.info(MarkupHelper.createLabel(
																						" Option groups doesn't have the name in the index : ",
																						ExtentColor.CYAN));

																		System.out.println(
																				" Option groups doesn't have the name in the index : ");
																	}

																}
															} else {

																nextGenItemQuantityScreen001.info(MarkupHelper
																		.createLabel(" The item : " + subMenuTrue.get(n)
																				+ " doesn't have option groups ",
																				ExtentColor.CYAN));

																System.out.println(" The item : " + subMenuTrue.get(n)
																		+ " doesn't have option groups ");
															}
														}

													}

													else if (jsonObjectActive.optJSONArray("option_groups") != null) {

														nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																" Pizza groups parameter is not available and it's not a pizza ",
																ExtentColor.CYAN));

														if (jsonArrayOptionGroups != null) {

															OptionGroups.optionGroups();

														} else {

															nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																	" The Option group is null and moving to the next option group for the sub menu item : "
																			+ subMenuTrue.get(n),
																	ExtentColor.CYAN));

															System.out.println(
																	" The Option group is null and moving to the next option group for the sub menu item : "
																			+ subMenuTrue.get(n));
														}

														specialInstructions();

													} else {

														nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
																" option groups parameter is not available for the sub menu item : "
																		+ subMenuTrue.get(n),
																ExtentColor.CYAN));

														System.out.println(
																" option groups parameter is not available for the sub menu item : "
																		+ subMenuTrue.get(n));

													}

													ItemList.itemList(orderId, pos, position);

												}
											} else {

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(1500);

												FlutterElement subMenuScreenSoldOutVk = find
														.byValueKey("sub_menu_sold_out_item_" + n);

												String subMenuScreenSoldOutTextVk = subMenuScreenSoldOutVk.getText();

												boolean subMenuScreenSoldOutTextContainsVk = subMenuScreenSoldOutTextVk
														.contains(subMenuScreenSoldOutTextVk);

												nextGenItemQuantityScreen001.info(MarkupHelper.createLabel(
														" The item : " + subMenuTrue.get(n)
																+ " in the sub menu is sold out and showing the text as : "
																+ subMenuScreenSoldOutTextVk
																+ " and won't be processed further and clearing the pop-up ",
														ExtentColor.CYAN));

												System.out.println(" The item : " + subMenuTrue.get(n)
														+ " in the sub menu is sold out and showing the text as : "
														+ subMenuScreenSoldOutTextVk
														+ " and won't be processed further and clearing the pop-up ");

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver),
														" The item : " + subMenuTrue.get(n)
																+ " in the sub menu is sold out and showing the text as : "
																+ subMenuScreenSoldOutTextVk
																+ " and won't be processed further and clearing the pop-up ");

												Assert.assertEquals(subMenuScreenSoldOutTextContainsVk, true,
														" Validated that the item : " + subMenuTrue.get(n)
																+ " in the index : " + n + " contains the text : "
																+ subMenuScreenSoldOutTextVk);

												nextGenItemQuantityScreen001.info(MarkupHelper
														.createLabel(" Validated that the item : " + subMenuTrue.get(n)
																+ " in the index : " + n + " contains the text : "
																+ subMenuScreenSoldOutTextVk, ExtentColor.CYAN));

												System.out.println(" Validated that the item : " + subMenuTrue.get(n)
														+ " in the index : " + n + " contains the text : "
														+ subMenuScreenSoldOutTextVk);

												nextGenItemQuantityScreen001.addScreenCaptureFromBase64String(
														takeScreenshot(driver),
														" Validated that the item : " + optStringSubMenuName
																+ " in the index : " + n + " contains the text : "
																+ subMenuScreenSoldOutTextVk);

												subMenuScreenItemVk.click();

												FlutterElement subMenuSoldOutPopupTitleVk = find.byValueKey(
														menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_TITLE_VK);

												String subMenuSoldOutPopupTitleTextVk = subMenuSoldOutPopupTitleVk
														.getText();

												nextGenSubMenuScreen001
														.info(MarkupHelper.createLabel(
																" The sold out alert popup title is : "
																		+ subMenuSoldOutPopupTitleTextVk,
																ExtentColor.CYAN));

												System.out.println(" The sold out alert popup title is : "
														+ subMenuSoldOutPopupTitleTextVk);

												FlutterElement subMenuSoldOutPopupDescriptionVk = find.byValueKey(
														menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_DESCRIPTION_VK);

												String subMenuSoldOutPopupDescriptionTextVk = subMenuSoldOutPopupDescriptionVk
														.getText();

												boolean subMenuSoldOutPopupDescriptionTextContainsVk = subMenuSoldOutPopupDescriptionTextVk
														.contains("sold out");

												Assert.assertEquals(subMenuSoldOutPopupDescriptionTextContainsVk, true,
														" Validated that the pop-up contains the text sold out");

												nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
														" Validated that the pop-up contains the text sold out",
														ExtentColor.CYAN));

												System.out.println(
														" Validated that the pop-up contains the text sold out");

												FlutterElement subMenuSoldOutPopupOkayButtonVk = find.byValueKey(
														menuScreenLocators.SUB_MENU_SOLD_OUT_POPUP_OKAY_BUTTON_VK);

												subMenuSoldOutPopupOkayButtonVk.click();
											}
										}

									} else {

										commonMethods.switchContext("FLUTTER");

										Thread.sleep(1500);

										nextGenSubMenuScreen001.info(MarkupHelper.createLabel(
												" As the sub menu item size is : " + subMenuTrueSize
														+ " There is no list to show and navigating to the menu screen for the next item in the menu ",
												ExtentColor.CYAN));

										System.out.println(" As the sub menu item size is : " + subMenuTrueSize
												+ " There is no list to show and navigating to the menu screen for the next item in the menu ");

										nextGenSubMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
												" Sub Menu screen " + itemName);

										FlutterElement subMenuScreenBackIconVk = find
												.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);

										subMenuScreenBackIconVk.click();

									}

									commonMethods.switchContext("FLUTTER");

									Thread.sleep(1500);

//									FlutterElement subMenuScreenBackIconVk = find
//											.byValueKey(menuScreenLocators.SUB_MENU_SCREEN_BACK_ICON_VK);
//
//									subMenuScreenBackIconVk.click();

								} else {

									nextGenMenuScreen001.info(MarkupHelper.createLabel(
											" The items in the array is lesser than 0 for the menu : " + itemName,
											ExtentColor.CYAN));

									System.out.println(
											" The items in the array is lesser than 0 for the menu : " + itemName);

									nextGenMenuScreen001.addScreenCaptureFromBase64String(takeScreenshot(driver),
											" The items in the array is lesser than 0 for the menu : " + itemName);
								}

							}

							break;
						}

					}
				}
			}

			// Check if the current object has the "contents" property and it is an array
			if (hierarchyObject.has("contents") && hierarchyObject.get("contents") instanceof JSONArray) {
				JSONArray contentsArray = hierarchyObject.getJSONArray("contents");

				// Recursive call to process the contents array
				processHierarchyAndRetrieveNames(contentsArray, menuArray, OrderType, OrderTime, pos, position,
						orderId);

//				FlutterElement backIcon = find.byValueKey(menuScreenLocators.VK_CATEGORY_GROUPS_SCREEN_BACK_ICON);
//
//				backIcon.click();

			}

		}

	}

	private static void scrollUp() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1500);

		TouchAction touchAction1 = new TouchAction(driver);
		touchAction1.press(PointOption.point(500, 800))
				.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
				.moveTo(PointOption.point(500, 600)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1500);
	}

	private static boolean containsTopping(JSONObject item, String pizzaTopping) {

		JSONArray optionGroups = item.getJSONArray("option_groups");

		for (int k = 0; k < optionGroups.length(); k++) {
			JSONObject optionGroup = optionGroups.getJSONObject(k);
			String options = optionGroup.optString("name");
			if (options.equals(pizzaTopping)) {
				return true;
			}

		}

		return false;
	}

	private static int getCountOfCommas(String input) {
		int count = 0;

		for (int i = 0; i < input.length(); i++) {
			if (input.charAt(i) == ',') {
				count++;
			}
		}

		return count;
	}

	private static void itemQuantityScroll() throws InterruptedException {
		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(2000);

		TouchAction touch4 = new TouchAction(driver);
		touch4.press(PointOption.point(500, 1850)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
				.moveTo(PointOption.point(500, 1650)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(2000);

	}

	private static void optionGroupsObjectScroll() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1200);

		TouchAction touch4 = new TouchAction(driver);
		touch4.press(PointOption.point(500, 1850)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
				.moveTo(PointOption.point(500, 1650)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static void subMenuScroll() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1200);

		TouchAction touch = new TouchAction(driver);
		touch.press(PointOption.point(600, 2000)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
				.moveTo(PointOption.point(600, 1600)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static void menuScroll() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1200);

		TouchAction touch = new TouchAction(driver);
		touch.press(PointOption.point(500, 2000)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(5)))
				.moveTo(PointOption.point(500, 1800)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1200);

	}

	private static void scrollSize() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(2000);

		By targetElementLocator3 = By.xpath(
				"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'size'" + ")]");

		int maxScrollAttempts3 = 5;

		for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
			try {
				WebElement element = driver.findElement(targetElementLocator3);
				if (element.isDisplayed()) {
					TouchAction touchAction1 = new TouchAction(driver);
					touchAction1.press(PointOption.point(500, 800))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
							.moveTo(PointOption.point(500, 600)).release().perform();

					break;
				}
			} catch (Exception e2) {

				TouchAction touchAction1 = new TouchAction(driver);
				touchAction1.press(PointOption.point(500, 1200))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6))).moveTo(PointOption.point(500, 600))
						.release().perform();
				System.out.println(" Store not found in the : " + j1
						+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
						+ maxScrollAttempts3);
			}

		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(2000);

	}

	private static void scrollOptionsGroupUpAndClick(String input) throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(2000);

		By targetElementLocator3 = By.xpath(
				"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'" + input.toLowerCase() + "'" + ")]");

		int maxScrollAttempts3 = 5;

		for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
			try {
				WebElement element = driver.findElement(targetElementLocator3);
				if (element.isDisplayed()) {
					TouchAction touchAction1 = new TouchAction(driver);
					touchAction1.press(PointOption.point(500, 600))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
							.moveTo(PointOption.point(500, 800)).release().perform();

					break;
				}
			} catch (Exception e2) {

				TouchAction touchAction1 = new TouchAction(driver);
				touchAction1.press(PointOption.point(500, 600))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6))).moveTo(PointOption.point(500, 1200))
						.release().perform();
				System.out.println(" Store not found in the : " + j1
						+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
						+ maxScrollAttempts3);
			}

		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(2500);

	}

	private static void scrollOptionsGroupDown(String input) throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(2000);

		By targetElementLocator3 = By.xpath(
				"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'" + input.toLowerCase() + "'" + ")]");

		int maxScrollAttempts3 = 5;

		for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
			try {
				WebElement element = driver.findElement(targetElementLocator3);
				if (element.isDisplayed()) {
					TouchAction touchAction1 = new TouchAction(driver);
					touchAction1.press(PointOption.point(500, 800))
							.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6)))
							.moveTo(PointOption.point(500, 600)).release().perform();
					break;
				}
			} catch (Exception e2) {

				TouchAction touchAction1 = new TouchAction(driver);
				touchAction1.press(PointOption.point(500, 1200))
						.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(6))).moveTo(PointOption.point(500, 600))
						.release().perform();
			}

		}

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(2000);

	}

	private static void scrollDown() throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(1000);

		TouchAction touchAction1 = new TouchAction(driver);
		touchAction1.press(PointOption.point(500, 800)).waitAction(WaitOptions.waitOptions(Duration.ofSeconds(2)))
				.moveTo(PointOption.point(500, 600)).release().perform();

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1000);

	}

	private static void displayAndTap(String input) throws InterruptedException {

		commonMethods.switchContext("NATIVE_APP");

		Thread.sleep(2000);

		By targetElementLocator3 = By.xpath(
				"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
						+ "'" + input.toLowerCase() + "'" + ")]");

		int maxScrollAttempts3 = 5;

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(2000);

	}

	private static void specialInstructions() throws InterruptedException {

		FlutterFinder find = new FlutterFinder(driver);

		ExtentTest nextGenSpecialInstructions001 = test.createNode("nextGenSpecialInstructions_001");

		if (specialInstructionsEnabled == "true") {

			scrollDown();

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(2000);

			FlutterElement itemQuantitySpecialInstructionsTitleVk = find
					.byValueKey(menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TITLE_VK);

			String itemQuantitySpecialInstructionsTitleTextVk = itemQuantitySpecialInstructionsTitleVk.getText();

			String numericOnly = itemQuantitySpecialInstructionsTitleTextVk.replaceAll("[^0-9]", "");

			Assert.assertEquals(numericOnly, specialInstructionsNotesLimit,
					" Validated that the character limit for this store from the API is : "
							+ specialInstructionsNotesLimit + " and from the UI is : " + numericOnly + " are same ");

			nextGenSpecialInstructions001.info(MarkupHelper.createLabel(
					" Validated that the character limit for this store from the API is : "
							+ specialInstructionsNotesLimit + " and from the UI is : " + numericOnly + " are same ",
					ExtentColor.CYAN));

			System.out.println(" Validated that the character limit for this store from the API is : "
					+ specialInstructionsNotesLimit + " and from the UI is : " + numericOnly + " are same ");

			FlutterElement itemQuantitySpecialInstructionsTextFieldVk = find
					.byValueKey(menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TEXT_FIELD_VK);

			String testText = " This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field,This is a text which is to find the length of the special instructions text field ";

			int testTextLength = testText.length();

			nextGenSpecialInstructions001.info(
					MarkupHelper.createLabel(" Length of the text available before passing it to the text field is : "
							+ testText + " and it's length is : " + testTextLength, ExtentColor.CYAN));

			System.out.println(" Length of the text available before passing it to the text field is : " + testText
					+ " and it's length is : " + testTextLength);

			itemQuantitySpecialInstructionsTextFieldVk.sendKeys(testText);

			nextGenSpecialInstructions001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" After entering the value");

		}

		else {

			System.out.println(" Special Instructions is not available");
		}

	}

	private static void specialInstructionsComboSubMenuScreen() throws InterruptedException {

		FlutterFinder find = new FlutterFinder(driver);

		ExtentTest nextGenSpecialInstructionsComboSubMenu001 = test
				.createNode("nextGenSpecialInstructionsComboSubMenu_001");

		if (specialInstructionsEnabled == "true") {

			scrollDown();

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(2000);

			FlutterElement itemQuantitySpecialInstructionsTitleVk = find
					.byValueKey(menuScreenLocators.VK_COMBO_SUB_MENU_SPECIAL_INSTRUCTION_TITLE);

			String itemQuantitySpecialInstructionsTitleTextVk = itemQuantitySpecialInstructionsTitleVk.getText();

			nextGenSpecialInstructionsComboSubMenu001
					.info(MarkupHelper.createLabel(" Title of special Instructions in the combo sub menu screen is : "
							+ itemQuantitySpecialInstructionsTitleTextVk, ExtentColor.CYAN));

			System.out.println(" Title of special Instructions in the combo sub menu screen is : "
					+ itemQuantitySpecialInstructionsTitleTextVk);

			FlutterElement itemQuantitySpecialInstructionsTextFieldVk = find
					.byValueKey(menuScreenLocators.VK_COMBO_SUB_MENU_SPECIAL_INSTRUCTION_TEXT_FIELD);

			String testText = " This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field,This is a text which is to find the length of the special instructions text field ";

			int testTextLength = testText.length();

			nextGenSpecialInstructionsComboSubMenu001.info(
					MarkupHelper.createLabel(" Length of the text available before passing it to the text field is : "
							+ testText + " and it's length is : " + testTextLength, ExtentColor.CYAN));

			System.out.println(" Length of the text available before passing it to the text field is : " + testText
					+ " and it's length is : " + testTextLength);

			itemQuantitySpecialInstructionsTextFieldVk.sendKeys(testText);

			nextGenSpecialInstructionsComboSubMenu001.addScreenCaptureFromBase64String(takeScreenshot(driver),
					" After entering the value");

			find.byValueKey(menuScreenLocators.VK_COMBO_SUB_MENU_SPECIAL_INSTRUCTION_ADDITEM_BUTTON).click();

		}

		else {

			System.out.println(" Special Instructions is not available");
		}

	}

	private static void alcoholWarning() {

		FlutterFinder find = new FlutterFinder(driver);

		ExtentTest nextGenAlcoholWarning001 = test.createNode("nextGenAlcoholWarning_001");

		try {
			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(2500);

			boolean displayed2 = driver
					.findElement(By.xpath(menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_ANDROID_XPATH))
					.isDisplayed();

			if (displayed2 == true) {

				commonMethods.switchContext("FLUTTER");

				Thread.sleep(1500);

				FlutterElement alcoholWarningTitleVk = find
						.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);
				String alcoholWarningTitleTextVk = alcoholWarningTitleVk.getText();

				nextGenAlcoholWarning001.info(MarkupHelper.createLabel(
						" The alcohol or tobacco warning pop-up title is : " + alcoholWarningTitleTextVk,
						ExtentColor.CYAN));
				nextGenAlcoholWarning001.addScreenCaptureFromBase64String(takeScreenshot(driver),
						" Alcohol warning pop-up screenshot ");
				FlutterElement alcoholWarningDescriptionVk = find
						.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);
				String alcoholWarningDescriptionTextVk = alcoholWarningDescriptionVk.getText();

				nextGenAlcoholWarning001.info(MarkupHelper.createLabel(
						" The alcohol or tobacco warning pop-up description is : " + alcoholWarningDescriptionTextVk,
						ExtentColor.CYAN));
				FlutterElement alcoholWarningIUnderstandVk = find
						.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);
				String alcoholWarningIUnderstandTextVk = alcoholWarningIUnderstandVk.getText();

				nextGenAlcoholWarning001.info(MarkupHelper.createLabel(
						" The alcohol or tobacco warning pop-up button text is : " + alcoholWarningIUnderstandTextVk,
						ExtentColor.CYAN));
				alcoholWarningIUnderstandVk.click();
				FlutterElement alcoholWarningFooterButtonVk = find
						.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_FOOTER_BUTTON_VK);
				String alcoholWarningFooterButtonTextVk = alcoholWarningFooterButtonVk.getText();

				nextGenAlcoholWarning001.info(MarkupHelper.createLabel(
						" The alcohol or tobacco warning footer button text is : " + alcoholWarningFooterButtonTextVk,
						ExtentColor.CYAN));
				alcoholWarningFooterButtonVk.click();
				FlutterElement alcoholWarningTitleVk1 = find
						.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_TITLE_VK);
				String alcoholWarningTitleTextVk1 = alcoholWarningTitleVk1.getText();
				Assert.assertEquals(alcoholWarningTitleTextVk, alcoholWarningTitleTextVk1,
						" Validated that the automatic alcohol or tobacco pop-up title and the title after tapping the footer button is same");

				nextGenAlcoholWarning001.info(MarkupHelper
						.createLabel(" The alcohol warning pop-up title in automatic alcohol or tobacco pop-up is : "
								+ alcoholWarningTitleTextVk + " and the title after tapping the footer button is : "
								+ alcoholWarningTitleTextVk1 + " is same.", ExtentColor.CYAN));
				nextGenAlcoholWarning001.addScreenCaptureFromBase64String(takeScreenshot(driver),
						" Alcohol or tobacco warning pop-up screenshot after tapping footer button ");
				FlutterElement alcoholWarningDescription1Vk = find
						.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_DESCRIPTION_VK);
				String alcoholWarningDescriptionText1Vk = alcoholWarningDescription1Vk.getText();
				Assert.assertEquals(alcoholWarningDescriptionTextVk, alcoholWarningDescriptionText1Vk,
						" Validated that the automatic alcohol or tobacco pop-up description and the description after tapping the footer button is same");

				nextGenAlcoholWarning001.info(MarkupHelper.createLabel(
						" The alcohol or tobacco warning pop-up description in automatic alcohol pop-up is : "
								+ alcoholWarningTitleTextVk
								+ " and the description after tapping the footer button is : "
								+ alcoholWarningTitleTextVk1 + " is same.",
						ExtentColor.CYAN));
				FlutterElement alcoholWarningIUnderstand1Vk = find
						.byValueKey(menuScreenLocators.ALCOHOL_WARNING_POPUP_I_UNDERSTAND_BUTTON_VK);
				String alcoholWarningIUnderstandText1Vk = alcoholWarningIUnderstand1Vk.getText();
				Assert.assertEquals(alcoholWarningIUnderstandTextVk, alcoholWarningIUnderstandText1Vk,
						" Validated that the automatic alcohol or tobacco pop-up button text and the button text after tapping the footer button is same");

				nextGenAlcoholWarning001.info(MarkupHelper.createLabel(
						" The alcohol or tobacco warning pop-up button text in automatic alcohol pop-up is : "
								+ alcoholWarningIUnderstandTextVk
								+ " and the button text after tapping the footer button is : "
								+ alcoholWarningIUnderstandText1Vk + " is same.",
						ExtentColor.CYAN));
				alcoholWarningIUnderstand1Vk.click();

			}

		} catch (Exception e) {

			nextGenAlcoholWarning001.info(MarkupHelper.createLabel(
					"Verified the alcohol popup doesn't appear which is in disabled in back end", ExtentColor.CYAN));

		}

	}
}