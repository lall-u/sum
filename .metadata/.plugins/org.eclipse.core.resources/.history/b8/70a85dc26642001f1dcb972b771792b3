package com.features;

import java.io.IOException;
import java.net.URL;
import java.security.GeneralSecurityException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.AppLaunchAndLandingScreenLocators;
import com.locators.AppRatingLocators;
import com.locators.BasketLocators;
import com.locators.BottomBarNavigationLocator;
import com.locators.DashBoardLocators;
import com.locators.EmptyBasketLocators;
import com.locators.LocationLocators;
import com.locators.MenuScreenLocators;
import com.locators.MyAccountLocators;
import com.locators.OLOLocators;
import com.locators.OrderNowLocators;
import com.locators.SideDrawerLocators;
import com.locators.SignInLocators;
import com.locators.TransactionHistoryLocators;

import io.appium.java_client.TouchAction;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.ios.IOSDriver;
import io.appium.java_client.ios.IOSTouchAction;
import io.appium.java_client.remote.MobileCapabilityType;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;

public class ChangeLocation extends BaseClass {

	static SignInLocators signInLocator = new SignInLocators();
	static CommonMethods commonMethods = new CommonMethods();
	static LocationLocators locationLocators = new LocationLocators();
	static EmptyBasketLocators emptyBasketLocators = new EmptyBasketLocators();
	static DashBoardLocators dashBoardLocators = new DashBoardLocators();
	static SideDrawerLocators sideDrawerLocators = new SideDrawerLocators();
	static OrderNowLocators orderNowLocators = new OrderNowLocators();
	static BottomBarNavigationLocator bottomBarNavigationLocators = new BottomBarNavigationLocator();

	static AppRatingLocators appRating = new AppRatingLocators();
	static MenuScreenLocators menuScreenLocators = new MenuScreenLocators();
	static SignInLocators signInLocators = new SignInLocators();
	static AppLaunchAndLandingScreenLocators appLaunchAndLandingScreenLocators = new AppLaunchAndLandingScreenLocators();
	static MyAccountLocators myAccountLocators = new MyAccountLocators();
	public static String isLocationEnabled = "true";
	static TransactionHistoryLocators transactionHistoryLocators = new TransactionHistoryLocators();
	static BasketLocators basketLocators = new BasketLocators();
	static OLOLocators oloLocators = new OLOLocators();
	static List<String> list = new ArrayList<String>();

	final static ArrayList<JSONObject> jList = new ArrayList<>();

	public static String componentList;
	public static String accessTokenGen;
	public static String printedCardNumberResponse;
	public static String firstnameResponse;
	public static String lastnameResponse;
	public static String salutationResponse;
	public static String welcomeResponse;
	public static String welcomeResponseDefault;
	public static String usernameResponse;
	public static StringBuilder welcomeString;
	public static StringBuilder welcomeDefault;
	public static StringBuilder pointTrackHead;
	public static StringBuilder actualSubHeader;
	public static StringBuilder responseHeader;
	public static StringBuilder actualHeader;
	public static String availableHeader;
	public static String availableViewall;
	public static StringBuilder actualWelcome;
	public static String pointTrackerHeader;
	public static String pointTrackerSubHeader;
	public static int walletMaximum;
	public static String pointBalance1;
	public static String finalPointValue;
	public static JSONArray resultArray;
	public static String pullMessageResponse;
	public static String pullMessageHeaderResponse;
	public static String barcodeAlttextResponse;
	public static String barcodeHeaderResponse;
	public static String scannableLoyaltyCardHeaderText;
	public static String mobilephoneResponse;
	public static String codeSourceResponse;
	public static String primaryCardNumbersResponse;
	public static String phoneNumberResponse;
	public static StringBuilder barcodeHeaderString;
	public static String pointTrackerHeaderAltResponse;
	public static String codeTypeResponse;
	public static String dateResponse;
	public static String messageDescriptionResponse;
	public static String formattedDate;
	public static String expirationTimeResponse;
	public static String shortCardNumberResponse;
	public static String storeCodeResponse;
	public static String storeNameResponse;
	public static String corpExpirationTimeResponse;
	public static String corpShortCardNumberResponse;
	public static String corpStoreCodeResponse;
	public static String corpStoreNameResponse;
	public static String contentValue;

	public static int walletCode;
	public static int walletCdn;
	public static JSONArray perksCdn;
	public static String cardTemplateCdn;
	public static String tierCdn;
	public static JSONArray perks;
	public static String cardTemplate;
	public static String tier;
	public static String activeDate;
	public static String expiryDate;
	public static String favoriteStore;
	public static String storeGroup;
	public static String imageUrl1;
	public static String imageAltText;
	public static Response cdnResponse;

	public static WebElement imagecomponent;

	public static String preCheckInAltTextResponse;
	public static String preCheckInTextResponse;
	public static String postCheckInTextResponse;
	public static String codeTypeCheckInResponse;
	public static String codeSourceCheckInResponse;
	public static StringBuilder preCheckInTextString;
	public static StringBuilder postCheckInTextString;
	public static String checkInStoreNameResponse;
	public static String checkInStoreCodeResponse;
	public static String availableRewardsHeader;
	public static String availableRewardsViewAll;
	public static String availableRewardsAltText;
	public static StringBuilder availableRewardsViewAllString;
	public static StringBuilder availableRewardsHeaderString;

	public static String storeShortCode;
	public static String userName;
	public static String passWord;
	public static String merchantId;
	public static String cardTemplateCode;
	public static String storeGroupCode;
	public static String clientId;
	public static String integrationDetail;
	static String storeCode;
	static String authorizationGrant;
	static String merchantid;
	static String key = "6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
	static String provider = "px";
	static String recentlyOrderedName;
	static String Restaurant_Id;

	static String authentication = "oauth";

	static String[] welcomeConfig = { "{salutation}", "{firstName}", "{lastName}", "{username}" };

	static String thirdPartyIntegration = "lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97";

	static String response_type = "code";

	static String scope = "user_read user_write account_read account_write";

	static String corpStoreCode;

	static String authentication1 = "anonymous";

	static String integrationDetail1 = "os=iOS%7Cosversion=16.6%7Cdevice=iPhone%7CmerchantId=60019%7Cintegrator=Paytronix%7Cversion=REST:14.15%20-%20API:23.21.20231010%20-%20APP:2023101001";

	static String favStoreCode;
	static String favStoreName;
	static String optStringFavEmpty;

	static String get0;

	static String get1;

	static String get2;

	static int size;

	static String date;

	static String substring;

	static String DateApi;

	static String Date;

	static String orderId;

	public static String takeoutOrderTypeText;
	public static String curbsideOrderTypeText;
	public static String deliveryOrderTypeText;

	public static String asapOrderTimeText;

	public static String laterOrderTimeText;

	public static String requestId;

	@Test

	public static void ngaChangeLocation() throws Throwable {

		DesiredCapabilities cap = new DesiredCapabilities();
		cap.setCapability(MobileCapabilityType.DEVICE_NAME, "Samsung");
		cap.setCapability("platformName", "Android");
		cap.setCapability(MobileCapabilityType.PLATFORM_VERSION, "12");
		cap.setCapability(MobileCapabilityType.UDID, "emulator-5554");
		cap.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
		cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 10000);
		cap.setCapability("appPackage", "com.paytronix.nexgenfl");
		cap.setCapability("appActivity", "com.paytronix.nexgenfl.MainActivity");

		driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);
		System.out.println("App Launched Successfully");

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("GaneshKumarSelvaraj").assignDevice(deviceName)
				.assignCategory("nextGenChangeLocationFlow");

		Thread.sleep(5000);

		SignIn.nextGenSignInWithEmailSmoke();

//		ChangeLocation.ngaRewards();

		ChangeLocation.ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured();

		ChangeLocation.ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured();

		ChangeLocation.ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket();

		ChangeLocation.nextGenChangeLocationFlowViaEmptyBasketReviewBasket();

		ChangeLocation.nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured();

		ChangeLocation.ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured();

		ChangeLocation.ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket();

		ChangeLocation.nextGenChangeLocationFlowViaEmptyBasketReviewBasket();

	}

	@Test

	public static void ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured() throws Throwable {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bc = new BaseClass();
		List<String> takeoutFlowConfiguration = bc.changeLocationConfiguration();
		merchantId = takeoutFlowConfiguration.get(3);
		storeCode = takeoutFlowConfiguration.get(2);

		System.err.println(merchantId);
		System.err.println(storeCode);

		List<String> appConfiguration = bc.appConfiguration();
		String localConfigTakeoutText = appConfiguration.get(20);

		Thread.sleep(6000);

		// Initiating the node to be print in the Extent report.

		ExtentTest ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_001 = test
				.createNode("ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_001");
		ExtentTest ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_002 = test
				.createNode("ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_002");
		ExtentTest ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 = test
				.createNode("ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003");

		// To get the dashboard title text

		commonMethods.switchContext("FLUTTER");

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		// To check whether order now is present in the bottom bar.

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_LOCATIONLIST_XPATHL));

			// To check Order now is displayed in the bottom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_001.info(MarkupHelper.createLabel(
						"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_001 - Validated that Order now button is present in bottom bar navigation bar with the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(10000);

				try {

					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {
					// TODO: handle exception

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_002
				 * @author Ganeshkumarselvaraj
				 */

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the location list screen.");
				ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_002.info(MarkupHelper.createLabel(
						"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_002 - Verified that user navigated to the location list screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
				 * @author Ganeshkumarselvaraj
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003.info(MarkupHelper.createLabel(
						"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : "
								+ dashboardTitleVkText,
						ExtentColor.CYAN));

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(3000);

				WebElement bottomBarOrderNow1 = driver
						.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_LOCATIONLIST_XPATHL));

				bottomBarOrderNow1.click();

				commonMethods.switchContext("FLUTTER");

//			
			}
//
			/**
			 * @Class_Name LocationListGuest
			 * @Method_Name ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured
			 * @Description Ensure that Location List is configured in the bottombar or side
			 *              drawer.
			 * @TestID ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_001
			 * @author Prasanna Venkatesh KP
			 */

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				String asapOrder = storeResponse.optString("advance_only");
				String laterOrder = storeResponse.optString("use_eta");

				String takeoutResponse = storeResponse.optString("takeout");
				String takeoutResponseLabelText = storeResponse.optString("takeout_label");

				System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);

				List<String> storeName1 = bc.changeLocationConfiguration();

				String desiredStoreName = storeName1.get(1);

				List<String> odFlow = bc.odFlow();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
						+ "/restaurants/" + storeCode + "?";
				RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();

				RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
						"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
				Response restaurantsResponse1 = parameterRequest1.get("");

				JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
				if (storeResponse.has("name")) {

					Restaurant_Id = storeResponse1.optString("id");      

					userName = appConfiguration.get(6);
					passWord = appConfiguration.get(7);
					merchantId = appConfiguration.get(8);
					cardTemplateCode = appConfiguration.get(9);
					storeGroupCode = appConfiguration.get(10);
					clientId = appConfiguration.get(11);
					integrationDetail = appConfiguration.get(12);

				}

				String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
						+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
						+ cardTemplateCode + "\",\n"
						+ "    \"scope\": \"user_read account_read account_write user_write\",\n"
						+ "    \"merchantId\": \"" + merchantId + "\",\n"
						+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
						+ "    \"authentication\": \"anonymous\",\n"
						+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
						+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

				RequestSpecification request = io.restassured.RestAssured.given();

				request.contentType(ContentType.JSON);

				request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

				request.body(jsonString);
				Response response = request.post();
				ValidatableResponse validatableResponse = response.then();
				validatableResponse.statusCode(200);
				JSONObject jObj = new JSONObject(response.body().asString());
				String accessTokenGen = jObj.optString("access_token");
				String printedCardNumberResponse = jObj.optString("printedCardNumber");

				String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n"
						+ "    \"merchant_id\" : " + merchantId + ",\n" + "    \"printed_card_number\" : "
						+ printedCardNumberResponse + " ,\n" + "    \"provider\" : \"px\",\n"
						+ "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

				RequestSpecification requestOrders = io.restassured.RestAssured.given();

				RequestSpecification parameterReq = requestOrders.queryParam("key",
						"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

				parameterReq.contentType(ContentType.JSON);

				parameterReq.baseUri("https://opendining.net/api/v1/orders?");

				parameterReq.body(Json1);
				Response responseOrders = parameterReq.post();
				ValidatableResponse validatableOrdersResponse = responseOrders.then();

				validatableOrdersResponse.statusCode(200);
				JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
				orderId = jObjOrders.optString("order_id");
				System.out.println("the order id is" + orderId);

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
				 * @author Ganeshkumarselvaraj
				 */

				try {

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(3000);

					// Define your XPath locator for the target element
					By targetElementLocator3 = By.xpath(
							"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + desiredStoreName + "'" + ")]");

					// Set maximum number of scroll attempts
					int maxScrollAttempts3 = 20;

					// Loop to attempt finding the element and scrolling
					for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
						try {
							// Try to find the element
							WebElement element = driver.findElement(targetElementLocator3);
							if (element.isDisplayed()) {
								// Element found and displayed, perform actions
								element.click();

								System.out.println(" successfully found the store in the Order Now screen ");

								ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
										.info(MarkupHelper.createLabel(
												"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that Desired store is displayed in the OrderNow ",
												ExtentColor.CYAN));

								break;
							}
						} catch (Exception e) {
							// Element not found, perform scroll action

							TouchAction touchAction1 = new TouchAction(driver);
							touchAction1.press(PointOption.point(500, 1900))
									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
									.moveTo(PointOption.point(500, 550)).release().perform();

							System.out.println(" Store not found in the : " + j1
									+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
									+ maxScrollAttempts3);

							ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
									.info(MarkupHelper.createLabel(
											"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that Desired store is not displayed in the order now screen in the : "
													+ j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ "										+ maxScrollAttempts3 ",
											ExtentColor.CYAN));
						}
					}

					try {

						commonMethods.switchContext("FLUTTER");

						FlutterElement storeInfoTitleVk = find.byValueKey(locationLocators.STOREINFO_SCREEN_TITLE_VKL);
						String storeInfoScreenTitleText = storeInfoTitleVk.getText();

						ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
								.addScreenCaptureFromBase64String(takeScreenshot(driver),
										"Verified that user navigated to the store info screen");

						ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
								.info(MarkupHelper.createLabel(
										"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that user navigated to the StoreInfo screen : "
												+ storeInfoScreenTitleText,
										ExtentColor.CYAN));

						FlutterElement storeInfoScreenOrderNowIconVk = find
								.byValueKey(locationLocators.STOREINFO_SCREEN_ORDERNOWICON_VKL);
						storeInfoScreenOrderNowIconVk.click();

					} catch (Exception e) {

						ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
								.fail(MarkupHelper.createLabel(
										"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that the user not navigated to the StoreInfo screen ",
										ExtentColor.CYAN));

					}

					// To verify the Configured order type.

					if (takeoutResponse.equalsIgnoreCase("true")) {

						if (!takeoutResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();
								boolean equalsIgnoreCase = takeoutResponseLabelText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									takeoutText1.click();

									ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
											.info(MarkupHelper.createLabel(
													"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ takeoutResponseLabelText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									takeoutText.click();

									ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
											.fail(MarkupHelper.createLabel(
													"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ takeoutResponseLabelText + "  not matching.",
													ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(3000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();
								boolean equalsIgnoreCase = localConfigTakeoutText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
											.info(MarkupHelper.createLabel(
													"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ localConfigTakeoutText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
											.fail(MarkupHelper.createLabel(
													"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that Desired store is displayed in the location list and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ localConfigTakeoutText + " not matching.",
													ExtentColor.CYAN));

									// text mismatches

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(3000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
										.fail(MarkupHelper.createLabel(
												"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the app level.",
												ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
								.info(MarkupHelper.createLabel(
										"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the app level.",
										ExtentColor.CYAN));

					}

				} catch (Exception e) {

					ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003
							.fail(MarkupHelper.createLabel(
									"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that desired store is not found in the screen.",
									ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003.fail(MarkupHelper.createLabel(
					"ngaChangeLocationFlowViaLocationListTakeoutAsapBottomBarConfigured_003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the App level",
					ExtentColor.CYAN));
		}

	}

	public static void nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured() throws Exception {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bc = new BaseClass();
		List<String> takeoutFlowConfiguration = bc.changeLocationConfiguration();
		merchantId = takeoutFlowConfiguration.get(3);
		storeCode = takeoutFlowConfiguration.get(2);

		System.err.println(merchantId);
		System.err.println(storeCode);

		List<String> appConfiguration = bc.appConfiguration();
		String localConfigTakeoutText = appConfiguration.get(20);

		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured001
		 * @author Ganeshkumarselvaraj
		 */

		// Initiating the node to be print in the Extent report.

		ExtentTest nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_001 = test
				.createNode("nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured001");
		ExtentTest nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_002 = test
				.createNode("nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured002");
		ExtentTest nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 = test
				.createNode("nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured003");

		// To get the dashboard title text

		commonMethods.switchContext("FLUTTER");

		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);

		String dashboardTitleVkText = dashboardTitleVk.getText();

		System.out.println(dashboardTitleVkText);

		// To check whether order now is present in the bottom bar.

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));

			// To check Order now is displayed in the bottom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_001.info(MarkupHelper.createLabel(
						"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_001 - Validated that Order now button is present in bottom bar and the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_001.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(10000);

				try {

					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {
					// TODO: handle exception

					System.out.println("Native Popup not aappears");

				}

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to location screen while tapping the
				 *              order now button via sidedrawer or bottom bar.
				 * @TestID nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_002
				 * @author Ganeshkumarselvaraj
				 */

				// To get the Order now screen title.

				commonMethods.switchContext("FLUTTER");

				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
				String locationTitleText = locationTitle.getText();

				nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_002.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the order now screen.");
				nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_002.info(MarkupHelper.createLabel(
						"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_002 - Verified that user navigated to the order now screen and the title is : "
								+ locationTitleText,
						ExtentColor.CYAN));

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
				 * @author Ganeshkumarselvaraj
				 */

				// To get back from the Order now screen to the dashboard by the tapping
				// the back icon.

				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
				commonMethods.checkAndClickTheElement(locationBackIcon);

				Thread.sleep(6000);

				nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
				nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
						"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : "
								+ dashboardTitleVkText,
						ExtentColor.CYAN));

				commonMethods.switchContext("NATIVE_APP");

				bottomBarOrderNow.click();

				commonMethods.switchContext("FLUTTER");

			}
			//
//				/**
//				 * @Class_Name Location
//				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
//				 * @Description Ensure that user navigated to dashboard screen while tapping the
//				 *              backicon in the ordernow screen.
//				 * @TestID nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
//				 * @author Ganeshkumarselvaraj
//				 */  

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				String asapOrder = storeResponse.optString("advance_only");
				String laterOrder = storeResponse.optString("use_eta");

				String deliveryResponse = storeResponse.optString("delivery");
				String deliveryResponseLabelText = storeResponse.optString("delivery_label");

				String takeoutResponse = storeResponse.optString("takeout");
				String takeoutResponseLabelText = storeResponse.optString("takeout_label");

				System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);

				JSONObject curbsideObject = storeResponse.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				Restaurant_Id = storeResponse.optString("id");

				System.out.println("Restaurant Id is : " + Restaurant_Id);

				List<String> odFlow = bc.odFlow();

				List<String> storeName1 = bc.changeLocationConfiguration();

				String desiredStoreName = storeName1.get(1);

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
						+ "/restaurants/" + storeCode + "?";
				RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();

				RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
						"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
				Response restaurantsResponse1 = parameterRequest1.get("");

				JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
				if (storeResponse1.has("name")) {

					Restaurant_Id = storeResponse1.optString("id");

					userName = appConfiguration.get(6);
					passWord = appConfiguration.get(7);
					merchantId = appConfiguration.get(8);
					cardTemplateCode = appConfiguration.get(9);
					storeGroupCode = appConfiguration.get(10);
					clientId = appConfiguration.get(11);
					integrationDetail = appConfiguration.get(12);

				}

				String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
						+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
						+ cardTemplateCode + "\",\n"
						+ "    \"scope\": \"user_read account_read account_write user_write\",\n"
						+ "    \"merchantId\": \"" + merchantId + "\",\n"
						+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
						+ "    \"authentication\": \"anonymous\",\n"
						+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
						+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

				RequestSpecification request = io.restassured.RestAssured.given();

				request.contentType(ContentType.JSON);

				request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

				request.body(jsonString);
				Response response = request.post();
				ValidatableResponse validatableResponse = response.then();
				validatableResponse.statusCode(200);
				JSONObject jObj = new JSONObject(response.body().asString());
				String accessTokenGen = jObj.optString("access_token");
				String printedCardNumberResponse = jObj.optString("printedCardNumber");

				String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n"
						+ "    \"merchant_id\" : " + merchantId + ",\n" + "    \"printed_card_number\" : "
						+ printedCardNumberResponse + " ,\n" + "    \"provider\" : \"px\",\n"
						+ "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

				RequestSpecification requestOrders = io.restassured.RestAssured.given();

				RequestSpecification parameterReq = requestOrders.queryParam("key",
						"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

				parameterReq.contentType(ContentType.JSON);

				parameterReq.baseUri("https://opendining.net/api/v1/orders?");

				parameterReq.body(Json1);
				Response responseOrders = parameterReq.post();
				ValidatableResponse validatableOrdersResponse = responseOrders.then();

				validatableOrdersResponse.statusCode(200);
				JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
				orderId = jObjOrders.optString("order_id");
				System.out.println("the order id is" + orderId);

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
				 * @author Ganeshkumarselvaraj
				 */

				try {

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(3000);

					// Define your XPath locator for the target element
					By targetElementLocator3 = By.xpath(
							"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + desiredStoreName + "'" + ")]");

					// Set maximum number of scroll attempts
					int maxScrollAttempts3 = 5;

					// Loop to attempt finding the element and scrolling
					for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
						try {
							// Try to find the element
							WebElement element = driver.findElement(targetElementLocator3);
							if (element.isDisplayed()) {
								// Element found and displayed, perform actions
								element.click();

								System.out.println(" successfully found the store in the Order Now screen ");

								nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
										.info(MarkupHelper.createLabel(
												"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Desired store is displayed in the OrderNow ",
												ExtentColor.CYAN));

								break;
							}
						} catch (Exception e) {
							// Element not found, perform scroll action

							TouchAction touchAction1 = new TouchAction(driver);
							touchAction1.press(PointOption.point(500, 1900))
									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
									.moveTo(PointOption.point(500, 550)).release().perform();

							System.out.println(" Store not found in the : " + j1
									+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
									+ maxScrollAttempts3);

							nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
									.info(MarkupHelper.createLabel(
											"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Desired store is not displayed in the order now screen in the : "
													+ j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ "										+ maxScrollAttempts3 ",
											ExtentColor.CYAN));
						}
					}

					// To verify the Configured order type.

					if (takeoutResponse.equalsIgnoreCase("true")) {

						if (!takeoutResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));
								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = takeoutResponseLabelText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
											.info(MarkupHelper.createLabel(
													"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
															+ takeoutOrderTypeText + " " + " response text is : "
															+ takeoutResponseLabelText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									takeoutText.click();

									nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
											.fail(MarkupHelper.createLabel(
													"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ takeoutResponseLabelText + "  not matching.",
													ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

//											Thread.sleep(6000);
//
//											ChangeLocation.basketChangeLocation();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}
							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = localConfigTakeoutText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
											.info(MarkupHelper.createLabel(
													"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ localConfigTakeoutText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
											.fail(MarkupHelper.createLabel(
													"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ localConfigTakeoutText + " not matching.",
													ExtentColor.CYAN));

									// text mismatches

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

											Thread.sleep(6000);

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											MenuApi2.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.fail(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
													.info(MarkupHelper.createLabel(
															"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
										.fail(MarkupHelper.createLabel(
												"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
												ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003
								.info(MarkupHelper.createLabel(
										"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is not configured in the back end.",
										ExtentColor.CYAN));

					}

				} catch (Exception e) {

					nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
							"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003.fail(MarkupHelper.createLabel(
					"nextGenChangeLocationFlowViaOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the bottombar",
					ExtentColor.CYAN));
		}

	}

	@Test

	public static void basketChangeLocation() throws Exception {

		System.err.println("change location appears");

		Thread.sleep(5000);

		ExtentTest ngaChangeLocation = test.createNode("ngaChangeLocation");

		FlutterFinder find = new FlutterFinder(driver);

		commonMethods.switchContext("FLUTTER");

		String basketChangeLocationPopupTitleText = commonMethods
				.stringsReader(basketLocators.BASKET_CHANGE_LOCATION_POPUP_HEADER_TEXT);

		String basketChangeLocationPopupDescriptionText = commonMethods
				.stringsReader(basketLocators.BASKET_CHANGE_LOCATION_POPUP_DESCRIPTION_TEXT);

		String basketChangeLocationPopupContinueText = commonMethods
				.stringsReader(basketLocators.BASKET_CHANGE_LOCATION_POPUP_CONTINUE_TEXT);

		String basketChangeLocationPopupCancelText = commonMethods
				.stringsReader(basketLocators.BASKET_CHANGE_LOCATION_POPUP_CANCEL_TEXT);

		FlutterElement basketStoreTitleVk = find.byValueKey(basketLocators.BASKET_STORE_TITLE_TEXT_VKL);

		String basketStoreTitleText = basketStoreTitleVk.getText();

		System.out.println(basketStoreTitleText);

		FlutterElement basketEditLocationIconVk = find.byValueKey(basketLocators.BASKET_EDIT_LOCATION_ICON_VKL);

		basketEditLocationIconVk.click();

		FlutterElement basketEditLocationIconPopupHeaderTextVk = find
				.byValueKey(basketLocators.BASKET_EDIT_LOCATION_ICON_POPUP_HEADER_TEXT_VKL);

		String basketEditLocationIconPopupHeaderText = basketEditLocationIconPopupHeaderTextVk.getText();

		Assert.assertEquals(basketChangeLocationPopupTitleText, basketEditLocationIconPopupHeaderText);

		System.out.println("Verified the header text is displayed and validated the text are same and text is : "
				+ basketEditLocationIconPopupHeaderText);

		ngaChangeLocation.info(MarkupHelper
				.createLabel("Verified the header text is displayed and validated the text are same and text is : "
						+ basketEditLocationIconPopupHeaderText, ExtentColor.CYAN));

		FlutterElement basketEditLocationIconPopupDescriptionTextVk = find
				.byValueKey(basketLocators.BASKET_EDIT_LOCATION_ICON_POPUP_DESCRIPTION_TEXT_VKL);

		String basketEditLocationIconPopupDescriptionText = basketEditLocationIconPopupDescriptionTextVk.getText();

		System.err.println(basketEditLocationIconPopupDescriptionText);

//		Assert.assertEquals(basketChangeLocationPopupDescriptionText, basketEditLocationIconPopupDescriptionTextVk);

		System.out.println("Verified the description text is displayed and validated the text are same and text is : "
				+ basketEditLocationIconPopupDescriptionText);

		ngaChangeLocation.info(MarkupHelper
				.createLabel("Verified the description text is displayed and validated the text are same and text is : "
						+ basketEditLocationIconPopupDescriptionText, ExtentColor.CYAN));

		FlutterElement basketEditLocationIconPopupCancelButtonVk = find
				.byValueKey(basketLocators.BASKET_EDIT_LOCATION_ICON_POPUP_CANCEL_BUTTON_VKL);

		basketEditLocationIconPopupCancelButtonVk.click();

		basketEditLocationIconVk.click();

		FlutterElement basketEditLocationIconPopupContinueButtonVk = find
				.byValueKey(basketLocators.BASKET_EDIT_LOCATION_ICON_POPUP_CONTINUE_BUTTON_VKL);

		basketEditLocationIconPopupContinueButtonVk.click();

		FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);

		locationBackIcon.click();

		ChangeLocation.nextGenChangeLocationFlowViaEmptyBasket();

	}

	@Test

	public static void ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured() throws Exception {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		merchantId = takeoutFlowConfiguration.get(8);
		storeCode = takeoutFlowConfiguration.get(13);
		String localConfigTakeoutText = takeoutFlowConfiguration.get(20);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);
		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured001
		 * @author Ganeshkumarselvaraj
		 */

		// Initiating the node to be print in the Extent report.

//		ExtentTest ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_001 = test
//				.createNode("ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured001");
//		ExtentTest ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_002 = test
//				.createNode("ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured002");
		ExtentTest ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 = test
				.createNode("ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured003");

		Thread.sleep(10000);

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));

			// To check Order now is displayed in the bottom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003.info(MarkupHelper.createLabel(
						"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Validated that Order now button is present in bottom bar and the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();
			}
		} catch (Exception e) {
			// TODO: handle exception

			System.out.println("element not found");

		}

		// To check whether order now is present in the bottom bar.

		try {

			//
//				/**
//				 * @Class_Name Location
//				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
//				 * @Description Ensure that user navigated to dashboard screen while tapping the
//				 *              backicon in the ordernow screen.
//				 * @TestID ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
//				 * @author Ganeshkumarselvaraj
//				 */  

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				String asapOrder = storeResponse.optString("advance_only");
				String laterOrder = storeResponse.optString("use_eta");

				String deliveryResponse = storeResponse.optString("delivery");
				String deliveryResponseLabelText = storeResponse.optString("delivery_label");

				String takeoutResponse = storeResponse.optString("takeout");
				String takeoutResponseLabelText = storeResponse.optString("takeout_label");

				System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);

				JSONObject curbsideObject = storeResponse.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				Restaurant_Id = storeResponse.optString("id");

				System.out.println("Restaurant Id is : " + Restaurant_Id);

				List<String> odFlow = bass.odFlow();

				List<String> appConfiguration = bass.appConfiguration();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
						+ "/restaurants/" + storeCode + "?";
				RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();

				RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
						"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
				Response restaurantsResponse1 = parameterRequest1.get("");

				JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
				if (storeResponse1.has("name")) {

					Restaurant_Id = storeResponse1.optString("id");

					userName = appConfiguration.get(6);
					passWord = appConfiguration.get(7);
					merchantId = appConfiguration.get(8);
					cardTemplateCode = appConfiguration.get(9);
					storeGroupCode = appConfiguration.get(10);
					clientId = appConfiguration.get(11);
					integrationDetail = appConfiguration.get(12);

				}

				String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
						+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
						+ cardTemplateCode + "\",\n"
						+ "    \"scope\": \"user_read account_read account_write user_write\",\n"
						+ "    \"merchantId\": \"" + merchantId + "\",\n"
						+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
						+ "    \"authentication\": \"anonymous\",\n"
						+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
						+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

				RequestSpecification request = io.restassured.RestAssured.given();

				request.contentType(ContentType.JSON);

				request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

				request.body(jsonString);
				Response response = request.post();
				ValidatableResponse validatableResponse = response.then();
				validatableResponse.statusCode(200);
				JSONObject jObj = new JSONObject(response.body().asString());
				String accessTokenGen = jObj.optString("access_token");
				String printedCardNumberResponse = jObj.optString("printedCardNumber");

				String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n"
						+ "    \"merchant_id\" : " + merchantId + ",\n" + "    \"printed_card_number\" : "
						+ printedCardNumberResponse + " ,\n" + "    \"provider\" : \"px\",\n"
						+ "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

				RequestSpecification requestOrders = io.restassured.RestAssured.given();

				RequestSpecification parameterReq = requestOrders.queryParam("key",
						"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

				parameterReq.contentType(ContentType.JSON);

				parameterReq.baseUri("https://opendining.net/api/v1/orders?");

				parameterReq.body(Json1);
				Response responseOrders = parameterReq.post();
				ValidatableResponse validatableOrdersResponse = responseOrders.then();

				validatableOrdersResponse.statusCode(200);
				JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
				orderId = jObjOrders.optString("order_id");
				System.out.println("the order id is" + orderId);

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
				 * @author Ganeshkumarselvaraj
				 */

				try {

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(20000);

					// Define your XPath locator for the target element
					By targetElementLocator3 = By.xpath(
							"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + desiredStoreName + "'" + ")]");

					// Set maximum number of scroll attempts
					int maxScrollAttempts3 = 5;

					// Loop to attempt finding the element and scrolling
					for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
						try {
							// Try to find the element
							WebElement element = driver.findElement(targetElementLocator3);
							if (element.isDisplayed()) {
								// Element found and displayed, perform actions
								element.click();

								System.out.println(" successfully found the store in the Order Now screen ");

								ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
										.info(MarkupHelper.createLabel(
												"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that Desired store is displayed in the OrderNow ",
												ExtentColor.CYAN));

								break;
							}
						} catch (Exception e) {
							// Element not found, perform scroll action

							TouchAction touchAction1 = new TouchAction(driver);
							touchAction1.press(PointOption.point(500, 1900))
									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
									.moveTo(PointOption.point(500, 550)).release().perform();

							System.out.println(" Store not found in the : " + j1
									+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
									+ maxScrollAttempts3);

							ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
									.info(MarkupHelper.createLabel(
											"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that Desired store is not displayed in the order now screen in the : "
													+ j1
													+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
													+ "										+ maxScrollAttempts3 ",
											ExtentColor.CYAN));
						}
					}

					// To verify the Configured order type.

					if (takeoutResponse.equalsIgnoreCase("true")) {

						if (!takeoutResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));
								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = takeoutResponseLabelText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									takeoutText1.click();

									ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
											.info(MarkupHelper.createLabel(
													"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
															+ takeoutOrderTypeText + " " + " response text is : "
															+ takeoutResponseLabelText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									takeoutText.click();

									ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
											.fail(MarkupHelper.createLabel(
													"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ takeoutResponseLabelText + "  not matching.",
													ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi( 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();
										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi( 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}
							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = localConfigTakeoutText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
											.info(MarkupHelper.createLabel(
													"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ localConfigTakeoutText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
											.fail(MarkupHelper.createLabel(
													"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ localConfigTakeoutText + " not matching.",
													ExtentColor.CYAN));

									// text mismatches

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi( 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(3000);

											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);

											Thread.sleep(6000);

											ChangeLocation.basketChangeLocation();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
										.fail(MarkupHelper.createLabel(
												"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
												ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003
								.info(MarkupHelper.createLabel(
										"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is not configured in the back end.",
										ExtentColor.CYAN));

					}

				} catch (Exception e) {

					ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003.info(MarkupHelper.createLabel(
							"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003.fail(MarkupHelper.createLabel(
					"ngaChangeLocationFlowViaOrderNowTakeoutAsapBottomBarConfigured_003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the bottombar",
					ExtentColor.CYAN));
		}

	}

	public static void ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket() throws Exception {

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		FlutterFinder find = new FlutterFinder(driver);

		BaseClass bass = new BaseClass();
		List<String> takeoutFlowConfiguration = bass.appConfiguration();
		merchantId = takeoutFlowConfiguration.get(8);
		storeCode = takeoutFlowConfiguration.get(13);
		String localConfigTakeoutText = takeoutFlowConfiguration.get(20);

		List<String> storeName = bass.odFlow();

		String desiredStoreName = storeName.get(15);
		Thread.sleep(6000);

		/**
		 * @Class_Name Location
		 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
		 * @Description Ensure that ordernow is configured in the bottombar or side
		 *              drawer.
		 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured001
		 * @author Ganeshkumarselvaraj
		 */

		// Initiating the node to be print in the Extent report.

		ExtentTest ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_001 = test
				.createNode("ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket001");
		ExtentTest ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_002 = test
				.createNode("ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket002");
		ExtentTest ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 = test
				.createNode("ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket003");

		Thread.sleep(10000);

		try {

			commonMethods.switchContext("NATIVE_APP");

			Thread.sleep(6000);

			WebElement bottomBarOrderNow = driver
					.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));

			// To check Order now is displayed in the bottom bar.

			if (bottomBarOrderNow.isDisplayed()) {

				String bottomBarOrderNowText = bottomBarOrderNow.getText();

				// To print the informations using node in the extent report.

				ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003.info(MarkupHelper.createLabel(
						"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Validated that Order now button is present in bottom bar and the text name as : "
								+ bottomBarOrderNowText,
						ExtentColor.CYAN));
				ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003.addScreenCaptureFromBase64String(
						takeScreenshot(driver), "Verified that Location is configured in bottom bar");

				bottomBarOrderNow.click();
			}
		} catch (Exception e) {
			// TODO: handle exception

			System.out.println("element not found");

		}

		// To check whether order now is present in the bottom bar.

		try {

			//
//				/**
//				 * @Class_Name Location
//				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
//				 * @Description Ensure that user navigated to dashboard screen while tapping the
//				 *              backicon in the ordernow screen.
//				 * @TestID ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
//				 * @author Ganeshkumarselvaraj
//				 */  

			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
			// Construct the query parameters
			RequestSpecification requestingHttp = io.restassured.RestAssured.given();
			// specify the method type (GET) and the parameters if any.
			// In this case the request does not take any parameter

			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
			Response restaurantsResponse = parameterRequest.get("");

			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
			if (storeResponse.has("name")) {

				String asapOrder = storeResponse.optString("advance_only");
				String laterOrder = storeResponse.optString("use_eta");

				String deliveryResponse = storeResponse.optString("delivery");
				String deliveryResponseLabelText = storeResponse.optString("delivery_label");

				String takeoutResponse = storeResponse.optString("takeout");
				String takeoutResponseLabelText = storeResponse.optString("takeout_label");

				System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);

				JSONObject curbsideObject = storeResponse.optJSONObject("curbside");
				String curbsideResponse = curbsideObject.optString("en");
				String curbsideResponseLabelText = curbsideObject.optString("label_text");

				Restaurant_Id = storeResponse.optString("id");

				System.out.println("Restaurant Id is : " + Restaurant_Id);

				List<String> odFlow = bass.odFlow();

				List<String> appConfiguration = bass.appConfiguration();

				String asapText = odFlow.get(16);
				String laterText = odFlow.get(17);

				io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
						+ "/restaurants/" + storeCode + "?";
				RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();

				RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
						"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
				Response restaurantsResponse1 = parameterRequest1.get("");

				JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
				if (storeResponse1.has("name")) {

					Restaurant_Id = storeResponse1.optString("id");

					userName = appConfiguration.get(6);
					passWord = appConfiguration.get(7);
					merchantId = appConfiguration.get(8);
					cardTemplateCode = appConfiguration.get(9);
					storeGroupCode = appConfiguration.get(10);
					clientId = appConfiguration.get(11);
					integrationDetail = appConfiguration.get(12);

				}

				String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
						+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
						+ cardTemplateCode + "\",\n"
						+ "    \"scope\": \"user_read account_read account_write user_write\",\n"
						+ "    \"merchantId\": \"" + merchantId + "\",\n"
						+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
						+ "    \"authentication\": \"anonymous\",\n"
						+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
						+ "    \"client_id\": \"" + clientId + "\"\n" + "}";

				RequestSpecification request = io.restassured.RestAssured.given();

				request.contentType(ContentType.JSON);

				request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");

				request.body(jsonString);
				Response response = request.post();
				ValidatableResponse validatableResponse = response.then();
				validatableResponse.statusCode(200);
				JSONObject jObj = new JSONObject(response.body().asString());
				String accessTokenGen = jObj.optString("access_token");
				String printedCardNumberResponse = jObj.optString("printedCardNumber");

				String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n"
						+ "    \"merchant_id\" : " + merchantId + ",\n" + "    \"printed_card_number\" : "
						+ printedCardNumberResponse + " ,\n" + "    \"provider\" : \"px\",\n"
						+ "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";

				RequestSpecification requestOrders = io.restassured.RestAssured.given();

				RequestSpecification parameterReq = requestOrders.queryParam("key",
						"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

				parameterReq.contentType(ContentType.JSON);

				parameterReq.baseUri("https://opendining.net/api/v1/orders?");

				parameterReq.body(Json1);
				Response responseOrders = parameterReq.post();
				ValidatableResponse validatableOrdersResponse = responseOrders.then();

				validatableOrdersResponse.statusCode(200);
				JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
				orderId = jObjOrders.optString("order_id");
				System.out.println("the order id is" + orderId);

				/**
				 * @Class_Name Location
				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
				 * @Description Ensure that user navigated to dashboard screen while tapping the
				 *              backicon in the ordernow screen.
				 * @TestID ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
				 * @author Ganeshkumarselvaraj
				 */

				try {

					commonMethods.switchContext("NATIVE_APP");

					Thread.sleep(20000);

					// Define your XPath locator for the target element
					By targetElementLocator3 = By.xpath(
							"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
									+ "'" + desiredStoreName + "'" + ")]");

					// Set maximum number of scroll attempts
					int maxScrollAttempts3 = 5;

					// Loop to attempt finding the element and scrolling
					for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
						try {
							// Try to find the element
							WebElement element = driver.findElement(targetElementLocator3);
							if (element.isDisplayed()) {
								// Element found and displayed, perform actions
								element.click();

								System.out.println(" successfully found the store in the Order Now screen ");

								ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
										.info(MarkupHelper.createLabel(
												"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that Desired store is displayed in the OrderNow ",
												ExtentColor.CYAN));

								break;
							}
						} catch (Exception e) {
							// Element not found, perform scroll action

							TouchAction touchAction1 = new TouchAction(driver);
							touchAction1.press(PointOption.point(500, 1900))
									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
									.moveTo(PointOption.point(500, 550)).release().perform();

							System.out.println(" Store not found in the : " + j1
									+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
									+ maxScrollAttempts3);

							ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003.info(MarkupHelper.createLabel(
									"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that Desired store is not displayed in the order now screen in the : "
											+ j1
											+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
											+ "										+ maxScrollAttempts3 ",
									ExtentColor.CYAN));
						}
					}

					// To verify the Configured order type.

					if (takeoutResponse.equalsIgnoreCase("true")) {

						if (!takeoutResponseLabelText.isEmpty()) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));
								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = takeoutResponseLabelText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
											.info(MarkupHelper.createLabel(
													"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
															+ takeoutOrderTypeText + " " + " response text is : "
															+ takeoutResponseLabelText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(6000);

									takeoutText.click();

									ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
											.fail(MarkupHelper.createLabel(
													"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ takeoutResponseLabelText + "  not matching.",
													ExtentColor.CYAN));

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(10000);

											try {

												WebElement reviewBasket = driver.findElement(
														By.xpath(basketLocators.REVIEW_BASKET_BUTTON_TEXT_XPATH));

												if (reviewBasket.isDisplayed()) {

													///////////////// fail /////////

													System.out.println(
															"Verified user cleared the basket but still maintain the basket on the menu screen");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.addScreenCaptureFromBase64String(takeScreenshot(driver),
																	"Verfied Review Basket button is displayed");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.fail(MarkupHelper.createLabel(
																	"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is displayed where as user cleared the basket",
																	ExtentColor.CYAN));

												} else {

													System.out.println("Element not displayed");

												}

											} catch (Exception e) {
												// TODO: handle exception

												//////////////// pass ////////

												System.out.println(
														"Verified the basket get cleared and review basket button is not displayed on the menu screen");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied Review Basket button is not displayed");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.info(MarkupHelper.createLabel(
																"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is not displayed where as once user cleared the basket",
																ExtentColor.CYAN));

											}

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement homeIcon = find
													.byValueKey(menuScreenLocators.MENU_SCREEN_HOME_ICON_VK);

											homeIcon.click();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(10000);

											try {

												WebElement reviewBasket = driver.findElement(
														By.xpath(basketLocators.REVIEW_BASKET_BUTTON_TEXT_XPATH));

												if (reviewBasket.isDisplayed()) {

													///////////////// fail /////////

													System.out.println(
															"Verified user cleared the basket but still maintain the basket on the menu screen");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.addScreenCaptureFromBase64String(takeScreenshot(driver),
																	"Verfied Review Basket button is displayed");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.fail(MarkupHelper.createLabel(
																	"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is displayed where as user cleared the basket",
																	ExtentColor.CYAN));

												} else {

													System.out.println("Element not displayed");

												}

											} catch (Exception e) {
												// TODO: handle exception

												//////////////// pass ////////

												System.out.println(
														"Verified the basket get cleared and review basket button is not displayed on the menu screen");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied Review Basket button is not displayed");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.info(MarkupHelper.createLabel(
																"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is not displayed where as once user cleared the basket",
																ExtentColor.CYAN));

											}

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement homeIcon = find
													.byValueKey(menuScreenLocators.MENU_SCREEN_HOME_ICON_VK);

											homeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(5000);

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(10000);

											try {

												WebElement reviewBasket = driver.findElement(
														By.xpath(basketLocators.REVIEW_BASKET_BUTTON_TEXT_XPATH));

												if (reviewBasket.isDisplayed()) {

													///////////////// fail /////////

													System.out.println(
															"Verified user cleared the basket but still maintain the basket on the menu screen");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.addScreenCaptureFromBase64String(takeScreenshot(driver),
																	"Verfied Review Basket button is displayed");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.fail(MarkupHelper.createLabel(
																	"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is displayed where as user cleared the basket",
																	ExtentColor.CYAN));

												} else {

													System.out.println("Element not displayed");

												}

											} catch (Exception e2) {
												// TODO: handle exception

												//////////////// pass ////////

												System.out.println(
														"Verified the basket get cleared and review basket button is not displayed on the menu screen");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied Review Basket button is not displayed");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.info(MarkupHelper.createLabel(
																"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is not displayed where as once user cleared the basket",
																ExtentColor.CYAN));

											}

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement homeIcon = find
													.byValueKey(menuScreenLocators.MENU_SCREEN_HOME_ICON_VK);

											homeIcon.click();
										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception E) {

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(10000);

											try {

												WebElement reviewBasket = driver.findElement(
														By.xpath(basketLocators.REVIEW_BASKET_BUTTON_TEXT_XPATH));

												if (reviewBasket.isDisplayed()) {

													///////////////// fail /////////

													System.out.println(
															"Verified user cleared the basket but still maintain the basket on the menu screen");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.addScreenCaptureFromBase64String(takeScreenshot(driver),
																	"Verfied Review Basket button is displayed");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.fail(MarkupHelper.createLabel(
																	"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is displayed where as user cleared the basket",
																	ExtentColor.CYAN));

												} else {

													System.out.println("Element not displayed");

												}

											} catch (Exception e) {
												// TODO: handle exception

												//////////////// pass ////////

												System.out.println(
														"Verified the basket get cleared and review basket button is not displayed on the menu screen");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied Review Basket button is not displayed");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.info(MarkupHelper.createLabel(
																"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is not displayed where as once user cleared the basket",
																ExtentColor.CYAN));

											}

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement homeIcon = find
													.byValueKey(menuScreenLocators.MENU_SCREEN_HOME_ICON_VK);

											homeIcon.click();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(10000);

											try {

												WebElement reviewBasket = driver.findElement(
														By.xpath(basketLocators.REVIEW_BASKET_BUTTON_TEXT_XPATH));

												if (reviewBasket.isDisplayed()) {

													///////////////// fail /////////

													System.out.println(
															"Verified user cleared the basket but still maintain the basket on the menu screen");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.addScreenCaptureFromBase64String(takeScreenshot(driver),
																	"Verfied Review Basket button is displayed");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.fail(MarkupHelper.createLabel(
																	"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is displayed where as user cleared the basket",
																	ExtentColor.CYAN));

												} else {

													System.out.println("Element not displayed");

												}

											} catch (Exception e) {
												// TODO: handle exception

												//////////////// pass ////////

												System.out.println(
														"Verified the basket get cleared and review basket button is not displayed on the menu screen");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied Review Basket button is not displayed");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.info(MarkupHelper.createLabel(
																"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is not displayed where as once user cleared the basket",
																ExtentColor.CYAN));

											}

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement homeIcon = find
													.byValueKey(menuScreenLocators.MENU_SCREEN_HOME_ICON_VK);

											homeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(10000);

											try {

												WebElement reviewBasket = driver.findElement(
														By.xpath(basketLocators.REVIEW_BASKET_BUTTON_TEXT_XPATH));

												if (reviewBasket.isDisplayed()) {

													///////////////// fail /////////

													System.out.println(
															"Verified user cleared the basket but still maintain the basket on the menu screen");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.addScreenCaptureFromBase64String(takeScreenshot(driver),
																	"Verfied Review Basket button is displayed");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.fail(MarkupHelper.createLabel(
																	"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is displayed where as user cleared the basket",
																	ExtentColor.CYAN));

												} else {

													System.out.println("Element not displayed");

												}

											} catch (Exception e2) {
												// TODO: handle exception

												//////////////// pass ////////

												System.out.println(
														"Verified the basket get cleared and review basket button is not displayed on the menu screen");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied Review Basket button is not displayed");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.info(MarkupHelper.createLabel(
																"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is not displayed where as once user cleared the basket",
																ExtentColor.CYAN));

											}

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement homeIcon = find
													.byValueKey(menuScreenLocators.MENU_SCREEN_HOME_ICON_VK);

											homeIcon.click();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}
							}

						} else {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(6000);

								WebElement takeoutText = driver
										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));

								commonMethods.switchContext("FLUTTER");

								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);

								takeoutOrderTypeText = takeoutText1.getText();

								boolean equalsIgnoreCase = localConfigTakeoutText
										.equalsIgnoreCase(takeoutOrderTypeText);

								if (equalsIgnoreCase == true) {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
											.info(MarkupHelper.createLabel(
													"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ localConfigTakeoutText + " matching.",
													ExtentColor.CYAN));

									// Text matches

								} else {

									commonMethods.switchContext("NATIVE_APP");

									takeoutText.click();

									ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
											.fail(MarkupHelper.createLabel(
													"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
															+ takeoutOrderTypeText + " response text is : "
															+ localConfigTakeoutText + " not matching.",
													ExtentColor.CYAN));

									// text mismatches

								}

								if (asapOrder.equalsIgnoreCase("false")) {

									try {

										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										commonMethods.switchContext("FLUTTER");

										FlutterElement asapLabel1 = find
												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);

										asapOrderTimeText = asapLabel1.getText();

										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);

										if (asapLabelComparison == true) {

											asapLabel1.click();

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + "matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(10000);

											try {

												WebElement reviewBasket = driver.findElement(
														By.xpath(basketLocators.REVIEW_BASKET_BUTTON_TEXT_XPATH));

												if (reviewBasket.isDisplayed()) {

													///////////////// fail /////////

													System.out.println(
															"Verified user cleared the basket but still maintain the basket on the menu screen");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.addScreenCaptureFromBase64String(takeScreenshot(driver),
																	"Verfied Review Basket button is displayed");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.fail(MarkupHelper.createLabel(
																	"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is displayed where as user cleared the basket",
																	ExtentColor.CYAN));

												} else {

													System.out.println("Element not displayed");

												}

											} catch (Exception e) {
												// TODO: handle exception

												//////////////// pass ////////

												System.out.println(
														"Verified the basket get cleared and review basket button is not displayed on the menu screen");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied Review Basket button is not displayed");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.info(MarkupHelper.createLabel(
																"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is not displayed where as once user cleared the basket",
																ExtentColor.CYAN));

											}

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement homeIcon = find
													.byValueKey(menuScreenLocators.MENU_SCREEN_HOME_ICON_VK);

											homeIcon.click();

										} else {

											commonMethods.switchContext("NATIVE_APP");

											Thread.sleep(6000);

											// To fail that ASAP label text is not matching

											asapLabel.click();

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that alert appears");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
																	+ asapText + "Asap config text : "
																	+ asapOrderTimeText + " not matching",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(10000);

											try {

												WebElement reviewBasket = driver.findElement(
														By.xpath(basketLocators.REVIEW_BASKET_BUTTON_TEXT_XPATH));

												if (reviewBasket.isDisplayed()) {

													///////////////// fail /////////

													System.out.println(
															"Verified user cleared the basket but still maintain the basket on the menu screen");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.addScreenCaptureFromBase64String(takeScreenshot(driver),
																	"Verfied Review Basket button is displayed");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.fail(MarkupHelper.createLabel(
																	"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is displayed where as user cleared the basket",
																	ExtentColor.CYAN));

												} else {

													System.out.println("Element not displayed");

												}

											} catch (Exception e) {
												// TODO: handle exception

												//////////////// pass ////////

												System.out.println(
														"Verified the basket get cleared and review basket button is not displayed on the menu screen");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied Review Basket button is not displayed");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.info(MarkupHelper.createLabel(
																"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is not displayed where as once user cleared the basket",
																ExtentColor.CYAN));

											}

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement homeIcon = find
													.byValueKey(menuScreenLocators.MENU_SCREEN_HOME_ICON_VK);

											homeIcon.click();

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is configured on the back end ");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
															ExtentColor.CYAN));

										} catch (Exception e1) {
											// TODO: handle exception

											System.out.println(
													" ASAP is only displayed where as ASAP is only configured on the back end ");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
															ExtentColor.CYAN));

											commonMethods.switchContext("NATIVE_APP");
											Thread.sleep(10000);

											try {

												WebElement reviewBasket = driver.findElement(
														By.xpath(basketLocators.REVIEW_BASKET_BUTTON_TEXT_XPATH));

												if (reviewBasket.isDisplayed()) {

													///////////////// fail /////////

													System.out.println(
															"Verified user cleared the basket but still maintain the basket on the menu screen");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.addScreenCaptureFromBase64String(takeScreenshot(driver),
																	"Verfied Review Basket button is displayed");

													ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
															.fail(MarkupHelper.createLabel(
																	"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is displayed where as user cleared the basket",
																	ExtentColor.CYAN));

												} else {

													System.out.println("Element not displayed");

												}

											} catch (Exception e2) {
												// TODO: handle exception

												//////////////// pass ////////

												System.out.println(
														"Verified the basket get cleared and review basket button is not displayed on the menu screen");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.addScreenCaptureFromBase64String(takeScreenshot(driver),
																"Verfied Review Basket button is not displayed");

												ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
														.info(MarkupHelper.createLabel(
																"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that the Review Basket Button is not displayed where as once user cleared the basket",
																ExtentColor.CYAN));

											}

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(2000);

											FlutterElement homeIcon = find
													.byValueKey(menuScreenLocators.MENU_SCREEN_HOME_ICON_VK);

											homeIcon.click();

										}

									}

								} else {

									commonMethods.switchContext("NATIVE_APP");

									try {

										Thread.sleep(6000);

										WebElement asapLabel = driver.findElement(
												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));

										if (asapLabel.isDisplayed()) {
											// To fail the test case.

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.addScreenCaptureFromBase64String(takeScreenshot(driver),
															"Verfied that Asap is displayed in the screen.");
											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.fail(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

											commonMethods.switchContext("FLUTTER");

											FlutterElement closeIcon = find
													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);

											closeIcon.click();

											///////////// close icon when would you like your order //////////

										}

									} catch (Exception e) {

										try {

											commonMethods.switchContext("NATIVE_APP");

											WebElement cancelButton = driver.findElement(
													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));

											cancelButton.click();

											System.out.println(
													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										} catch (Exception e1) {

											ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
													.info(MarkupHelper.createLabel(
															"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
															ExtentColor.CYAN));

										}

									}

								}

							} catch (Exception e) {

								ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003
										.fail(MarkupHelper.createLabel(
												"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
												ExtentColor.CYAN));
							}

						}

					} else {

						// take out asap is not configured.
						ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003.info(MarkupHelper.createLabel(
								"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that takeout lable is not displayed in the screen where as takeout is not configured in the back end.",
								ExtentColor.CYAN));

					}

				} catch (Exception e) {

					ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003.info(MarkupHelper.createLabel(
							"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that desired store is not found in the screen.",
							ExtentColor.CYAN));

					System.out.println("Store Not found or store not listed");

				}

			}
		} catch (Exception e) {

			ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003.fail(MarkupHelper.createLabel(
					"ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket_003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the bottombar",
					ExtentColor.CYAN));
		}

	}

	public static void nextGenChangeLocationFlowViaEmptyBasket() throws Exception {

//		DesiredCapabilities cap = new DesiredCapabilities();
//		cap.setCapability(MobileCapabilityType.DEVICE_NAME, "Samsung");
//		cap.setCapability("platformName", "Android");
//		cap.setCapability(MobileCapabilityType.PLATFORM_VERSION, "12");
//		cap.setCapability(MobileCapabilityType.UDID, "emulator-5554");
//		cap.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
//		cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 10000);
//		cap.setCapability("appPackage", "com.paytronix.nexgenfl");
//		cap.setCapability("appActivity", "com.paytronix.nexgenfl.MainActivity");
//
//		driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);
//		System.out.println("App Launched Successfully");
////		FlutterFinder find = new FlutterFinder(driver);
////
//		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

		String basketScreenTitleText = commonMethods.stringsReader(emptyBasketLocators.EMPTY_BASKET_SCREEN_TITLE_TEXT);
		String basketScreenNoItemFoundText = commonMethods
				.stringsReader(emptyBasketLocators.EMPTY_BASKET_SCREEN_NO_ITEMS_FOUND_TEXT);
		String basketscreenStartOrderButtonText = commonMethods
				.stringsReader(emptyBasketLocators.EMPTY_BASKET_SCREEN_START_ORDER_BUTTON_TEXT);
		String orderNowScreenTitleText = commonMethods.stringsReader(emptyBasketLocators.ORDER_NOW_SCREEN_TITLE_TEXT);

		// To get the current method name
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("GaneshKumarSelvaraj").assignDevice(deviceName)
				.assignCategory("nextGenChangeLocationFlowViaEmptyBasket");

		FlutterFinder finder = new FlutterFinder(driver);

		ExtentTest nextGenChangeLocationFlowViaEmptyBasket = test.createNode("nextGenChangeLocationFlowViaEmptyBasket");

//		FlutterElement BackgroundLocationAccessContinue = finder
//				.byValueKey(emptyBasketLocators.BACKGROUND_LOCATIONACCESS_CONTINUE_VKL);
//		commonMethods.checkAndClickTheElement(BackgroundLocationAccessContinue);

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(2000);

		try {

			Thread.sleep(5000);

			FlutterElement dashboardBasketIcon1 = finder.byValueKey(emptyBasketLocators.EMPTY_BASKET_ICON_VKL);
			dashboardBasketIcon1.click();

			nextGenChangeLocationFlowViaEmptyBasket.info(MarkupHelper.createLabel(
					"nextGenChangeLocationFlowViaEmptyBasket - Verified that Basket icon is displayed in the dashboard screen.",
					ExtentColor.CYAN));

		} catch (Exception e) {
			System.out.println("c1");

			nextGenChangeLocationFlowViaEmptyBasket.fail(MarkupHelper.createLabel(
					"nextGenChangeLocationFlowViaEmptyBasket - Verified that Basket icon is not displayed in the dashboard screen.",
					ExtentColor.CYAN));

		}

		try {

			Thread.sleep(5000);

//				FlutterElement dashboardBasketIcon = finder.byValueKey(emptyBasketLocators.EMPTY_BASKET_ICON_VKL);
//				dashboardBasketIcon.click();

			commonMethods.switchContext("NATIVE_APP");

			WebElement noItemsFound = driver
					.findElement(By.xpath(emptyBasketLocators.EMPTY_BASKET_SCREEN_NO_ITEMS_FOUND_XPATH));
			if (noItemsFound.isDisplayed()) {
				System.out.println("not displayed");

				commonMethods.switchContext("FLUTTER");

				FlutterElement basketScreenNoItemText = finder
						.byValueKey(emptyBasketLocators.EMPTY_BASKET_SCREEN_NO_ITEMS_FOUND_VKL);
				String basketScreenNoItemTextDisplayed = basketScreenNoItemText.getText();
				System.out.println();

				Assert.assertEquals(basketScreenNoItemTextDisplayed, basketScreenNoItemFoundText,
						"Verified that No items found text is displayed as per the configuration.");
				System.out.println("Verified that Configured No items found text : " + basketScreenNoItemFoundText
						+ " and displayed text : " + basketScreenNoItemTextDisplayed + " are same");

				nextGenChangeLocationFlowViaEmptyBasket.info(MarkupHelper.createLabel(
						"nextGenChangeLocationFlowViaEmptyBasket - Verified that Configured No items found text : "
								+ basketScreenNoItemFoundText + " and displayed text : "
								+ basketScreenNoItemTextDisplayed + " are same",
						ExtentColor.CYAN));
				nextGenChangeLocationFlowViaEmptyBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
						" The basket has no items on the cart");

				commonMethods.switchContext("FLUTTER");

				Thread.sleep(5000);

				FlutterElement basketScreenstartOrderButton = finder
						.byValueKey(emptyBasketLocators.EMPTY_BASKET_SCREEN_START_ORDER_BUTTON_AND_TEXT_VKL);
				String basketScreenstartOrderButtonTextDisplayed = basketScreenstartOrderButton.getText();

				Assert.assertEquals(basketScreenstartOrderButtonTextDisplayed, basketscreenStartOrderButtonText,
						"Verified that Start order button text is displays as per the configuration");
				System.out.println("Verified that Configured start order text : " + basketscreenStartOrderButtonText
						+ " and displayed text : " + basketScreenstartOrderButtonTextDisplayed + " are same");

				nextGenChangeLocationFlowViaEmptyBasket.info(MarkupHelper.createLabel(
						"nextGenChangeLocationFlowViaEmptyBasket - Verified that Configured start order text : "
								+ basketscreenStartOrderButtonText + " and displayed text : "
								+ basketScreenstartOrderButtonTextDisplayed + " are same",
						ExtentColor.CYAN));

				basketScreenstartOrderButton.click();

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(10000);

				try {

					WebElement dontAllowId = driver.findElement(By.id(emptyBasketLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {
					// TODO: handle exception

					System.out.println("Native Popup not appears");

				}

				commonMethods.switchContext("FLUTTER");

				Thread.sleep(5000);

//
//				System.out.println(
//						"Verified that User navigated to dashboard screen while click back icon from the ordernow screen and dashboard title text is : "
//								+ dashboardTitleText);
//				nextGenChangeLocationFlowViaEmptyBasket.info(MarkupHelper.createLabel(
//						"nextGenChangeLocationFlowViaEmptyBasket - Verified that User navigated to dashboard screen while click back icon from the ordernow screen and dashboard title text is : "
//								+ dashboardTitleText,
//						ExtentColor.CYAN));

			} else {
				System.out.println("displayed");
				commonMethods.switchContext("FLUTTER");

				FlutterElement basketScreenTitle = finder.byValueKey(emptyBasketLocators.EMPTY_BASKET_SCREEN_TITLE_VKL);
				String basketScreenTitleTextDisplayed = basketScreenTitle.getText();

				Assert.assertEquals(basketScreenTitleTextDisplayed, basketScreenTitleText,
						"Verified that basket screen title text is displayed, whereas configured title text : "
								+ basketScreenTitleText + " and displayed title text : "
								+ basketScreenTitleTextDisplayed + " are same . ");
				System.out
						.println("Verified that basket screen title text is displayed, whereas configured title text : "
								+ basketScreenTitleText + " and displayed title text : "
								+ basketScreenTitleTextDisplayed + " are same . ");

				nextGenChangeLocationFlowViaEmptyBasket.info(MarkupHelper.createLabel(
						"nextGenChangeLocationFlowViaEmptyBasket - Verified that basket screen title text is displayed, whereas configured title text : "
								+ basketScreenTitleText + " and displayed title text : "
								+ basketScreenTitleTextDisplayed + " are same . ",
						ExtentColor.CYAN));

				nextGenChangeLocationFlowViaEmptyBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
						" The basket contains items on the cart");

				Thread.sleep(3000);
				FlutterElement basketScreenBackIcon = finder
						.byValueKey(emptyBasketLocators.EMPTY_BASKET_SCREEN_BACK_ICON_VKL);
				basketScreenBackIcon.click();

			}

		} catch (Exception e) {

			nextGenChangeLocationFlowViaEmptyBasket.info(MarkupHelper.createLabel(
					"nextGenChangeLocationFlowViaEmptyBasket - Verified that Basket icon is not displayed in the dashboard screen.",
					ExtentColor.CYAN));

		}

		Thread.sleep(3000);

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(2000);

		FlutterElement menuScreenHomeIcon = finder.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);

		menuScreenHomeIcon.click();

	}

	public static void nextGenChangeLocationFlowViaEmptyBasketReviewBasket() throws Exception {

//		DesiredCapabilities cap = new DesiredCapabilities();
//		cap.setCapability(MobileCapabilityType.DEVICE_NAME, "Samsung");
//		cap.setCapability("platformName", "Android");
//		cap.setCapability(MobileCapabilityType.PLATFORM_VERSION, "12");
//		cap.setCapability(MobileCapabilityType.UDID, "emulator-5554");
//		cap.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
//		cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 10000);
//		cap.setCapability("appPackage", "com.paytronix.nexgenfl");
//		cap.setCapability("appActivity", "com.paytronix.nexgenfl.MainActivity");
//
//		driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);
//		System.out.println("App Launched Successfully");
////		FlutterFinder find = new FlutterFinder(driver);
////
//		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

		String basketScreenTitleText = commonMethods.stringsReader(emptyBasketLocators.EMPTY_BASKET_SCREEN_TITLE_TEXT);
		String basketScreenNoItemFoundText = commonMethods
				.stringsReader(emptyBasketLocators.EMPTY_BASKET_SCREEN_NO_ITEMS_FOUND_TEXT);
		String basketscreenStartOrderButtonText = commonMethods
				.stringsReader(emptyBasketLocators.EMPTY_BASKET_SCREEN_START_ORDER_BUTTON_TEXT);
		String orderNowScreenTitleText = commonMethods.stringsReader(emptyBasketLocators.ORDER_NOW_SCREEN_TITLE_TEXT);

		// To get the current method name
		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("GaneshKumarSelvaraj").assignDevice(deviceName)
				.assignCategory("nextGenChangeLocationFlowViaEmptyBasket");

		FlutterFinder finder = new FlutterFinder(driver);

		ExtentTest nextGenChangeLocationFlowViaEmptyBasket = test.createNode("nextGenChangeLocationFlowViaEmptyBasket");

//		FlutterElement BackgroundLocationAccessContinue = finder
//				.byValueKey(emptyBasketLocators.BACKGROUND_LOCATIONACCESS_CONTINUE_VKL);
//		commonMethods.checkAndClickTheElement(BackgroundLocationAccessContinue);

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(2000);

		try {

			Thread.sleep(5000);

			FlutterElement dashboardBasketIcon1 = finder.byValueKey(emptyBasketLocators.EMPTY_BASKET_ICON_VKL);
			dashboardBasketIcon1.click();

			nextGenChangeLocationFlowViaEmptyBasket.info(MarkupHelper.createLabel(
					"nextGenChangeLocationFlowViaEmptyBasket - Verified that Basket icon is displayed in the dashboard screen.",
					ExtentColor.CYAN));

		} catch (Exception e) {
			System.out.println("c1");

			nextGenChangeLocationFlowViaEmptyBasket.fail(MarkupHelper.createLabel(
					"nextGenChangeLocationFlowViaEmptyBasket - Verified that Basket icon is not displayed in the dashboard screen.",
					ExtentColor.CYAN));

		}

		try {

			Thread.sleep(5000);

//				FlutterElement dashboardBasketIcon = finder.byValueKey(emptyBasketLocators.EMPTY_BASKET_ICON_VKL);
//				dashboardBasketIcon.click();

			commonMethods.switchContext("NATIVE_APP");

			WebElement noItemsFound = driver
					.findElement(By.xpath(emptyBasketLocators.EMPTY_BASKET_SCREEN_NO_ITEMS_FOUND_XPATH));
			if (noItemsFound.isDisplayed()) {
				System.out.println("not displayed");

				commonMethods.switchContext("FLUTTER");

				FlutterElement basketScreenNoItemText = finder
						.byValueKey(emptyBasketLocators.EMPTY_BASKET_SCREEN_NO_ITEMS_FOUND_VKL);
				String basketScreenNoItemTextDisplayed = basketScreenNoItemText.getText();
				System.out.println();

				Assert.assertEquals(basketScreenNoItemTextDisplayed, basketScreenNoItemFoundText,
						"Verified that No items found text is displayed as per the configuration.");
				System.out.println("Verified that Configured No items found text : " + basketScreenNoItemFoundText
						+ " and displayed text : " + basketScreenNoItemTextDisplayed + " are same");

				nextGenChangeLocationFlowViaEmptyBasket.info(MarkupHelper.createLabel(
						"nextGenChangeLocationFlowViaEmptyBasket - Verified that Configured No items found text : "
								+ basketScreenNoItemFoundText + " and displayed text : "
								+ basketScreenNoItemTextDisplayed + " are same",
						ExtentColor.CYAN));
				nextGenChangeLocationFlowViaEmptyBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
						" The basket has no items on the cart");

				commonMethods.switchContext("FLUTTER");

				Thread.sleep(5000);

				FlutterElement basketScreenstartOrderButton = finder
						.byValueKey(emptyBasketLocators.EMPTY_BASKET_SCREEN_START_ORDER_BUTTON_AND_TEXT_VKL);
				String basketScreenstartOrderButtonTextDisplayed = basketScreenstartOrderButton.getText();

				Assert.assertEquals(basketScreenstartOrderButtonTextDisplayed, basketscreenStartOrderButtonText,
						"Verified that Start order button text is displays as per the configuration");
				System.out.println("Verified that Configured start order text : " + basketscreenStartOrderButtonText
						+ " and displayed text : " + basketScreenstartOrderButtonTextDisplayed + " are same");

				nextGenChangeLocationFlowViaEmptyBasket.info(MarkupHelper.createLabel(
						"nextGenChangeLocationFlowViaEmptyBasket - Verified that Configured start order text : "
								+ basketscreenStartOrderButtonText + " and displayed text : "
								+ basketScreenstartOrderButtonTextDisplayed + " are same",
						ExtentColor.CYAN));

				basketScreenstartOrderButton.click();

				commonMethods.switchContext("NATIVE_APP");

				Thread.sleep(10000);

				try {

					WebElement dontAllowId = driver.findElement(By.id(emptyBasketLocators.LOCATIONSCREEN_DENY_ID));

					if (dontAllowId.isDisplayed()) {

						dontAllowId.click();

					}

				}

				catch (Exception e) {
					// TODO: handle exception

					System.out.println("Native Popup not appears");

				}

				commonMethods.switchContext("FLUTTER");

				Thread.sleep(5000);

//
//				System.out.println(
//						"Verified that User navigated to dashboard screen while click back icon from the ordernow screen and dashboard title text is : "
//								+ dashboardTitleText);
//				nextGenChangeLocationFlowViaEmptyBasket.info(MarkupHelper.createLabel(
//						"nextGenChangeLocationFlowViaEmptyBasket - Verified that User navigated to dashboard screen while click back icon from the ordernow screen and dashboard title text is : "
//								+ dashboardTitleText,
//						ExtentColor.CYAN));

			} else {
				System.out.println("displayed");
				commonMethods.switchContext("FLUTTER");

				FlutterElement basketScreenTitle = finder.byValueKey(emptyBasketLocators.EMPTY_BASKET_SCREEN_TITLE_VKL);
				String basketScreenTitleTextDisplayed = basketScreenTitle.getText();

				Assert.assertEquals(basketScreenTitleTextDisplayed, basketScreenTitleText,
						"Verified that basket screen title text is displayed, whereas configured title text : "
								+ basketScreenTitleText + " and displayed title text : "
								+ basketScreenTitleTextDisplayed + " are same . ");
				System.out
						.println("Verified that basket screen title text is displayed, whereas configured title text : "
								+ basketScreenTitleText + " and displayed title text : "
								+ basketScreenTitleTextDisplayed + " are same . ");

				nextGenChangeLocationFlowViaEmptyBasket.info(MarkupHelper.createLabel(
						"nextGenChangeLocationFlowViaEmptyBasket - Verified that basket screen title text is displayed, whereas configured title text : "
								+ basketScreenTitleText + " and displayed title text : "
								+ basketScreenTitleTextDisplayed + " are same . ",
						ExtentColor.CYAN));

				nextGenChangeLocationFlowViaEmptyBasket.addScreenCaptureFromBase64String(takeScreenshot(driver),
						" The basket contains items on the cart");

				Thread.sleep(3000);
				FlutterElement basketScreenBackIcon = finder
						.byValueKey(emptyBasketLocators.EMPTY_BASKET_SCREEN_BACK_ICON_VKL);
				basketScreenBackIcon.click();

			}

			Thread.sleep(3000);

			commonMethods.switchContext("FLUTTER");

			Thread.sleep(2000);

			FlutterElement menuScreenHomeIcon = finder.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);

			menuScreenHomeIcon.click();

			ChangeLocation.ngaChangeLocationFlowViaOrderNowTakeoutAsapReviewBasket();

		} catch (Exception e) {

			nextGenChangeLocationFlowViaEmptyBasket.info(MarkupHelper.createLabel(
					"nextGenChangeLocationFlowViaEmptyBasket - Verified that Basket icon is not displayed in the dashboard screen.",
					ExtentColor.CYAN));

		}
		Thread.sleep(3000);

	}

//	public static void ngaRewards() throws Throwable {
//
////		DesiredCapabilities cap = new DesiredCapabilities();
////		cap.setCapability(MobileCapabilityType.DEVICE_NAME, "Samsung");
////		cap.setCapability("platformName", "Android");
////		cap.setCapability(MobileCapabilityType.PLATFORM_VERSION, "12");
////		cap.setCapability(MobileCapabilityType.UDID, "emulator-5554");
////		cap.setCapability(MobileCapabilityType.AUTOMATION_NAME, "Flutter");
////		cap.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT, 10000);
////		cap.setCapability("appPackage", "com.paytronix.nexgenfl");
////		cap.setCapability("appActivity", "com.paytronix.nexgenfl.MainActivity");
//		//
////		driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);
////		System.out.println("App Launched Successfully");
////		//FlutterFinder find = new FlutterFinder(driver);
//		//
////		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
//
////			driver = new AndroidDriver<WebElement>(new URL("http://0.0.0.0:4723/wd/hub"), cap);
//
//		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
//
//		FlutterFinder find = new FlutterFinder(driver);
//
//		BaseClass bass = new BaseClass();
//		List<String> takeoutFlowConfiguration = bass.appConfiguration();
////		String	Pos = takeoutFlowConfiguration.get(50);
////		int parseInt = Integer.parseInt(Pos);
//		//
////		String string = takeoutFlowConfiguration.get(51);
//
//		merchantId = takeoutFlowConfiguration.get(8);
//		storeCode = takeoutFlowConfiguration.get(13);
//		String localConfigTakeoutText = takeoutFlowConfiguration.get(22);
//
//		List<String> storeName = bass.odFlow();
//
//		String desiredStoreName = storeName.get(15);
//
//		Thread.sleep(6000);
//
//		/**
//		 * @Class_Name Location
//		 * @Method_Name nextGenOrderNowFlowWithTakeoutLaterConfigured
//		 * @Description Ensure that ordernow is configured in the bottombar or side
//		 *              drawer.
//		 * @TestID nextGenOrderNowFlowWithTakeoutLaterConfigured001
//		 * @author Ganeshkumarselvaraj
//		 */
//
//		// Initiating the node to be print in the Extent report.
//
//		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfigured_001 = test
//				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfigured001");
//		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfigured_002 = test
//				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfigured002");
//		ExtentTest nextGenOrderNowFlowWithTakeoutAsapConfigured_003 = test
//				.createNode("nextGenOrderNowFlowWithTakeoutAsapConfigured003");
//
//		// To get the dashboard title text
//
//		commonMethods.switchContext("FLUTTER");
//
//		FlutterElement dashboardTitleVk = find.byValueKey(dashBoardLocators.DASHBOARD_TITLE_VKL);
//
//		String dashboardTitleVkText = dashboardTitleVk.getText();
//
//		System.out.println(dashboardTitleVkText);
//
//		// To check whether order now is present in the bottom bar.
//
//		try {
//
//			commonMethods.switchContext("NATIVE_APP");
//
//			Thread.sleep(6000);
//
//			WebElement bottomBarOrderNow = driver
//					.findElement(By.xpath(orderNowLocators.LOGGEDIN_BOTTOMBAR_ORDERNOW_XPATHL));
//
//			// To check Order now is displayed in the bottom bar.
//
//			if (bottomBarOrderNow.isDisplayed()) {
//
//				String bottomBarOrderNowText = bottomBarOrderNow.getText();
//
//				// To print the informations using node in the extent report.
//
//				nextGenOrderNowFlowWithTakeoutAsapConfigured_001.info(MarkupHelper.createLabel(
//						"nextGenOrderNowFlowWithTakeoutAsapConfigured_001 - Validated that Order now button is present in bottom bar and the text name as : "
//								+ bottomBarOrderNowText,
//						ExtentColor.CYAN));
//				nextGenOrderNowFlowWithTakeoutAsapConfigured_001.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified that Location is configured in bottom bar");
//
//				bottomBarOrderNow.click();
//
//				commonMethods.switchContext("NATIVE_APP");
//
//				try {
//					Thread.sleep(10000);
//
//					WebElement dontAllowId = driver.findElement(By.id(locationLocators.LOCATIONSCREEN_DENY_ID));
//
//					if (dontAllowId.isDisplayed()) {
//
//						dontAllowId.click();
//
//					}
//
//				}
//
//				catch (Exception e) {
//					// TODO: handle exception
//
//					System.out.println("Native Popup not aappears");
//
//				}
//
//				/**
//				 * @Class_Name Location
//				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
//				 * @Description Ensure that user navigated to location screen while tapping the
//				 *              order now button via sidedrawer or bottom bar.
//				 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfigured_002
//				 * @author Ganeshkumarselvaraj
//				 */
//
//				// To get the Order now screen title.
//
//				commonMethods.switchContext("FLUTTER");
//
//				FlutterElement locationTitle = find.byValueKey(locationLocators.LOCATION_SCREEN_TITLE_TEXT_VKL);
//				String locationTitleText = locationTitle.getText();
//
//				nextGenOrderNowFlowWithTakeoutAsapConfigured_002.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified user navigated to the order now screen.");
//				nextGenOrderNowFlowWithTakeoutAsapConfigured_002.info(MarkupHelper.createLabel(
//						"nextGenOrderNowFlowWithTakeoutAsapConfigured_002 - Verified that user navigated to the order now screen and the title is : "
//								+ locationTitleText,
//						ExtentColor.CYAN));
//
//				/**
//				 * @Class_Name Location
//				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
//				 * @Description Ensure that user navigated to dashboard screen while tapping the
//				 *              backicon in the ordernow screen.
//				 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//				 * @author Ganeshkumarselvaraj
//				 */
//
//				// To get back from the Order now screen to the dashboard by the tapping
//				// the back icon.
//
//				FlutterElement locationBackIcon = find.byValueKey(locationLocators.LOCATION_SCREEN_BACK_BUTTON_VKL);
//				commonMethods.checkAndClickTheElement(locationBackIcon);
//
//				Thread.sleep(6000);
//
//				nextGenOrderNowFlowWithTakeoutAsapConfigured_003.addScreenCaptureFromBase64String(
//						takeScreenshot(driver), "Verified user navigated to the Dashboard screen.");
//				nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
//						"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that user navigated to the dashboard screen while tapping the backicon in Order now screen and the Dashboard title is : "
//								+ dashboardTitleVkText,
//						ExtentColor.CYAN));
//
//				commonMethods.switchContext("NATIVE_APP");
//
//				bottomBarOrderNow.click();
//
//				commonMethods.switchContext("FLUTTER");
//
//			}
//			//
////					/**
////					 * @Class_Name Location
////					 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
////					 * @Description Ensure that user navigated to dashboard screen while tapping the
////					 *              backicon in the ordernow screen.
////					 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfigured_003
////					 * @author Ganeshkumarselvaraj
////					 */  
//
//			io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId
//					+ "/restaurants/" + storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
//			// Construct the query parameters
//			RequestSpecification requestingHttp = io.restassured.RestAssured.given();
//			// specify the method type (GET) and the parameters if any.
//			// In this case the request does not take any parameter
//
//			RequestSpecification parameterRequest = requestingHttp.queryParam("key",
//					"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
//			Response restaurantsResponse = parameterRequest.get("");
//
//			JSONObject storeResponse = new JSONObject(restaurantsResponse.body().asString());
//			if (storeResponse.has("name")) {
//
//				String asapOrder = storeResponse.optString("advance_only");
//				String laterOrder = storeResponse.optString("use_eta");
//
//				String takeoutResponse = storeResponse.optString("takeout");
//				String takeoutResponseLabelText = storeResponse.optString("takeout_label");
//
//				System.out.println(takeoutResponse + takeoutResponseLabelText + asapOrder);
//
//				List<String> odFlow = bass.odFlow();
//
//				String asapText = odFlow.get(16);
//				String laterText = odFlow.get(17);
//
//				List<String> appConfiguration = bass.appConfiguration();
//
//				userName = appConfiguration.get(6);
//				passWord = appConfiguration.get(7);
//				merchantId = appConfiguration.get(8);
//				cardTemplateCode = appConfiguration.get(9);
//				storeGroupCode = appConfiguration.get(10);
//				clientId = appConfiguration.get(11);
//				integrationDetail = appConfiguration.get(12);
//				storeCode = appConfiguration.get(13);
//				String storeShortCodeNumberConfiguration = appConfiguration.get(4);
//				String corpShortCodeNumberConfiguration = appConfiguration.get(5);
//
//				System.out.println(storeShortCodeNumberConfiguration);
//				System.out.println(corpShortCodeNumberConfiguration);
//
//				String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
//						+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\":"
//						+ cardTemplateCode + ",\n"
//						+ "    \"scope\": \"user_read account_read account_write user_write\",\n"
//						+ "    \"merchantId\": " + merchantId + ",\n"
//						+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
//						+ "    \"authentication\": \"anonymous\",\n"
//						+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
//						+ "    \"client_id\": \"" + clientId + "\"\n" + "}";
//
//				RequestSpecification request = io.restassured.RestAssured.given();
//
//				request.contentType(ContentType.JSON);
//				request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");
//				request.body(jsonString);
//				Response response = request.post();
//				ValidatableResponse validatableResponse = response.then();
//				validatableResponse.statusCode(200);
//				// To get the access token of the particular account
//				JSONObject jObj = new JSONObject(response.body().asString());
//				accessTokenGen = jObj.optString("access_token");
//				primaryCardNumbersResponse = jObj.optString("printedCardNumber");
//
//				System.out.println(accessTokenGen);
//				System.out.println(primaryCardNumbersResponse);
//				// Here hitting the Account Information API to get the Account related
//				// information from the response.
//
//				// oauth grant
//				String jsonString1 = "{\n" + "    \"authentication\": \"oauth\",\n" + "    \"merchantId\": \"60019\",\n"
//						+ "    \"access_token\": \"" + accessTokenGen + "\",\n" + "    \"response_type\": \"code\",\n"
//						+ "    \"thirdPartyIntegration\": \"lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97\",\n"
//						+ "    \"scope\": \"user_read account_read account_write user_write\",\n"
//						+ "    \"username\": \"" + userName + "\",\n"
//						+ "    \"client_id\": \"y5mjgC9v2raWoMkQ_1jJgZhMEinFx9Zl4fb7105Slp\"\n" + "}";
//
//				RequestSpecification req = io.restassured.RestAssured.given();
//
//				req.contentType(ContentType.JSON);
//				req.baseUri("https://www.train.paytronix.com:1283/rest/14.15/oauth/requestAuthorizationGrant.json");
//				req.body(jsonString1);
//				Response resp = req.post();
//				ValidatableResponse validatableResponse1 = resp.then();
//				validatableResponse1.statusCode(200);
//
//				// Extracting the authorization grant key value
//				JSONObject jObj1 = new JSONObject(resp.body().asString());
//				String authorizationGrant = jObj1.getString("authorizationGrant");
//
//				// Now you can use authorizationGrant as needed
//				System.out.println("Authorization Grant: " + authorizationGrant);
//
//				RestAssured.baseURI = "https://opendining.net/api/v1/account";
//
//				// Construct the query parameters
//				Map<String, String> params = new HashMap<>();
//				params.put("access_token", authorizationGrant);
//				params.put("merchant_id", "60019");
//				params.put("provider", "px");
//				params.put("printed_card_number", primaryCardNumbersResponse);
//				params.put("key", "ce1b6c4a546509ef17557094078169c25aa7b54e");
//
//				// Send the GET request
//				RequestSpecification httpRequest = RestAssured.given().queryParams(params);
//				Response responseid = httpRequest.get();
//
//				// Convert the response to JSON
//				JSONObject jsonResponse = new JSONObject(responseid.getBody().asString());
//
//				// Extract the ID from the JSON response
//				requestId = jsonResponse.optString("id");
//
//				// Print the ID
//				System.out.println("The request ID is: " + requestId);
//
//				// retaurent
//
//				//// resturant
//				storeCode = takeoutFlowConfiguration.get(13);
//
//				io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/"
//						+ storeCode + "?key=6d6bf06a4f653a54da8d88715a736a4ca6071ffb";
//				// Construct the query parameters
//				RequestSpecification requestingHttp1 = io.restassured.RestAssured.given();
//				// specify the method type (GET) and the parameters if any.
//				// In this case the request does not take any parameter
//
//				RequestSpecification parameterRequest1 = requestingHttp1.queryParam("key",
//						"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
//				Response restaurantsResponse1 = parameterRequest1.get("");
//
//				JSONObject storeResponse1 = new JSONObject(restaurantsResponse1.body().asString());
//				if (storeResponse.has("name")) {
//
//					String asapOrder1 = storeResponse1.optString("advance_only");
//					String laterOrder1 = storeResponse1.optString("use_eta");
//
////				    	String deliveryResponse = storeResponse.optString("delivery");
////				    	String deliveryResponseLabelText = storeResponse.optString("delivery_label");
//
//					String takeoutResponse1 = storeResponse1.optString("takeout");
//					String takeoutResponseLabelText1 = storeResponse1.optString("takeout_label");
//
//					JSONObject curbsideObject1 = storeResponse1.optJSONObject("curbside");
//					String curbsideResponse1 = curbsideObject1.optString("en");
//					String curbsideResponseLabelText1 = curbsideObject1.optString("label_text");
//
//					Restaurant_Id = storeResponse.optString("id");
//
//					System.out.println("Restaurant Id is : " + Restaurant_Id);
//
//					/// order ap1i
//					String Json1 = "{\n" + "    \"access_token\" : \" " + accessTokenGen + "\",\n"
//							+ "    \"merchant_id\" : " + merchantId + ",\n" + "    \"printed_card_number\" : "
//							+ primaryCardNumbersResponse + " ,\n" + "    \"provider\" : \"px\",\n"
//							+ "    \"restaurant_id\" : \"" + Restaurant_Id + "\"\n" + "}";
//
//					RequestSpecification requestOrders = io.restassured.RestAssured.given();
//
//					RequestSpecification parameterReq = requestOrders.queryParam("key",
//							"6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
//
//					parameterReq.contentType(ContentType.JSON);
//
//					parameterReq.baseUri("https://opendining.net/api/v1/orders?");
//
//					parameterReq.body(Json1);
//					Response responseOrders = parameterReq.post();
//					System.out.println(responseOrders.asString());
//					ValidatableResponse validatableOrdersResponse = responseOrders.then();
//					System.out.println(validatableOrdersResponse);
//
//					validatableOrdersResponse.statusCode(200);
//					System.out.println(responseOrders.getStatusCode());
//					System.out.println(responseOrders.asPrettyString());
//					JSONObject jObjOrders = new JSONObject(responseOrders.body().asString());
//					orderId = jObjOrders.optString("order_id");
//
//					System.out.println("OrderIdd is : " + orderId);
//
//					Thread.sleep(3000);// BaseClass bc = new BaseClass();
//					//
////					List<String> appConfiguration = bc.appConfiguration();
//					//
////					userName = appConfiguration.get(6);
////					passWord = appConfiguration.get(7);
////					merchantId = appConfiguration.get(8);
////					cardTemplateCode = appConfiguration.get(9);
////					storeGroupCode = appConfiguration.get(10);
////					clientId = appConfiguration.get(11);
////					integrationDetail = appConfiguration.get(12);
////					storeCode = appConfiguration.get(13);
////					String storeShortCodeNumberConfiguration = appConfiguration.get(4);
////					String corpShortCodeNumberConfiguration = appConfiguration.get(5);
//					//
////					DateApi = odFlow.get(18);
////					Date = odFlow.get(19);
////					storeCode = appConfiguration.get(13);
//					//
////					String jsonString = "{\n" + "    \"fields\": {\n" + "        \"username\": \"" + userName + "\",\n"
////							+ "        \"password\": \"" + passWord + "\"\n" + "    },\n" + "    \"cardTemplateCode\": \""
////							+ cardTemplateCode + "\",\n"
////							+ "    \"scope\": \"user_read account_read account_write user_write\",\n"
////							+ "    \"merchantId\": \"" + merchantId + "\",\n"
////							+ "    \"grant_type\": \"http:\\/\\/paytronix.com\\/oauth\\/fieldset\",\n"
////							+ "    \"authentication\": \"anonymous\",\n"
////							+ "    \"access_token\": \"VDc_p1vU2AaPShcFTWcdX9BqRsaFf9upuMP7epvhWS\",\n"
////							+ "    \"client_id\": \"" + clientId + "\"\n" + "}";
//					//
////					RequestSpecification request = io.restassured.RestAssured.given();
//					//
////					request.contentType(ContentType.JSON);
//					//
////					request.baseUri("https://www.train.paytronix.com:1283/rest/23.8/oauth/requestGuestToken.json");
//					//
////					request.body(jsonString);
////					Response response = request.post();
////					ValidatableResponse validatableResponse = response.then();
////					validatableResponse.statusCode(200);
////					JSONObject jObj = new JSONObject(response.body().asString());
////					accessTokenGen = jObj.optString("access_token");
////					printedCardNumberResponse = jObj.optString("printedCardNumber");
//					//
////					io.restassured.RestAssured.baseURI = "https://www.train.paytronix.com:1283/rest/14.15/guest/accountInformation.json?";
////					// Construct the query parameters
////					Map<String, String> paramsFav = new HashMap<>();
////					paramsFav.put("access_token", accessTokenGen);
////					paramsFav.put("client_id", clientId);
////					paramsFav.put("integrationDetail", integrationDetail);
////					paramsFav.put("authentication", authentication);
////					paramsFav.put("merchantId", merchantId);
////					paramsFav.put("printedCardNumber", printedCardNumberResponse);
////					RequestSpecification httpRequestFav = io.restassured.RestAssured.given();
////					// specify the method type (GET) and the parameters if any.
////					// In this case the request does not take any parameters
////					RequestSpecification responseBodyFav = httpRequestFav.queryParams(paramsFav);
////					Response responseFav = responseBodyFav.get("");
////					// Retrieving the response body using getBody() method
//////						System.out.println("Response=>" + response1.prettyPrint());
////					JSONObject jObjectFav = new JSONObject(responseFav.body().asString());
//					//
////					JSONObject optJSONObjectFav = jObjectFav.optJSONObject("fields");
////					JSONObject optStringFav = optJSONObjectFav.optJSONObject("favoriteStore");
//					//
////					ExtentTest recentlyOrderedOD001 = test.createNode("recentlyOrderedOD001");
//					//
////					ExtentTest favouriteStoreOD001 = test.createNode("favouriteStoreOD001");
//					//
////					if (optStringFav != null) {
//					//
////						favStoreCode = optStringFav.optString("code");
//					//
////						favStoreName = optStringFav.optString("label");
//					//
////					} else {
//					//
////						favStoreName = "";
////					}
//					//
////					String json = "{\n" + "    \"thirdPartyIntegration\": \"lJI1mRVajw4FmFrNqOxEqFU_3QpH2HwpBSdpnt1m97\",\n"
////							+ "    \"response_type\": \"code\",\n"
////							+ "    \"scope\": \"user_read user_write account_read account_write\",\n"
////							+ "    \"merchantId\": " + merchantId + ",\n" + "    \"authentication\": \"oauth\",\n"
////							+ "    \"username\": \"" + userName + "\",\n"
////							+ "    \"integrationDetail\": \"os=iOS|osversion=14.7.1|device=iPhone|merchantId=60019|integrator=Paytronix|version=REST:14.15 - API:23.15-Rose(Branded)-SNAPSHOT - APP:2023072101\",\n"
////							+ "    \"access_token\": \"" + accessTokenGen + "\",\n"
////							+ "    \"client_id\": \"y5mjgC9v2raWoMkQ_1jJgZhMEinFx9Zl4fb7105Slp\"\n" + "}";
////					RequestSpecification requestAuth = io.restassured.RestAssured.given();
////					requestAuth.contentType(ContentType.JSON);
////					requestAuth.baseUri(
////							"https://www.train.paytronix.com:1283/rest/14.15/oauth/requestAuthorizationGrant.json");
////					requestAuth.body(json);
////					Response responseAuth = requestAuth.post();
////					ValidatableResponse validatableResponseAuth = responseAuth.then();
////					validatableResponseAuth.statusCode(200);
////					JSONObject jObjAuth = new JSONObject(responseAuth.body().asString());
////					authorizationGrant = jObjAuth.optString("authorizationGrant");
////					io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/account/orders?";
////					// Construct the query parameters
////					Map<String, String> parametersRecent = new HashMap<>();
////					parametersRecent.put("key", key);
////					parametersRecent.put("access_token", authorizationGrant);
////					parametersRecent.put("merchant_id", merchantId);
////					parametersRecent.put("printed_card_number", printedCardNumberResponse);
////					parametersRecent.put("provider", provider);
////					RequestSpecification httpReqRecent = io.restassured.RestAssured.given();
////					RequestSpecification responseRecent = httpReqRecent.queryParams(parametersRecent);
////					Response respRecent = responseRecent.get("");
////					JSONArray jsonObjectRecent = new JSONArray(respRecent.body().asString());
////					JSONObject optJSONObjectRecent = jsonObjectRecent.optJSONObject(0);
////					storeCode = optJSONObjectRecent.optString("px_store_code");
////					io.restassured.RestAssured.baseURI = "https://www.train.paytronix.com:1283/rest/14.15/store/store.json?";
////					RequestSpecification httpReqRecent1 = io.restassured.RestAssured.given();
////					Map<String, String> paramsRecent = new HashMap<>();
////					paramsRecent.put("storeIdentity.code", storeCode);
////					paramsRecent.put("client_id", clientId);
////					paramsRecent.put("integrationDetail", integrationDetail1);
////					paramsRecent.put("authentication", authentication1);
////					paramsRecent.put("merchantId", merchantId);
////					RequestSpecification responseBodyRecent = httpReqRecent1.queryParams(paramsRecent);
////					Response responseRecent1 = responseBodyRecent.get("");
////					JSONObject jObjectRecent = new JSONObject(responseRecent1.body().asString());
////					recentlyOrderedName = jObjectRecent.get("name").toString();
//					//
////					if (jObjectRecent.get("name").toString() != null) {
//					//
////						recentlyOrderedName = jObjectRecent.get("name").toString();
//					//
////					}
//					//
////					else {
//					//
////						recentlyOrderedName = "";
//					//
////					}
//					//
////					if (!favStoreName.isEmpty() && !recentlyOrderedName.isEmpty()) {
//					//
////						System.out.println(" fav store & favourite Order both are available ");
//					//
////						if (favStoreName.equals(recentlyOrderedName)) {
//					//
////							System.out.println(
////									" Both Favourite store and recently Ordered store are same so executing the recently ordered script");
//					//
////							FlutterElement locationRecentlyOrderedRestaurantNameVk = find
////									.byValueKey("location_list_" + storeCode + "_title");
//					//
////							String locationRecentlyOrderedRestaurantNameTextVk = locationRecentlyOrderedRestaurantNameVk
////									.getText();
//					//
////							System.out.println(" Recently ordered restaurant name in the order now is : "
////									+ locationRecentlyOrderedRestaurantNameTextVk);
//					//
////							recentlyOrderedOD001.info(
////									MarkupHelper.createLabel(" Recently ordered restaurant name in the order now is : "
////											+ locationRecentlyOrderedRestaurantNameTextVk, ExtentColor.CYAN));
//					//
////							FlutterElement locationRecentlyOrderedRestaurantAddressLine1Vk = find
////									.byValueKey("location_list_" + storeCode + "_addressline1");
//					//
////							String locationRecentlyOrderedRestaurantAddressLineText1Vk = locationRecentlyOrderedRestaurantAddressLine1Vk
////									.getText();
//					//
////							System.out.println(" Recently ordered restaurant address line 1 in the order now is : "
////									+ locationRecentlyOrderedRestaurantAddressLineText1Vk);
//					//
////							recentlyOrderedOD001
////									.info(MarkupHelper.createLabel(
////											" Recently ordered restaurant address line 1 in the order now is : "
////													+ locationRecentlyOrderedRestaurantAddressLineText1Vk,
////											ExtentColor.CYAN));
//					//
////							FlutterElement locationRecentlyOrderedRestaurantAddressLine2Vk = find
////									.byValueKey("location_list_" + storeCode + "_addressline2");
//					//
////							String locationRecentlyOrderedRestaurantAddressLineText2Vk = locationRecentlyOrderedRestaurantAddressLine2Vk
////									.getText();
//					//
////							System.out.println(" Recently ordered restaurant address line 2 in the order now is : "
////									+ locationRecentlyOrderedRestaurantAddressLineText2Vk);
//					//
////							recentlyOrderedOD001
////									.info(MarkupHelper.createLabel(
////											" Recently ordered restaurant address line 2 in the order now is : "
////													+ locationRecentlyOrderedRestaurantAddressLineText2Vk,
////											ExtentColor.CYAN));
//					//
////							FlutterElement ODRecentlyVisitedTextVk = find
////									.byValueKey(oloLocators.OD_RECENTLY_VISITED_TEXT_VKL);
//					//
////							String ODRecentlyVisitedTextTVk = ODRecentlyVisitedTextVk.getText();
//					//
////							Assert.assertEquals(ODRecentlyVisitedTextTVk, "RECENTLY ORDERED");
//					//
////							System.out.println(" The recently ordered tag in the recently ordered restaurant tag is :  "
////									+ ODRecentlyVisitedTextTVk);
//					//
////							recentlyOrderedOD001.info(MarkupHelper
////									.createLabel(" The recently ordered tag in the recently ordered restaurant tag is :  "
////											+ ODRecentlyVisitedTextTVk, ExtentColor.CYAN));
//					//
////							Assert.assertEquals(locationRecentlyOrderedRestaurantNameTextVk,
////									recentlyOrderedName.toUpperCase());
//					//
////							System.out.println(
////									" Validated that the recently ordered location store in the order now screen and API are same ");
//					//
////							recentlyOrderedOD001.info(MarkupHelper.createLabel(
////									" Validated that the recently ordered location store in the order now screen and API are same ",
////									ExtentColor.CYAN));
//					//
////							recentlyOrderedOD001.addScreenCaptureFromBase64String(takeScreenshot(driver),
////									" Validated that the recently ordered location store in the order now screen and API are same ");
//					//
////							/**
////							 * @Class_Name OLORecentlyOrdered
////							 * @Method_Name recentlyOrdered
////							 * @Description Verifying the recently ordered store in map view screen
////							 * @TestID recentlyOrdered
////							 * @author Lalith Kishore Ravi
////							 */
//					//
////							ExtentTest recentlyOrderedOD002 = test.createNode("recentlyOrderedOD_002");
//					//
////							Thread.sleep(3000);
//					//
////							FlutterElement locationScreenMapIconButtonVk = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_MAP_ICON_BUTTON_VKL);
//					//
////							locationScreenMapIconButtonVk.click();
//					//
////							FlutterElement locationScreenBackButtonVk = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_BACK_BUTTON_VKL);
//					//
////							locationScreenBackButtonVk.click();
//					//
////							Thread.sleep(3000);
//					//
////							FlutterElement bottomBarOrderNowButton1 = find
////									.byValueKey((bottomBarNavigationLocators.BOTTOMBAR_NOTIFICATION_ORDER_NOW_BUTTON_VK));
//					//
////							bottomBarOrderNowButton1.click();
//					//
////							FlutterElement locationScreenMapIconButton1Vk = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_MAP_ICON_BUTTON_VKL);
//					//
////							locationScreenMapIconButton1Vk.click();
//					//
////							Thread.sleep(2000);
//					//
////							FlutterElement storeInfoScreenStoreNameLocationScreenCorporatevk = find
////									.byValueKey("location_info_window_title_" + storeCode);
//					//
////							String storeInfoScreenStoreNameLocationScreenCorporateTextVk = storeInfoScreenStoreNameLocationScreenCorporatevk
////									.getText();
//					//
////							System.out.println(" Recently ordered restaurant name in map view screen is : "
////									+ storeInfoScreenStoreNameLocationScreenCorporateTextVk);
//					//
////							recentlyOrderedOD002
////									.info(MarkupHelper.createLabel(
////											" Recently ordered restaurant name in map view screen is : "
////													+ storeInfoScreenStoreNameLocationScreenCorporateTextVk,
////											ExtentColor.CYAN));
//					//
////							FlutterElement storeInfoScreenStoreAddressLocationScreenCorporatevk = find
////									.byValueKey("location_info_window_address_" + storeCode);
//					//
////							String storeInfoScreenStoreAddressLocationScreenCorporateTextvk = storeInfoScreenStoreAddressLocationScreenCorporatevk
////									.getText();
//					//
////							System.out.println(" Recently ordered restaurant address in the MapView is : "
////									+ storeInfoScreenStoreAddressLocationScreenCorporateTextvk);
//					//
////							recentlyOrderedOD002
////									.info(MarkupHelper.createLabel(
////											" Recently ordered restaurant address line 1 in the MapView is : "
////													+ storeInfoScreenStoreAddressLocationScreenCorporateTextvk,
////											ExtentColor.CYAN));
//					//
////							Assert.assertEquals(storeInfoScreenStoreNameLocationScreenCorporateTextVk, recentlyOrderedName);
//					//
////							System.out.println(
////									" Validated that the recently ordered location store in the map view screen and API are same ");
//					//
////							recentlyOrderedOD002.info(MarkupHelper.createLabel(
////									" Validated that the recently ordered location store in the map view screen and API are same ",
////									ExtentColor.CYAN));
//					//
////							recentlyOrderedOD002.addScreenCaptureFromBase64String(takeScreenshot(driver),
////									" Validated that the recently ordered location store in the map view screen and API are same ");
//					//
////							commonMethods.switchContext("FLUTTER");
//					//
////							FlutterElement locationScreenMapIconButtonVk1 = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_MAP_ICON_BUTTON_VKL);
//					//
////							commonMethods.checkAndClickTheElement(locationScreenMapIconButtonVk1);
//					//
////						}
//					//
////						else {
//					//
////							System.out.println(
////									" Executing the Favourite order flow as both recent order and favourite order is not same");
//					//
////							FlutterElement locationFavouriteStoreRestaurantNameVk = find
////									.byValueKey("location_list_" + favStoreName + "_title");
//					//
////							String locationFavouriteStoreRestaurantNameTextVk = locationFavouriteStoreRestaurantNameVk
////									.getText();
//					//
////							System.out.println(" Favourite Order restaurant name in the order now is : "
////									+ locationFavouriteStoreRestaurantNameTextVk);
//					//
////							favouriteStoreOD001
////									.info(MarkupHelper.createLabel(" Favourite Order restaurant name in the order now is : "
////											+ locationFavouriteStoreRestaurantNameTextVk, ExtentColor.CYAN));
//					//
////							FlutterElement locationFavouriteStoreRestaurantAddressLine1Vk = find
////									.byValueKey("location_list_" + favStoreName + "_addressline1");
//					//
////							String locationFavouriteStoreRestaurantAddressLineText1Vk = locationFavouriteStoreRestaurantAddressLine1Vk
////									.getText();
//					//
////							System.out.println(" Favourite Order restaurant address line 1 in the order now is : "
////									+ locationFavouriteStoreRestaurantAddressLineText1Vk);
//					//
////							favouriteStoreOD001
////									.info(MarkupHelper.createLabel(
////											" Favourite Order restaurant address line 1 in the order now is : "
////													+ locationFavouriteStoreRestaurantAddressLineText1Vk,
////											ExtentColor.CYAN));
//					//
////							FlutterElement locationFavouriteStoreRestaurantAddressLine2Vk = find
////									.byValueKey("location_list_" + favStoreName + "_addressline2");
//					//
////							String locationFavouriteStoreRestaurantAddressLineText2Vk = locationFavouriteStoreRestaurantAddressLine2Vk
////									.getText();
//					//
////							System.out.println(" Favourite Order restaurant address line 2 in the order now is : "
////									+ locationFavouriteStoreRestaurantAddressLineText2Vk);
//					//
////							favouriteStoreOD001
////									.info(MarkupHelper.createLabel(
////											" Favourite Order restaurant address line 2 in the order now is : "
////													+ locationFavouriteStoreRestaurantAddressLineText2Vk,
////											ExtentColor.CYAN));
//					//
////							FlutterElement ODRecentlyVisitedTextVk = find
////									.byValueKey(oloLocators.OD_RECENTLY_VISITED_TEXT_VKL);
//					//
////							String ODRecentlyVisitedTextTVk = ODRecentlyVisitedTextVk.getText();
//					//
////							Assert.assertEquals(ODRecentlyVisitedTextTVk, "RECENTLY ORDERED");
//					//
////							System.out.println(" The favourite Order tag in the favourite Order restaurant tag is :  "
////									+ ODRecentlyVisitedTextTVk);
//					//
////							favouriteStoreOD001.info(MarkupHelper
////									.createLabel(" The favourite Order tag in the favourite Order restaurant tag is :  "
////											+ ODRecentlyVisitedTextTVk, ExtentColor.CYAN));
//					//
////							Assert.assertEquals(locationFavouriteStoreRestaurantNameTextVk,
////									recentlyOrderedName.toUpperCase());
//					//
////							System.out.println(
////									" Validated that the favourite Order location store in the order now screen and API are same ");
//					//
////							favouriteStoreOD001.info(MarkupHelper.createLabel(
////									" Validated that the favourite Order location store in the order now screen and API are same ",
////									ExtentColor.CYAN));
//					//
////							favouriteStoreOD001.addScreenCaptureFromBase64String(takeScreenshot(driver),
////									" Validated that the favourite Order location store in the order now screen and API are same ");
//					//
////							/**
////							 * @Class_Name OLOFavouriteStore
////							 * @Method_Name favouriteStore
////							 * @Description Verifying the favourite Order store in map view screen
////							 * @TestID favouriteStore
////							 * @author Lalith Kishore Ravi
////							 */
//					//
////							ExtentTest favouriteStoreOD002 = test.createNode("favouriteStoreOD_002");
//					//
////							Thread.sleep(3000);
//					//
////							FlutterElement locationScreenMapIconButtonVk = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_MAP_ICON_BUTTON_VKL);
//					//
////							locationScreenMapIconButtonVk.click();
//					//
////							FlutterElement locationScreenBackButtonVk = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_BACK_BUTTON_VKL);
//					//
////							locationScreenBackButtonVk.click();
//					//
////							Thread.sleep(3000);
//					//
////							FlutterElement bottomBarOrderNowButton1 = find
////									.byValueKey((bottomBarNavigationLocators.BOTTOMBAR_NOTIFICATION_ORDER_NOW_BUTTON_VK));
//					//
////							bottomBarOrderNowButton1.click();
//					//
////							FlutterElement locationScreenMapIconButton1Vk = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_MAP_ICON_BUTTON_VKL);
//					//
////							locationScreenMapIconButton1Vk.click();
//					//
////							Thread.sleep(2000);
//					//
////							FlutterElement storeInfoScreenStoreNameLocationScreenCorporatevk = find
////									.byValueKey("location_info_window_title_" + favStoreName);
//					//
////							String storeInfoScreenStoreNameLocationScreenCorporateTextVk = storeInfoScreenStoreNameLocationScreenCorporatevk
////									.getText();
//					//
////							System.out.println(" Favourite Order restaurant name in map view screen is : "
////									+ storeInfoScreenStoreNameLocationScreenCorporateTextVk);
//					//
////							favouriteStoreOD002
////									.info(MarkupHelper.createLabel(
////											" Favourite Order restaurant name in map view screen is : "
////													+ storeInfoScreenStoreNameLocationScreenCorporateTextVk,
////											ExtentColor.CYAN));
//					//
////							FlutterElement storeInfoScreenStoreAddressLocationScreenCorporatevk = find
////									.byValueKey("location_info_window_address_" + favStoreName);
//					//
////							String storeInfoScreenStoreAddressLocationScreenCorporateTextvk = storeInfoScreenStoreAddressLocationScreenCorporatevk
////									.getText();
//					//
////							System.out.println(" Favourite Order restaurant address in the MapView is : "
////									+ storeInfoScreenStoreAddressLocationScreenCorporateTextvk);
//					//
////							favouriteStoreOD002
////									.info(MarkupHelper.createLabel(
////											" Favourite Order restaurant address line 1 in the MapView is : "
////													+ storeInfoScreenStoreAddressLocationScreenCorporateTextvk,
////											ExtentColor.CYAN));
//					//
////							Assert.assertEquals(storeInfoScreenStoreNameLocationScreenCorporateTextVk, recentlyOrderedName);
//					//
////							System.out.println(
////									" Validated that the favourite Order location store in the map view screen and API are same ");
//					//
////							favouriteStoreOD002.info(MarkupHelper.createLabel(
////									" Validated that the favourite Order location store in the map view screen and API are same ",
////									ExtentColor.CYAN));
//					//
////							favouriteStoreOD002.addScreenCaptureFromBase64String(takeScreenshot(driver),
////									" Validated that the favourite Order location store in the map view screen and API are same ");
//					//
////							commonMethods.switchContext("FLUTTER");
//					//
////							FlutterElement locationScreenMapIconButtonVk1 = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_MAP_ICON_BUTTON_VKL);
//					//
////							commonMethods.checkAndClickTheElement(locationScreenMapIconButtonVk1);
//					//
////						}
////					} else {
//					//
////						if (!favStoreName.isEmpty()) {
//					//
////							System.out.println(
////									"Executing the Favourite order flow as favourite order is present where in that both recent order doesn't match with it ");
//					//
////							FlutterElement locationFavouriteStoreRestaurantNameVk = find
////									.byValueKey("location_list_" + favStoreName + "_title");
//					//
////							String locationFavouriteStoreRestaurantNameTextVk = locationFavouriteStoreRestaurantNameVk
////									.getText();
//					//
////							System.out.println(" Favourite Order restaurant name in the order now is : "
////									+ locationFavouriteStoreRestaurantNameTextVk);
//					//
////							favouriteStoreOD001
////									.info(MarkupHelper.createLabel(" Favourite Order restaurant name in the order now is : "
////											+ locationFavouriteStoreRestaurantNameTextVk, ExtentColor.CYAN));
//					//
////							FlutterElement locationFavouriteStoreRestaurantAddressLine1Vk = find
////									.byValueKey("location_list_" + favStoreName + "_addressline1");
//					//
////							String locationFavouriteStoreRestaurantAddressLineText1Vk = locationFavouriteStoreRestaurantAddressLine1Vk
////									.getText();
//					//
////							System.out.println(" Favourite Order restaurant address line 1 in the order now is : "
////									+ locationFavouriteStoreRestaurantAddressLineText1Vk);
//					//
////							favouriteStoreOD001
////									.info(MarkupHelper.createLabel(
////											" Favourite Order restaurant address line 1 in the order now is : "
////													+ locationFavouriteStoreRestaurantAddressLineText1Vk,
////											ExtentColor.CYAN));
//					//
////							FlutterElement locationFavouriteStoreRestaurantAddressLine2Vk = find
////									.byValueKey("location_list_" + favStoreName + "_addressline2");
//					//
////							String locationFavouriteStoreRestaurantAddressLineText2Vk = locationFavouriteStoreRestaurantAddressLine2Vk
////									.getText();
//					//
////							System.out.println(" Favourite Order restaurant address line 2 in the order now is : "
////									+ locationFavouriteStoreRestaurantAddressLineText2Vk);
//					//
////							favouriteStoreOD001
////									.info(MarkupHelper.createLabel(
////											" Favourite Order restaurant address line 2 in the order now is : "
////													+ locationFavouriteStoreRestaurantAddressLineText2Vk,
////											ExtentColor.CYAN));
//					//
////							FlutterElement ODRecentlyVisitedTextVk = find
////									.byValueKey(oloLocators.OD_RECENTLY_VISITED_TEXT_VKL);
//					//
////							String ODRecentlyVisitedTextTVk = ODRecentlyVisitedTextVk.getText();
//					//
////							Assert.assertEquals(ODRecentlyVisitedTextTVk, "RECENTLY ORDERED");
//					//
////							System.out.println(" The favourite Order tag in the favourite Order restaurant tag is :  "
////									+ ODRecentlyVisitedTextTVk);
//					//
////							favouriteStoreOD001.info(MarkupHelper
////									.createLabel(" The favourite Order tag in the favourite Order restaurant tag is :  "
////											+ ODRecentlyVisitedTextTVk, ExtentColor.CYAN));
//					//
////							Assert.assertEquals(locationFavouriteStoreRestaurantNameTextVk,
////									recentlyOrderedName.toUpperCase());
//					//
////							System.out.println(
////									" Validated that the favourite Order location store in the order now screen and API are same ");
//					//
////							favouriteStoreOD001.info(MarkupHelper.createLabel(
////									" Validated that the favourite Order location store in the order now screen and API are same ",
////									ExtentColor.CYAN));
//					//
////							favouriteStoreOD001.addScreenCaptureFromBase64String(takeScreenshot(driver),
////									" Validated that the favourite Order location store in the order now screen and API are same ");
//					//
////							/**
////							 * @Class_Name OLOFavouriteStore
////							 * @Method_Name favouriteStore
////							 * @Description Verifying the favourite Order store in map view screen
////							 * @TestID favouriteStore
////							 * @author Lalith Kishore Ravi
////							 */
//					//
////							ExtentTest favouriteStoreOD002 = test.createNode("favouriteStoreOD_002");
//					//
////							Thread.sleep(3000);
//					//
////							FlutterElement locationScreenMapIconButtonVk = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_MAP_ICON_BUTTON_VKL);
//					//
////							locationScreenMapIconButtonVk.click();
//					//
////							FlutterElement locationScreenBackButtonVk = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_BACK_BUTTON_VKL);
//					//
////							locationScreenBackButtonVk.click();
//					//
////							Thread.sleep(3000);
//					//
////							FlutterElement bottomBarOrderNowButton1 = find
////									.byValueKey((bottomBarNavigationLocators.BOTTOMBAR_NOTIFICATION_ORDER_NOW_BUTTON_VK));
//					//
////							bottomBarOrderNowButton1.click();
//					//
////							FlutterElement locationScreenMapIconButton1Vk = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_MAP_ICON_BUTTON_VKL);
//					//
////							locationScreenMapIconButton1Vk.click();
//					//
////							Thread.sleep(2000);
//					//
////							FlutterElement storeInfoScreenStoreNameLocationScreenCorporatevk = find
////									.byValueKey("location_info_window_title_" + favStoreName);
//					//
////							String storeInfoScreenStoreNameLocationScreenCorporateTextVk = storeInfoScreenStoreNameLocationScreenCorporatevk
////									.getText();
//					//
////							System.out.println(" Favourite Order restaurant name in map view screen is : "
////									+ storeInfoScreenStoreNameLocationScreenCorporateTextVk);
//					//
////							favouriteStoreOD002
////									.info(MarkupHelper.createLabel(
////											" Favourite Order restaurant name in map view screen is : "
////													+ storeInfoScreenStoreNameLocationScreenCorporateTextVk,
////											ExtentColor.CYAN));
//					//
////							FlutterElement storeInfoScreenStoreAddressLocationScreenCorporatevk = find
////									.byValueKey("location_info_window_address_" + favStoreName);
//					//
////							String storeInfoScreenStoreAddressLocationScreenCorporateTextvk = storeInfoScreenStoreAddressLocationScreenCorporatevk
////									.getText();
//					//
////							System.out.println(" Favourite Order restaurant address in the MapView is : "
////									+ storeInfoScreenStoreAddressLocationScreenCorporateTextvk);
//					//
////							favouriteStoreOD002
////									.info(MarkupHelper.createLabel(
////											" Favourite Order restaurant address line 1 in the MapView is : "
////													+ storeInfoScreenStoreAddressLocationScreenCorporateTextvk,
////											ExtentColor.CYAN));
//					//
////							Assert.assertEquals(storeInfoScreenStoreNameLocationScreenCorporateTextVk, recentlyOrderedName);
//					//
////							System.out.println(
////									" Validated that the favourite Order location store in the map view screen and API are same ");
//					//
////							favouriteStoreOD002.info(MarkupHelper.createLabel(
////									" Validated that the favourite Order location store in the map view screen and API are same ",
////									ExtentColor.CYAN));
//					//
////							favouriteStoreOD002.addScreenCaptureFromBase64String(takeScreenshot(driver),
////									" Validated that the favourite Order location store in the map view screen and API are same ");
//					//
////							commonMethods.switchContext("FLUTTER");
//					//
////							FlutterElement locationScreenMapIconButtonVk1 = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_MAP_ICON_BUTTON_VKL);
//					//
////							commonMethods.checkAndClickTheElement(locationScreenMapIconButtonVk1);
//					//
////						}
//					//
////						else {
//					//
////							System.out.println("favourite store is empty");
////						}
//					//
////						if (!recentlyOrderedName.isEmpty()) {
//					//
////							FlutterElement locationRecentlyOrderedRestaurantNameVk = find
////									.byValueKey("location_list_" + storeCode + "_title");
//					//
////							String locationRecentlyOrderedRestaurantNameTextVk = locationRecentlyOrderedRestaurantNameVk
////									.getText();
//					//
////							System.out.println(" Recently ordered restaurant name in the order now is : "
////									+ locationRecentlyOrderedRestaurantNameTextVk);
//					//
////							recentlyOrderedOD001.info(
////									MarkupHelper.createLabel(" Recently ordered restaurant name in the order now is : "
////											+ locationRecentlyOrderedRestaurantNameTextVk, ExtentColor.CYAN));
//					//
////							FlutterElement locationRecentlyOrderedRestaurantAddressLine1Vk = find
////									.byValueKey("location_list_" + storeCode + "_addressline1");
//					//
////							String locationRecentlyOrderedRestaurantAddressLineText1Vk = locationRecentlyOrderedRestaurantAddressLine1Vk
////									.getText();
//					//
////							System.out.println(" Recently ordered restaurant address line 1 in the order now is : "
////									+ locationRecentlyOrderedRestaurantAddressLineText1Vk);
//					//
////							recentlyOrderedOD001
////									.info(MarkupHelper.createLabel(
////											" Recently ordered restaurant address line 1 in the order now is : "
////													+ locationRecentlyOrderedRestaurantAddressLineText1Vk,
////											ExtentColor.CYAN));
//					//
////							FlutterElement locationRecentlyOrderedRestaurantAddressLine2Vk = find
////									.byValueKey("location_list_" + storeCode + "_addressline2");
//					//
////							String locationRecentlyOrderedRestaurantAddressLineText2Vk = locationRecentlyOrderedRestaurantAddressLine2Vk
////									.getText();
//					//
////							System.out.println(" Recently ordered restaurant address line 2 in the order now is : "
////									+ locationRecentlyOrderedRestaurantAddressLineText2Vk);
//					//
////							recentlyOrderedOD001
////									.info(MarkupHelper.createLabel(
////											" Recently ordered restaurant address line 2 in the order now is : "
////													+ locationRecentlyOrderedRestaurantAddressLineText2Vk,
////											ExtentColor.CYAN));
//					//
////							FlutterElement ODRecentlyVisitedTextVk = find
////									.byValueKey(oloLocators.OD_RECENTLY_VISITED_TEXT_VKL);
//					//
////							String ODRecentlyVisitedTextTVk = ODRecentlyVisitedTextVk.getText();
//					//
////							Assert.assertEquals(ODRecentlyVisitedTextTVk, "RECENTLY ORDERED");
//					//
////							System.out.println(" The recently ordered tag in the recently ordered restaurant tag is :  "
////									+ ODRecentlyVisitedTextTVk);
//					//
////							recentlyOrderedOD001.info(MarkupHelper
////									.createLabel(" The recently ordered tag in the recently ordered restaurant tag is :  "
////											+ ODRecentlyVisitedTextTVk, ExtentColor.CYAN));
//					//
////							Assert.assertEquals(locationRecentlyOrderedRestaurantNameTextVk,
////									recentlyOrderedName.toUpperCase());
//					//
////							System.out.println(
////									" Validated that the recently ordered location store in the order now screen and API are same ");
//					//
////							recentlyOrderedOD001.info(MarkupHelper.createLabel(
////									" Validated that the recently ordered location store in the order now screen and API are same ",
////									ExtentColor.CYAN));
//					//
////							recentlyOrderedOD001.addScreenCaptureFromBase64String(takeScreenshot(driver),
////									" Validated that the recently ordered location store in the order now screen and API are same ");
//					//
////							/**
////							 * @Class_Name OLORecentlyOrdered
////							 * @Method_Name recentlyOrdered
////							 * @Description Verifying the recently ordered store in map view screen
////							 * @TestID recentlyOrdered
////							 * @author Lalith Kishore Ravi
////							 */
//					//
////							ExtentTest recentlyOrderedOD002 = test.createNode("recentlyOrderedOD_002");
//					//
////							Thread.sleep(3000);
//					//
////							FlutterElement locationScreenMapIconButtonVk = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_MAP_ICON_BUTTON_VKL);
//					//
////							locationScreenMapIconButtonVk.click();
//					//
////							FlutterElement locationScreenBackButtonVk = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_BACK_BUTTON_VKL);
//					//
////							locationScreenBackButtonVk.click();
//					//
////							Thread.sleep(3000);
//					//
////							FlutterElement bottomBarOrderNowButton1 = find
////									.byValueKey((bottomBarNavigationLocators.BOTTOMBAR_NOTIFICATION_ORDER_NOW_BUTTON_VK));
//					//
////							bottomBarOrderNowButton1.click();
//					//
////							FlutterElement locationScreenMapIconButton1Vk = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_MAP_ICON_BUTTON_VKL);
//					//
////							locationScreenMapIconButton1Vk.click();
//					//
////							Thread.sleep(2000);
//					//
////							FlutterElement storeInfoScreenStoreNameLocationScreenCorporatevk = find
////									.byValueKey("location_info_window_title_" + storeCode);
//					//
////							String storeInfoScreenStoreNameLocationScreenCorporateTextVk = storeInfoScreenStoreNameLocationScreenCorporatevk
////									.getText();
//					//
////							System.out.println(" Recently ordered restaurant name in map view screen is : "
////									+ storeInfoScreenStoreNameLocationScreenCorporateTextVk);
//					//
////							recentlyOrderedOD002
////									.info(MarkupHelper.createLabel(
////											" Recently ordered restaurant name in map view screen is : "
////													+ storeInfoScreenStoreNameLocationScreenCorporateTextVk,
////											ExtentColor.CYAN));
//					//
////							FlutterElement storeInfoScreenStoreAddressLocationScreenCorporatevk = find
////									.byValueKey("location_info_window_address_" + storeCode);
//					//
////							String storeInfoScreenStoreAddressLocationScreenCorporateTextvk = storeInfoScreenStoreAddressLocationScreenCorporatevk
////									.getText();
//					//
////							System.out.println(" Recently ordered restaurant address in the MapView is : "
////									+ storeInfoScreenStoreAddressLocationScreenCorporateTextvk);
//					//
////							recentlyOrderedOD002
////									.info(MarkupHelper.createLabel(
////											" Recently ordered restaurant address line 1 in the MapView is : "
////													+ storeInfoScreenStoreAddressLocationScreenCorporateTextvk,
////											ExtentColor.CYAN));
//					//
////							Assert.assertEquals(storeInfoScreenStoreNameLocationScreenCorporateTextVk, recentlyOrderedName);
//					//
////							System.out.println(
////									" Validated that the recently ordered location store in the map view screen and API are same ");
//					//
////							recentlyOrderedOD002.info(MarkupHelper.createLabel(
////									" Validated that the recently ordered location store in the map view screen and API are same ",
////									ExtentColor.CYAN));
//					//
////							recentlyOrderedOD002.addScreenCaptureFromBase64String(takeScreenshot(driver),
////									" Validated that the recently ordered location store in the map view screen and API are same ");
//					//
////							commonMethods.switchContext("FLUTTER");
//					//
////							FlutterElement locationScreenMapIconButtonVk1 = find
////									.byValueKey(oloLocators.OD_LOCATION_SCREEN_MAP_ICON_BUTTON_VKL);
//					//
////							commonMethods.checkAndClickTheElement(locationScreenMapIconButtonVk1);
//					//
////						}
//					//
////						else {
//					//
////							System.out.println(" There is no recent order available and hence it might be a new user ");
//					//
////							recentlyOrderedOD001.info(MarkupHelper.createLabel(
////									" There is no recent order available and hence it might be a new user ",
////									ExtentColor.CYAN));
//					//
////							recentlyOrderedOD001.addScreenCaptureFromBase64String(takeScreenshot(driver),
////									" There is no recent order available and hence it might be a new user ");
//					//
////						}
//					//
//				}
//
//				/**
//				 * @Class_Name Location
//				 * @Method_Name nextGenOrderNowFlowWithLocationOffLoggedIn
//				 * @Description Ensure that user navigated to dashboard screen while tapping the
//				 *              backicon in the ordernow screen.
//				 * @TestID nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//				 * @author Ganeshkumarselvaraj
//				 */
//
//				try {
//
//					commonMethods.switchContext("NATIVE_APP");
//
//					Thread.sleep(3000);
//
//					// Define your XPath locator for the target element
//					By targetElementLocator3 = By.xpath(
//							"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
//									+ "'" + desiredStoreName + "'" + ")]");
//
//					// Set maximum number of scroll attempts
//					int maxScrollAttempts3 = 10;
//
//					// Loop to attempt finding the element and scrolling
//					for (int j1 = 0; j1 <= maxScrollAttempts3; j1++) {
//						try {
//							// Try to find the element
//							WebElement element = driver.findElement(targetElementLocator3);
//							if (element.isDisplayed()) {
//								// Element found and displayed, perform actions
//								element.click();
//
//								System.out.println(" successfully found the store in the Order Now screen ");
//
//								nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
//										"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Desired store is displayed in the OrderNow ",
//										ExtentColor.CYAN));
//
//								break;
//							}
//						} catch (Exception e) {
//							// Element not found, perform scroll action
//
//							TouchAction touchAction1 = new TouchAction(driver);
//							touchAction1.press(PointOption.point(500, 1900))
//									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
//									.moveTo(PointOption.point(500, 550)).release().perform();
//
//							System.out.println(" Store not found in the : " + j1
//									+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
//									+ maxScrollAttempts3);
//
//							nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
//									"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Desired store is not displayed in the order now screen in the : "
//											+ j1
//											+ " : scroll attempt made in the UI in the given maximum scroll attempts of : "
//											+ "										+ maxScrollAttempts3 ",
//									ExtentColor.CYAN));
//						}
//					}
//
//					// To verify the Configured order type.
//
//					if (takeoutResponse.equalsIgnoreCase("true")) {
//
//						if (!takeoutResponseLabelText.isEmpty()) {
//
//							try {
//
//								commonMethods.switchContext("NATIVE_APP");
//
//								Thread.sleep(6000);
//
//								WebElement takeoutText = driver
//										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));
//								commonMethods.switchContext("FLUTTER");
//
//								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);
//
//								takeoutOrderTypeText = takeoutText1.getText();
//
//								boolean equalsIgnoreCase = takeoutResponseLabelText
//										.equalsIgnoreCase(takeoutOrderTypeText);
//
//								if (equalsIgnoreCase == true) {
//
//									commonMethods.switchContext("NATIVE_APP");
//
//									takeoutText.click();
//
//									nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
//											"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
//													+ takeoutOrderTypeText + " " + " response text is : "
//													+ takeoutResponseLabelText + " matching.",
//											ExtentColor.CYAN));
//
//									// Text matches
//
//								} else {
//
//									commonMethods.switchContext("NATIVE_APP");
//
//									Thread.sleep(6000);
//
//									takeoutText.click();
//
//									nextGenOrderNowFlowWithTakeoutAsapConfigured_003.fail(MarkupHelper.createLabel(
//											"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
//													+ takeoutOrderTypeText + " response text is : "
//													+ takeoutResponseLabelText + "  not matching.",
//											ExtentColor.CYAN));
//
//								}
//
//								if (asapOrder.equalsIgnoreCase("false")) {
//
//									try {
//
//										commonMethods.switchContext("NATIVE_APP");
//
//										Thread.sleep(6000);
//
//										WebElement asapLabel = driver.findElement(
//												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));
//
//										commonMethods.switchContext("FLUTTER");
//
//										FlutterElement asapLabel1 = find
//												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);
//
//										asapOrderTimeText = asapLabel1.getText();
//
//										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);
//
//										if (asapLabelComparison == true) {
//
//											asapLabel1.click();
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.addScreenCaptureFromBase64String(takeScreenshot(driver),
//															"Verfied that alert appears");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
//																	+ asapText + "Asap config text : "
//																	+ asapOrderTimeText + "matching",
//															ExtentColor.CYAN));
//
//											commonMethods.switchContext("NATIVE_APP");
//											Thread.sleep(3000);
//
//											// MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText);
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);
//											Thread.sleep(3000);
//											commonMethods.switchContext("FLUTTER");
//											Thread.sleep(5000);
//											FlutterElement addMoreItemsButton = find
//													.byValueKey(basketLocators.BASKET_ADD_MORE_ITEMS_TEXT_VK);
//											String text = addMoreItemsButton.getText();
//											System.out.println(text);
//											addMoreItemsButton.click();
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//											Thread.sleep(6000);
//
//											Rewards.basketRewards(orderId);
//											Thread.sleep(6000);
//
//											// Basket.ngaBasket(takeoutOrderTypeText, asapOrderTimeText, orderId);
//
//											//
////												Coupon.ngaCoupon(orderId);
//											//
////												Basket.deleteItem(orderId);
//
//											Thread.sleep(6000);
//										} else {
//
//											commonMethods.switchContext("NATIVE_APP");
//
//											Thread.sleep(6000);
//
//											// To fail that ASAP label text is not matching
//
//											asapLabel.click();
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.addScreenCaptureFromBase64String(takeScreenshot(driver),
//															"Verfied that alert appears");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.fail(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
//																	+ asapText + "Asap config text : "
//																	+ asapOrderTimeText + " not matching",
//															ExtentColor.CYAN));
//
//											commonMethods.switchContext("NATIVE_APP");
//											Thread.sleep(3000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);
//											Thread.sleep(3000);
//											commonMethods.switchContext("FLUTTER");
//											Thread.sleep(5000);
//											FlutterElement addMoreItemsButton = find
//													.byValueKey(basketLocators.BASKET_ADD_MORE_ITEMS_TEXT_VK);
//											String text = addMoreItemsButton.getText();
//											System.out.println(text);
//											addMoreItemsButton.click();
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//											Thread.sleep(6000);
//
//											Rewards.basketRewards(orderId);
//											Thread.sleep(6000);
//
//										}
//
//									} catch (Exception e) {
//
//										try {
//
//											commonMethods.switchContext("NATIVE_APP");
//											Thread.sleep(5000);
//
//											WebElement cancelButton = driver.findElement(
//													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));
//
//											cancelButton.click();
//
//											System.out.println(
//													"ASAP is not displayed where as ASAP is configured on the back end ");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.fail(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
//															ExtentColor.CYAN));
//
//										} catch (Exception e1) {
//											// TODO: handle exception
//
//											System.out.println(
//													" ASAP is only displayed where as ASAP is only configured on the back end ");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
//															ExtentColor.CYAN));
//
//											commonMethods.switchContext("NATIVE_APP");
//
//											Thread.sleep(5000);
//
//											// MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText);
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);
//											Thread.sleep(3000);
//											commonMethods.switchContext("FLUTTER");
//											Thread.sleep(5000);
//											FlutterElement addMoreItemsButton = find
//													.byValueKey(basketLocators.BASKET_ADD_MORE_ITEMS_TEXT_VK);
//											String text = addMoreItemsButton.getText();
//											System.out.println(text);
//											addMoreItemsButton.click();
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//											Thread.sleep(6000);
//
//											Rewards.basketRewards(orderId);
//										}
//
//									}
//
//								} else {
//
//									commonMethods.switchContext("NATIVE_APP");
//
//									try {
//
//										Thread.sleep(6000);
//
//										WebElement asapLabel = driver.findElement(
//												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));
//
//										if (asapLabel.isDisplayed()) {
//											// To fail the test case.
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.addScreenCaptureFromBase64String(takeScreenshot(driver),
//															"Verfied that Asap is displayed in the screen.");
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.fail(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
//															ExtentColor.CYAN));
//
//											commonMethods.switchContext("FLUTTER");
//
//											FlutterElement closeIcon = find
//													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);
//
//											closeIcon.click();
//
//											///////////// close icon when would you like your order //////////
//
//										}
//
//									} catch (Exception e) {
//
//										try {
//
//											commonMethods.switchContext("NATIVE_APP");
//
//											WebElement cancelButton = driver.findElement(
//													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));
//
//											cancelButton.click();
//
//											System.out.println(
//													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
//															ExtentColor.CYAN));
//
//										} catch (Exception e1) {
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
//															ExtentColor.CYAN));
//
//										}
//
//									}
//
//								}
//
//							} catch (Exception E) {
//
//								if (asapOrder.equalsIgnoreCase("false")) {
//
//									try {
//
//										commonMethods.switchContext("NATIVE_APP");
//
//										Thread.sleep(6000);
//
//										WebElement asapLabel = driver.findElement(
//												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));
//
//										commonMethods.switchContext("FLUTTER");
//
//										FlutterElement asapLabel1 = find
//												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);
//
//										asapOrderTimeText = asapLabel1.getText();
//
//										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);
//
//										if (asapLabelComparison == true) {
//
//											asapLabel1.click();
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.addScreenCaptureFromBase64String(takeScreenshot(driver),
//															"Verfied that alert appears");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
//																	+ asapText + "Asap config text : "
//																	+ asapOrderTimeText + "matching",
//															ExtentColor.CYAN));
//
//											commonMethods.switchContext("NATIVE_APP");
//											Thread.sleep(3000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);
//											Thread.sleep(3000);
//											commonMethods.switchContext("FLUTTER");
//											Thread.sleep(5000);
//											FlutterElement addMoreItemsButton = find
//													.byValueKey(basketLocators.BASKET_ADD_MORE_ITEMS_TEXT_VK);
//											String text = addMoreItemsButton.getText();
//											System.out.println(text);
//											addMoreItemsButton.click();
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//											Thread.sleep(6000);
//
//											Rewards.basketRewards(orderId);
//
//											Thread.sleep(6000);
//										} else {
//
//											commonMethods.switchContext("NATIVE_APP");
//
//											Thread.sleep(6000);
//
//											// To fail that ASAP label text is not matching
//
//											asapLabel.click();
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.addScreenCaptureFromBase64String(takeScreenshot(driver),
//															"Verfied that alert appears");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.fail(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
//																	+ asapText + "Asap config text : "
//																	+ asapOrderTimeText + " not matching",
//															ExtentColor.CYAN));
//
//											commonMethods.switchContext("NATIVE_APP");
//											Thread.sleep(3000);
//
//											// MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);
//											Thread.sleep(3000);
//											commonMethods.switchContext("FLUTTER");
//											Thread.sleep(5000);
//											FlutterElement addMoreItemsButton = find
//													.byValueKey(basketLocators.BASKET_ADD_MORE_ITEMS_TEXT_VK);
//											String text = addMoreItemsButton.getText();
//											System.out.println(text);
//											addMoreItemsButton.click();
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//											Thread.sleep(6000);
//
//											Rewards.basketRewards(orderId);
//
//										}
//
//									} catch (Exception e) {
//
//										try {
//
//											commonMethods.switchContext("NATIVE_APP");
//
//											WebElement cancelButton = driver.findElement(
//													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));
//
//											cancelButton.click();
//
//											System.out.println(
//													"ASAP is not displayed where as ASAP is configured on the back end ");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.fail(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
//															ExtentColor.CYAN));
//
//										} catch (Exception e1) {
//
//											System.out.println(
//													" ASAP is only displayed where as ASAP is only configured on the back end ");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
//															ExtentColor.CYAN));
//
//											commonMethods.switchContext("NATIVE_APP");
//
//											Thread.sleep(5000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);
//											Thread.sleep(3000);
//											commonMethods.switchContext("FLUTTER");
//											Thread.sleep(5000);
//											FlutterElement addMoreItemsButton = find
//													.byValueKey(basketLocators.BASKET_ADD_MORE_ITEMS_TEXT_VK);
//											String text = addMoreItemsButton.getText();
//											System.out.println(text);
//											addMoreItemsButton.click();
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//											Thread.sleep(6000);
//
//											Rewards.basketRewards(orderId);
//
//										}
//
//									}
//
//								} else {
//
//									commonMethods.switchContext("NATIVE_APP");
//
//									try {
//
//										Thread.sleep(6000);
//
//										WebElement asapLabel = driver.findElement(
//												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));
//
//										if (asapLabel.isDisplayed()) {
//
//											// To fail the test case.
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.addScreenCaptureFromBase64String(takeScreenshot(driver),
//															"Verfied that Asap is displayed in the screen.");
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.fail(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
//															ExtentColor.CYAN));
//
//											commonMethods.switchContext("FLUTTER");
//
//											FlutterElement closeIcon = find
//													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);
//
//											closeIcon.click();
//
//											///////////// close icon when would you like your order //////////
//
//										}
//
//									} catch (Exception e) {
//
//										try {
//
//											commonMethods.switchContext("NATIVE_APP");
//
//											WebElement cancelButton = driver.findElement(
//													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));
//
//											cancelButton.click();
//
//											System.out.println(
//													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
//															ExtentColor.CYAN));
//
//										} catch (Exception e1) {
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
//															ExtentColor.CYAN));
//
//										}
//
//									}
//
//								}
//							}
//
//						} else {
//
//							try {
//
//								commonMethods.switchContext("NATIVE_APP");
//
//								Thread.sleep(6000);
//
//								WebElement takeoutText = driver
//										.findElement(By.xpath(orderNowLocators.ORDER_TYPE_POPUP_TAKEEOUT_TEXT_XPATHL));
//
//								commonMethods.switchContext("FLUTTER");
//
//								FlutterElement takeoutText1 = find.byValueKey(orderNowLocators.ORDERTYPE_TAKEOUT_VKL);
//
//								takeoutOrderTypeText = takeoutText1.getText();
//
//								boolean equalsIgnoreCase = localConfigTakeoutText
//										.equalsIgnoreCase(takeoutOrderTypeText);
//
//								if (equalsIgnoreCase == true) {
//
//									commonMethods.switchContext("NATIVE_APP");
//
//									takeoutText.click();
//
//									nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
//											"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
//													+ takeoutOrderTypeText + " response text is : "
//													+ localConfigTakeoutText + " matching.",
//											ExtentColor.CYAN));
//
//									// Text matches
//
//								} else {
//
//									commonMethods.switchContext("NATIVE_APP");
//
//									takeoutText.click();
//
//									nextGenOrderNowFlowWithTakeoutAsapConfigured_003.fail(MarkupHelper.createLabel(
//											"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Takeout is displayed in the order type popup and displayed texts is "
//													+ takeoutOrderTypeText + " response text is : "
//													+ localConfigTakeoutText + " not matching.",
//											ExtentColor.CYAN));
//
//									// text mismatches
//
//								}
//
//								if (asapOrder.equalsIgnoreCase("false")) {
//
//									try {
//
//										commonMethods.switchContext("NATIVE_APP");
//
//										Thread.sleep(6000);
//
//										WebElement asapLabel = driver.findElement(
//												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));
//
//										commonMethods.switchContext("FLUTTER");
//
//										FlutterElement asapLabel1 = find
//												.byValueKey(orderNowLocators.ORDER_ASAP_TEXT_VKL);
//
//										asapOrderTimeText = asapLabel1.getText();
//
//										boolean asapLabelComparison = asapText.equalsIgnoreCase(asapOrderTimeText);
//
//										if (asapLabelComparison == true) {
//
//											asapLabel1.click();
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.addScreenCaptureFromBase64String(takeScreenshot(driver),
//															"Verfied that alert appears");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
//																	+ asapText + "Asap config text : "
//																	+ asapOrderTimeText + "matching",
//															ExtentColor.CYAN));
//
//											commonMethods.switchContext("NATIVE_APP");
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);
//											Thread.sleep(3000);
//											commonMethods.switchContext("FLUTTER");
//											Thread.sleep(5000);
//											FlutterElement addMoreItemsButton = find
//													.byValueKey(basketLocators.BASKET_ADD_MORE_ITEMS_TEXT_VK);
//											String text = addMoreItemsButton.getText();
//											System.out.println(text);
//											addMoreItemsButton.click();
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//											Thread.sleep(6000);
//
//											Rewards.basketRewards(orderId);
//										} else {
//
//											commonMethods.switchContext("NATIVE_APP");
//
//											Thread.sleep(6000);
//
//											// To fail that ASAP label text is not matching
//
//											asapLabel.click();
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.addScreenCaptureFromBase64String(takeScreenshot(driver),
//															"Verfied that alert appears");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.fail(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that Alert appears when user taps the ASAP button and the Asap actual text :"
//																	+ asapText + "Asap config text : "
//																	+ asapOrderTimeText + " not matching",
//															ExtentColor.CYAN));
//
//											commonMethods.switchContext("NATIVE_APP");
//											Thread.sleep(3000);
//
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);
//											Thread.sleep(3000);
//											commonMethods.switchContext("FLUTTER");
//											Thread.sleep(5000);
//											FlutterElement addMoreItemsButton = find
//													.byValueKey(basketLocators.BASKET_ADD_MORE_ITEMS_TEXT_VK);
//											String text = addMoreItemsButton.getText();
//											System.out.println(text);
//											addMoreItemsButton.click();
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//											Thread.sleep(6000);
//
//											Rewards.basketRewards(orderId);
//
//										}
//
//									} catch (Exception e) {
//
//										try {
//
//											commonMethods.switchContext("NATIVE_APP");
//
//											WebElement cancelButton = driver.findElement(
//													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));
//
//											cancelButton.click();
//
//											System.out.println(
//													"ASAP is not displayed where as ASAP is configured on the back end ");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.fail(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is not displayed where as ASAP is configured on the back end ",
//															ExtentColor.CYAN));
//
//										} catch (Exception e1) {
//											// TODO: handle exception
//
//											System.out.println(
//													" ASAP is only displayed where as ASAP is only configured on the back end ");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ASAP is only displayed where as ASAP is only configured on the back end  ",
//															ExtentColor.CYAN));
//
//											commonMethods.switchContext("NATIVE_APP");
//
//											Thread.sleep(5000);
//
//											// MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText);
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 0, 1, orderId);
//											Thread.sleep(3000);
//											commonMethods.switchContext("FLUTTER");
//											Thread.sleep(5000);
//											FlutterElement addMoreItemsButton = find
//													.byValueKey(basketLocators.BASKET_ADD_MORE_ITEMS_TEXT_VK);
//											String text = addMoreItemsButton.getText();
//											System.out.println(text);
//											addMoreItemsButton.click();
//											MenuApi.menuApi(takeoutOrderTypeText, asapOrderTimeText, 1, 2, orderId);
//											Thread.sleep(6000);
//
//											Rewards.basketRewards(orderId);
//
//										}
//
//									}
//
//								} else {
//
//									commonMethods.switchContext("NATIVE_APP");
//
//									try {
//
//										Thread.sleep(6000);
//
//										WebElement asapLabel = driver.findElement(
//												By.xpath(orderNowLocators.ORDER_NOW_LOGGEDIN_ASAP_TEXT_XPATHL));
//
//										if (asapLabel.isDisplayed()) {
//											// To fail the test case.
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.addScreenCaptureFromBase64String(takeScreenshot(driver),
//															"Verfied that Asap is displayed in the screen.");
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.fail(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is displayed in the screen where asap is not configured in the back end",
//															ExtentColor.CYAN));
//
//											commonMethods.switchContext("FLUTTER");
//
//											FlutterElement closeIcon = find
//													.byValueKey(orderNowLocators.ORDERTYPE_CLOSE_ICON_VKL);
//
//											closeIcon.click();
//
//											///////////// close icon when would you like your order //////////
//
//										}
//
//									} catch (Exception e) {
//
//										try {
//
//											commonMethods.switchContext("NATIVE_APP");
//
//											WebElement cancelButton = driver.findElement(
//													By.xpath(orderNowLocators.ORDER_NOW_CANCEL_TEXT_XPATHL));
//
//											cancelButton.click();
//
//											System.out.println(
//													"ASAP is not displayed where as ASAP is not configured on the back end but later is configured");
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that later is only configured and asap label is not displayed in the screen where asap is not configured in the back end",
//															ExtentColor.CYAN));
//
//										} catch (Exception e1) {
//
//											nextGenOrderNowFlowWithTakeoutAsapConfigured_003
//													.info(MarkupHelper.createLabel(
//															"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that asap label is not displayed in the screen where asap is not configured in the back end",
//															ExtentColor.CYAN));
//
//										}
//
//									}
//
//								}
//
//							} catch (Exception e) {
//
//								nextGenOrderNowFlowWithTakeoutAsapConfigured_003.fail(MarkupHelper.createLabel(
//										"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is configured in the back end.",
//										ExtentColor.CYAN));
//							}
//
//						}
//
//					} else {
//
//						// take out asap is not configured.
//						nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
//								"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that takeout lable is not displayed in the screen where as takeout is not configured in the back end.",
//								ExtentColor.CYAN));
//
//					}
//
//				} catch (Exception e) {
//
//					nextGenOrderNowFlowWithTakeoutAsapConfigured_003.info(MarkupHelper.createLabel(
//							"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that desired store is not found in the screen.",
//							ExtentColor.CYAN));
//
//					System.out.println("Store Not found or store not listed");
//
//				}
//
//			}
//		} catch (Exception e) {
//
//			nextGenOrderNowFlowWithTakeoutAsapConfigured_003.fail(MarkupHelper.createLabel(
//					"nextGenOrderNowFlowWithTakeoutAsapConfigured_003 - Verified that ordernow is not displayed in the bottom bar where as order now is configured in the bottombar",
//					ExtentColor.CYAN));
//		}
//
//	}

}
