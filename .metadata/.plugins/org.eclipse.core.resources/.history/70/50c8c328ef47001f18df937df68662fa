package com.features;

import java.io.IOException;
import java.security.GeneralSecurityException;
import java.time.Duration;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.concurrent.TimeUnit;

import org.json.JSONArray;
import org.json.JSONObject;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.base.BaseClass;
import com.base.CommonMethods;
import com.locators.BasketLocators;
import com.locators.CrossSellLocators;
import com.locators.MenuScreenLocators;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;
import io.github.ashwith.flutter.FlutterElement;
import io.github.ashwith.flutter.FlutterFinder;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;
import io.appium.java_client.TouchAction;
import io.appium.java_client.ios.IOSTouchAction;

/**
 * @Class_Name ItemList
 * @Description Contains code to execute the Item List
 * 
 * @author Lalith Kishore Ravi
 */
public class ItemList extends BaseClass {

	static CommonMethods commonMethods = new CommonMethods();

	static BasketLocators basketLocators = new BasketLocators();

	static MenuScreenLocators menuScreenLocators = new MenuScreenLocators();

	static long optJSONArrayOptionGroupsObjectMax;

	static JSONArray optJSONArrayOptionGroupsObjectSizeConditions;

	static String specialInstructionsEnabled;

	static String specialInstructionsNotesLimit;

	static String specialInstructionsEnabledSubString;

	static String specialInstructionsNotesLabel;

	static ArrayList<String> levelsList = new ArrayList<>();

	static Map<String, Integer> MultiOptions = new HashMap<>();

	static ArrayList<String> formParamsList = new ArrayList<>();

	static Map<String, String> formParams = new HashMap<>();

	static JSONObject replaceColonsWithEquals;

	static String screenTitleText;

	static CrossSellLocators crossSellLocators = new CrossSellLocators();

	/**
	 * @Class_Name ItemList
	 * @Method_Name itemList
	 * @Description Contains code to execute the test scripts for Item List
	 * @return void
	 * @author Lalith Kishore Ravi
	 * @throws Exception
	 */

	@Test
	public static void itemList(String orderId, String subMenuScreenTitleTextVk)
			throws Exception {

		BaseClass bc = new BaseClass();

		List<String> givenStringCode = bc.appConfiguration();

		String storeCode = givenStringCode.get(13);

		String merchantId = givenStringCode.get(8);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "/menu/tier?";
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");

		paramsMenu.put("include_combo", "true");
		paramsMenu.put("merchant_id", merchantId);
		paramsMenu.put("provider", "px");
//		paramsMenu.put("order_date", "11-01-2024");
//		paramsMenu.put("eta", "5.00 am");

		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();
		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");

		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

		JSONArray optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Lalith Kishore Ravi").assignDevice("iPhone 14 Pro")
				.assignCategory("Item List");

		FlutterFinder find = new FlutterFinder(driver);

		ExtentTest nextGenItemList001 = test.createNode("nextGenItemList_001");

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?";
		Map<String, String> paramsRestaurant = new HashMap<>();
		paramsRestaurant.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

		RequestSpecification httpRequestRestaurant = io.restassured.RestAssured.given();

		RequestSpecification responseBodyRestaurant = httpRequestRestaurant.queryParams(paramsRestaurant);

		Response responseRestaurant = responseBodyRestaurant.get("");

		JSONObject jObjectRestaurant = new JSONObject(responseRestaurant.body().asString());

		specialInstructionsEnabled = jObjectRestaurant.optString("allow_notes");

		specialInstructionsNotesLabel = jObjectRestaurant.optString("notes_label");

		specialInstructionsEnabledSubString = specialInstructionsNotesLabel.substring(0, 3).toLowerCase();

		specialInstructionsNotesLimit = jObjectRestaurant.optString("notes_limit");

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1000);

		FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

		String menuScreenTitleTextVk = menuScreenTitleVk.getText();

		if (menuScreenTitleTextVk.length() > 22) {

			screenTitleText = menuScreenTitleTextVk.substring(0, 20);
		}

		else if (menuScreenTitleTextVk.length() < 22) {

			screenTitleText = menuScreenTitleTextVk;

		}

		System.out.println("the title " + screenTitleText);

		for (int t = 0; t < optJSONArrayMenu.length(); t++) {

			JSONObject menuItem = optJSONArrayMenu.getJSONObject(t);

			String name = menuItem.optString("name");

			String canOrder = menuItem.optString("can_order");

			System.out.println(" the name : " + name);

			JSONArray itemsArray = menuItem.getJSONArray("items");

			formParamsList.clear();

			JSONObject item = itemsArray.getJSONObject(0);

			String itemName = item.optString("name");

			String active = item.optString("active");

			int parseInt = Integer.parseInt(active);

			System.out.println(itemName);

			if (canOrder == "true" && parseInt == 1) {

				String id = item.optString("id");

				String idParam = "id=" + id;

				formParamsList.add(idParam);

				String itemNameReplace = itemName.replace(" ", "_").toLowerCase();

				if (itemName.equals(screenTitleText)) {

					JSONArray prices = item.getJSONArray("prices");

					if (prices.length() > 1) {

						commonMethods.scrollUp();

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(1000);

						FlutterElement optionGroupObjectNameSelectedOptionsVk = find
								.byValueKey(itemNameReplace + "_size_selected_options");

						String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
								.getText();

						String trimmedOption = optionGroupObjectNameSelectedOptionsTextVk.trim();

						if (!trimmedOption.isEmpty()) {

							String size = "size=" + optionGroupObjectNameSelectedOptionsTextVk;

							formParamsList.add(size);

						} else {

							System.out.println(" Size array name is lesser than 1 ");

							String size = "size=";

							formParamsList.add(size);

						}
					}

					JSONArray optionGroupsArray = item.getJSONArray("option_groups");

					MultiOptions.clear();

					for (int j = 0; j < optionGroupsArray.length(); j++) {

						JSONObject optionGroup = optionGroupsArray.getJSONObject(j);

						for (int m = 0; m < optionGroupsArray.length(); m++) {

							JSONObject optionGroup1 = optionGroupsArray.getJSONObject(m);

							JSONArray optJSONArray = optionGroup1.optJSONArray("options");

							for (int k = 0; k < optJSONArray.length(); k++) {

								JSONObject optJSONObject = optJSONArray.optJSONObject(k);

								String optString = optJSONObject.optString("name");

								MultiOptions.put(optString, k);

							}

						}

						String optionGroupName = optionGroup.optString("name");

						String optionGroupNameReplace = optionGroupName.replace(" ", "_").toLowerCase();

						String quantities = optionGroup.optString("quantities");

						String multiSelect = optionGroup.optString("multiselect");

						commonMethods.switchContext("NATIVE_APP");

						Thread.sleep(1500);

						IOSTouchAction IOSTouchAction4 = new IOSTouchAction(driver);
						IOSTouchAction4.press(PointOption.point(150, 550))
								.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
								.moveTo(PointOption.point(150, 650)).release().perform();

						By targetElementLocator = By.xpath(
								"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
										+ "'" + optionGroupName.toLowerCase() + "'" + ")]");

						boolean elementFound = false;

						while (!elementFound) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(1500);

								WebElement element = driver.findElement(targetElementLocator);

								if (element.isDisplayed()) {

									IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
									IOSTouchAction.press(PointOption.point(150, 650))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
											.moveTo(PointOption.point(150, 550)).release().perform();

									String elementName = element.getText();

									if (elementName.contains(optionGroupName)) {

										if (quantities == "true") {

											// have to give increment decrement logic

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(1500);

											FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace + "_"
													+ optionGroupNameReplace + "_selected_options");

											String selectedOptionsTextVk = selectedOptionsVk.getText();

											if (selectedOptionsTextVk.contains(",")) {
												String[] split = selectedOptionsTextVk.split(",");
												for (int i2 = 0; i2 < split.length; i2++) {
													String trimmedOption2 = split[i2].trim();
													if (!trimmedOption2.isEmpty()) {
														String optionKey = "options[" + optionGroupName + "]["
																+ trimmedOption2 + "]";
														formParamsList.add(optionKey);
													}
												}
											}

										} else if (quantities == "false") {

											if (multiSelect == "true") {

												System.out.println(" It's a multi selection field checkbox ");

												// have to give the multiple check box logic

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(1500);

												FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace + "_"
														+ optionGroupNameReplace + "_selected_options");

												String selectedOptionsTextVk = selectedOptionsVk.getText();

												if (selectedOptionsTextVk.contains(",")) {
													String[] split = selectedOptionsTextVk.split(",");
													for (int i2 = 0; i2 < split.length; i2++) {
														String trimmedOptions = split[i2].trim();
														if (!trimmedOptions.isEmpty()) {

															if (optionGroup.has("option_levels")) {

																JSONObject optionLevels = optionGroup
																		.optJSONObject("option_levels");

																JSONArray levels = optionLevels.optJSONArray("levels");

																if (levels != null) {

																	for (int b = 0; b < levels.length(); b++) {

																		JSONObject jsonObjectLevelss = levels
																				.optJSONObject(b);

																		String previousLevelName = null;

																		if (jsonObjectLevelss.has("is_default")
																				&& jsonObjectLevelss
																						.getBoolean("is_default")) {
																			break;
																		}

																		previousLevelName = jsonObjectLevelss
																				.optString("name");

																		String optionKey = "option_levels["
																				+ optionGroupName + "]["
																				+ trimmedOptions + "][]="
																				+ previousLevelName;

																		formParamsList.add(optionKey);

																		String optionKey1 = "options[" + optionGroupName
																				+ "]["
																				+ MultiOptions.get(trimmedOptions)
																				+ "]=" + trimmedOptions;

																		formParamsList.add(optionKey1);

																	}

																} else {

																	System.out.println(
																			" levels is null for the option levels : ");

																}

															} else {
																String optionKey = "options[" + optionGroupName + "]["
																		+ MultiOptions.get(trimmedOptions) + "]="
																		+ trimmedOptions;

																formParamsList.add(optionKey);

															}

														}
													}

												}

											} else if (multiSelect == "false") {

												// have to give the single check box logic

												System.out.println(" It's a single selection field checkbox ");

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(1500);

												FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace + "_"
														+ optionGroupNameReplace + "_selected_options");

												String selectedOptionsTextVk = selectedOptionsVk.getText();

												String trimmedOptionSingle = selectedOptionsTextVk.trim();

												if (!trimmedOptionSingle.isEmpty()) {

													if (optionGroup.has("option_levels")) {

														JSONObject optionLevels = optionGroup
																.optJSONObject("option_levels");

														JSONArray levels = optionLevels.optJSONArray("levels");

														if (levels != null) {

															for (int b = 0; b < levels.length(); b++) {

																JSONObject jsonObjectLevelss = levels.optJSONObject(b);

																String previousLevelName = null;

																if (jsonObjectLevelss.has("is_default")
																		&& jsonObjectLevelss.getBoolean("is_default")) {
																	break;
																}

																previousLevelName = jsonObjectLevelss.optString("name");

																String optionKey = "option_levels[" + optionGroupName
																		+ "][" + trimmedOptionSingle + "][]:"
																		+ previousLevelName;

																formParamsList.add(optionKey);

																String optionKey1 = "options[" + optionGroupName + "]["
																		+ MultiOptions.get(trimmedOptionSingle) + "]="
																		+ trimmedOptionSingle;

																formParamsList.add(optionKey1);

															}

														} else {

															System.out.println(
																	" levels is null for the option levels : ");

														}

													} else {

														String optionKey = "options[" + optionGroupName + "][]="
																+ trimmedOptionSingle;

														formParamsList.add(optionKey);
//															System.out.println("the scond item" +formParamsList.add(optionKey));

													}
												}

											}

										}

									}
									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(1500);

									try {
										elementFound = true;

									} catch (Exception clickException) {
										IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
										IOSTouchAction1.press(PointOption.point(150, 650))
												.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
												.moveTo(PointOption.point(150, 550)).release().perform();

									}

								} else {
									IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
									IOSTouchAction1.press(PointOption.point(150, 650))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
											.moveTo(PointOption.point(150, 550)).release().perform();
								}
							} catch (NoSuchElementException e2) {
								IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
								IOSTouchAction1.press(PointOption.point(150, 650))
										.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
										.moveTo(PointOption.point(150, 550)).release().perform();
							}

						}

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(1200);

						commonMethods.scrollOptionsGroupUpAndClick(optionGroupName);

					}

					if (specialInstructionsEnabled == "true") {

						System.out.println(" Special Instructions enabled in item list ");

//						scrollOptionsGroupDown(specialInstructionsEnabledSubString);

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(1500);

						FlutterElement itemQuantitySpecialInstructionsTitleVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TITLE_VK);

						String itemQuantitySpecialInstructionsTitleTextVk = itemQuantitySpecialInstructionsTitleVk
								.getText();

						String numericOnly = itemQuantitySpecialInstructionsTitleTextVk.replaceAll("[^0-9]", "");

						int parseLong = Integer.parseInt(numericOnly);

						FlutterElement itemQuantitySpecialInstructionsTextFieldVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TEXT_FIELD_VK);

						String testText = "This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field,This is a text which is to find the length of the special instructions text field ";

						itemQuantitySpecialInstructionsTextFieldVk.sendKeys(testText);

						String substring = testText.substring(0, parseLong);

						String notes = "notes=";

						String finalString = notes + substring;

						formParamsList.add(finalString);

						FlutterElement itemQuantityScreenQuantityCountVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

						String itemQuantityScreenQuantityCountTextVk = itemQuantityScreenQuantityCountVk.getText();

						int itemQuantityScreenQuantityCountIntVk = Integer
								.parseInt(itemQuantityScreenQuantityCountTextVk);

						String quantity = "quantity=" + itemQuantityScreenQuantityCountIntVk;

						formParamsList.add(quantity);

					}

					else {

						String string = "notes=";

						String emptyString = "";

						String finalString = string + emptyString;
						System.out.println(formParamsList.add(finalString));

						formParamsList.add(finalString);

						FlutterElement itemQuantityScreenQuantityCountVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

						String itemQuantityScreenQuantityCountTextVk = itemQuantityScreenQuantityCountVk.getText();

						int itemQuantityScreenQuantityCountIntVk = Integer
								.parseInt(itemQuantityScreenQuantityCountTextVk);

						String quantity = "quantity=" + itemQuantityScreenQuantityCountIntVk;

						formParamsList.add(quantity);
					}

					JSONObject jsonObject = convertListToJsonObject(formParamsList);

					replaceColonsWithEquals = replaceColonsWithEquals(jsonObject);
					
					
					if (t % 2 != 0) {

						FlutterElement buyNowButtonVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_BUY_NOW_BUTTON_VK);

						String buyNowButtonTextVk = buyNowButtonVk.getText();

						buyNowButtonVk.click();

						commonMethods.crossSellPopUpBottomSheetClose();

						String basketHeaderTitleText = commonMethods.stringsReader(basketLocators.BASKET_HEADER_TITLE);

						nextGenItemList001.info(MarkupHelper.createLabel(" Validated that after tapping the : "
								+ buyNowButtonTextVk + " button, it navigates to the basket screen with the title : "
								+ basketHeaderTitleText, ExtentColor.CYAN));

						Thread.sleep(4000);

						find.byValueKey(basketLocators.BASKET_SCREEN_BACK_ICON_VKL).click();

						Thread.sleep(2000);

						FlutterElement menuScreenTitle1Vk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

						String menuScreenTitleText1Vk = menuScreenTitle1Vk.getText();

						nextGenItemList001.info(MarkupHelper.createLabel(
								" Validated that after tapping the basket screen back icon, it navigates to the menu screen with the title : "
										+ menuScreenTitleText1Vk,
								ExtentColor.CYAN));

						System.out.println(
								" Validated that after tapping the basket screen back icon, it navigates to the menu screen with the title : "
										+ menuScreenTitleText1Vk);

					} else {

						FlutterElement addToBasketButtonVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ADD_TO_BASKET_BUTTON_VK);

						String addToBasketButtonTextVk = addToBasketButtonVk.getText();

						addToBasketButtonVk.click();

						boolean crossSells = commonMethods.features("cross_sells");

						if (crossSells == true) {
							
							CrossSell.ngaCrossSell(subMenuScreenTitleTextVk);
						}
						else {
							
						commonMethods.crossSellPopUpBottomSheetClose();
						
						}

						FlutterElement menuScreenTitle1Vk = find.byValueKey(menuScreenLocators.MENU_SCREEN_TITLE_VK);

						String menuScreenTitleText1Vk = menuScreenTitle1Vk.getText();

						nextGenItemList001.info(MarkupHelper.createLabel(" Validated that after tapping the "
								+ addToBasketButtonTextVk + " button, it navigates to the menu screen with the title : "
								+ menuScreenTitleText1Vk, ExtentColor.CYAN));

						System.out.println(" Validated that after tapping the " + addToBasketButtonTextVk
								+ " button, it navigates to the menu screen with the title : "
								+ menuScreenTitleText1Vk);

					}

					FlutterElement reviewButtonVk = find
							.byValueKey(menuScreenLocators.MENU_SCREEN_REVIEW_BASKET_BUTTON_VK);

					String reviewButtonTextVk = reviewButtonVk.getText();

					reviewButtonVk.click();

					System.err.println("basket screen appears");

					String basketHeaderTitleText1 = commonMethods.stringsReader(basketLocators.BASKET_HEADER_TITLE);

					System.err.println("basket header title : " + reviewButtonTextVk);

					nextGenItemList001.info(MarkupHelper.createLabel(" Validated that after tapping the : "
							+ reviewButtonTextVk + " button, it navigates to the basket screen with the title : "
							+ basketHeaderTitleText1, ExtentColor.CYAN));

					System.out.println(" Validated that after tapping the : " + reviewButtonTextVk
							+ " button, it navigates to the basket screen with the title : " + basketHeaderTitleText1);
					
					for (String object : formParamsList) {
						System.out.println("params:" + object);
					}
					System.out.println("order id post  check" + orderId);
					// Create RequestSpecification with base URI and query parameter
					RequestSpecification requestOrders123 = RestAssured.given()
							.baseUri("https://opendining.net/api/v1/orders/" + orderId + "/items?")
							.queryParam("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb")
							.contentType(ContentType.URLENC);
					//
					requestOrders123.formParams(convertJsonObjectToMap(replaceColonsWithEquals));
					Response responseOrders1 = requestOrders123.post();
					System.out.println("the responseee is" + responseOrders1.asString());
					ValidatableResponse validatableOrdersResponse123 = responseOrders1.then();
					System.out.println("the responseees is" + validatableOrdersResponse123);
					validatableOrdersResponse123.statusCode(200);
					System.out.println(responseOrders1.getStatusCode());
					System.out.println(responseOrders1.asPrettyString());
					System.out.println("order id item list check" + orderId);
					io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/orders/" + orderId + "?";
					// Construct the query parameters
					Map<String, String> paramsMenuget = new HashMap<>();
					paramsMenuget.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
					RequestSpecification httpRequestMenuget = io.restassured.RestAssured.given();
					// specify the method type (GET) and the parameters if any.
					// In this case the request does not take any parameters
					RequestSpecification responseBodyMenuget = httpRequestMenuget.queryParams(paramsMenuget);
					Response responseMenuget = responseBodyMenuget.get("");
					JSONObject orderObject = new JSONObject(responseMenuget.body().asString());
					// Access the "items" array within the order
					JSONArray itemsArray1 = orderObject.getJSONArray("items");
					// Iterate through each item in the "items" array
					for (int i8 = 0; i8 < itemsArray1.length(); i8++) {
						JSONObject itemObject = itemsArray1.getJSONObject(i8);
						String itemNamegett = itemObject.getString("name");
						String itemQuantity = itemObject.getString("quantity");
						String sizeName = itemObject.getString("size");
						double totalPrice = itemObject.getDouble("total_price");
						System.out.println(itemQuantity + " x " + itemNamegett);
						System.out.println(sizeName + " + " + (totalPrice));
						JSONArray optionsArray = itemObject.getJSONArray("options");
						for (int j = 0; j < optionsArray.length(); j++) {
							JSONObject optionObject = optionsArray.getJSONObject(j);
							String optionName = optionObject.getString("name");
							String addOnName = optionObject.getString("option_name");
							String groupName = optionObject.getString("group_name");
							double basePrice = optionObject.optDouble("base_price", 0);
							double price = optionObject.optDouble("price", 0);
							int quantity = optionObject.getInt("quantity");
							if (price > 0) {
								String formattedPrice = String.format("%.2f", price);
								optionName += " (" + formattedPrice + ")";
							}
							// Print or use the modified optionName as needed
							System.out.println(" +" + optionName);
							System.out.println(" the quantity is " + quantity);
							// System.out.println(" +" + groupName);
						}
					}
					System.err.println("ending itemlist");

				} else {

					System.out.println(" Item quantity screen title of : " + menuScreenTitleTextVk
							+ " not matches with the : " + itemName);
				}

			}

		}
	}

	/**
	 * @Class_Name ItemList
	 * @Method_Name itemListRecommendedForYou
	 * @Description Contains code to execute the test scripts for Item List for order again component screen
	 * @return void
	 * @author Lalith Kishore Ravi
	 * @throws Exception
	 */
	public static void itemListRecommendedForYou(String orderId,int pos,int position,
			String subMenuScreenTitleTextVk) throws Exception {
		
		BaseClass bc = new BaseClass();

		List<String> givenStringCode = bc.appConfiguration();

		String storeCode = givenStringCode.get(13);

		String merchantId = givenStringCode.get(8);

		String menuScreenTitleTextString = commonMethods
				.stringsReader(menuScreenLocators.MENU_SCREEN_TITLE_TEXT_STRING);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "/menu/tier?";
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");

		paramsMenu.put("include_combo", "true");
		paramsMenu.put("merchant_id", merchantId);
		paramsMenu.put("provider", "px");
//		paramsMenu.put("order_date", "11-01-2024");
//		paramsMenu.put("eta", "5.00 am");

		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();
		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");

		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

		JSONArray optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Lalith Kishore Ravi").assignDevice("iPhone 14 Pro")
				.assignCategory("Item List");

		FlutterFinder find = new FlutterFinder(driver);

		ExtentTest nextGenItemList001 = test.createNode("nextGenItemList_001");

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?";
		Map<String, String> paramsRestaurant = new HashMap<>();
		paramsRestaurant.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

		RequestSpecification httpRequestRestaurant = io.restassured.RestAssured.given();

		RequestSpecification responseBodyRestaurant = httpRequestRestaurant.queryParams(paramsRestaurant);

		Response responseRestaurant = responseBodyRestaurant.get("");

		JSONObject jObjectRestaurant = new JSONObject(responseRestaurant.body().asString());

		specialInstructionsEnabled = jObjectRestaurant.optString("allow_notes");

		specialInstructionsNotesLabel = jObjectRestaurant.optString("notes_label");

		specialInstructionsEnabledSubString = specialInstructionsNotesLabel.substring(0, 3).toLowerCase();

		specialInstructionsNotesLimit = jObjectRestaurant.optString("notes_limit");

		commonMethods.switchContext("FLUTTER");

		Thread.sleep(1000);

		FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

		String menuScreenTitleTextVk = menuScreenTitleVk.getText();

		if (menuScreenTitleTextVk.length() > 22) {

			screenTitleText = menuScreenTitleTextVk.substring(0, 20);
		}

		else if (menuScreenTitleTextVk.length() < 22) {

			screenTitleText = menuScreenTitleTextVk;

		}

		System.out.println("the title " + screenTitleText);

		for (int t = 0; t < 1; t++) {

			JSONObject menuItem = optJSONArrayMenu.getJSONObject(t);

			String name = menuItem.optString("name");

			String canOrder = menuItem.optString("can_order");

			System.out.println(" the name : " + name);

			JSONArray itemsArray = menuItem.getJSONArray("items");

			formParamsList.clear();

			JSONObject item = itemsArray.getJSONObject(0);

			String itemName = item.optString("name");

			String active = item.optString("active");

			int parseInt = Integer.parseInt(active);

			System.out.println(itemName);

			if (canOrder == "true" && parseInt == 1) {

				String id = item.optString("id");

				String idParam = "id=" + id;

				formParamsList.add(idParam);

				String itemNameReplace = itemName.replace(" ", "_").toLowerCase();

				if (itemName.equals(screenTitleText)) {

					JSONArray prices = item.getJSONArray("prices");

					if (prices.length() > 1) {

						commonMethods.scrollUp();

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(1000);

						FlutterElement optionGroupObjectNameSelectedOptionsVk = find
								.byValueKey(itemNameReplace + "_size_selected_options");

						String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
								.getText();

						String trimmedOption = optionGroupObjectNameSelectedOptionsTextVk.trim();

						if (!trimmedOption.isEmpty()) {

							String size = "size=" + optionGroupObjectNameSelectedOptionsTextVk;

							formParamsList.add(size);

						} else {

							System.out.println(" Size array name is lesser than 1 ");

							String size = "size=";

							formParamsList.add(size);

						}
					}

					JSONArray optionGroupsArray = item.getJSONArray("option_groups");

					MultiOptions.clear();

					for (int j = 0; j < optionGroupsArray.length(); j++) {

						JSONObject optionGroup = optionGroupsArray.getJSONObject(j);

						for (int m = 0; m < optionGroupsArray.length(); m++) {

							JSONObject optionGroup1 = optionGroupsArray.getJSONObject(m);

							JSONArray optJSONArray = optionGroup1.optJSONArray("options");

							for (int k = 0; k < optJSONArray.length(); k++) {

								JSONObject optJSONObject = optJSONArray.optJSONObject(k);

								String optString = optJSONObject.optString("name");

								MultiOptions.put(optString, k);

							}

						}

						String optionGroupName = optionGroup.optString("name");

						String optionGroupNameReplace = optionGroupName.replace(" ", "_").toLowerCase();

						String quantities = optionGroup.optString("quantities");

						String multiSelect = optionGroup.optString("multiselect");

						commonMethods.switchContext("NATIVE_APP");

						Thread.sleep(1500);

						IOSTouchAction IOSTouchAction4 = new IOSTouchAction(driver);
						IOSTouchAction4.press(PointOption.point(150, 550))
								.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
								.moveTo(PointOption.point(150, 650)).release().perform();

						By targetElementLocator = By.xpath(
								"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
										+ "'" + optionGroupName.toLowerCase() + "'" + ")]");

						boolean elementFound = false;

						while (!elementFound) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(1500);

								WebElement element = driver.findElement(targetElementLocator);

								if (element.isDisplayed()) {

									IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
									IOSTouchAction1.press(PointOption.point(150, 650))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
											.moveTo(PointOption.point(150, 550)).release().perform();

									String elementName = element.getText();

									if (elementName.contains(optionGroupName)) {

										if (quantities == "true") {

											// have to give increment decrement logic

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(1500);

											FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace + "_"
													+ optionGroupNameReplace + "_selected_options");

											String selectedOptionsTextVk = selectedOptionsVk.getText();

											if (selectedOptionsTextVk.contains(",")) {
												String[] split = selectedOptionsTextVk.split(",");
												for (int i2 = 0; i2 < split.length; i2++) {
													String trimmedOption2 = split[i2].trim();
													if (!trimmedOption2.isEmpty()) {
														String optionKey = "options[" + optionGroupName + "]["
																+ trimmedOption2 + "]";
														formParamsList.add(optionKey);
													}
												}
											}

										} else if (quantities == "false") {

											if (multiSelect == "true") {

												System.out.println(" It's a multi selection field checkbox ");

												nextGenItemList001.info(MarkupHelper.createLabel(
														" It's a multi selection field checkbox ", ExtentColor.CYAN));

												// have to give the multiple check box logic

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(1500);

												FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace + "_"
														+ optionGroupNameReplace + "_selected_options");

												String selectedOptionsTextVk = selectedOptionsVk.getText();

												if (selectedOptionsTextVk.contains(",")) {
													String[] split = selectedOptionsTextVk.split(",");
													for (int i2 = 0; i2 < split.length; i2++) {
														String trimmedOptions = split[i2].trim();
														if (!trimmedOptions.isEmpty()) {

															if (optionGroup.has("option_levels")) {

																JSONObject optionLevels = optionGroup
																		.optJSONObject("option_levels");

																JSONArray levels = optionLevels.optJSONArray("levels");

																if (levels != null) {

																	for (int b = 0; b < levels.length(); b++) {

																		JSONObject jsonObjectLevelss = levels
																				.optJSONObject(b);

																		String previousLevelName = null;

																		if (jsonObjectLevelss.has("is_default")
																				&& jsonObjectLevelss
																						.getBoolean("is_default")) {
																			break;
																		}

																		previousLevelName = jsonObjectLevelss
																				.optString("name");

																		String optionKey = "option_levels["
																				+ optionGroupName + "]["
																				+ trimmedOptions + "][]="
																				+ previousLevelName;

																		formParamsList.add(optionKey);

																		String optionKey1 = "options[" + optionGroupName
																				+ "]["
																				+ MultiOptions.get(trimmedOptions)
																				+ "]=" + trimmedOptions;

																		formParamsList.add(optionKey1);

																	}

																} else {

																	System.out.println(
																			" levels is null for the option levels : ");

																}

															} else {
																String optionKey = "options[" + optionGroupName + "]["
																		+ MultiOptions.get(trimmedOptions) + "]="
																		+ trimmedOptions;

																formParamsList.add(optionKey);

															}

														}
													}

												}

											} else if (multiSelect == "false") {

												// have to give the single check box logic

												System.out.println(" It's a single selection field checkbox ");

												nextGenItemList001.info(MarkupHelper.createLabel(
														" It's a single selection field checkbox ", ExtentColor.CYAN));

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(1500);

												FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace + "_"
														+ optionGroupNameReplace + "_selected_options");

												String selectedOptionsTextVk = selectedOptionsVk.getText();

												String trimmedOptionSingle = selectedOptionsTextVk.trim();

												if (!trimmedOptionSingle.isEmpty()) {

													if (optionGroup.has("option_levels")) {

														JSONObject optionLevels = optionGroup
																.optJSONObject("option_levels");

														JSONArray levels = optionLevels.optJSONArray("levels");

														if (levels != null) {

															for (int b = 0; b < levels.length(); b++) {

																JSONObject jsonObjectLevelss = levels.optJSONObject(b);

																String previousLevelName = null;

																if (jsonObjectLevelss.has("is_default")
																		&& jsonObjectLevelss.getBoolean("is_default")) {
																	break;
																}

																previousLevelName = jsonObjectLevelss.optString("name");

																String optionKey = "option_levels[" + optionGroupName
																		+ "][" + trimmedOptionSingle + "][]:"
																		+ previousLevelName;

																formParamsList.add(optionKey);

																String optionKey1 = "options[" + optionGroupName + "]["
																		+ MultiOptions.get(trimmedOptionSingle) + "]="
																		+ trimmedOptionSingle;

																formParamsList.add(optionKey1);

															}

														} else {

															System.out.println(
																	" levels is null for the option levels : ");

															nextGenItemList001.info(MarkupHelper.createLabel(
																	" levels is null for the option levels : ",
																	ExtentColor.CYAN));

														}

													} else {

														String optionKey = "options[" + optionGroupName + "][]="
																+ trimmedOptionSingle;

														formParamsList.add(optionKey);
//															System.out.println("the scond item" +formParamsList.add(optionKey));

													}
												}

											}

										}

									}
									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(1500);

									try {
										elementFound = true;

									} catch (Exception clickException) {
										IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
										IOSTouchAction.press(PointOption.point(150, 650))
												.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
												.moveTo(PointOption.point(150, 550)).release().perform();
									}

								} else {
									IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
									IOSTouchAction1.press(PointOption.point(150, 650))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
											.moveTo(PointOption.point(150, 550)).release().perform();
								}
							} catch (NoSuchElementException e2) {
								IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
								IOSTouchAction1.press(PointOption.point(150, 650))
										.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
										.moveTo(PointOption.point(150, 550)).release().perform();
							}

						}

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(1200);

						commonMethods.scrollOptionsGroupUpAndClick(optionGroupName);

					}

					if (specialInstructionsEnabled == "true") {

						System.out.println(" Special Instructions enabled in item list ");

//						scrollOptionsGroupDown(specialInstructionsEnabledSubString);

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(1500);

						FlutterElement itemQuantitySpecialInstructionsTitleVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TITLE_VK);

						String itemQuantitySpecialInstructionsTitleTextVk = itemQuantitySpecialInstructionsTitleVk
								.getText();

						String numericOnly = itemQuantitySpecialInstructionsTitleTextVk.replaceAll("[^0-9]", "");

						int parseLong = Integer.parseInt(numericOnly);

						FlutterElement itemQuantitySpecialInstructionsTextFieldVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TEXT_FIELD_VK);

						String testText = "This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field,This is a text which is to find the length of the special instructions text field ";

						itemQuantitySpecialInstructionsTextFieldVk.sendKeys(testText);

						String substring = testText.substring(0, parseLong);

						String notes = "notes=";

						String finalString = notes + substring;

						formParamsList.add(finalString);

						FlutterElement itemQuantityScreenQuantityCountVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

						String itemQuantityScreenQuantityCountTextVk = itemQuantityScreenQuantityCountVk.getText();

						int itemQuantityScreenQuantityCountIntVk = Integer
								.parseInt(itemQuantityScreenQuantityCountTextVk);

						String quantity = "quantity=" + itemQuantityScreenQuantityCountIntVk;

						formParamsList.add(quantity);

					}

					else {

						String string = "notes=";

						String emptyString = "";

						String finalString = string + emptyString;
						System.out.println(formParamsList.add(finalString));

						formParamsList.add(finalString);

						FlutterElement itemQuantityScreenQuantityCountVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

						String itemQuantityScreenQuantityCountTextVk = itemQuantityScreenQuantityCountVk.getText();

						int itemQuantityScreenQuantityCountIntVk = Integer
								.parseInt(itemQuantityScreenQuantityCountTextVk);

						String quantity = "quantity=" + itemQuantityScreenQuantityCountIntVk;

						formParamsList.add(quantity);
					}

					JSONObject jsonObject = convertListToJsonObject(formParamsList);

					replaceColonsWithEquals = replaceColonsWithEquals(jsonObject);
					
					FlutterElement addToBasketButtonVk = find
							.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ADD_TO_BASKET_BUTTON_VK);

					addToBasketButtonVk.click();
					
					boolean crossSells = commonMethods.features("cross_sells");

					if (crossSells == true) {
						
						CrossSell.ngaCrossSell(subMenuScreenTitleTextVk);
					}
					else {
						
					commonMethods.crossSellPopUpBottomSheetClose();
					
					}

					for (String object : formParamsList) {
						System.out.println("params:" + object);
					}
					System.out.println("order id post  check" + orderId);
					// Create RequestSpecification with base URI and query parameter
					RequestSpecification requestOrders123 = RestAssured.given()
							.baseUri("https://opendining.net/api/v1/orders/" + orderId + "/items?")
							.queryParam("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb")
							.contentType(ContentType.URLENC);
					//
					requestOrders123.formParams(convertJsonObjectToMap(replaceColonsWithEquals));
					Response responseOrders1 = requestOrders123.post();
					System.out.println("the responseee is" + responseOrders1.asString());
					ValidatableResponse validatableOrdersResponse123 = responseOrders1.then();
					System.out.println("the responseees is" + validatableOrdersResponse123);
					validatableOrdersResponse123.statusCode(200);
					System.out.println(responseOrders1.getStatusCode());
					System.out.println(responseOrders1.asPrettyString());
					System.out.println("order id item list check" + orderId);
					io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/orders/" + orderId + "?";
					// Construct the query parameters
					Map<String, String> paramsMenuget = new HashMap<>();
					paramsMenuget.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
					RequestSpecification httpRequestMenuget = io.restassured.RestAssured.given();
					// specify the method type (GET) and the parameters if any.
					// In this case the request does not take any parameters
					RequestSpecification responseBodyMenuget = httpRequestMenuget.queryParams(paramsMenuget);
					Response responseMenuget = responseBodyMenuget.get("");
					JSONObject orderObject = new JSONObject(responseMenuget.body().asString());
					// Access the "items" array within the order
					JSONArray itemsArray1 = orderObject.getJSONArray("items");
					// Iterate through each item in the "items" array
					for (int i8 = 0; i8 < itemsArray1.length(); i8++) {
						JSONObject itemObject = itemsArray1.getJSONObject(i8);
						String itemNamegett = itemObject.getString("name");
						String itemQuantity = itemObject.getString("quantity");
						String sizeName = itemObject.getString("size");
						double totalPrice = itemObject.getDouble("total_price");
						System.out.println(itemQuantity + " x " + itemNamegett);
						System.out.println(sizeName + " + " + (totalPrice));
						JSONArray optionsArray = itemObject.getJSONArray("options");
						for (int j = 0; j < optionsArray.length(); j++) {
							JSONObject optionObject = optionsArray.getJSONObject(j);
							String optionName = optionObject.getString("name");
							String addOnName = optionObject.getString("option_name");
							String groupName = optionObject.getString("group_name");
							double basePrice = optionObject.optDouble("base_price", 0);
							double price = optionObject.optDouble("price", 0);
							int quantity = optionObject.getInt("quantity");
							if (price > 0) {
								String formattedPrice = String.format("%.2f", price);
								optionName += " (" + formattedPrice + ")";
							}
							// Print or use the modified optionName as needed
							System.out.println(" +" + optionName);
							System.out.println(" the quantity is " + quantity);
							// System.out.println(" +" + groupName);
						}
					}
					System.err.println("ending itemlist");

				} else {

					System.out.println(" Item quantity screen title of : " + menuScreenTitleTextVk
							+ " not matches with the : " + itemName);

					nextGenItemList001.info(MarkupHelper.createLabel(" Item quantity screen title of : "
							+ menuScreenTitleTextVk + " not matches with the : " + itemName, ExtentColor.CYAN));
				}

			}

		}
	}

	@Test
	public static void itemList2(String orderId, String subMenuScreenTitleTextVk) throws Exception {

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/PXLAB/menu/tier?";
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");
		paramsMenu.put("include_combo", "true");
		paramsMenu.put("merchant_id", "60019");
		paramsMenu.put("provider", "px");
//	paramsMenu.put("order_date", "11-01-2024");
//	paramsMenu.put("eta", "5.00 am");

		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();
		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");
		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

		JSONArray optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		Thread.sleep(15000);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/60019/restaurants/PXLAB?";
		Map<String, String> paramsRestaurant = new HashMap<>();
		paramsRestaurant.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

		RequestSpecification httpRequestRestaurant = io.restassured.RestAssured.given();

		RequestSpecification responseBodyRestaurant = httpRequestRestaurant.queryParams(paramsRestaurant);

		Response responseRestaurant = responseBodyRestaurant.get("");

		JSONObject jObjectRestaurant = new JSONObject(responseRestaurant.body().asString());

		specialInstructionsEnabled = jObjectRestaurant.optString("allow_notes");

		specialInstructionsNotesLabel = jObjectRestaurant.optString("notes_label");

		specialInstructionsEnabledSubString = specialInstructionsNotesLabel.substring(0, 4).toLowerCase();

		specialInstructionsNotesLimit = jObjectRestaurant.optString("notes_limit");

		FlutterFinder find = new FlutterFinder(driver);

		FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

		String menuScreenTitleTextVk = menuScreenTitleVk.getText();

		System.out.println("the title " + menuScreenTitleTextVk);

		for (int t = 0; t < optJSONArrayMenu.length(); t++) {

			JSONObject menuItem = optJSONArrayMenu.getJSONObject(t);

			String name = menuItem.optString("name");

			String canOrder = menuItem.optString("can_order");

			System.out.println(" the name : " + name);

			JSONArray itemsArray = menuItem.getJSONArray("items");

			formParamsList.clear();

			JSONObject item = itemsArray.getJSONObject(0);

			String itemName = item.optString("name");

			String active = item.optString("active");

			int parseInt = Integer.parseInt(active);

			System.out.println(itemName);

			if (canOrder == "true" && parseInt == 1) {

				String id = item.optString("id");

				String idParam = "id=" + id;

				System.out.println();

				formParamsList.add(idParam);

				String itemNameReplace = itemName.replace(" ", "_").toLowerCase();

				if (itemName.equals(menuScreenTitleTextVk)) {

					JSONArray prices = item.getJSONArray("prices");

					if (prices.length() > 1) {

						commonMethods.scrollUp();

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(3000);

						FlutterElement optionGroupObjectNameSelectedOptionsVk = find
								.byValueKey(itemNameReplace + "_size_selected_options");

						String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
								.getText();

						String trimmedOption = optionGroupObjectNameSelectedOptionsTextVk.trim();

						if (!trimmedOption.isEmpty()) {

							String size = "size=" + optionGroupObjectNameSelectedOptionsTextVk;

							formParamsList.add(size);

						} else {

							System.out.println(" Size array name is lesser than 1 ");

							String size = "size=";

							formParamsList.add(size);

						}
					}

					JSONArray optionGroupsArray = item.getJSONArray("option_groups");

					MultiOptions.clear();

					for (int j = 0; j < optionGroupsArray.length(); j++) {

						JSONObject optionGroup = optionGroupsArray.getJSONObject(j);

						for (int m = 0; m < optionGroupsArray.length(); m++) {

							JSONObject optionGroup1 = optionGroupsArray.getJSONObject(m);

							JSONArray optJSONArray = optionGroup1.optJSONArray("options");

							for (int k = 0; k < optJSONArray.length(); k++) {

								JSONObject optJSONObject = optJSONArray.optJSONObject(k);

								String optString = optJSONObject.optString("name");

								MultiOptions.put(optString, k);

							}

						}

						String optionGroupName = optionGroup.optString("name");

						String optionGroupNameReplace = optionGroupName.replace(" ", "_").toLowerCase();

						String quantities = optionGroup.optString("quantities");

						String multiSelect = optionGroup.optString("multiselect");

						commonMethods.switchContext("NATIVE_APP");

						Thread.sleep(3000);

						By targetElementLocator = By.xpath(
								"//*[contains(translate(@name, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
										+ "'" + optionGroupName.toLowerCase() + "'" + ")]");

						boolean elementFound = false;

						while (!elementFound) {

							try {

								commonMethods.switchContext("NATIVE_APP");

								Thread.sleep(3000);

								WebElement element = driver.findElement(targetElementLocator);

								if (element.isDisplayed()) {

									IOSTouchAction IOSTouchAction4 = new IOSTouchAction(driver);
									IOSTouchAction4.press(PointOption.point(150, 550))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
											.moveTo(PointOption.point(150, 650)).release().perform();

									String elementName = element.getText();

									if (elementName.contains(optionGroupName)) {

										if (quantities == "true") {

											// have to give increment decrement logic

											commonMethods.switchContext("FLUTTER");

											Thread.sleep(3000);

											FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace + "_"
													+ optionGroupNameReplace + "_selected_options");

											String selectedOptionsTextVk = selectedOptionsVk.getText();

											if (selectedOptionsTextVk.contains(",")) {
												String[] split = selectedOptionsTextVk.split(",");
												for (int i2 = 0; i2 < split.length; i2++) {
													String trimmedOption2 = split[i2].trim();
													if (!trimmedOption2.isEmpty()) {
														String optionKey = "options[" + optionGroupName + "]["
																+ trimmedOption2 + "]";
														formParamsList.add(optionKey);
													}
												}
											}

										} else if (quantities == "false") {

											if (multiSelect == "true") {

												System.out.println(" It's a multi selection field checkbox ");

												// have to give the multiple check box logic

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(3000);

												FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace + "_"
														+ optionGroupNameReplace + "_selected_options");

												String selectedOptionsTextVk = selectedOptionsVk.getText();

												if (selectedOptionsTextVk.contains(",")) {
													String[] split = selectedOptionsTextVk.split(",");
													for (int i2 = 0; i2 < split.length; i2++) {
														String trimmedOptions = split[i2].trim();
														if (!trimmedOptions.isEmpty()) {

															if (optionGroup.has("option_levels")) {

																JSONObject optionLevels = optionGroup
																		.optJSONObject("option_levels");

																JSONArray levels = optionLevels.optJSONArray("levels");

																if (levels != null) {

																	for (int b = 0; b < levels.length(); b++) {

																		JSONObject jsonObjectLevelss = levels
																				.optJSONObject(b);

																		String previousLevelName = null;

																		if (jsonObjectLevelss.has("is_default")
																				&& jsonObjectLevelss
																						.getBoolean("is_default")) {
																			break;
																		}

																		previousLevelName = jsonObjectLevelss
																				.optString("name");

																		String optionKey = "option_levels["
																				+ optionGroupName + "]["
																				+ trimmedOptions + "][]="
																				+ previousLevelName;

																		formParamsList.add(optionKey);

																		String optionKey1 = "options[" + optionGroupName
																				+ "]["
																				+ MultiOptions.get(trimmedOptions)
																				+ "]=" + trimmedOptions;

																		formParamsList.add(optionKey1);

																	}

																} else {

																	System.out.println(
																			" levels is null for the option levels : ");

																}

															} else {
																String optionKey = "options[" + optionGroupName + "]["
																		+ MultiOptions.get(trimmedOptions) + "]="
																		+ trimmedOptions;

																formParamsList.add(optionKey);

															}

														}
													}

												}

											} else if (multiSelect == "false") {

												// have to give the single check box logic

												System.out.println(" It's a single selection field checkbox ");

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(3000);

												FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace + "_"
														+ optionGroupNameReplace + "_selected_options");

												String selectedOptionsTextVk = selectedOptionsVk.getText();

												String trimmedOptionSingle = selectedOptionsTextVk.trim();

												if (!trimmedOptionSingle.isEmpty()) {

													if (optionGroup.has("option_levels")) {

														JSONObject optionLevels = optionGroup
																.optJSONObject("option_levels");

														JSONArray levels = optionLevels.optJSONArray("levels");

														if (levels != null) {

															for (int b = 0; b < levels.length(); b++) {

																JSONObject jsonObjectLevelss = levels.optJSONObject(b);

																String previousLevelName = null;

																if (jsonObjectLevelss.has("is_default")
																		&& jsonObjectLevelss.getBoolean("is_default")) {
																	break;
																}

																previousLevelName = jsonObjectLevelss.optString("name");

																String optionKey = "option_levels[" + optionGroupName
																		+ "][" + trimmedOptionSingle + "][]:"
																		+ previousLevelName;

																formParamsList.add(optionKey);

																String optionKey1 = "options[" + optionGroupName + "]["
																		+ MultiOptions.get(trimmedOptionSingle) + "]="
																		+ trimmedOptionSingle;

																formParamsList.add(optionKey1);

															}

														} else {

															System.out.println(
																	" levels is null for the option levels : ");

														}

													} else {

														String optionKey = "options[" + optionGroupName + "][]="
																+ trimmedOptionSingle;

														formParamsList.add(optionKey);
//														System.out.println("the scond item" +formParamsList.add(optionKey));

													}
												}

											}

										}

									}
									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(3000);

									try {
										elementFound = true;

									} catch (Exception clickException) {
										IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
										IOSTouchAction1.press(PointOption.point(150, 650))
												.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
												.moveTo(PointOption.point(150, 550)).release().perform();
									}

								} else {
									IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
									IOSTouchAction1.press(PointOption.point(150, 650))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
											.moveTo(PointOption.point(150, 550)).release().perform();
								}
							} catch (NoSuchElementException e2) {
								IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
								IOSTouchAction1.press(PointOption.point(150, 650))
										.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
										.moveTo(PointOption.point(150, 550)).release().perform();
							}

						}

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(1200);

						commonMethods.scrollOptionsGroupUpAndClick(optionGroupName);

					}

					if (specialInstructionsEnabled == "true") {

						commonMethods.scrollDown();

						commonMethods.switchContext("FLUTTER");

						Thread.sleep(3000);

						FlutterElement itemQuantitySpecialInstructionsTitleVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TITLE_VK);

						String itemQuantitySpecialInstructionsTitleTextVk = itemQuantitySpecialInstructionsTitleVk
								.getText();

						String numericOnly = itemQuantitySpecialInstructionsTitleTextVk.replaceAll("[^0-9]", "");

						int parseLong = Integer.parseInt(numericOnly);

						FlutterElement itemQuantitySpecialInstructionsTextFieldVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TEXT_FIELD_VK);

						String testText = "This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field,This is a text which is to find the length of the special instructions text field ";

						itemQuantitySpecialInstructionsTextFieldVk.sendKeys(testText);

						String substring = testText.substring(0, parseLong);

						String notes = "notes=";

						String finalString = notes + substring;

						formParamsList.add(finalString);

						FlutterElement itemQuantityScreenQuantityCountVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

						String itemQuantityScreenQuantityCountTextVk = itemQuantityScreenQuantityCountVk.getText();

						int itemQuantityScreenQuantityCountIntVk = Integer
								.parseInt(itemQuantityScreenQuantityCountTextVk);

						String quantity = "quantity=" + itemQuantityScreenQuantityCountIntVk;

						formParamsList.add(quantity);

					}

					else {

						String string = "notes=";

						String emptyString = "";

						String finalString = string + emptyString;
						System.out.println(formParamsList.add(finalString));

						formParamsList.add(finalString);

						FlutterElement itemQuantityScreenQuantityCountVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

						String itemQuantityScreenQuantityCountTextVk = itemQuantityScreenQuantityCountVk.getText();

						int itemQuantityScreenQuantityCountIntVk = Integer
								.parseInt(itemQuantityScreenQuantityCountTextVk);

						String quantity = "quantity=" + itemQuantityScreenQuantityCountIntVk;

						formParamsList.add(quantity);
					}
					
					JSONObject jsonObject = convertListToJsonObject(formParamsList);

					replaceColonsWithEquals = replaceColonsWithEquals(jsonObject);
					
					commonMethods.switchContext("FLUTTER");

					Thread.sleep(3000);

					find.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_BUY_NOW_BUTTON_VK).click();
					
					System.out.println("order id post  check" + orderId);

					// Create RequestSpecification with base URI and query parameter
					RequestSpecification requestOrders123 = RestAssured.given()
							.baseUri("https://opendining.net/api/v1/orders/" + orderId + "/items?")
							.queryParam("key", "ce1b6c4a546509ef17557094078169c25aa7b54e")
							.contentType(ContentType.URLENC);

					//
					requestOrders123.formParams(convertJsonObjectToMap(replaceColonsWithEquals));

					Response responseOrders1 = requestOrders123.post();

					System.out.println("the responseee is" + responseOrders1.asString());

					ValidatableResponse validatableOrdersResponse123 = responseOrders1.then();
					System.out.println("the responseees is" + validatableOrdersResponse123);

					validatableOrdersResponse123.statusCode(200);
					System.out.println(responseOrders1.getStatusCode());
					System.out.println(responseOrders1.asPrettyString());
					System.out.println("order id item list check" + orderId);

					io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/orders/" + orderId + "?";
					// Construct the query parameters
					Map<String, String> paramsMenuget = new HashMap<>();
					paramsMenuget.put("key", "ce1b6c4a546509ef17557094078169c25aa7b54e");
					RequestSpecification httpRequestMenuget = io.restassured.RestAssured.given();
					// specify the method type (GET) and the parameters if any.
					// In this case the request does not take any parameters
					RequestSpecification responseBodyMenuget = httpRequestMenuget.queryParams(paramsMenuget);
					Response responseMenuget = responseBodyMenuget.get("");
					JSONObject orderObject = new JSONObject(responseMenuget.body().asString());
					// Access the "items" array within the order
					JSONArray itemsArray1 = orderObject.getJSONArray("items");

					// Iterate through each item in the "items" array
					for (int i8 = 0; i8 < itemsArray1.length(); i8++) {
						JSONObject itemObject = itemsArray1.getJSONObject(i8);
						String itemNamegett = itemObject.getString("name");
						String itemQuantity = itemObject.getString("quantity");
						String sizeName = itemObject.getString("size");
						double totalPrice = itemObject.getDouble("total_price");
						System.out.println(itemQuantity + " x " + itemNamegett);
						System.out.println(sizeName + " + " + (totalPrice));
						JSONArray optionsArray = itemObject.getJSONArray("options");
						for (int j = 0; j < optionsArray.length(); j++) {
							JSONObject optionObject = optionsArray.getJSONObject(j);
							String optionName = optionObject.getString("name");
							String addOnName = optionObject.getString("option_name");
							String groupName = optionObject.getString("group_name");
							double basePrice = optionObject.optDouble("base_price", 0);
							double price = optionObject.optDouble("price", 0);
							int quantity = optionObject.getInt("quantity");
							if (price > 0) {
								String formattedPrice = String.format("%.2f", price);
								optionName += " (" + formattedPrice + ")";
							}
							// Print or use the modified optionName as needed
							System.out.println(" +" + optionName);
							System.out.println(" the quantity is " + quantity);
							// System.out.println(" +" + groupName);
						}
					}

					System.err.println("ending itemlist");

				} else {

					System.out.println(" Item quantity screen title of : " + menuScreenTitleTextVk
							+ " not matches with the : " + itemName);
				}

			}



		}

		for (Object object : formParamsList) {

			System.out.println(object.toString());

		}


	}

	/**
	 * @Class_Name ItemList
	 * @Method_Name itemListRecommendedForYou
	 * @Description Contains code to execute the test scripts for Item List for order again component screen
	 * @return void
	 * @author Lalith Kishore Ravi
	 * @throws Exception
	 */
	public static void itemListOrderAgainComponent(String orderId) throws Throwable, IOException {

		BaseClass bc = new BaseClass();

		List<String> givenStringCode = bc.appConfiguration();

		String storeCode = givenStringCode.get(13);

		String merchantId = givenStringCode.get(8);

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "/menu/tier?";
		Map<String, String> paramsMenu = new HashMap<>();
		paramsMenu.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");
		paramsMenu.put("show_unavailable", "false");
		paramsMenu.put("include_combo", "true");
		paramsMenu.put("merchant_id", merchantId);
		paramsMenu.put("provider", "px");
//		paramsMenu.put("order_date", "11-01-2024");
//		paramsMenu.put("eta", "5.00 am");

		RequestSpecification httpRequestMenu = io.restassured.RestAssured.given();
		RequestSpecification responseBodyMenu = httpRequestMenu.queryParams(paramsMenu);

		Response responseMenu = responseBodyMenu.get("");

		JSONObject jObjectMenu = new JSONObject(responseMenu.body().asString());

		JSONArray optJSONArrayMenu = jObjectMenu.optJSONArray("menu");

		driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

		String nameofCurrMethod = new Object() {
		}.getClass().getEnclosingMethod().getName();

		test = extent.createTest(nameofCurrMethod).assignAuthor("Lalith Kishore Ravi").assignDevice("iPhone 14 Pro")
				.assignCategory("Item List");

		FlutterFinder find = new FlutterFinder(driver);

		ExtentTest nextGenItemList001 = test.createNode("nextGenItemList_001");

		io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/merchant/" + merchantId + "/restaurants/"
				+ storeCode + "?";
		Map<String, String> paramsRestaurant = new HashMap<>();
		paramsRestaurant.put("key", "6d6bf06a4f653a54da8d88715a736a4ca6071ffb");

		RequestSpecification httpRequestRestaurant = io.restassured.RestAssured.given();

		RequestSpecification responseBodyRestaurant = httpRequestRestaurant.queryParams(paramsRestaurant);

		Response responseRestaurant = responseBodyRestaurant.get("");

		JSONObject jObjectRestaurant = new JSONObject(responseRestaurant.body().asString());

		specialInstructionsEnabled = jObjectRestaurant.optString("allow_notes");

		specialInstructionsNotesLabel = jObjectRestaurant.optString("notes_label");

		specialInstructionsEnabledSubString = specialInstructionsNotesLabel.substring(0, 3).toLowerCase();

		specialInstructionsNotesLimit = jObjectRestaurant.optString("notes_limit");

		FlutterElement menuScreenTitleVk = find.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_TITLE_VK);

		String menuScreenTitleTextVk = menuScreenTitleVk.getText();

		if (menuScreenTitleTextVk.length() > 22) {

			screenTitleText = menuScreenTitleTextVk.substring(0, 20);
		}

		else if (menuScreenTitleTextVk.length() < 22) {

			screenTitleText = menuScreenTitleTextVk;

		}

		System.out.println("the title " + screenTitleText);

		for (int t = 0; t < optJSONArrayMenu.length(); t++) {

			JSONObject menuItem = optJSONArrayMenu.getJSONObject(t);

			String name = menuItem.optString("name");

			String canOrder = menuItem.optString("can_order");

			System.out.println(" the name : " + name);

			JSONArray itemsArray = menuItem.getJSONArray("items");

			formParamsList.clear();

			for (int i = 0; i < itemsArray.length(); i++) {

				JSONObject item = itemsArray.getJSONObject(i);

				String itemName = item.optString("name");

				String active = item.optString("active");

				int parseInt = Integer.parseInt(active);

				System.out.println(itemName);

				if (canOrder == "true" && parseInt == 1) {

					String id = item.optString("id");

					String idParam = "id=" + id;

					System.out.println(idParam);

					formParamsList.add(idParam);

					String itemNameReplace = itemName.replace(" ", "_").toLowerCase();

					if (itemName.contains(screenTitleText)) {

						JSONArray prices = item.getJSONArray("prices");

						if (prices.length() > 1) {

							commonMethods.scrollSize();

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(3000);

							FlutterElement optionGroupObjectNameSelectedOptionsVk = find
									.byValueKey(itemNameReplace + "_size_selected_options");

							String optionGroupObjectNameSelectedOptionsTextVk = optionGroupObjectNameSelectedOptionsVk
									.getText();

							String trimmedOption = optionGroupObjectNameSelectedOptionsTextVk.trim();

							if (!trimmedOption.isEmpty()) {

								String size = "size=" + optionGroupObjectNameSelectedOptionsTextVk;

								formParamsList.add(size);

							} else {

								System.out.println(" Size array name is lesser than 1 ");

								String size = "size=";

								formParamsList.add(size);

							}
						}

						JSONArray optionGroupsArray = item.getJSONArray("option_groups");

						MultiOptions.clear();

						for (int j = 0; j < optionGroupsArray.length(); j++) {

							JSONObject optionGroup = optionGroupsArray.getJSONObject(j);

							for (int m = 0; m < optionGroupsArray.length(); m++) {

								JSONObject optionGroup1 = optionGroupsArray.getJSONObject(m);

								JSONArray optJSONArray = optionGroup1.optJSONArray("options");

								for (int k = 0; k < optJSONArray.length(); k++) {

									JSONObject optJSONObject = optJSONArray.optJSONObject(k);

									String optString = optJSONObject.optString("name");

									MultiOptions.put(optString, k);

								}

							}

							String optionGroupName = optionGroup.optString("name");

							String optionGroupNameReplace = optionGroupName.replace(" ", "_").toLowerCase();

							String quantities = optionGroup.optString("quantities");

							String multiSelect = optionGroup.optString("multiselect");

							commonMethods.switchContext("NATIVE_APP");

							Thread.sleep(1500);

							IOSTouchAction IOSTouchAction4 = new IOSTouchAction(driver);
							IOSTouchAction4.press(PointOption.point(150, 550))
									.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
									.moveTo(PointOption.point(150, 650)).release().perform();

							By targetElementLocator = By.xpath(
									"//*[contains(translate(@content-desc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz'),"
											+ "'" + optionGroupName.toLowerCase() + "'" + ")]");

							boolean elementFound = false;

							while (!elementFound) {

								try {

									commonMethods.switchContext("NATIVE_APP");

									Thread.sleep(1500);

									WebElement element = driver.findElement(targetElementLocator);

									if (element.isDisplayed()) {

										IOSTouchAction IOSTouchAction1 = new IOSTouchAction(driver);
										IOSTouchAction1.press(PointOption.point(150, 650))
												.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
												.moveTo(PointOption.point(150, 550)).release().perform();

										String elementName = element.getText();
										if (elementName.contains(optionGroupName)) {

											if (quantities == "true") {

												// have to give increment decrement logic

												commonMethods.switchContext("FLUTTER");

												Thread.sleep(3000);

												FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace + "_"
														+ optionGroupNameReplace + "_selected_options");

												String selectedOptionsTextVk = selectedOptionsVk.getText();

												if (selectedOptionsTextVk.contains(",")) {
													String[] split = selectedOptionsTextVk.split(",");
													for (int i2 = 0; i2 < split.length; i2++) {
														String trimmedOption2 = split[i2].trim();
														if (!trimmedOption2.isEmpty()) {
															String optionKey = "options[" + optionGroupName + "]["
																	+ trimmedOption2 + "]";
															formParamsList.add(optionKey);
														}
													}
												}

											} else if (quantities == "false") {

												if (multiSelect == "true") {

													System.out.println(" It's a multi selection field checkbox ");

													// have to give the multiple check box logic

													commonMethods.switchContext("FLUTTER");

													Thread.sleep(3000);

													FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace
															+ "_" + optionGroupNameReplace + "_selected_options");

													String selectedOptionsTextVk = selectedOptionsVk.getText();

													if (selectedOptionsTextVk.contains(",")) {
														String[] split = selectedOptionsTextVk.split(",");
														for (int i2 = 0; i2 < split.length; i2++) {
															String trimmedOptions = split[i2].trim();
															if (!trimmedOptions.isEmpty()) {

																if (optionGroup.has("option_levels")) {

																	JSONObject optionLevels = optionGroup
																			.optJSONObject("option_levels");

																	JSONArray levels = optionLevels
																			.optJSONArray("levels");

																	if (levels != null) {

																		for (int b = 0; b < levels.length(); b++) {

																			JSONObject jsonObjectLevelss = levels
																					.optJSONObject(b);

																			String previousLevelName = null;

																			if (jsonObjectLevelss.has("is_default")
																					&& jsonObjectLevelss
																							.getBoolean("is_default")) {
																				break;
																			}

																			previousLevelName = jsonObjectLevelss
																					.optString("name");

																			String optionKey = "option_levels["
																					+ optionGroupName + "]["
																					+ trimmedOptions + "][]="
																					+ previousLevelName;

																			formParamsList.add(optionKey);

																			String optionKey1 = "options["
																					+ optionGroupName + "]["
																					+ MultiOptions.get(trimmedOptions)
																					+ "]=" + trimmedOptions;

																			formParamsList.add(optionKey1);

																		}

																	} else {

																		System.out.println(
																				" levels is null for the option levels : ");

																	}

																} else {
																	String optionKey = "options[" + optionGroupName
																			+ "][" + MultiOptions.get(trimmedOptions)
																			+ "]=" + trimmedOptions;

																	formParamsList.add(optionKey);

																}

															}
														}

													}

												} else if (multiSelect == "false") {

													// have to give the single check box logic

													System.out.println(" It's a single selection field checkbox ");

													commonMethods.switchContext("FLUTTER");

													Thread.sleep(3000);

													FlutterElement selectedOptionsVk = find.byValueKey(itemNameReplace
															+ "_" + optionGroupNameReplace + "_selected_options");

													String selectedOptionsTextVk = selectedOptionsVk.getText();

													String trimmedOptionSingle = selectedOptionsTextVk.trim();

													if (!trimmedOptionSingle.isEmpty()) {

														if (optionGroup.has("option_levels")) {

															JSONObject optionLevels = optionGroup
																	.optJSONObject("option_levels");

															JSONArray levels = optionLevels.optJSONArray("levels");

															if (levels != null) {

																for (int b = 0; b < levels.length(); b++) {

																	JSONObject jsonObjectLevelss = levels
																			.optJSONObject(b);

																	String previousLevelName = null;

																	if (jsonObjectLevelss.has("is_default")
																			&& jsonObjectLevelss
																					.getBoolean("is_default")) {
																		break;
																	}

																	previousLevelName = jsonObjectLevelss
																			.optString("name");

																	String optionKey = "option_levels["
																			+ optionGroupName + "]["
																			+ trimmedOptionSingle + "][]:"
																			+ previousLevelName;

																	formParamsList.add(optionKey);

																	String optionKey1 = "options[" + optionGroupName
																			+ "]["
																			+ MultiOptions.get(trimmedOptionSingle)
																			+ "]=" + trimmedOptionSingle;

																	formParamsList.add(optionKey1);

																}

															} else {

																System.out.println(
																		" levels is null for the option levels : ");

															}

														} else {

															String optionKey = "options[" + optionGroupName + "][]="
																	+ trimmedOptionSingle;

															formParamsList.add(optionKey);
//															System.out.println("the scond item" +formParamsList.add(optionKey));

														}
													}

												}

											}

										}
										commonMethods.switchContext("NATIVE_APP");

										Thread.sleep(1500);

										try {
											elementFound = true;

										} catch (Exception clickException) {
											
											IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
											IOSTouchAction.press(PointOption.point(150, 650))
													.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
													.moveTo(PointOption.point(150, 550)).release().perform();
									
										}

									} else {
										IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
										IOSTouchAction.press(PointOption.point(150, 650))
												.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
												.moveTo(PointOption.point(150, 550)).release().perform();
									}
								} catch (NoSuchElementException e2) {
									
									IOSTouchAction IOSTouchAction = new IOSTouchAction(driver);
									IOSTouchAction.press(PointOption.point(150, 650))
											.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(3)))
											.moveTo(PointOption.point(150, 550)).release().perform();
								}
							}

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(1200);

							commonMethods.scrollOptionsGroupUpAndClick(optionGroupName);

						}

						if (specialInstructionsEnabled == "true") {

							System.out.println(" Special Instructions enabled in item list ");

//						scrollOptionsGroupDown(specialInstructionsEnabledSubString);

							commonMethods.switchContext("FLUTTER");

							Thread.sleep(3000);

							FlutterElement itemQuantitySpecialInstructionsTitleVk = find
									.byValueKey(menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TITLE_VK);

							String itemQuantitySpecialInstructionsTitleTextVk = itemQuantitySpecialInstructionsTitleVk
									.getText();

							String numericOnly = itemQuantitySpecialInstructionsTitleTextVk.replaceAll("[^0-9]", "");

							int parseLong = Integer.parseInt(numericOnly);

							FlutterElement itemQuantitySpecialInstructionsTextFieldVk = find
									.byValueKey(menuScreenLocators.ITEM_QUANTITY_SPECIAL_INSTRUCTION_TEXT_FIELD_VK);

							String testText = "This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field, This is a text which is to find the length of the special instructions text field,This is a text which is to find the length of the special instructions text field ";

							itemQuantitySpecialInstructionsTextFieldVk.sendKeys(testText);

							String substring = testText.substring(0, parseLong);

							String notes = "notes=";

							String finalString = notes + substring;

							formParamsList.add(finalString);

							FlutterElement itemQuantityScreenQuantityCountVk = find
									.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

							String itemQuantityScreenQuantityCountTextVk = itemQuantityScreenQuantityCountVk.getText();

							int itemQuantityScreenQuantityCountIntVk = Integer
									.parseInt(itemQuantityScreenQuantityCountTextVk);

							String quantity = "quantity=" + itemQuantityScreenQuantityCountIntVk;

							formParamsList.add(quantity);

						}

						else {

							String string = "notes=";

							String emptyString = "";

							String finalString = string + emptyString;
							System.out.println(formParamsList.add(finalString));

							formParamsList.add(finalString);

							FlutterElement itemQuantityScreenQuantityCountVk = find
									.byValueKey(menuScreenLocators.ITEM_QUANTITY_SCREEN_ITEM_QUANTITY_COUNT_VK);

							String itemQuantityScreenQuantityCountTextVk = itemQuantityScreenQuantityCountVk.getText();

							int itemQuantityScreenQuantityCountIntVk = Integer
									.parseInt(itemQuantityScreenQuantityCountTextVk);

							String quantity = "quantity=" + itemQuantityScreenQuantityCountIntVk;

							formParamsList.add(quantity);
						}

						JSONObject jsonObject = convertListToJsonObject(formParamsList);

						replaceColonsWithEquals = replaceColonsWithEquals(jsonObject);

						FlutterElement buyNowButtonVk = find
								.byValueKey(menuScreenLocators.ITEM_QUANTITY_UPDATE_BASKET_BUTTON_VK);

						String buyNowButtonTextVk = buyNowButtonVk.getText();

						buyNowButtonVk.click();
					
						commonMethods.crossSellPopUpBottomSheetClose();

						String basketHeaderTitleText = commonMethods.stringsReader(basketLocators.BASKET_HEADER_TITLE);

						nextGenItemList001.info(MarkupHelper.createLabel(" Validated that after tapping the : "
								+ buyNowButtonTextVk + " button, it navigates to the basket screen with the title : "
								+ basketHeaderTitleText, ExtentColor.CYAN));  

						System.out.println("order id post  check" + orderId);

						// Create RequestSpecification with base URI and query parameter
						RequestSpecification requestOrders123 = RestAssured.given()
								.baseUri("https://opendining.net/api/v1/orders/" + orderId + "/items?")
								.queryParam("key", "ce1b6c4a546509ef17557094078169c25aa7b54e")
								.contentType(ContentType.URLENC);

						//
						requestOrders123.formParams(convertJsonObjectToMap(replaceColonsWithEquals));

						Response responseOrders1 = requestOrders123.post();

						System.out.println("the responseee is" + responseOrders1.asString());

						ValidatableResponse validatableOrdersResponse123 = responseOrders1.then();
						System.out.println("the responseees is" + validatableOrdersResponse123);

						validatableOrdersResponse123.statusCode(200);
						System.out.println(responseOrders1.getStatusCode());
						System.out.println(responseOrders1.asPrettyString());
						System.out.println("order id item list check" + orderId);

						io.restassured.RestAssured.baseURI = "https://opendining.net/api/v1/orders/" + orderId + "?";
						// Construct the query parameters
						Map<String, String> paramsMenuget = new HashMap<>();
						paramsMenuget.put("key", "ce1b6c4a546509ef17557094078169c25aa7b54e");
						RequestSpecification httpRequestMenuget = io.restassured.RestAssured.given();
						// specify the method type (GET) and the parameters if any.
						// In this case the request does not take any parameters
						RequestSpecification responseBodyMenuget = httpRequestMenuget.queryParams(paramsMenuget);
						Response responseMenuget = responseBodyMenuget.get("");
						JSONObject orderObject = new JSONObject(responseMenuget.body().asString());
						// Access the "items" array within the order
						JSONArray itemsArray1 = orderObject.getJSONArray("items");

						// Iterate through each item in the "items" array
						for (int i8 = 0; i8 < itemsArray1.length(); i8++) {
							JSONObject itemObject = itemsArray1.getJSONObject(i8);
							String itemNamegett = itemObject.getString("name");
							String itemQuantity = itemObject.getString("quantity");
							String sizeName = itemObject.getString("size");
							double totalPrice = itemObject.getDouble("total_price");
							System.out.println(itemQuantity + " x " + itemNamegett);
							System.out.println(sizeName + " + " + (totalPrice));
							JSONArray optionsArray = itemObject.getJSONArray("options");
							for (int j = 0; j < optionsArray.length(); j++) {
								JSONObject optionObject = optionsArray.getJSONObject(j);
								String optionName = optionObject.getString("name");
								String addOnName = optionObject.getString("option_name");
								String groupName = optionObject.getString("group_name");
								double basePrice = optionObject.optDouble("base_price", 0);
								double price = optionObject.optDouble("price", 0);
								int quantity = optionObject.getInt("quantity");
								if (price > 0) {
									String formattedPrice = String.format("%.2f", price);
									optionName += " (" + formattedPrice + ")";
								}
								// Print or use the modified optionName as needed
								System.out.println(" +" + optionName);
								System.out.println(" the quantity is " + quantity);
								// System.out.println(" +" + groupName);
							}
						}

						System.err.println("ending itemlist");

					} else {

						System.out.println(" Item quantity screen title of : " + menuScreenTitleTextVk
								+ " not matches with the : " + itemName);
					}

				}

			}
		}

	}

	/**
	 * @Class_Name CommonMethods
	 * @Method_Name replaceColonsWithEquals
	 * @Description Contains code to replaceColonsWithEquals
	 * @return void
	 * @author Lalith Kishore Ravi
	 * @throws Exception
	 */
	private static JSONObject replaceColonsWithEquals(JSONObject jsonObject) {
		JSONObject modifiedJsonObject = new JSONObject();

		for (String key : jsonObject.keySet()) {
			String modifiedKey = key.replace(":", "=");
			modifiedJsonObject.put(modifiedKey, jsonObject.get(key));
		}

		return modifiedJsonObject;
	}
	
	/**
	 * @Class_Name CommonMethods
	 * @Method_Name convertListToJsonObject
	 * @Description Contains code to convertListToJsonObject
	 * @return void
	 * @author Lalith Kishore Ravi
	 * @throws Exception
	 */
	
	private static JSONObject convertListToJsonObject(List<String> list) {
		JSONObject jsonObject = new JSONObject();
		for (String item : list) {
			int equalsIndex = item.indexOf('=');
			if (equalsIndex > 0) {
				String key = item.substring(0, equalsIndex).trim();
				String value = item.substring(equalsIndex + 1).trim();
				jsonObject.put(key, value);
			}
		}
		return jsonObject;
	}

	/**
	 * @Class_Name CommonMethods
	 * @Method_Name convertJsonObjectToMap
	 * @Description Contains code to convertJsonObjectToMap
	 * @return void
	 * @author Lalith Kishore Ravi
	 * @throws Exception
	 */
	private static Map<String, Object> convertJsonObjectToMap(JSONObject jsonObject) {
		Map<String, Object> map = new HashMap<>();

		for (String key : jsonObject.keySet()) {
			map.put(key, jsonObject.get(key));
		}

		return map;
	}
	

}
